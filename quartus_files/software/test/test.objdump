
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000fae4 memsz 0x0000fae4 flags r-x
    LOAD off    0x00010b04 vaddr 0x0000fb04 paddr 0x000116a8 align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x0001324c vaddr 0x0001324c paddr 0x0001324c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f554  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000368  0000f79c  0000f79c  0001079c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  0000fb04  000116a8  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  0001324c  0001324c  0001324c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000133ac  000133ac  000126a8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000126a8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000eb8  00000000  00000000  000126d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023b13  00000000  00000000  00013588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009052  00000000  00000000  0003709b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7b6  00000000  00000000  000400ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021c4  00000000  00000000  0004b8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b61  00000000  00000000  0004da68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  000515c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00068e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  00068e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d992  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006d995  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d99a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d99b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006d99c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006d9a5  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006d9ae  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000011  00000000  00000000  0006d9b7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0006d9c8  2**0
                  CONTENTS, READONLY
 26 .jdi          00007a74  00000000  00000000  0006d9fc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000c3149  00000000  00000000  00075470  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0000f79c l    d  .rodata	00000000 .rodata
0000fb04 l    d  .rwdata	00000000 .rwdata
0001324c l    d  .bss	00000000 .bss
000133ac l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000f802 l     O .rodata	00000010 zeroes.4404
000026e0 l     F .text	000000bc __sbprintf
0000f812 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000028f0 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004420 l     F .text	00000008 __fp_unlock
00004434 l     F .text	0000019c __sinit.part.1
000045d0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fb04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000ff48 l     O .rwdata	00000020 lc_ctype_charset
0000ff28 l     O .rwdata	00000020 lc_message_charset
0000ff68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f844 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000079cc l     F .text	000000fc __sprint_r.part.0
0000f978 l     O .rodata	00000010 blanks.4348
0000f968 l     O .rodata	00000010 zeroes.4349
00008f58 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cc14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cd20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cd4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ce38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cf18 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d004 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d1d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011698 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d424 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d558 l     F .text	00000034 alt_dev_reg
00010550 l     O .rwdata	00001060 JTAG_UART
000115b0 l     O .rwdata	00000030 AV_Config
000115e0 l     O .rwdata	00000030 Audio_Subsystem_Audio
00011610 l     O .rwdata	0000002c Char_LCD_16x2
0001163c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d878 l     F .text	00000210 altera_avalon_jtag_uart_irq
0000da88 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e0c0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e7f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ea54 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ed14 l     F .text	0000003c alt_get_errno
0000ed50 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013280 g     O .bss	00000004 alt_instruction_exception_handler
00007010 g     F .text	00000074 _mprec_log10
000070fc g     F .text	0000008c __any_on
000094f4 g     F .text	00000054 _isatty_r
0000f850 g     O .rodata	00000028 __mprec_tinytens
0000d114 g     F .text	0000007c alt_main
00000360 g     F .text	000000c0 _puts_r
000132ac g     O .bss	00000100 alt_irq
00009548 g     F .text	00000060 _lseek_r
000116a8 g       *ABS*	00000000 __flash_rwdata_start
0000e224 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000b740 g     F .text	00000088 .hidden __eqdf2
000133ac g       *ABS*	00000000 __alt_heap_start
00000324 g     F .text	0000003c printf
00009760 g     F .text	0000009c _wcrtomb_r
0000788c g     F .text	0000005c __sseek
00004770 g     F .text	00000010 __sinit
00009608 g     F .text	00000140 __swbuf_r
00005238 g     F .text	0000007c _setlocale_r
000045d8 g     F .text	00000068 __sfmoreglue
0000d1b4 g     F .text	00000024 __malloc_unlock
00005f08 g     F .text	0000015c memmove
00004758 g     F .text	00000018 _cleanup
0000618c g     F .text	000000a8 _Balloc
0000b7c8 g     F .text	000000dc .hidden __gtdf2
0000f10c g     F .text	00000024 altera_nios2_gen2_irq_init
0000e1b0 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00009498 g     F .text	0000005c _fstat_r
00013264 g     O .bss	00000004 errno
00007808 g     F .text	00000008 __seofread
0001326c g     O .bss	00000004 alt_argv
00019668 g       *ABS*	00000000 _gp
000103d0 g     O .rwdata	00000180 alt_fd_list
0000e990 g     F .text	00000090 alt_find_dev
00005dc0 g     F .text	00000148 memcpy
0000e3cc g     F .text	00000050 alt_up_character_lcd_write_fd
00004428 g     F .text	0000000c _cleanup_r
0000ca2c g     F .text	000000dc .hidden __floatsidf
0000eb18 g     F .text	0000007c alt_io_redirect
0000b8a4 g     F .text	000000f4 .hidden __ltdf2
0000f79c g       *ABS*	00000000 __DTOR_END__
00000420 g     F .text	00000014 puts
0000f36c g     F .text	0000009c alt_exception_cause_generated_bad_addr
000076ec g     F .text	00000074 __fpclassifyd
00006f6c g     F .text	000000a4 __ratio
00008f3c g     F .text	0000001c __vfiprintf_internal
0000dc80 g     F .text	0000021c altera_avalon_jtag_uart_read
000002f4 g     F .text	00000030 _printf_r
0000a4f0 g     F .text	00000064 .hidden __udivsi3
0000ce74 g     F .text	000000a4 isatty
0000f8a0 g     O .rodata	000000c8 __mprec_tens
000052b4 g     F .text	0000000c __locale_charset
0000f2dc g     F .text	00000090 alt_icache_flush
00013260 g     O .bss	00000004 __malloc_top_pad
00011670 g     O .rwdata	00000004 __mb_cur_max
000052e4 g     F .text	0000000c _localeconv_r
00006598 g     F .text	0000003c __i2b
00004bf4 g     F .text	000004bc __sfvwrite_r
00007760 g     F .text	00000054 _sbrk_r
000095a8 g     F .text	00000060 _read_r
00011690 g     O .rwdata	00000004 alt_max_fd
0000918c g     F .text	000000f0 _fclose_r
000043f0 g     F .text	00000030 fflush
0001325c g     O .bss	00000004 __malloc_max_sbrked_mem
0000eb94 g     F .text	00000180 alt_irq_register
0000a5ac g     F .text	000008ac .hidden __adddf3
00006d14 g     F .text	0000010c __b2d
00009ec0 g     F .text	00000538 .hidden __umoddi3
0000d040 g     F .text	000000d4 lseek
00011668 g     O .rwdata	00000004 _global_impure_ptr
00007188 g     F .text	00000564 _realloc_r
000133ac g       *ABS*	00000000 __bss_end
0000f004 g     F .text	00000108 alt_tick
00009948 g     F .text	00000578 .hidden __udivdi3
000093f4 g     F .text	00000024 _fputwc_r
0000f878 g     O .rodata	00000028 __mprec_bigtens
0000637c g     F .text	00000104 __s2b
0000cb08 g     F .text	000000a8 .hidden __floatunsidf
00006a54 g     F .text	00000060 __mcmp
00004790 g     F .text	00000018 __fp_lock_all
0000ef68 g     F .text	0000009c alt_alarm_stop
00013274 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
000103a8 g     O .rwdata	00000028 alt_dev_null
0000e66c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0000e7d0 g     F .text	00000020 alt_dcache_flush_all
00006480 g     F .text	00000068 __hi0bits
0000c9ac g     F .text	00000080 .hidden __fixdfsi
000116a8 g       *ABS*	00000000 __ram_rwdata_end
00011688 g     O .rwdata	00000008 alt_dev_list
0000d460 g     F .text	000000f8 write
0000fb04 g       *ABS*	00000000 __ram_rodata_end
0000cd88 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b8a4 g     F .text	000000f4 .hidden __ledf2
000067cc g     F .text	00000140 __pow5mult
00007ae0 g     F .text	0000145c ___vfiprintf_internal_r
00013254 g     O .bss	00000004 __nlocale_changed
0000a554 g     F .text	00000058 .hidden __umodsi3
000133ac g       *ABS*	00000000 end
0000d7c4 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
0000f79c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000e13c g     F .text	00000074 alt_avalon_timer_sc_init
0000cbb0 g     F .text	00000064 .hidden __clzsi2
0000de9c g     F .text	00000224 altera_avalon_jtag_uart_write
00004780 g     F .text	00000004 __sfp_lock_acquire
00005cdc g     F .text	000000e4 memchr
0000e2d8 g     F .text	0000007c alt_up_character_lcd_write
000004cc g     F .text	000021f8 ___vfprintf_internal_r
000048e4 g     F .text	00000310 _free_r
000052c0 g     F .text	00000010 __locale_mb_cur_max
0000f5e8 g     F .text	00000180 __call_exitprocs
00013250 g     O .bss	00000004 __mlocale_changed
00011674 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00013278 g     O .bss	00000004 _alt_tick_rate
0000690c g     F .text	00000148 __lshift
0001327c g     O .bss	00000004 _alt_nticks
0000d214 g     F .text	000000fc read
0000d5c4 g     F .text	0000009c alt_sys_init
0000e51c g     F .text	0000008c alt_up_character_lcd_shift_display
0000f4d0 g     F .text	00000118 __register_exitproc
000065d4 g     F .text	000001f8 __multiply
0000e5a8 g     F .text	0000008c alt_up_character_lcd_erase_pos
0000db28 g     F .text	00000068 altera_avalon_jtag_uart_close
0000fb04 g       *ABS*	00000000 __ram_rwdata_start
0000f79c g       *ABS*	00000000 __ram_rodata_start
00013284 g     O .bss	00000028 __malloc_current_mallinfo
00006e20 g     F .text	0000014c __d2b
0000d660 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f238 g     F .text	000000a4 alt_get_fd
00009074 g     F .text	00000054 _close_r
0000f454 g     F .text	0000007c memcmp
0000d720 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000133ac g       *ABS*	00000000 __alt_stack_base
0000d770 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000279c g     F .text	00000154 __swsetup_r
0000ae58 g     F .text	000008e8 .hidden __divdf3
00004640 g     F .text	00000118 __sfp
00007084 g     F .text	00000078 __copybits
0000ffa0 g     O .rwdata	00000408 __malloc_av_
0000478c g     F .text	00000004 __sinit_lock_release
0000b998 g     F .text	00000718 .hidden __muldf3
000077b4 g     F .text	00000054 __sread
0000f130 g     F .text	00000108 alt_find_file
0000e82c g     F .text	000000a4 alt_dev_llist_insert
0000d190 g     F .text	00000024 __malloc_lock
0000d374 g     F .text	000000b0 sbrk
00004394 g     F .text	0000005c _fflush_r
000090c8 g     F .text	000000c4 _calloc_r
0001324c g       *ABS*	00000000 __bss_start
00006064 g     F .text	00000128 memset
00000284 g     F .text	00000070 main
00013270 g     O .bss	00000004 alt_envp
00013258 g     O .bss	00000004 __malloc_max_total_mem
0000d6c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009748 g     F .text	00000018 __swbuf
0000e490 g     F .text	0000008c alt_up_character_lcd_shift_cursor
000078e8 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0000927c g     F .text	00000014 fclose
00002af0 g     F .text	00001688 _dtoa_r
000054d0 g     F .text	0000080c _malloc_r
000098bc g     F .text	00000030 __ascii_wctomb
00011694 g     O .rwdata	00000004 alt_errno
000050b0 g     F .text	000000c4 _fwalk
0000a3f8 g     F .text	00000084 .hidden __divsi3
0000e29c g     F .text	0000003c alt_up_character_lcd_open_dev
000047c0 g     F .text	00000124 _malloc_trim_r
0000f79c g       *ABS*	00000000 __CTOR_END__
0000e264 g     F .text	00000038 alt_up_character_lcd_init
000078f0 g     F .text	000000dc strcmp
0000f79c g       *ABS*	00000000 __flash_rodata_start
0000f79c g       *ABS*	00000000 __DTOR_LIST__
0000b740 g     F .text	00000088 .hidden __nedf2
0000d58c g     F .text	00000038 alt_irq_init
0000d310 g     F .text	00000064 alt_release_fd
0000e634 g     F .text	00000038 alt_up_character_lcd_cursor_off
0000f988 g     O .rodata	00000100 .hidden __clz_tab
0001324c g     O .bss	00000004 _PathLocale
0000f408 g     F .text	00000014 atexit
00009014 g     F .text	00000060 _write_r
000052f0 g     F .text	00000018 setlocale
0001166c g     O .rwdata	00000004 _impure_ptr
00013268 g     O .bss	00000004 alt_argc
00004178 g     F .text	0000021c __sflush_r
0000e930 g     F .text	00000060 _do_dtors
000052dc g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006cb0 g     F .text	00000064 __ulp
000047a8 g     F .text	00000018 __fp_unlock_all
00011680 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005308 g     F .text	0000000c localeconv
000116a8 g       *ABS*	00000000 _edata
000133ac g       *ABS*	00000000 _end
00009290 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
0000db90 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00007810 g     F .text	0000007c __swrite
00011678 g     O .rwdata	00000004 __malloc_trim_threshold
000052d0 g     F .text	0000000c __locale_msgcharset
0000f41c g     F .text	00000038 exit
00005174 g     F .text	000000c4 _fwalk_reent
00006ab4 g     F .text	000001fc __mdiff
0000a47c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004784 g     F .text	00000004 __sfp_lock_release
0000e354 g     F .text	00000078 alt_up_character_lcd_string
0000f768 g     F .text	00000034 _exit
0000e6a4 g     F .text	0000012c alt_alarm_start
00005314 g     F .text	000001bc __smakebuf_r
00000434 g     F .text	00000098 strlen
0000ee14 g     F .text	00000154 open
0000b7c8 g     F .text	000000dc .hidden __gedf2
0001167c g     O .rwdata	00000004 __wctomb
00007ac8 g     F .text	00000018 __sprint_r
0000ea20 g     F .text	00000034 alt_icache_flush_all
0000e41c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0001169c g     O .rwdata	00000004 alt_priority_mask
000026c4 g     F .text	0000001c __vfprintf_internal
000098ec g     F .text	0000005c _wctomb_r
0000c0b0 g     F .text	000008fc .hidden __subdf3
000064e8 g     F .text	000000b0 __lo0bits
000116a0 g     O .rwdata	00000008 alt_alarm_list
0000e8d0 g     F .text	00000060 _do_ctors
000097fc g     F .text	000000c0 wcrtomb
0000cc50 g     F .text	000000d0 close
0000cf80 g     F .text	00000084 alt_load
00009418 g     F .text	00000080 fputwc
00004788 g     F .text	00000004 __sinit_lock_acquire
0000625c g     F .text	00000120 __multadd
00006234 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	108cab04 	addi	r2,r2,12972
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108cab04 	addi	r2,r2,12972
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a70617 	ldw	r2,-25576(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a70617 	ldw	r2,-25576(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d6a59a14 	ori	gp,gp,38504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	108c9314 	ori	r2,r2,12876

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18cceb14 	ori	r3,r3,13228

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_data_end+0xf800026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000cf800 	call	cf80 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000d1140 	call	d114 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_data_end+0xf8000280>

00000284 <main>:
#include <stdio.h>
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
//#include <usleep.h>

int main() {
     284:	defffc04 	addi	sp,sp,-16
     288:	dfc00315 	stw	ra,12(sp)
     28c:	df000215 	stw	fp,8(sp)
     290:	df000204 	addi	fp,sp,8
    printf("Reading Keys...\n");
     294:	01000074 	movhi	r4,1
     298:	213de704 	addi	r4,r4,-2148
     29c:	00004200 	call	420 <puts>
    int counter = 0;
     2a0:	e03ffe15 	stw	zero,-8(fp)
    while (1) {
        int keys_value = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
     2a4:	00820834 	movhi	r2,2080
     2a8:	10802004 	addi	r2,r2,128
     2ac:	10800037 	ldwio	r2,0(r2)
     2b0:	e0bfff15 	stw	r2,-4(fp)

        if (keys_value != 0) {
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	10000826 	beq	r2,zero,2dc <main+0x58>
            printf("Keys Value: %d\n", keys_value);
     2bc:	e17fff17 	ldw	r5,-4(fp)
     2c0:	01000074 	movhi	r4,1
     2c4:	213deb04 	addi	r4,r4,-2132
     2c8:	00003240 	call	324 <printf>
        }
        while (counter < 100000) {
     2cc:	00000306 	br	2dc <main+0x58>
        	counter++;
     2d0:	e0bffe17 	ldw	r2,-8(fp)
     2d4:	10800044 	addi	r2,r2,1
     2d8:	e0bffe15 	stw	r2,-8(fp)
        int keys_value = IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);

        if (keys_value != 0) {
            printf("Keys Value: %d\n", keys_value);
        }
        while (counter < 100000) {
     2dc:	e0fffe17 	ldw	r3,-8(fp)
     2e0:	008000b4 	movhi	r2,2
     2e4:	10a1a7c4 	addi	r2,r2,-31073
     2e8:	10fff90e 	bge	r2,r3,2d0 <__alt_data_end+0xf80002d0>
        	counter++;
        }
        counter = 0;
     2ec:	e03ffe15 	stw	zero,-8(fp)
    }
     2f0:	003fec06 	br	2a4 <__alt_data_end+0xf80002a4>

000002f4 <_printf_r>:
     2f4:	defffd04 	addi	sp,sp,-12
     2f8:	2805883a 	mov	r2,r5
     2fc:	dfc00015 	stw	ra,0(sp)
     300:	d9800115 	stw	r6,4(sp)
     304:	d9c00215 	stw	r7,8(sp)
     308:	21400217 	ldw	r5,8(r4)
     30c:	d9c00104 	addi	r7,sp,4
     310:	100d883a 	mov	r6,r2
     314:	00004cc0 	call	4cc <___vfprintf_internal_r>
     318:	dfc00017 	ldw	ra,0(sp)
     31c:	dec00304 	addi	sp,sp,12
     320:	f800283a 	ret

00000324 <printf>:
     324:	defffc04 	addi	sp,sp,-16
     328:	dfc00015 	stw	ra,0(sp)
     32c:	d9400115 	stw	r5,4(sp)
     330:	d9800215 	stw	r6,8(sp)
     334:	d9c00315 	stw	r7,12(sp)
     338:	00800074 	movhi	r2,1
     33c:	10859b04 	addi	r2,r2,5740
     340:	10800017 	ldw	r2,0(r2)
     344:	200b883a 	mov	r5,r4
     348:	d9800104 	addi	r6,sp,4
     34c:	11000217 	ldw	r4,8(r2)
     350:	00026c40 	call	26c4 <__vfprintf_internal>
     354:	dfc00017 	ldw	ra,0(sp)
     358:	dec00404 	addi	sp,sp,16
     35c:	f800283a 	ret

00000360 <_puts_r>:
     360:	defff604 	addi	sp,sp,-40
     364:	dc000715 	stw	r16,28(sp)
     368:	2021883a 	mov	r16,r4
     36c:	2809883a 	mov	r4,r5
     370:	dc400815 	stw	r17,32(sp)
     374:	dfc00915 	stw	ra,36(sp)
     378:	2823883a 	mov	r17,r5
     37c:	00004340 	call	434 <strlen>
     380:	10c00044 	addi	r3,r2,1
     384:	d8800115 	stw	r2,4(sp)
     388:	00800074 	movhi	r2,1
     38c:	10bdef04 	addi	r2,r2,-2116
     390:	d8800215 	stw	r2,8(sp)
     394:	00800044 	movi	r2,1
     398:	d8800315 	stw	r2,12(sp)
     39c:	00800084 	movi	r2,2
     3a0:	dc400015 	stw	r17,0(sp)
     3a4:	d8c00615 	stw	r3,24(sp)
     3a8:	dec00415 	stw	sp,16(sp)
     3ac:	d8800515 	stw	r2,20(sp)
     3b0:	80000226 	beq	r16,zero,3bc <_puts_r+0x5c>
     3b4:	80800e17 	ldw	r2,56(r16)
     3b8:	10001426 	beq	r2,zero,40c <_puts_r+0xac>
     3bc:	81400217 	ldw	r5,8(r16)
     3c0:	2880030b 	ldhu	r2,12(r5)
     3c4:	10c8000c 	andi	r3,r2,8192
     3c8:	1800061e 	bne	r3,zero,3e4 <_puts_r+0x84>
     3cc:	29001917 	ldw	r4,100(r5)
     3d0:	00f7ffc4 	movi	r3,-8193
     3d4:	10880014 	ori	r2,r2,8192
     3d8:	20c6703a 	and	r3,r4,r3
     3dc:	2880030d 	sth	r2,12(r5)
     3e0:	28c01915 	stw	r3,100(r5)
     3e4:	d9800404 	addi	r6,sp,16
     3e8:	8009883a 	mov	r4,r16
     3ec:	0004bf40 	call	4bf4 <__sfvwrite_r>
     3f0:	1000091e 	bne	r2,zero,418 <_puts_r+0xb8>
     3f4:	00800284 	movi	r2,10
     3f8:	dfc00917 	ldw	ra,36(sp)
     3fc:	dc400817 	ldw	r17,32(sp)
     400:	dc000717 	ldw	r16,28(sp)
     404:	dec00a04 	addi	sp,sp,40
     408:	f800283a 	ret
     40c:	8009883a 	mov	r4,r16
     410:	00047700 	call	4770 <__sinit>
     414:	003fe906 	br	3bc <__alt_data_end+0xf80003bc>
     418:	00bfffc4 	movi	r2,-1
     41c:	003ff606 	br	3f8 <__alt_data_end+0xf80003f8>

00000420 <puts>:
     420:	00800074 	movhi	r2,1
     424:	10859b04 	addi	r2,r2,5740
     428:	200b883a 	mov	r5,r4
     42c:	11000017 	ldw	r4,0(r2)
     430:	00003601 	jmpi	360 <_puts_r>

00000434 <strlen>:
     434:	208000cc 	andi	r2,r4,3
     438:	10002026 	beq	r2,zero,4bc <strlen+0x88>
     43c:	20800007 	ldb	r2,0(r4)
     440:	10002026 	beq	r2,zero,4c4 <strlen+0x90>
     444:	2005883a 	mov	r2,r4
     448:	00000206 	br	454 <strlen+0x20>
     44c:	10c00007 	ldb	r3,0(r2)
     450:	18001826 	beq	r3,zero,4b4 <strlen+0x80>
     454:	10800044 	addi	r2,r2,1
     458:	10c000cc 	andi	r3,r2,3
     45c:	183ffb1e 	bne	r3,zero,44c <__alt_data_end+0xf800044c>
     460:	10c00017 	ldw	r3,0(r2)
     464:	01ffbff4 	movhi	r7,65279
     468:	39ffbfc4 	addi	r7,r7,-257
     46c:	00ca303a 	nor	r5,zero,r3
     470:	01a02074 	movhi	r6,32897
     474:	19c7883a 	add	r3,r3,r7
     478:	31a02004 	addi	r6,r6,-32640
     47c:	1946703a 	and	r3,r3,r5
     480:	1986703a 	and	r3,r3,r6
     484:	1800091e 	bne	r3,zero,4ac <strlen+0x78>
     488:	10800104 	addi	r2,r2,4
     48c:	10c00017 	ldw	r3,0(r2)
     490:	19cb883a 	add	r5,r3,r7
     494:	00c6303a 	nor	r3,zero,r3
     498:	28c6703a 	and	r3,r5,r3
     49c:	1986703a 	and	r3,r3,r6
     4a0:	183ff926 	beq	r3,zero,488 <__alt_data_end+0xf8000488>
     4a4:	00000106 	br	4ac <strlen+0x78>
     4a8:	10800044 	addi	r2,r2,1
     4ac:	10c00007 	ldb	r3,0(r2)
     4b0:	183ffd1e 	bne	r3,zero,4a8 <__alt_data_end+0xf80004a8>
     4b4:	1105c83a 	sub	r2,r2,r4
     4b8:	f800283a 	ret
     4bc:	2005883a 	mov	r2,r4
     4c0:	003fe706 	br	460 <__alt_data_end+0xf8000460>
     4c4:	0005883a 	mov	r2,zero
     4c8:	f800283a 	ret

000004cc <___vfprintf_internal_r>:
     4cc:	deffb804 	addi	sp,sp,-288
     4d0:	dfc04715 	stw	ra,284(sp)
     4d4:	ddc04515 	stw	r23,276(sp)
     4d8:	dd404315 	stw	r21,268(sp)
     4dc:	d9002c15 	stw	r4,176(sp)
     4e0:	282f883a 	mov	r23,r5
     4e4:	302b883a 	mov	r21,r6
     4e8:	d9c02d15 	stw	r7,180(sp)
     4ec:	df004615 	stw	fp,280(sp)
     4f0:	dd804415 	stw	r22,272(sp)
     4f4:	dd004215 	stw	r20,264(sp)
     4f8:	dcc04115 	stw	r19,260(sp)
     4fc:	dc804015 	stw	r18,256(sp)
     500:	dc403f15 	stw	r17,252(sp)
     504:	dc003e15 	stw	r16,248(sp)
     508:	00052e40 	call	52e4 <_localeconv_r>
     50c:	10800017 	ldw	r2,0(r2)
     510:	1009883a 	mov	r4,r2
     514:	d8803415 	stw	r2,208(sp)
     518:	00004340 	call	434 <strlen>
     51c:	d8803715 	stw	r2,220(sp)
     520:	d8802c17 	ldw	r2,176(sp)
     524:	10000226 	beq	r2,zero,530 <___vfprintf_internal_r+0x64>
     528:	10800e17 	ldw	r2,56(r2)
     52c:	1000f926 	beq	r2,zero,914 <___vfprintf_internal_r+0x448>
     530:	b880030b 	ldhu	r2,12(r23)
     534:	10c8000c 	andi	r3,r2,8192
     538:	1800061e 	bne	r3,zero,554 <___vfprintf_internal_r+0x88>
     53c:	b9001917 	ldw	r4,100(r23)
     540:	00f7ffc4 	movi	r3,-8193
     544:	10880014 	ori	r2,r2,8192
     548:	20c6703a 	and	r3,r4,r3
     54c:	b880030d 	sth	r2,12(r23)
     550:	b8c01915 	stw	r3,100(r23)
     554:	10c0020c 	andi	r3,r2,8
     558:	1800c126 	beq	r3,zero,860 <___vfprintf_internal_r+0x394>
     55c:	b8c00417 	ldw	r3,16(r23)
     560:	1800bf26 	beq	r3,zero,860 <___vfprintf_internal_r+0x394>
     564:	1080068c 	andi	r2,r2,26
     568:	00c00284 	movi	r3,10
     56c:	10c0c426 	beq	r2,r3,880 <___vfprintf_internal_r+0x3b4>
     570:	d8c00404 	addi	r3,sp,16
     574:	05000074 	movhi	r20,1
     578:	d9001e04 	addi	r4,sp,120
     57c:	a53e0084 	addi	r20,r20,-2046
     580:	d8c01e15 	stw	r3,120(sp)
     584:	d8002015 	stw	zero,128(sp)
     588:	d8001f15 	stw	zero,124(sp)
     58c:	d8003315 	stw	zero,204(sp)
     590:	d8003615 	stw	zero,216(sp)
     594:	d8003815 	stw	zero,224(sp)
     598:	1811883a 	mov	r8,r3
     59c:	d8003915 	stw	zero,228(sp)
     5a0:	d8003a15 	stw	zero,232(sp)
     5a4:	d8002f15 	stw	zero,188(sp)
     5a8:	d9002815 	stw	r4,160(sp)
     5ac:	a8800007 	ldb	r2,0(r21)
     5b0:	10027b26 	beq	r2,zero,fa0 <___vfprintf_internal_r+0xad4>
     5b4:	00c00944 	movi	r3,37
     5b8:	a821883a 	mov	r16,r21
     5bc:	10c0021e 	bne	r2,r3,5c8 <___vfprintf_internal_r+0xfc>
     5c0:	00001406 	br	614 <___vfprintf_internal_r+0x148>
     5c4:	10c00326 	beq	r2,r3,5d4 <___vfprintf_internal_r+0x108>
     5c8:	84000044 	addi	r16,r16,1
     5cc:	80800007 	ldb	r2,0(r16)
     5d0:	103ffc1e 	bne	r2,zero,5c4 <__alt_data_end+0xf80005c4>
     5d4:	8563c83a 	sub	r17,r16,r21
     5d8:	88000e26 	beq	r17,zero,614 <___vfprintf_internal_r+0x148>
     5dc:	d8c02017 	ldw	r3,128(sp)
     5e0:	d8801f17 	ldw	r2,124(sp)
     5e4:	45400015 	stw	r21,0(r8)
     5e8:	1c47883a 	add	r3,r3,r17
     5ec:	10800044 	addi	r2,r2,1
     5f0:	d8c02015 	stw	r3,128(sp)
     5f4:	44400115 	stw	r17,4(r8)
     5f8:	d8801f15 	stw	r2,124(sp)
     5fc:	00c001c4 	movi	r3,7
     600:	1880a716 	blt	r3,r2,8a0 <___vfprintf_internal_r+0x3d4>
     604:	42000204 	addi	r8,r8,8
     608:	d9402f17 	ldw	r5,188(sp)
     60c:	2c4b883a 	add	r5,r5,r17
     610:	d9402f15 	stw	r5,188(sp)
     614:	80800007 	ldb	r2,0(r16)
     618:	1000a826 	beq	r2,zero,8bc <___vfprintf_internal_r+0x3f0>
     61c:	84400047 	ldb	r17,1(r16)
     620:	00bfffc4 	movi	r2,-1
     624:	85400044 	addi	r21,r16,1
     628:	d8002785 	stb	zero,158(sp)
     62c:	0007883a 	mov	r3,zero
     630:	000f883a 	mov	r7,zero
     634:	d8802915 	stw	r2,164(sp)
     638:	d8003115 	stw	zero,196(sp)
     63c:	0025883a 	mov	r18,zero
     640:	01401604 	movi	r5,88
     644:	01800244 	movi	r6,9
     648:	02800a84 	movi	r10,42
     64c:	02401b04 	movi	r9,108
     650:	ad400044 	addi	r21,r21,1
     654:	88bff804 	addi	r2,r17,-32
     658:	28830436 	bltu	r5,r2,126c <___vfprintf_internal_r+0xda0>
     65c:	100490ba 	slli	r2,r2,2
     660:	01000034 	movhi	r4,0
     664:	21019d04 	addi	r4,r4,1652
     668:	1105883a 	add	r2,r2,r4
     66c:	10800017 	ldw	r2,0(r2)
     670:	1000683a 	jmp	r2
     674:	0000118c 	andi	zero,zero,70
     678:	0000126c 	andhi	zero,zero,73
     67c:	0000126c 	andhi	zero,zero,73
     680:	000011ac 	andhi	zero,zero,70
     684:	0000126c 	andhi	zero,zero,73
     688:	0000126c 	andhi	zero,zero,73
     68c:	0000126c 	andhi	zero,zero,73
     690:	0000126c 	andhi	zero,zero,73
     694:	0000126c 	andhi	zero,zero,73
     698:	0000126c 	andhi	zero,zero,73
     69c:	00000920 	cmpeqi	zero,zero,36
     6a0:	000010c8 	cmpgei	zero,zero,67
     6a4:	0000126c 	andhi	zero,zero,73
     6a8:	000007e8 	cmpgeui	zero,zero,31
     6ac:	00000948 	cmpgei	zero,zero,37
     6b0:	0000126c 	andhi	zero,zero,73
     6b4:	00000988 	cmpgei	zero,zero,38
     6b8:	00000994 	movui	zero,38
     6bc:	00000994 	movui	zero,38
     6c0:	00000994 	movui	zero,38
     6c4:	00000994 	movui	zero,38
     6c8:	00000994 	movui	zero,38
     6cc:	00000994 	movui	zero,38
     6d0:	00000994 	movui	zero,38
     6d4:	00000994 	movui	zero,38
     6d8:	00000994 	movui	zero,38
     6dc:	0000126c 	andhi	zero,zero,73
     6e0:	0000126c 	andhi	zero,zero,73
     6e4:	0000126c 	andhi	zero,zero,73
     6e8:	0000126c 	andhi	zero,zero,73
     6ec:	0000126c 	andhi	zero,zero,73
     6f0:	0000126c 	andhi	zero,zero,73
     6f4:	0000126c 	andhi	zero,zero,73
     6f8:	0000126c 	andhi	zero,zero,73
     6fc:	0000126c 	andhi	zero,zero,73
     700:	0000126c 	andhi	zero,zero,73
     704:	000009c8 	cmpgei	zero,zero,39
     708:	00000a84 	movi	zero,42
     70c:	0000126c 	andhi	zero,zero,73
     710:	00000a84 	movi	zero,42
     714:	0000126c 	andhi	zero,zero,73
     718:	0000126c 	andhi	zero,zero,73
     71c:	0000126c 	andhi	zero,zero,73
     720:	0000126c 	andhi	zero,zero,73
     724:	00000b24 	muli	zero,zero,44
     728:	0000126c 	andhi	zero,zero,73
     72c:	0000126c 	andhi	zero,zero,73
     730:	00000b30 	cmpltui	zero,zero,44
     734:	0000126c 	andhi	zero,zero,73
     738:	0000126c 	andhi	zero,zero,73
     73c:	0000126c 	andhi	zero,zero,73
     740:	0000126c 	andhi	zero,zero,73
     744:	0000126c 	andhi	zero,zero,73
     748:	00000fa8 	cmpgeui	zero,zero,62
     74c:	0000126c 	andhi	zero,zero,73
     750:	0000126c 	andhi	zero,zero,73
     754:	00001008 	cmpgei	zero,zero,64
     758:	0000126c 	andhi	zero,zero,73
     75c:	0000126c 	andhi	zero,zero,73
     760:	0000126c 	andhi	zero,zero,73
     764:	0000126c 	andhi	zero,zero,73
     768:	0000126c 	andhi	zero,zero,73
     76c:	0000126c 	andhi	zero,zero,73
     770:	0000126c 	andhi	zero,zero,73
     774:	0000126c 	andhi	zero,zero,73
     778:	0000126c 	andhi	zero,zero,73
     77c:	0000126c 	andhi	zero,zero,73
     780:	00001218 	cmpnei	zero,zero,72
     784:	000011b8 	rdprs	zero,zero,70
     788:	00000a84 	movi	zero,42
     78c:	00000a84 	movi	zero,42
     790:	00000a84 	movi	zero,42
     794:	000011c8 	cmpgei	zero,zero,71
     798:	000011b8 	rdprs	zero,zero,70
     79c:	0000126c 	andhi	zero,zero,73
     7a0:	0000126c 	andhi	zero,zero,73
     7a4:	000011d4 	movui	zero,71
     7a8:	0000126c 	andhi	zero,zero,73
     7ac:	000011e4 	muli	zero,zero,71
     7b0:	000010b8 	rdprs	zero,zero,66
     7b4:	000007f4 	movhi	zero,31
     7b8:	000010d8 	cmpnei	zero,zero,67
     7bc:	0000126c 	andhi	zero,zero,73
     7c0:	000010e4 	muli	zero,zero,67
     7c4:	0000126c 	andhi	zero,zero,73
     7c8:	00001140 	call	114 <alt_irq_handler+0x18>
     7cc:	0000126c 	andhi	zero,zero,73
     7d0:	0000126c 	andhi	zero,zero,73
     7d4:	00001150 	cmplti	zero,zero,69
     7d8:	d9003117 	ldw	r4,196(sp)
     7dc:	d8802d15 	stw	r2,180(sp)
     7e0:	0109c83a 	sub	r4,zero,r4
     7e4:	d9003115 	stw	r4,196(sp)
     7e8:	94800114 	ori	r18,r18,4
     7ec:	ac400007 	ldb	r17,0(r21)
     7f0:	003f9706 	br	650 <__alt_data_end+0xf8000650>
     7f4:	00800c04 	movi	r2,48
     7f8:	d9002d17 	ldw	r4,180(sp)
     7fc:	d9402917 	ldw	r5,164(sp)
     800:	d8802705 	stb	r2,156(sp)
     804:	00801e04 	movi	r2,120
     808:	d8802745 	stb	r2,157(sp)
     80c:	d8002785 	stb	zero,158(sp)
     810:	20c00104 	addi	r3,r4,4
     814:	24c00017 	ldw	r19,0(r4)
     818:	002d883a 	mov	r22,zero
     81c:	90800094 	ori	r2,r18,2
     820:	28029a16 	blt	r5,zero,128c <___vfprintf_internal_r+0xdc0>
     824:	00bfdfc4 	movi	r2,-129
     828:	90a4703a 	and	r18,r18,r2
     82c:	d8c02d15 	stw	r3,180(sp)
     830:	94800094 	ori	r18,r18,2
     834:	9802871e 	bne	r19,zero,1254 <___vfprintf_internal_r+0xd88>
     838:	00800074 	movhi	r2,1
     83c:	10bdf904 	addi	r2,r2,-2076
     840:	d8803915 	stw	r2,228(sp)
     844:	04401e04 	movi	r17,120
     848:	d8802917 	ldw	r2,164(sp)
     84c:	0039883a 	mov	fp,zero
     850:	1001e926 	beq	r2,zero,ff8 <___vfprintf_internal_r+0xb2c>
     854:	0027883a 	mov	r19,zero
     858:	002d883a 	mov	r22,zero
     85c:	00020506 	br	1074 <___vfprintf_internal_r+0xba8>
     860:	d9002c17 	ldw	r4,176(sp)
     864:	b80b883a 	mov	r5,r23
     868:	000279c0 	call	279c <__swsetup_r>
     86c:	1005ac1e 	bne	r2,zero,1f20 <___vfprintf_internal_r+0x1a54>
     870:	b880030b 	ldhu	r2,12(r23)
     874:	00c00284 	movi	r3,10
     878:	1080068c 	andi	r2,r2,26
     87c:	10ff3c1e 	bne	r2,r3,570 <__alt_data_end+0xf8000570>
     880:	b880038f 	ldh	r2,14(r23)
     884:	103f3a16 	blt	r2,zero,570 <__alt_data_end+0xf8000570>
     888:	d9c02d17 	ldw	r7,180(sp)
     88c:	d9002c17 	ldw	r4,176(sp)
     890:	a80d883a 	mov	r6,r21
     894:	b80b883a 	mov	r5,r23
     898:	00026e00 	call	26e0 <__sbprintf>
     89c:	00001106 	br	8e4 <___vfprintf_internal_r+0x418>
     8a0:	d9002c17 	ldw	r4,176(sp)
     8a4:	d9801e04 	addi	r6,sp,120
     8a8:	b80b883a 	mov	r5,r23
     8ac:	0007ac80 	call	7ac8 <__sprint_r>
     8b0:	1000081e 	bne	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     8b4:	da000404 	addi	r8,sp,16
     8b8:	003f5306 	br	608 <__alt_data_end+0xf8000608>
     8bc:	d8802017 	ldw	r2,128(sp)
     8c0:	10000426 	beq	r2,zero,8d4 <___vfprintf_internal_r+0x408>
     8c4:	d9002c17 	ldw	r4,176(sp)
     8c8:	d9801e04 	addi	r6,sp,120
     8cc:	b80b883a 	mov	r5,r23
     8d0:	0007ac80 	call	7ac8 <__sprint_r>
     8d4:	b880030b 	ldhu	r2,12(r23)
     8d8:	1080100c 	andi	r2,r2,64
     8dc:	1005901e 	bne	r2,zero,1f20 <___vfprintf_internal_r+0x1a54>
     8e0:	d8802f17 	ldw	r2,188(sp)
     8e4:	dfc04717 	ldw	ra,284(sp)
     8e8:	df004617 	ldw	fp,280(sp)
     8ec:	ddc04517 	ldw	r23,276(sp)
     8f0:	dd804417 	ldw	r22,272(sp)
     8f4:	dd404317 	ldw	r21,268(sp)
     8f8:	dd004217 	ldw	r20,264(sp)
     8fc:	dcc04117 	ldw	r19,260(sp)
     900:	dc804017 	ldw	r18,256(sp)
     904:	dc403f17 	ldw	r17,252(sp)
     908:	dc003e17 	ldw	r16,248(sp)
     90c:	dec04804 	addi	sp,sp,288
     910:	f800283a 	ret
     914:	d9002c17 	ldw	r4,176(sp)
     918:	00047700 	call	4770 <__sinit>
     91c:	003f0406 	br	530 <__alt_data_end+0xf8000530>
     920:	d8802d17 	ldw	r2,180(sp)
     924:	d9002d17 	ldw	r4,180(sp)
     928:	10800017 	ldw	r2,0(r2)
     92c:	d8803115 	stw	r2,196(sp)
     930:	20800104 	addi	r2,r4,4
     934:	d9003117 	ldw	r4,196(sp)
     938:	203fa716 	blt	r4,zero,7d8 <__alt_data_end+0xf80007d8>
     93c:	d8802d15 	stw	r2,180(sp)
     940:	ac400007 	ldb	r17,0(r21)
     944:	003f4206 	br	650 <__alt_data_end+0xf8000650>
     948:	ac400007 	ldb	r17,0(r21)
     94c:	aac00044 	addi	r11,r21,1
     950:	8a872826 	beq	r17,r10,25f4 <___vfprintf_internal_r+0x2128>
     954:	88bff404 	addi	r2,r17,-48
     958:	0009883a 	mov	r4,zero
     95c:	30867d36 	bltu	r6,r2,2354 <___vfprintf_internal_r+0x1e88>
     960:	5c400007 	ldb	r17,0(r11)
     964:	210002a4 	muli	r4,r4,10
     968:	5d400044 	addi	r21,r11,1
     96c:	a817883a 	mov	r11,r21
     970:	2089883a 	add	r4,r4,r2
     974:	88bff404 	addi	r2,r17,-48
     978:	30bff92e 	bgeu	r6,r2,960 <__alt_data_end+0xf8000960>
     97c:	2005c916 	blt	r4,zero,20a4 <___vfprintf_internal_r+0x1bd8>
     980:	d9002915 	stw	r4,164(sp)
     984:	003f3306 	br	654 <__alt_data_end+0xf8000654>
     988:	94802014 	ori	r18,r18,128
     98c:	ac400007 	ldb	r17,0(r21)
     990:	003f2f06 	br	650 <__alt_data_end+0xf8000650>
     994:	a809883a 	mov	r4,r21
     998:	d8003115 	stw	zero,196(sp)
     99c:	88bff404 	addi	r2,r17,-48
     9a0:	0017883a 	mov	r11,zero
     9a4:	24400007 	ldb	r17,0(r4)
     9a8:	5ac002a4 	muli	r11,r11,10
     9ac:	ad400044 	addi	r21,r21,1
     9b0:	a809883a 	mov	r4,r21
     9b4:	12d7883a 	add	r11,r2,r11
     9b8:	88bff404 	addi	r2,r17,-48
     9bc:	30bff92e 	bgeu	r6,r2,9a4 <__alt_data_end+0xf80009a4>
     9c0:	dac03115 	stw	r11,196(sp)
     9c4:	003f2306 	br	654 <__alt_data_end+0xf8000654>
     9c8:	18c03fcc 	andi	r3,r3,255
     9cc:	18072b1e 	bne	r3,zero,267c <___vfprintf_internal_r+0x21b0>
     9d0:	94800414 	ori	r18,r18,16
     9d4:	9080080c 	andi	r2,r18,32
     9d8:	10037b26 	beq	r2,zero,17c8 <___vfprintf_internal_r+0x12fc>
     9dc:	d9402d17 	ldw	r5,180(sp)
     9e0:	28800117 	ldw	r2,4(r5)
     9e4:	2cc00017 	ldw	r19,0(r5)
     9e8:	29400204 	addi	r5,r5,8
     9ec:	d9402d15 	stw	r5,180(sp)
     9f0:	102d883a 	mov	r22,r2
     9f4:	10044b16 	blt	r2,zero,1b24 <___vfprintf_internal_r+0x1658>
     9f8:	d9402917 	ldw	r5,164(sp)
     9fc:	df002783 	ldbu	fp,158(sp)
     a00:	2803bc16 	blt	r5,zero,18f4 <___vfprintf_internal_r+0x1428>
     a04:	00ffdfc4 	movi	r3,-129
     a08:	9d84b03a 	or	r2,r19,r22
     a0c:	90e4703a 	and	r18,r18,r3
     a10:	10017726 	beq	r2,zero,ff0 <___vfprintf_internal_r+0xb24>
     a14:	b0038326 	beq	r22,zero,1824 <___vfprintf_internal_r+0x1358>
     a18:	dc402a15 	stw	r17,168(sp)
     a1c:	dc001e04 	addi	r16,sp,120
     a20:	b023883a 	mov	r17,r22
     a24:	402d883a 	mov	r22,r8
     a28:	9809883a 	mov	r4,r19
     a2c:	880b883a 	mov	r5,r17
     a30:	01800284 	movi	r6,10
     a34:	000f883a 	mov	r7,zero
     a38:	0009ec00 	call	9ec0 <__umoddi3>
     a3c:	10800c04 	addi	r2,r2,48
     a40:	843fffc4 	addi	r16,r16,-1
     a44:	9809883a 	mov	r4,r19
     a48:	880b883a 	mov	r5,r17
     a4c:	80800005 	stb	r2,0(r16)
     a50:	01800284 	movi	r6,10
     a54:	000f883a 	mov	r7,zero
     a58:	00099480 	call	9948 <__udivdi3>
     a5c:	1027883a 	mov	r19,r2
     a60:	10c4b03a 	or	r2,r2,r3
     a64:	1823883a 	mov	r17,r3
     a68:	103fef1e 	bne	r2,zero,a28 <__alt_data_end+0xf8000a28>
     a6c:	d8c02817 	ldw	r3,160(sp)
     a70:	dc402a17 	ldw	r17,168(sp)
     a74:	b011883a 	mov	r8,r22
     a78:	1c07c83a 	sub	r3,r3,r16
     a7c:	d8c02e15 	stw	r3,184(sp)
     a80:	00005906 	br	be8 <___vfprintf_internal_r+0x71c>
     a84:	18c03fcc 	andi	r3,r3,255
     a88:	1806fa1e 	bne	r3,zero,2674 <___vfprintf_internal_r+0x21a8>
     a8c:	9080020c 	andi	r2,r18,8
     a90:	10048a26 	beq	r2,zero,1cbc <___vfprintf_internal_r+0x17f0>
     a94:	d8c02d17 	ldw	r3,180(sp)
     a98:	d9002d17 	ldw	r4,180(sp)
     a9c:	d9402d17 	ldw	r5,180(sp)
     aa0:	18c00017 	ldw	r3,0(r3)
     aa4:	21000117 	ldw	r4,4(r4)
     aa8:	29400204 	addi	r5,r5,8
     aac:	d8c03615 	stw	r3,216(sp)
     ab0:	d9003815 	stw	r4,224(sp)
     ab4:	d9402d15 	stw	r5,180(sp)
     ab8:	d9003617 	ldw	r4,216(sp)
     abc:	d9403817 	ldw	r5,224(sp)
     ac0:	da003d15 	stw	r8,244(sp)
     ac4:	04000044 	movi	r16,1
     ac8:	00076ec0 	call	76ec <__fpclassifyd>
     acc:	da003d17 	ldw	r8,244(sp)
     ad0:	14041f1e 	bne	r2,r16,1b50 <___vfprintf_internal_r+0x1684>
     ad4:	d9003617 	ldw	r4,216(sp)
     ad8:	d9403817 	ldw	r5,224(sp)
     adc:	000d883a 	mov	r6,zero
     ae0:	000f883a 	mov	r7,zero
     ae4:	000b8a40 	call	b8a4 <__ledf2>
     ae8:	da003d17 	ldw	r8,244(sp)
     aec:	1005be16 	blt	r2,zero,21e8 <___vfprintf_internal_r+0x1d1c>
     af0:	df002783 	ldbu	fp,158(sp)
     af4:	008011c4 	movi	r2,71
     af8:	1445330e 	bge	r2,r17,1fc8 <___vfprintf_internal_r+0x1afc>
     afc:	04000074 	movhi	r16,1
     b00:	843df104 	addi	r16,r16,-2108
     b04:	00c000c4 	movi	r3,3
     b08:	00bfdfc4 	movi	r2,-129
     b0c:	d8c02a15 	stw	r3,168(sp)
     b10:	90a4703a 	and	r18,r18,r2
     b14:	d8c02e15 	stw	r3,184(sp)
     b18:	d8002915 	stw	zero,164(sp)
     b1c:	d8003215 	stw	zero,200(sp)
     b20:	00003706 	br	c00 <___vfprintf_internal_r+0x734>
     b24:	94800214 	ori	r18,r18,8
     b28:	ac400007 	ldb	r17,0(r21)
     b2c:	003ec806 	br	650 <__alt_data_end+0xf8000650>
     b30:	18c03fcc 	andi	r3,r3,255
     b34:	1806db1e 	bne	r3,zero,26a4 <___vfprintf_internal_r+0x21d8>
     b38:	94800414 	ori	r18,r18,16
     b3c:	9080080c 	andi	r2,r18,32
     b40:	1002d826 	beq	r2,zero,16a4 <___vfprintf_internal_r+0x11d8>
     b44:	d9402d17 	ldw	r5,180(sp)
     b48:	d8c02917 	ldw	r3,164(sp)
     b4c:	d8002785 	stb	zero,158(sp)
     b50:	28800204 	addi	r2,r5,8
     b54:	2cc00017 	ldw	r19,0(r5)
     b58:	2d800117 	ldw	r22,4(r5)
     b5c:	18048f16 	blt	r3,zero,1d9c <___vfprintf_internal_r+0x18d0>
     b60:	013fdfc4 	movi	r4,-129
     b64:	9d86b03a 	or	r3,r19,r22
     b68:	d8802d15 	stw	r2,180(sp)
     b6c:	9124703a 	and	r18,r18,r4
     b70:	1802d91e 	bne	r3,zero,16d8 <___vfprintf_internal_r+0x120c>
     b74:	d8c02917 	ldw	r3,164(sp)
     b78:	0039883a 	mov	fp,zero
     b7c:	1805c326 	beq	r3,zero,228c <___vfprintf_internal_r+0x1dc0>
     b80:	0027883a 	mov	r19,zero
     b84:	002d883a 	mov	r22,zero
     b88:	dc001e04 	addi	r16,sp,120
     b8c:	9806d0fa 	srli	r3,r19,3
     b90:	b008977a 	slli	r4,r22,29
     b94:	b02cd0fa 	srli	r22,r22,3
     b98:	9cc001cc 	andi	r19,r19,7
     b9c:	98800c04 	addi	r2,r19,48
     ba0:	843fffc4 	addi	r16,r16,-1
     ba4:	20e6b03a 	or	r19,r4,r3
     ba8:	80800005 	stb	r2,0(r16)
     bac:	9d86b03a 	or	r3,r19,r22
     bb0:	183ff61e 	bne	r3,zero,b8c <__alt_data_end+0xf8000b8c>
     bb4:	90c0004c 	andi	r3,r18,1
     bb8:	18013b26 	beq	r3,zero,10a8 <___vfprintf_internal_r+0xbdc>
     bbc:	10803fcc 	andi	r2,r2,255
     bc0:	1080201c 	xori	r2,r2,128
     bc4:	10bfe004 	addi	r2,r2,-128
     bc8:	00c00c04 	movi	r3,48
     bcc:	10c13626 	beq	r2,r3,10a8 <___vfprintf_internal_r+0xbdc>
     bd0:	80ffffc5 	stb	r3,-1(r16)
     bd4:	d8c02817 	ldw	r3,160(sp)
     bd8:	80bfffc4 	addi	r2,r16,-1
     bdc:	1021883a 	mov	r16,r2
     be0:	1887c83a 	sub	r3,r3,r2
     be4:	d8c02e15 	stw	r3,184(sp)
     be8:	d8802e17 	ldw	r2,184(sp)
     bec:	d9002917 	ldw	r4,164(sp)
     bf0:	1100010e 	bge	r2,r4,bf8 <___vfprintf_internal_r+0x72c>
     bf4:	2005883a 	mov	r2,r4
     bf8:	d8802a15 	stw	r2,168(sp)
     bfc:	d8003215 	stw	zero,200(sp)
     c00:	e7003fcc 	andi	fp,fp,255
     c04:	e700201c 	xori	fp,fp,128
     c08:	e73fe004 	addi	fp,fp,-128
     c0c:	e0000326 	beq	fp,zero,c1c <___vfprintf_internal_r+0x750>
     c10:	d8c02a17 	ldw	r3,168(sp)
     c14:	18c00044 	addi	r3,r3,1
     c18:	d8c02a15 	stw	r3,168(sp)
     c1c:	90c0008c 	andi	r3,r18,2
     c20:	d8c02b15 	stw	r3,172(sp)
     c24:	18000326 	beq	r3,zero,c34 <___vfprintf_internal_r+0x768>
     c28:	d8c02a17 	ldw	r3,168(sp)
     c2c:	18c00084 	addi	r3,r3,2
     c30:	d8c02a15 	stw	r3,168(sp)
     c34:	90c0210c 	andi	r3,r18,132
     c38:	d8c03015 	stw	r3,192(sp)
     c3c:	1801a31e 	bne	r3,zero,12cc <___vfprintf_internal_r+0xe00>
     c40:	d9003117 	ldw	r4,196(sp)
     c44:	d8c02a17 	ldw	r3,168(sp)
     c48:	20e7c83a 	sub	r19,r4,r3
     c4c:	04c19f0e 	bge	zero,r19,12cc <___vfprintf_internal_r+0xe00>
     c50:	02400404 	movi	r9,16
     c54:	d8c02017 	ldw	r3,128(sp)
     c58:	d8801f17 	ldw	r2,124(sp)
     c5c:	4cc50d0e 	bge	r9,r19,2094 <___vfprintf_internal_r+0x1bc8>
     c60:	01400074 	movhi	r5,1
     c64:	297e0484 	addi	r5,r5,-2030
     c68:	dc403b15 	stw	r17,236(sp)
     c6c:	d9403515 	stw	r5,212(sp)
     c70:	9823883a 	mov	r17,r19
     c74:	482d883a 	mov	r22,r9
     c78:	9027883a 	mov	r19,r18
     c7c:	070001c4 	movi	fp,7
     c80:	8025883a 	mov	r18,r16
     c84:	dc002c17 	ldw	r16,176(sp)
     c88:	00000306 	br	c98 <___vfprintf_internal_r+0x7cc>
     c8c:	8c7ffc04 	addi	r17,r17,-16
     c90:	42000204 	addi	r8,r8,8
     c94:	b440130e 	bge	r22,r17,ce4 <___vfprintf_internal_r+0x818>
     c98:	01000074 	movhi	r4,1
     c9c:	18c00404 	addi	r3,r3,16
     ca0:	10800044 	addi	r2,r2,1
     ca4:	213e0484 	addi	r4,r4,-2030
     ca8:	41000015 	stw	r4,0(r8)
     cac:	45800115 	stw	r22,4(r8)
     cb0:	d8c02015 	stw	r3,128(sp)
     cb4:	d8801f15 	stw	r2,124(sp)
     cb8:	e0bff40e 	bge	fp,r2,c8c <__alt_data_end+0xf8000c8c>
     cbc:	d9801e04 	addi	r6,sp,120
     cc0:	b80b883a 	mov	r5,r23
     cc4:	8009883a 	mov	r4,r16
     cc8:	0007ac80 	call	7ac8 <__sprint_r>
     ccc:	103f011e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
     cd0:	8c7ffc04 	addi	r17,r17,-16
     cd4:	d8c02017 	ldw	r3,128(sp)
     cd8:	d8801f17 	ldw	r2,124(sp)
     cdc:	da000404 	addi	r8,sp,16
     ce0:	b47fed16 	blt	r22,r17,c98 <__alt_data_end+0xf8000c98>
     ce4:	9021883a 	mov	r16,r18
     ce8:	9825883a 	mov	r18,r19
     cec:	8827883a 	mov	r19,r17
     cf0:	dc403b17 	ldw	r17,236(sp)
     cf4:	d9403517 	ldw	r5,212(sp)
     cf8:	98c7883a 	add	r3,r19,r3
     cfc:	10800044 	addi	r2,r2,1
     d00:	41400015 	stw	r5,0(r8)
     d04:	44c00115 	stw	r19,4(r8)
     d08:	d8c02015 	stw	r3,128(sp)
     d0c:	d8801f15 	stw	r2,124(sp)
     d10:	010001c4 	movi	r4,7
     d14:	2082a316 	blt	r4,r2,17a4 <___vfprintf_internal_r+0x12d8>
     d18:	df002787 	ldb	fp,158(sp)
     d1c:	42000204 	addi	r8,r8,8
     d20:	e0000c26 	beq	fp,zero,d54 <___vfprintf_internal_r+0x888>
     d24:	d8801f17 	ldw	r2,124(sp)
     d28:	d9002784 	addi	r4,sp,158
     d2c:	18c00044 	addi	r3,r3,1
     d30:	10800044 	addi	r2,r2,1
     d34:	41000015 	stw	r4,0(r8)
     d38:	01000044 	movi	r4,1
     d3c:	41000115 	stw	r4,4(r8)
     d40:	d8c02015 	stw	r3,128(sp)
     d44:	d8801f15 	stw	r2,124(sp)
     d48:	010001c4 	movi	r4,7
     d4c:	20823c16 	blt	r4,r2,1640 <___vfprintf_internal_r+0x1174>
     d50:	42000204 	addi	r8,r8,8
     d54:	d8802b17 	ldw	r2,172(sp)
     d58:	10000c26 	beq	r2,zero,d8c <___vfprintf_internal_r+0x8c0>
     d5c:	d8801f17 	ldw	r2,124(sp)
     d60:	d9002704 	addi	r4,sp,156
     d64:	18c00084 	addi	r3,r3,2
     d68:	10800044 	addi	r2,r2,1
     d6c:	41000015 	stw	r4,0(r8)
     d70:	01000084 	movi	r4,2
     d74:	41000115 	stw	r4,4(r8)
     d78:	d8c02015 	stw	r3,128(sp)
     d7c:	d8801f15 	stw	r2,124(sp)
     d80:	010001c4 	movi	r4,7
     d84:	20823616 	blt	r4,r2,1660 <___vfprintf_internal_r+0x1194>
     d88:	42000204 	addi	r8,r8,8
     d8c:	d9003017 	ldw	r4,192(sp)
     d90:	00802004 	movi	r2,128
     d94:	20819926 	beq	r4,r2,13fc <___vfprintf_internal_r+0xf30>
     d98:	d9402917 	ldw	r5,164(sp)
     d9c:	d8802e17 	ldw	r2,184(sp)
     da0:	28adc83a 	sub	r22,r5,r2
     da4:	0580310e 	bge	zero,r22,e6c <___vfprintf_internal_r+0x9a0>
     da8:	07000404 	movi	fp,16
     dac:	d8801f17 	ldw	r2,124(sp)
     db0:	e584140e 	bge	fp,r22,1e04 <___vfprintf_internal_r+0x1938>
     db4:	01400074 	movhi	r5,1
     db8:	297e0084 	addi	r5,r5,-2046
     dbc:	dc402915 	stw	r17,164(sp)
     dc0:	d9402b15 	stw	r5,172(sp)
     dc4:	b023883a 	mov	r17,r22
     dc8:	04c001c4 	movi	r19,7
     dcc:	a82d883a 	mov	r22,r21
     dd0:	902b883a 	mov	r21,r18
     dd4:	8025883a 	mov	r18,r16
     dd8:	dc002c17 	ldw	r16,176(sp)
     ddc:	00000306 	br	dec <___vfprintf_internal_r+0x920>
     de0:	8c7ffc04 	addi	r17,r17,-16
     de4:	42000204 	addi	r8,r8,8
     de8:	e440110e 	bge	fp,r17,e30 <___vfprintf_internal_r+0x964>
     dec:	18c00404 	addi	r3,r3,16
     df0:	10800044 	addi	r2,r2,1
     df4:	45000015 	stw	r20,0(r8)
     df8:	47000115 	stw	fp,4(r8)
     dfc:	d8c02015 	stw	r3,128(sp)
     e00:	d8801f15 	stw	r2,124(sp)
     e04:	98bff60e 	bge	r19,r2,de0 <__alt_data_end+0xf8000de0>
     e08:	d9801e04 	addi	r6,sp,120
     e0c:	b80b883a 	mov	r5,r23
     e10:	8009883a 	mov	r4,r16
     e14:	0007ac80 	call	7ac8 <__sprint_r>
     e18:	103eae1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
     e1c:	8c7ffc04 	addi	r17,r17,-16
     e20:	d8c02017 	ldw	r3,128(sp)
     e24:	d8801f17 	ldw	r2,124(sp)
     e28:	da000404 	addi	r8,sp,16
     e2c:	e47fef16 	blt	fp,r17,dec <__alt_data_end+0xf8000dec>
     e30:	9021883a 	mov	r16,r18
     e34:	a825883a 	mov	r18,r21
     e38:	b02b883a 	mov	r21,r22
     e3c:	882d883a 	mov	r22,r17
     e40:	dc402917 	ldw	r17,164(sp)
     e44:	d9002b17 	ldw	r4,172(sp)
     e48:	1d87883a 	add	r3,r3,r22
     e4c:	10800044 	addi	r2,r2,1
     e50:	41000015 	stw	r4,0(r8)
     e54:	45800115 	stw	r22,4(r8)
     e58:	d8c02015 	stw	r3,128(sp)
     e5c:	d8801f15 	stw	r2,124(sp)
     e60:	010001c4 	movi	r4,7
     e64:	2081ee16 	blt	r4,r2,1620 <___vfprintf_internal_r+0x1154>
     e68:	42000204 	addi	r8,r8,8
     e6c:	9080400c 	andi	r2,r18,256
     e70:	1001181e 	bne	r2,zero,12d4 <___vfprintf_internal_r+0xe08>
     e74:	d9402e17 	ldw	r5,184(sp)
     e78:	d8801f17 	ldw	r2,124(sp)
     e7c:	44000015 	stw	r16,0(r8)
     e80:	1947883a 	add	r3,r3,r5
     e84:	10800044 	addi	r2,r2,1
     e88:	41400115 	stw	r5,4(r8)
     e8c:	d8c02015 	stw	r3,128(sp)
     e90:	d8801f15 	stw	r2,124(sp)
     e94:	010001c4 	movi	r4,7
     e98:	2081d316 	blt	r4,r2,15e8 <___vfprintf_internal_r+0x111c>
     e9c:	42000204 	addi	r8,r8,8
     ea0:	9480010c 	andi	r18,r18,4
     ea4:	90003226 	beq	r18,zero,f70 <___vfprintf_internal_r+0xaa4>
     ea8:	d9403117 	ldw	r5,196(sp)
     eac:	d8802a17 	ldw	r2,168(sp)
     eb0:	28a1c83a 	sub	r16,r5,r2
     eb4:	04002e0e 	bge	zero,r16,f70 <___vfprintf_internal_r+0xaa4>
     eb8:	04400404 	movi	r17,16
     ebc:	d8801f17 	ldw	r2,124(sp)
     ec0:	8c04a20e 	bge	r17,r16,214c <___vfprintf_internal_r+0x1c80>
     ec4:	01400074 	movhi	r5,1
     ec8:	297e0484 	addi	r5,r5,-2030
     ecc:	d9403515 	stw	r5,212(sp)
     ed0:	048001c4 	movi	r18,7
     ed4:	dcc02c17 	ldw	r19,176(sp)
     ed8:	00000306 	br	ee8 <___vfprintf_internal_r+0xa1c>
     edc:	843ffc04 	addi	r16,r16,-16
     ee0:	42000204 	addi	r8,r8,8
     ee4:	8c00130e 	bge	r17,r16,f34 <___vfprintf_internal_r+0xa68>
     ee8:	01000074 	movhi	r4,1
     eec:	18c00404 	addi	r3,r3,16
     ef0:	10800044 	addi	r2,r2,1
     ef4:	213e0484 	addi	r4,r4,-2030
     ef8:	41000015 	stw	r4,0(r8)
     efc:	44400115 	stw	r17,4(r8)
     f00:	d8c02015 	stw	r3,128(sp)
     f04:	d8801f15 	stw	r2,124(sp)
     f08:	90bff40e 	bge	r18,r2,edc <__alt_data_end+0xf8000edc>
     f0c:	d9801e04 	addi	r6,sp,120
     f10:	b80b883a 	mov	r5,r23
     f14:	9809883a 	mov	r4,r19
     f18:	0007ac80 	call	7ac8 <__sprint_r>
     f1c:	103e6d1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
     f20:	843ffc04 	addi	r16,r16,-16
     f24:	d8c02017 	ldw	r3,128(sp)
     f28:	d8801f17 	ldw	r2,124(sp)
     f2c:	da000404 	addi	r8,sp,16
     f30:	8c3fed16 	blt	r17,r16,ee8 <__alt_data_end+0xf8000ee8>
     f34:	d9403517 	ldw	r5,212(sp)
     f38:	1c07883a 	add	r3,r3,r16
     f3c:	10800044 	addi	r2,r2,1
     f40:	41400015 	stw	r5,0(r8)
     f44:	44000115 	stw	r16,4(r8)
     f48:	d8c02015 	stw	r3,128(sp)
     f4c:	d8801f15 	stw	r2,124(sp)
     f50:	010001c4 	movi	r4,7
     f54:	2080060e 	bge	r4,r2,f70 <___vfprintf_internal_r+0xaa4>
     f58:	d9002c17 	ldw	r4,176(sp)
     f5c:	d9801e04 	addi	r6,sp,120
     f60:	b80b883a 	mov	r5,r23
     f64:	0007ac80 	call	7ac8 <__sprint_r>
     f68:	103e5a1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
     f6c:	d8c02017 	ldw	r3,128(sp)
     f70:	d8803117 	ldw	r2,196(sp)
     f74:	d9002a17 	ldw	r4,168(sp)
     f78:	1100010e 	bge	r2,r4,f80 <___vfprintf_internal_r+0xab4>
     f7c:	2005883a 	mov	r2,r4
     f80:	d9402f17 	ldw	r5,188(sp)
     f84:	288b883a 	add	r5,r5,r2
     f88:	d9402f15 	stw	r5,188(sp)
     f8c:	18019e1e 	bne	r3,zero,1608 <___vfprintf_internal_r+0x113c>
     f90:	a8800007 	ldb	r2,0(r21)
     f94:	d8001f15 	stw	zero,124(sp)
     f98:	da000404 	addi	r8,sp,16
     f9c:	103d851e 	bne	r2,zero,5b4 <__alt_data_end+0xf80005b4>
     fa0:	a821883a 	mov	r16,r21
     fa4:	003d9b06 	br	614 <__alt_data_end+0xf8000614>
     fa8:	18c03fcc 	andi	r3,r3,255
     fac:	1805c11e 	bne	r3,zero,26b4 <___vfprintf_internal_r+0x21e8>
     fb0:	94800414 	ori	r18,r18,16
     fb4:	9080080c 	andi	r2,r18,32
     fb8:	10020c26 	beq	r2,zero,17ec <___vfprintf_internal_r+0x1320>
     fbc:	d8802d17 	ldw	r2,180(sp)
     fc0:	d9002917 	ldw	r4,164(sp)
     fc4:	d8002785 	stb	zero,158(sp)
     fc8:	10c00204 	addi	r3,r2,8
     fcc:	14c00017 	ldw	r19,0(r2)
     fd0:	15800117 	ldw	r22,4(r2)
     fd4:	20040f16 	blt	r4,zero,2014 <___vfprintf_internal_r+0x1b48>
     fd8:	013fdfc4 	movi	r4,-129
     fdc:	9d84b03a 	or	r2,r19,r22
     fe0:	d8c02d15 	stw	r3,180(sp)
     fe4:	9124703a 	and	r18,r18,r4
     fe8:	0039883a 	mov	fp,zero
     fec:	103e891e 	bne	r2,zero,a14 <__alt_data_end+0xf8000a14>
     ff0:	d9002917 	ldw	r4,164(sp)
     ff4:	2002c11e 	bne	r4,zero,1afc <___vfprintf_internal_r+0x1630>
     ff8:	d8002915 	stw	zero,164(sp)
     ffc:	d8002e15 	stw	zero,184(sp)
    1000:	dc001e04 	addi	r16,sp,120
    1004:	003ef806 	br	be8 <__alt_data_end+0xf8000be8>
    1008:	18c03fcc 	andi	r3,r3,255
    100c:	18059d1e 	bne	r3,zero,2684 <___vfprintf_internal_r+0x21b8>
    1010:	01400074 	movhi	r5,1
    1014:	297df404 	addi	r5,r5,-2096
    1018:	d9403915 	stw	r5,228(sp)
    101c:	9080080c 	andi	r2,r18,32
    1020:	10005226 	beq	r2,zero,116c <___vfprintf_internal_r+0xca0>
    1024:	d8802d17 	ldw	r2,180(sp)
    1028:	14c00017 	ldw	r19,0(r2)
    102c:	15800117 	ldw	r22,4(r2)
    1030:	10800204 	addi	r2,r2,8
    1034:	d8802d15 	stw	r2,180(sp)
    1038:	9080004c 	andi	r2,r18,1
    103c:	10019026 	beq	r2,zero,1680 <___vfprintf_internal_r+0x11b4>
    1040:	9d84b03a 	or	r2,r19,r22
    1044:	10036926 	beq	r2,zero,1dec <___vfprintf_internal_r+0x1920>
    1048:	d8c02917 	ldw	r3,164(sp)
    104c:	00800c04 	movi	r2,48
    1050:	d8802705 	stb	r2,156(sp)
    1054:	dc402745 	stb	r17,157(sp)
    1058:	d8002785 	stb	zero,158(sp)
    105c:	90800094 	ori	r2,r18,2
    1060:	18045d16 	blt	r3,zero,21d8 <___vfprintf_internal_r+0x1d0c>
    1064:	00bfdfc4 	movi	r2,-129
    1068:	90a4703a 	and	r18,r18,r2
    106c:	94800094 	ori	r18,r18,2
    1070:	0039883a 	mov	fp,zero
    1074:	d9003917 	ldw	r4,228(sp)
    1078:	dc001e04 	addi	r16,sp,120
    107c:	988003cc 	andi	r2,r19,15
    1080:	b006973a 	slli	r3,r22,28
    1084:	2085883a 	add	r2,r4,r2
    1088:	9826d13a 	srli	r19,r19,4
    108c:	10800003 	ldbu	r2,0(r2)
    1090:	b02cd13a 	srli	r22,r22,4
    1094:	843fffc4 	addi	r16,r16,-1
    1098:	1ce6b03a 	or	r19,r3,r19
    109c:	80800005 	stb	r2,0(r16)
    10a0:	9d84b03a 	or	r2,r19,r22
    10a4:	103ff51e 	bne	r2,zero,107c <__alt_data_end+0xf800107c>
    10a8:	d8c02817 	ldw	r3,160(sp)
    10ac:	1c07c83a 	sub	r3,r3,r16
    10b0:	d8c02e15 	stw	r3,184(sp)
    10b4:	003ecc06 	br	be8 <__alt_data_end+0xf8000be8>
    10b8:	18c03fcc 	andi	r3,r3,255
    10bc:	183e9f26 	beq	r3,zero,b3c <__alt_data_end+0xf8000b3c>
    10c0:	d9c02785 	stb	r7,158(sp)
    10c4:	003e9d06 	br	b3c <__alt_data_end+0xf8000b3c>
    10c8:	00c00044 	movi	r3,1
    10cc:	01c00ac4 	movi	r7,43
    10d0:	ac400007 	ldb	r17,0(r21)
    10d4:	003d5e06 	br	650 <__alt_data_end+0xf8000650>
    10d8:	94800814 	ori	r18,r18,32
    10dc:	ac400007 	ldb	r17,0(r21)
    10e0:	003d5b06 	br	650 <__alt_data_end+0xf8000650>
    10e4:	d8c02d17 	ldw	r3,180(sp)
    10e8:	d8002785 	stb	zero,158(sp)
    10ec:	1c000017 	ldw	r16,0(r3)
    10f0:	1cc00104 	addi	r19,r3,4
    10f4:	80041926 	beq	r16,zero,215c <___vfprintf_internal_r+0x1c90>
    10f8:	d9002917 	ldw	r4,164(sp)
    10fc:	2003d016 	blt	r4,zero,2040 <___vfprintf_internal_r+0x1b74>
    1100:	200d883a 	mov	r6,r4
    1104:	000b883a 	mov	r5,zero
    1108:	8009883a 	mov	r4,r16
    110c:	da003d15 	stw	r8,244(sp)
    1110:	0005cdc0 	call	5cdc <memchr>
    1114:	da003d17 	ldw	r8,244(sp)
    1118:	10045426 	beq	r2,zero,226c <___vfprintf_internal_r+0x1da0>
    111c:	1405c83a 	sub	r2,r2,r16
    1120:	d8802e15 	stw	r2,184(sp)
    1124:	1003cc16 	blt	r2,zero,2058 <___vfprintf_internal_r+0x1b8c>
    1128:	df002783 	ldbu	fp,158(sp)
    112c:	d8802a15 	stw	r2,168(sp)
    1130:	dcc02d15 	stw	r19,180(sp)
    1134:	d8002915 	stw	zero,164(sp)
    1138:	d8003215 	stw	zero,200(sp)
    113c:	003eb006 	br	c00 <__alt_data_end+0xf8000c00>
    1140:	18c03fcc 	andi	r3,r3,255
    1144:	183f9b26 	beq	r3,zero,fb4 <__alt_data_end+0xf8000fb4>
    1148:	d9c02785 	stb	r7,158(sp)
    114c:	003f9906 	br	fb4 <__alt_data_end+0xf8000fb4>
    1150:	18c03fcc 	andi	r3,r3,255
    1154:	1805551e 	bne	r3,zero,26ac <___vfprintf_internal_r+0x21e0>
    1158:	01400074 	movhi	r5,1
    115c:	297df904 	addi	r5,r5,-2076
    1160:	d9403915 	stw	r5,228(sp)
    1164:	9080080c 	andi	r2,r18,32
    1168:	103fae1e 	bne	r2,zero,1024 <__alt_data_end+0xf8001024>
    116c:	9080040c 	andi	r2,r18,16
    1170:	1002de26 	beq	r2,zero,1cec <___vfprintf_internal_r+0x1820>
    1174:	d8c02d17 	ldw	r3,180(sp)
    1178:	002d883a 	mov	r22,zero
    117c:	1cc00017 	ldw	r19,0(r3)
    1180:	18c00104 	addi	r3,r3,4
    1184:	d8c02d15 	stw	r3,180(sp)
    1188:	003fab06 	br	1038 <__alt_data_end+0xf8001038>
    118c:	38803fcc 	andi	r2,r7,255
    1190:	1080201c 	xori	r2,r2,128
    1194:	10bfe004 	addi	r2,r2,-128
    1198:	1002d21e 	bne	r2,zero,1ce4 <___vfprintf_internal_r+0x1818>
    119c:	00c00044 	movi	r3,1
    11a0:	01c00804 	movi	r7,32
    11a4:	ac400007 	ldb	r17,0(r21)
    11a8:	003d2906 	br	650 <__alt_data_end+0xf8000650>
    11ac:	94800054 	ori	r18,r18,1
    11b0:	ac400007 	ldb	r17,0(r21)
    11b4:	003d2606 	br	650 <__alt_data_end+0xf8000650>
    11b8:	18c03fcc 	andi	r3,r3,255
    11bc:	183e0526 	beq	r3,zero,9d4 <__alt_data_end+0xf80009d4>
    11c0:	d9c02785 	stb	r7,158(sp)
    11c4:	003e0306 	br	9d4 <__alt_data_end+0xf80009d4>
    11c8:	94801014 	ori	r18,r18,64
    11cc:	ac400007 	ldb	r17,0(r21)
    11d0:	003d1f06 	br	650 <__alt_data_end+0xf8000650>
    11d4:	ac400007 	ldb	r17,0(r21)
    11d8:	8a438726 	beq	r17,r9,1ff8 <___vfprintf_internal_r+0x1b2c>
    11dc:	94800414 	ori	r18,r18,16
    11e0:	003d1b06 	br	650 <__alt_data_end+0xf8000650>
    11e4:	18c03fcc 	andi	r3,r3,255
    11e8:	1805341e 	bne	r3,zero,26bc <___vfprintf_internal_r+0x21f0>
    11ec:	9080080c 	andi	r2,r18,32
    11f0:	1002cd26 	beq	r2,zero,1d28 <___vfprintf_internal_r+0x185c>
    11f4:	d9402d17 	ldw	r5,180(sp)
    11f8:	d9002f17 	ldw	r4,188(sp)
    11fc:	28800017 	ldw	r2,0(r5)
    1200:	2007d7fa 	srai	r3,r4,31
    1204:	29400104 	addi	r5,r5,4
    1208:	d9402d15 	stw	r5,180(sp)
    120c:	11000015 	stw	r4,0(r2)
    1210:	10c00115 	stw	r3,4(r2)
    1214:	003ce506 	br	5ac <__alt_data_end+0xf80005ac>
    1218:	d8c02d17 	ldw	r3,180(sp)
    121c:	d9002d17 	ldw	r4,180(sp)
    1220:	d8002785 	stb	zero,158(sp)
    1224:	18800017 	ldw	r2,0(r3)
    1228:	21000104 	addi	r4,r4,4
    122c:	00c00044 	movi	r3,1
    1230:	d8c02a15 	stw	r3,168(sp)
    1234:	d8801405 	stb	r2,80(sp)
    1238:	d9002d15 	stw	r4,180(sp)
    123c:	d8c02e15 	stw	r3,184(sp)
    1240:	d8002915 	stw	zero,164(sp)
    1244:	d8003215 	stw	zero,200(sp)
    1248:	dc001404 	addi	r16,sp,80
    124c:	0039883a 	mov	fp,zero
    1250:	003e7206 	br	c1c <__alt_data_end+0xf8000c1c>
    1254:	01000074 	movhi	r4,1
    1258:	213df904 	addi	r4,r4,-2076
    125c:	0039883a 	mov	fp,zero
    1260:	d9003915 	stw	r4,228(sp)
    1264:	04401e04 	movi	r17,120
    1268:	003f8206 	br	1074 <__alt_data_end+0xf8001074>
    126c:	18c03fcc 	andi	r3,r3,255
    1270:	1805061e 	bne	r3,zero,268c <___vfprintf_internal_r+0x21c0>
    1274:	883d9126 	beq	r17,zero,8bc <__alt_data_end+0xf80008bc>
    1278:	00c00044 	movi	r3,1
    127c:	d8c02a15 	stw	r3,168(sp)
    1280:	dc401405 	stb	r17,80(sp)
    1284:	d8002785 	stb	zero,158(sp)
    1288:	003fec06 	br	123c <__alt_data_end+0xf800123c>
    128c:	01400074 	movhi	r5,1
    1290:	297df904 	addi	r5,r5,-2076
    1294:	d9403915 	stw	r5,228(sp)
    1298:	d8c02d15 	stw	r3,180(sp)
    129c:	1025883a 	mov	r18,r2
    12a0:	04401e04 	movi	r17,120
    12a4:	9d84b03a 	or	r2,r19,r22
    12a8:	1000fc1e 	bne	r2,zero,169c <___vfprintf_internal_r+0x11d0>
    12ac:	0039883a 	mov	fp,zero
    12b0:	00800084 	movi	r2,2
    12b4:	10803fcc 	andi	r2,r2,255
    12b8:	00c00044 	movi	r3,1
    12bc:	10c20f26 	beq	r2,r3,1afc <___vfprintf_internal_r+0x1630>
    12c0:	00c00084 	movi	r3,2
    12c4:	10fd6326 	beq	r2,r3,854 <__alt_data_end+0xf8000854>
    12c8:	003e2d06 	br	b80 <__alt_data_end+0xf8000b80>
    12cc:	d8c02017 	ldw	r3,128(sp)
    12d0:	003e9306 	br	d20 <__alt_data_end+0xf8000d20>
    12d4:	00801944 	movi	r2,101
    12d8:	14407e0e 	bge	r2,r17,14d4 <___vfprintf_internal_r+0x1008>
    12dc:	d9003617 	ldw	r4,216(sp)
    12e0:	d9403817 	ldw	r5,224(sp)
    12e4:	000d883a 	mov	r6,zero
    12e8:	000f883a 	mov	r7,zero
    12ec:	d8c03c15 	stw	r3,240(sp)
    12f0:	da003d15 	stw	r8,244(sp)
    12f4:	000b7400 	call	b740 <__eqdf2>
    12f8:	d8c03c17 	ldw	r3,240(sp)
    12fc:	da003d17 	ldw	r8,244(sp)
    1300:	1000f71e 	bne	r2,zero,16e0 <___vfprintf_internal_r+0x1214>
    1304:	d8801f17 	ldw	r2,124(sp)
    1308:	01000074 	movhi	r4,1
    130c:	213e0004 	addi	r4,r4,-2048
    1310:	18c00044 	addi	r3,r3,1
    1314:	10800044 	addi	r2,r2,1
    1318:	41000015 	stw	r4,0(r8)
    131c:	01000044 	movi	r4,1
    1320:	41000115 	stw	r4,4(r8)
    1324:	d8c02015 	stw	r3,128(sp)
    1328:	d8801f15 	stw	r2,124(sp)
    132c:	010001c4 	movi	r4,7
    1330:	2082b816 	blt	r4,r2,1e14 <___vfprintf_internal_r+0x1948>
    1334:	42000204 	addi	r8,r8,8
    1338:	d8802617 	ldw	r2,152(sp)
    133c:	d9403317 	ldw	r5,204(sp)
    1340:	11400216 	blt	r2,r5,134c <___vfprintf_internal_r+0xe80>
    1344:	9080004c 	andi	r2,r18,1
    1348:	103ed526 	beq	r2,zero,ea0 <__alt_data_end+0xf8000ea0>
    134c:	d8803717 	ldw	r2,220(sp)
    1350:	d9003417 	ldw	r4,208(sp)
    1354:	d9403717 	ldw	r5,220(sp)
    1358:	1887883a 	add	r3,r3,r2
    135c:	d8801f17 	ldw	r2,124(sp)
    1360:	41000015 	stw	r4,0(r8)
    1364:	41400115 	stw	r5,4(r8)
    1368:	10800044 	addi	r2,r2,1
    136c:	d8c02015 	stw	r3,128(sp)
    1370:	d8801f15 	stw	r2,124(sp)
    1374:	010001c4 	movi	r4,7
    1378:	20832916 	blt	r4,r2,2020 <___vfprintf_internal_r+0x1b54>
    137c:	42000204 	addi	r8,r8,8
    1380:	d8803317 	ldw	r2,204(sp)
    1384:	143fffc4 	addi	r16,r2,-1
    1388:	043ec50e 	bge	zero,r16,ea0 <__alt_data_end+0xf8000ea0>
    138c:	04400404 	movi	r17,16
    1390:	d8801f17 	ldw	r2,124(sp)
    1394:	8c00880e 	bge	r17,r16,15b8 <___vfprintf_internal_r+0x10ec>
    1398:	01400074 	movhi	r5,1
    139c:	297e0084 	addi	r5,r5,-2046
    13a0:	d9402b15 	stw	r5,172(sp)
    13a4:	058001c4 	movi	r22,7
    13a8:	dcc02c17 	ldw	r19,176(sp)
    13ac:	00000306 	br	13bc <___vfprintf_internal_r+0xef0>
    13b0:	42000204 	addi	r8,r8,8
    13b4:	843ffc04 	addi	r16,r16,-16
    13b8:	8c00820e 	bge	r17,r16,15c4 <___vfprintf_internal_r+0x10f8>
    13bc:	18c00404 	addi	r3,r3,16
    13c0:	10800044 	addi	r2,r2,1
    13c4:	45000015 	stw	r20,0(r8)
    13c8:	44400115 	stw	r17,4(r8)
    13cc:	d8c02015 	stw	r3,128(sp)
    13d0:	d8801f15 	stw	r2,124(sp)
    13d4:	b0bff60e 	bge	r22,r2,13b0 <__alt_data_end+0xf80013b0>
    13d8:	d9801e04 	addi	r6,sp,120
    13dc:	b80b883a 	mov	r5,r23
    13e0:	9809883a 	mov	r4,r19
    13e4:	0007ac80 	call	7ac8 <__sprint_r>
    13e8:	103d3a1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    13ec:	d8c02017 	ldw	r3,128(sp)
    13f0:	d8801f17 	ldw	r2,124(sp)
    13f4:	da000404 	addi	r8,sp,16
    13f8:	003fee06 	br	13b4 <__alt_data_end+0xf80013b4>
    13fc:	d9403117 	ldw	r5,196(sp)
    1400:	d8802a17 	ldw	r2,168(sp)
    1404:	28adc83a 	sub	r22,r5,r2
    1408:	05be630e 	bge	zero,r22,d98 <__alt_data_end+0xf8000d98>
    140c:	07000404 	movi	fp,16
    1410:	d8801f17 	ldw	r2,124(sp)
    1414:	e5838f0e 	bge	fp,r22,2254 <___vfprintf_internal_r+0x1d88>
    1418:	01400074 	movhi	r5,1
    141c:	297e0084 	addi	r5,r5,-2046
    1420:	dc403015 	stw	r17,192(sp)
    1424:	d9402b15 	stw	r5,172(sp)
    1428:	b023883a 	mov	r17,r22
    142c:	04c001c4 	movi	r19,7
    1430:	a82d883a 	mov	r22,r21
    1434:	902b883a 	mov	r21,r18
    1438:	8025883a 	mov	r18,r16
    143c:	dc002c17 	ldw	r16,176(sp)
    1440:	00000306 	br	1450 <___vfprintf_internal_r+0xf84>
    1444:	8c7ffc04 	addi	r17,r17,-16
    1448:	42000204 	addi	r8,r8,8
    144c:	e440110e 	bge	fp,r17,1494 <___vfprintf_internal_r+0xfc8>
    1450:	18c00404 	addi	r3,r3,16
    1454:	10800044 	addi	r2,r2,1
    1458:	45000015 	stw	r20,0(r8)
    145c:	47000115 	stw	fp,4(r8)
    1460:	d8c02015 	stw	r3,128(sp)
    1464:	d8801f15 	stw	r2,124(sp)
    1468:	98bff60e 	bge	r19,r2,1444 <__alt_data_end+0xf8001444>
    146c:	d9801e04 	addi	r6,sp,120
    1470:	b80b883a 	mov	r5,r23
    1474:	8009883a 	mov	r4,r16
    1478:	0007ac80 	call	7ac8 <__sprint_r>
    147c:	103d151e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1480:	8c7ffc04 	addi	r17,r17,-16
    1484:	d8c02017 	ldw	r3,128(sp)
    1488:	d8801f17 	ldw	r2,124(sp)
    148c:	da000404 	addi	r8,sp,16
    1490:	e47fef16 	blt	fp,r17,1450 <__alt_data_end+0xf8001450>
    1494:	9021883a 	mov	r16,r18
    1498:	a825883a 	mov	r18,r21
    149c:	b02b883a 	mov	r21,r22
    14a0:	882d883a 	mov	r22,r17
    14a4:	dc403017 	ldw	r17,192(sp)
    14a8:	d9002b17 	ldw	r4,172(sp)
    14ac:	1d87883a 	add	r3,r3,r22
    14b0:	10800044 	addi	r2,r2,1
    14b4:	41000015 	stw	r4,0(r8)
    14b8:	45800115 	stw	r22,4(r8)
    14bc:	d8c02015 	stw	r3,128(sp)
    14c0:	d8801f15 	stw	r2,124(sp)
    14c4:	010001c4 	movi	r4,7
    14c8:	20818e16 	blt	r4,r2,1b04 <___vfprintf_internal_r+0x1638>
    14cc:	42000204 	addi	r8,r8,8
    14d0:	003e3106 	br	d98 <__alt_data_end+0xf8000d98>
    14d4:	d9403317 	ldw	r5,204(sp)
    14d8:	00800044 	movi	r2,1
    14dc:	18c00044 	addi	r3,r3,1
    14e0:	1141530e 	bge	r2,r5,1a30 <___vfprintf_internal_r+0x1564>
    14e4:	dc401f17 	ldw	r17,124(sp)
    14e8:	00800044 	movi	r2,1
    14ec:	40800115 	stw	r2,4(r8)
    14f0:	8c400044 	addi	r17,r17,1
    14f4:	44000015 	stw	r16,0(r8)
    14f8:	d8c02015 	stw	r3,128(sp)
    14fc:	dc401f15 	stw	r17,124(sp)
    1500:	008001c4 	movi	r2,7
    1504:	14416b16 	blt	r2,r17,1ab4 <___vfprintf_internal_r+0x15e8>
    1508:	42000204 	addi	r8,r8,8
    150c:	d8803717 	ldw	r2,220(sp)
    1510:	d9003417 	ldw	r4,208(sp)
    1514:	8c400044 	addi	r17,r17,1
    1518:	10c7883a 	add	r3,r2,r3
    151c:	40800115 	stw	r2,4(r8)
    1520:	41000015 	stw	r4,0(r8)
    1524:	d8c02015 	stw	r3,128(sp)
    1528:	dc401f15 	stw	r17,124(sp)
    152c:	008001c4 	movi	r2,7
    1530:	14416916 	blt	r2,r17,1ad8 <___vfprintf_internal_r+0x160c>
    1534:	45800204 	addi	r22,r8,8
    1538:	d9003617 	ldw	r4,216(sp)
    153c:	d9403817 	ldw	r5,224(sp)
    1540:	000d883a 	mov	r6,zero
    1544:	000f883a 	mov	r7,zero
    1548:	d8c03c15 	stw	r3,240(sp)
    154c:	000b7400 	call	b740 <__eqdf2>
    1550:	d8c03c17 	ldw	r3,240(sp)
    1554:	1000bc26 	beq	r2,zero,1848 <___vfprintf_internal_r+0x137c>
    1558:	d9403317 	ldw	r5,204(sp)
    155c:	84000044 	addi	r16,r16,1
    1560:	8c400044 	addi	r17,r17,1
    1564:	28bfffc4 	addi	r2,r5,-1
    1568:	1887883a 	add	r3,r3,r2
    156c:	b0800115 	stw	r2,4(r22)
    1570:	b4000015 	stw	r16,0(r22)
    1574:	d8c02015 	stw	r3,128(sp)
    1578:	dc401f15 	stw	r17,124(sp)
    157c:	008001c4 	movi	r2,7
    1580:	14414316 	blt	r2,r17,1a90 <___vfprintf_internal_r+0x15c4>
    1584:	b5800204 	addi	r22,r22,8
    1588:	d9003a17 	ldw	r4,232(sp)
    158c:	df0022c4 	addi	fp,sp,139
    1590:	8c400044 	addi	r17,r17,1
    1594:	20c7883a 	add	r3,r4,r3
    1598:	b7000015 	stw	fp,0(r22)
    159c:	b1000115 	stw	r4,4(r22)
    15a0:	d8c02015 	stw	r3,128(sp)
    15a4:	dc401f15 	stw	r17,124(sp)
    15a8:	008001c4 	movi	r2,7
    15ac:	14400e16 	blt	r2,r17,15e8 <___vfprintf_internal_r+0x111c>
    15b0:	b2000204 	addi	r8,r22,8
    15b4:	003e3a06 	br	ea0 <__alt_data_end+0xf8000ea0>
    15b8:	01000074 	movhi	r4,1
    15bc:	213e0084 	addi	r4,r4,-2046
    15c0:	d9002b15 	stw	r4,172(sp)
    15c4:	d9002b17 	ldw	r4,172(sp)
    15c8:	1c07883a 	add	r3,r3,r16
    15cc:	44000115 	stw	r16,4(r8)
    15d0:	41000015 	stw	r4,0(r8)
    15d4:	10800044 	addi	r2,r2,1
    15d8:	d8c02015 	stw	r3,128(sp)
    15dc:	d8801f15 	stw	r2,124(sp)
    15e0:	010001c4 	movi	r4,7
    15e4:	20be2d0e 	bge	r4,r2,e9c <__alt_data_end+0xf8000e9c>
    15e8:	d9002c17 	ldw	r4,176(sp)
    15ec:	d9801e04 	addi	r6,sp,120
    15f0:	b80b883a 	mov	r5,r23
    15f4:	0007ac80 	call	7ac8 <__sprint_r>
    15f8:	103cb61e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    15fc:	d8c02017 	ldw	r3,128(sp)
    1600:	da000404 	addi	r8,sp,16
    1604:	003e2606 	br	ea0 <__alt_data_end+0xf8000ea0>
    1608:	d9002c17 	ldw	r4,176(sp)
    160c:	d9801e04 	addi	r6,sp,120
    1610:	b80b883a 	mov	r5,r23
    1614:	0007ac80 	call	7ac8 <__sprint_r>
    1618:	103e5d26 	beq	r2,zero,f90 <__alt_data_end+0xf8000f90>
    161c:	003cad06 	br	8d4 <__alt_data_end+0xf80008d4>
    1620:	d9002c17 	ldw	r4,176(sp)
    1624:	d9801e04 	addi	r6,sp,120
    1628:	b80b883a 	mov	r5,r23
    162c:	0007ac80 	call	7ac8 <__sprint_r>
    1630:	103ca81e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1634:	d8c02017 	ldw	r3,128(sp)
    1638:	da000404 	addi	r8,sp,16
    163c:	003e0b06 	br	e6c <__alt_data_end+0xf8000e6c>
    1640:	d9002c17 	ldw	r4,176(sp)
    1644:	d9801e04 	addi	r6,sp,120
    1648:	b80b883a 	mov	r5,r23
    164c:	0007ac80 	call	7ac8 <__sprint_r>
    1650:	103ca01e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1654:	d8c02017 	ldw	r3,128(sp)
    1658:	da000404 	addi	r8,sp,16
    165c:	003dbd06 	br	d54 <__alt_data_end+0xf8000d54>
    1660:	d9002c17 	ldw	r4,176(sp)
    1664:	d9801e04 	addi	r6,sp,120
    1668:	b80b883a 	mov	r5,r23
    166c:	0007ac80 	call	7ac8 <__sprint_r>
    1670:	103c981e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1674:	d8c02017 	ldw	r3,128(sp)
    1678:	da000404 	addi	r8,sp,16
    167c:	003dc306 	br	d8c <__alt_data_end+0xf8000d8c>
    1680:	d8802917 	ldw	r2,164(sp)
    1684:	d8002785 	stb	zero,158(sp)
    1688:	103f0616 	blt	r2,zero,12a4 <__alt_data_end+0xf80012a4>
    168c:	00ffdfc4 	movi	r3,-129
    1690:	9d84b03a 	or	r2,r19,r22
    1694:	90e4703a 	and	r18,r18,r3
    1698:	103c6b26 	beq	r2,zero,848 <__alt_data_end+0xf8000848>
    169c:	0039883a 	mov	fp,zero
    16a0:	003e7406 	br	1074 <__alt_data_end+0xf8001074>
    16a4:	9080040c 	andi	r2,r18,16
    16a8:	1001b326 	beq	r2,zero,1d78 <___vfprintf_internal_r+0x18ac>
    16ac:	d9002d17 	ldw	r4,180(sp)
    16b0:	d9402917 	ldw	r5,164(sp)
    16b4:	d8002785 	stb	zero,158(sp)
    16b8:	20800104 	addi	r2,r4,4
    16bc:	24c00017 	ldw	r19,0(r4)
    16c0:	002d883a 	mov	r22,zero
    16c4:	2801b516 	blt	r5,zero,1d9c <___vfprintf_internal_r+0x18d0>
    16c8:	00ffdfc4 	movi	r3,-129
    16cc:	d8802d15 	stw	r2,180(sp)
    16d0:	90e4703a 	and	r18,r18,r3
    16d4:	983d2726 	beq	r19,zero,b74 <__alt_data_end+0xf8000b74>
    16d8:	0039883a 	mov	fp,zero
    16dc:	003d2a06 	br	b88 <__alt_data_end+0xf8000b88>
    16e0:	dc402617 	ldw	r17,152(sp)
    16e4:	0441d30e 	bge	zero,r17,1e34 <___vfprintf_internal_r+0x1968>
    16e8:	dc403217 	ldw	r17,200(sp)
    16ec:	d8803317 	ldw	r2,204(sp)
    16f0:	1440010e 	bge	r2,r17,16f8 <___vfprintf_internal_r+0x122c>
    16f4:	1023883a 	mov	r17,r2
    16f8:	04400a0e 	bge	zero,r17,1724 <___vfprintf_internal_r+0x1258>
    16fc:	d8801f17 	ldw	r2,124(sp)
    1700:	1c47883a 	add	r3,r3,r17
    1704:	44000015 	stw	r16,0(r8)
    1708:	10800044 	addi	r2,r2,1
    170c:	44400115 	stw	r17,4(r8)
    1710:	d8c02015 	stw	r3,128(sp)
    1714:	d8801f15 	stw	r2,124(sp)
    1718:	010001c4 	movi	r4,7
    171c:	20826516 	blt	r4,r2,20b4 <___vfprintf_internal_r+0x1be8>
    1720:	42000204 	addi	r8,r8,8
    1724:	88026116 	blt	r17,zero,20ac <___vfprintf_internal_r+0x1be0>
    1728:	d9003217 	ldw	r4,200(sp)
    172c:	2463c83a 	sub	r17,r4,r17
    1730:	04407b0e 	bge	zero,r17,1920 <___vfprintf_internal_r+0x1454>
    1734:	05800404 	movi	r22,16
    1738:	d8801f17 	ldw	r2,124(sp)
    173c:	b4419d0e 	bge	r22,r17,1db4 <___vfprintf_internal_r+0x18e8>
    1740:	01000074 	movhi	r4,1
    1744:	213e0084 	addi	r4,r4,-2046
    1748:	d9002b15 	stw	r4,172(sp)
    174c:	070001c4 	movi	fp,7
    1750:	dcc02c17 	ldw	r19,176(sp)
    1754:	00000306 	br	1764 <___vfprintf_internal_r+0x1298>
    1758:	42000204 	addi	r8,r8,8
    175c:	8c7ffc04 	addi	r17,r17,-16
    1760:	b441970e 	bge	r22,r17,1dc0 <___vfprintf_internal_r+0x18f4>
    1764:	18c00404 	addi	r3,r3,16
    1768:	10800044 	addi	r2,r2,1
    176c:	45000015 	stw	r20,0(r8)
    1770:	45800115 	stw	r22,4(r8)
    1774:	d8c02015 	stw	r3,128(sp)
    1778:	d8801f15 	stw	r2,124(sp)
    177c:	e0bff60e 	bge	fp,r2,1758 <__alt_data_end+0xf8001758>
    1780:	d9801e04 	addi	r6,sp,120
    1784:	b80b883a 	mov	r5,r23
    1788:	9809883a 	mov	r4,r19
    178c:	0007ac80 	call	7ac8 <__sprint_r>
    1790:	103c501e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1794:	d8c02017 	ldw	r3,128(sp)
    1798:	d8801f17 	ldw	r2,124(sp)
    179c:	da000404 	addi	r8,sp,16
    17a0:	003fee06 	br	175c <__alt_data_end+0xf800175c>
    17a4:	d9002c17 	ldw	r4,176(sp)
    17a8:	d9801e04 	addi	r6,sp,120
    17ac:	b80b883a 	mov	r5,r23
    17b0:	0007ac80 	call	7ac8 <__sprint_r>
    17b4:	103c471e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    17b8:	d8c02017 	ldw	r3,128(sp)
    17bc:	df002787 	ldb	fp,158(sp)
    17c0:	da000404 	addi	r8,sp,16
    17c4:	003d5606 	br	d20 <__alt_data_end+0xf8000d20>
    17c8:	9080040c 	andi	r2,r18,16
    17cc:	10016126 	beq	r2,zero,1d54 <___vfprintf_internal_r+0x1888>
    17d0:	d8802d17 	ldw	r2,180(sp)
    17d4:	14c00017 	ldw	r19,0(r2)
    17d8:	10800104 	addi	r2,r2,4
    17dc:	d8802d15 	stw	r2,180(sp)
    17e0:	982dd7fa 	srai	r22,r19,31
    17e4:	b005883a 	mov	r2,r22
    17e8:	003c8206 	br	9f4 <__alt_data_end+0xf80009f4>
    17ec:	9080040c 	andi	r2,r18,16
    17f0:	10003526 	beq	r2,zero,18c8 <___vfprintf_internal_r+0x13fc>
    17f4:	d9402d17 	ldw	r5,180(sp)
    17f8:	d8c02917 	ldw	r3,164(sp)
    17fc:	d8002785 	stb	zero,158(sp)
    1800:	28800104 	addi	r2,r5,4
    1804:	2cc00017 	ldw	r19,0(r5)
    1808:	002d883a 	mov	r22,zero
    180c:	18003716 	blt	r3,zero,18ec <___vfprintf_internal_r+0x1420>
    1810:	00ffdfc4 	movi	r3,-129
    1814:	d8802d15 	stw	r2,180(sp)
    1818:	90e4703a 	and	r18,r18,r3
    181c:	0039883a 	mov	fp,zero
    1820:	983df326 	beq	r19,zero,ff0 <__alt_data_end+0xf8000ff0>
    1824:	00800244 	movi	r2,9
    1828:	14fc7b36 	bltu	r2,r19,a18 <__alt_data_end+0xf8000a18>
    182c:	d8c02817 	ldw	r3,160(sp)
    1830:	dc001dc4 	addi	r16,sp,119
    1834:	9cc00c04 	addi	r19,r19,48
    1838:	1c07c83a 	sub	r3,r3,r16
    183c:	dcc01dc5 	stb	r19,119(sp)
    1840:	d8c02e15 	stw	r3,184(sp)
    1844:	003ce806 	br	be8 <__alt_data_end+0xf8000be8>
    1848:	d8803317 	ldw	r2,204(sp)
    184c:	143fffc4 	addi	r16,r2,-1
    1850:	043f4d0e 	bge	zero,r16,1588 <__alt_data_end+0xf8001588>
    1854:	07000404 	movi	fp,16
    1858:	e400810e 	bge	fp,r16,1a60 <___vfprintf_internal_r+0x1594>
    185c:	01400074 	movhi	r5,1
    1860:	297e0084 	addi	r5,r5,-2046
    1864:	d9402b15 	stw	r5,172(sp)
    1868:	01c001c4 	movi	r7,7
    186c:	dcc02c17 	ldw	r19,176(sp)
    1870:	00000306 	br	1880 <___vfprintf_internal_r+0x13b4>
    1874:	b5800204 	addi	r22,r22,8
    1878:	843ffc04 	addi	r16,r16,-16
    187c:	e4007b0e 	bge	fp,r16,1a6c <___vfprintf_internal_r+0x15a0>
    1880:	18c00404 	addi	r3,r3,16
    1884:	8c400044 	addi	r17,r17,1
    1888:	b5000015 	stw	r20,0(r22)
    188c:	b7000115 	stw	fp,4(r22)
    1890:	d8c02015 	stw	r3,128(sp)
    1894:	dc401f15 	stw	r17,124(sp)
    1898:	3c7ff60e 	bge	r7,r17,1874 <__alt_data_end+0xf8001874>
    189c:	d9801e04 	addi	r6,sp,120
    18a0:	b80b883a 	mov	r5,r23
    18a4:	9809883a 	mov	r4,r19
    18a8:	d9c03c15 	stw	r7,240(sp)
    18ac:	0007ac80 	call	7ac8 <__sprint_r>
    18b0:	d9c03c17 	ldw	r7,240(sp)
    18b4:	103c071e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    18b8:	d8c02017 	ldw	r3,128(sp)
    18bc:	dc401f17 	ldw	r17,124(sp)
    18c0:	dd800404 	addi	r22,sp,16
    18c4:	003fec06 	br	1878 <__alt_data_end+0xf8001878>
    18c8:	9080100c 	andi	r2,r18,64
    18cc:	d8002785 	stb	zero,158(sp)
    18d0:	10010e26 	beq	r2,zero,1d0c <___vfprintf_internal_r+0x1840>
    18d4:	d9002d17 	ldw	r4,180(sp)
    18d8:	d9402917 	ldw	r5,164(sp)
    18dc:	002d883a 	mov	r22,zero
    18e0:	20800104 	addi	r2,r4,4
    18e4:	24c0000b 	ldhu	r19,0(r4)
    18e8:	283fc90e 	bge	r5,zero,1810 <__alt_data_end+0xf8001810>
    18ec:	d8802d15 	stw	r2,180(sp)
    18f0:	0039883a 	mov	fp,zero
    18f4:	9d84b03a 	or	r2,r19,r22
    18f8:	103c461e 	bne	r2,zero,a14 <__alt_data_end+0xf8000a14>
    18fc:	00800044 	movi	r2,1
    1900:	003e6c06 	br	12b4 <__alt_data_end+0xf80012b4>
    1904:	d9002c17 	ldw	r4,176(sp)
    1908:	d9801e04 	addi	r6,sp,120
    190c:	b80b883a 	mov	r5,r23
    1910:	0007ac80 	call	7ac8 <__sprint_r>
    1914:	103bef1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1918:	d8c02017 	ldw	r3,128(sp)
    191c:	da000404 	addi	r8,sp,16
    1920:	d9003217 	ldw	r4,200(sp)
    1924:	d8802617 	ldw	r2,152(sp)
    1928:	d9403317 	ldw	r5,204(sp)
    192c:	8123883a 	add	r17,r16,r4
    1930:	11400216 	blt	r2,r5,193c <___vfprintf_internal_r+0x1470>
    1934:	9100004c 	andi	r4,r18,1
    1938:	20000d26 	beq	r4,zero,1970 <___vfprintf_internal_r+0x14a4>
    193c:	d9003717 	ldw	r4,220(sp)
    1940:	d9403417 	ldw	r5,208(sp)
    1944:	1907883a 	add	r3,r3,r4
    1948:	d9001f17 	ldw	r4,124(sp)
    194c:	41400015 	stw	r5,0(r8)
    1950:	d9403717 	ldw	r5,220(sp)
    1954:	21000044 	addi	r4,r4,1
    1958:	d8c02015 	stw	r3,128(sp)
    195c:	41400115 	stw	r5,4(r8)
    1960:	d9001f15 	stw	r4,124(sp)
    1964:	014001c4 	movi	r5,7
    1968:	2901e816 	blt	r5,r4,210c <___vfprintf_internal_r+0x1c40>
    196c:	42000204 	addi	r8,r8,8
    1970:	d9003317 	ldw	r4,204(sp)
    1974:	8121883a 	add	r16,r16,r4
    1978:	2085c83a 	sub	r2,r4,r2
    197c:	8461c83a 	sub	r16,r16,r17
    1980:	1400010e 	bge	r2,r16,1988 <___vfprintf_internal_r+0x14bc>
    1984:	1021883a 	mov	r16,r2
    1988:	04000a0e 	bge	zero,r16,19b4 <___vfprintf_internal_r+0x14e8>
    198c:	d9001f17 	ldw	r4,124(sp)
    1990:	1c07883a 	add	r3,r3,r16
    1994:	44400015 	stw	r17,0(r8)
    1998:	21000044 	addi	r4,r4,1
    199c:	44000115 	stw	r16,4(r8)
    19a0:	d8c02015 	stw	r3,128(sp)
    19a4:	d9001f15 	stw	r4,124(sp)
    19a8:	014001c4 	movi	r5,7
    19ac:	2901fb16 	blt	r5,r4,219c <___vfprintf_internal_r+0x1cd0>
    19b0:	42000204 	addi	r8,r8,8
    19b4:	8001f716 	blt	r16,zero,2194 <___vfprintf_internal_r+0x1cc8>
    19b8:	1421c83a 	sub	r16,r2,r16
    19bc:	043d380e 	bge	zero,r16,ea0 <__alt_data_end+0xf8000ea0>
    19c0:	04400404 	movi	r17,16
    19c4:	d8801f17 	ldw	r2,124(sp)
    19c8:	8c3efb0e 	bge	r17,r16,15b8 <__alt_data_end+0xf80015b8>
    19cc:	01400074 	movhi	r5,1
    19d0:	297e0084 	addi	r5,r5,-2046
    19d4:	d9402b15 	stw	r5,172(sp)
    19d8:	058001c4 	movi	r22,7
    19dc:	dcc02c17 	ldw	r19,176(sp)
    19e0:	00000306 	br	19f0 <___vfprintf_internal_r+0x1524>
    19e4:	42000204 	addi	r8,r8,8
    19e8:	843ffc04 	addi	r16,r16,-16
    19ec:	8c3ef50e 	bge	r17,r16,15c4 <__alt_data_end+0xf80015c4>
    19f0:	18c00404 	addi	r3,r3,16
    19f4:	10800044 	addi	r2,r2,1
    19f8:	45000015 	stw	r20,0(r8)
    19fc:	44400115 	stw	r17,4(r8)
    1a00:	d8c02015 	stw	r3,128(sp)
    1a04:	d8801f15 	stw	r2,124(sp)
    1a08:	b0bff60e 	bge	r22,r2,19e4 <__alt_data_end+0xf80019e4>
    1a0c:	d9801e04 	addi	r6,sp,120
    1a10:	b80b883a 	mov	r5,r23
    1a14:	9809883a 	mov	r4,r19
    1a18:	0007ac80 	call	7ac8 <__sprint_r>
    1a1c:	103bad1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1a20:	d8c02017 	ldw	r3,128(sp)
    1a24:	d8801f17 	ldw	r2,124(sp)
    1a28:	da000404 	addi	r8,sp,16
    1a2c:	003fee06 	br	19e8 <__alt_data_end+0xf80019e8>
    1a30:	9088703a 	and	r4,r18,r2
    1a34:	203eab1e 	bne	r4,zero,14e4 <__alt_data_end+0xf80014e4>
    1a38:	dc401f17 	ldw	r17,124(sp)
    1a3c:	40800115 	stw	r2,4(r8)
    1a40:	44000015 	stw	r16,0(r8)
    1a44:	8c400044 	addi	r17,r17,1
    1a48:	d8c02015 	stw	r3,128(sp)
    1a4c:	dc401f15 	stw	r17,124(sp)
    1a50:	008001c4 	movi	r2,7
    1a54:	14400e16 	blt	r2,r17,1a90 <___vfprintf_internal_r+0x15c4>
    1a58:	45800204 	addi	r22,r8,8
    1a5c:	003eca06 	br	1588 <__alt_data_end+0xf8001588>
    1a60:	01000074 	movhi	r4,1
    1a64:	213e0084 	addi	r4,r4,-2046
    1a68:	d9002b15 	stw	r4,172(sp)
    1a6c:	d8802b17 	ldw	r2,172(sp)
    1a70:	1c07883a 	add	r3,r3,r16
    1a74:	8c400044 	addi	r17,r17,1
    1a78:	b0800015 	stw	r2,0(r22)
    1a7c:	b4000115 	stw	r16,4(r22)
    1a80:	d8c02015 	stw	r3,128(sp)
    1a84:	dc401f15 	stw	r17,124(sp)
    1a88:	008001c4 	movi	r2,7
    1a8c:	147ebd0e 	bge	r2,r17,1584 <__alt_data_end+0xf8001584>
    1a90:	d9002c17 	ldw	r4,176(sp)
    1a94:	d9801e04 	addi	r6,sp,120
    1a98:	b80b883a 	mov	r5,r23
    1a9c:	0007ac80 	call	7ac8 <__sprint_r>
    1aa0:	103b8c1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1aa4:	d8c02017 	ldw	r3,128(sp)
    1aa8:	dc401f17 	ldw	r17,124(sp)
    1aac:	dd800404 	addi	r22,sp,16
    1ab0:	003eb506 	br	1588 <__alt_data_end+0xf8001588>
    1ab4:	d9002c17 	ldw	r4,176(sp)
    1ab8:	d9801e04 	addi	r6,sp,120
    1abc:	b80b883a 	mov	r5,r23
    1ac0:	0007ac80 	call	7ac8 <__sprint_r>
    1ac4:	103b831e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1ac8:	d8c02017 	ldw	r3,128(sp)
    1acc:	dc401f17 	ldw	r17,124(sp)
    1ad0:	da000404 	addi	r8,sp,16
    1ad4:	003e8d06 	br	150c <__alt_data_end+0xf800150c>
    1ad8:	d9002c17 	ldw	r4,176(sp)
    1adc:	d9801e04 	addi	r6,sp,120
    1ae0:	b80b883a 	mov	r5,r23
    1ae4:	0007ac80 	call	7ac8 <__sprint_r>
    1ae8:	103b7a1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1aec:	d8c02017 	ldw	r3,128(sp)
    1af0:	dc401f17 	ldw	r17,124(sp)
    1af4:	dd800404 	addi	r22,sp,16
    1af8:	003e8f06 	br	1538 <__alt_data_end+0xf8001538>
    1afc:	0027883a 	mov	r19,zero
    1b00:	003f4a06 	br	182c <__alt_data_end+0xf800182c>
    1b04:	d9002c17 	ldw	r4,176(sp)
    1b08:	d9801e04 	addi	r6,sp,120
    1b0c:	b80b883a 	mov	r5,r23
    1b10:	0007ac80 	call	7ac8 <__sprint_r>
    1b14:	103b6f1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1b18:	d8c02017 	ldw	r3,128(sp)
    1b1c:	da000404 	addi	r8,sp,16
    1b20:	003c9d06 	br	d98 <__alt_data_end+0xf8000d98>
    1b24:	04e7c83a 	sub	r19,zero,r19
    1b28:	9804c03a 	cmpne	r2,r19,zero
    1b2c:	05adc83a 	sub	r22,zero,r22
    1b30:	b0adc83a 	sub	r22,r22,r2
    1b34:	d8802917 	ldw	r2,164(sp)
    1b38:	07000b44 	movi	fp,45
    1b3c:	df002785 	stb	fp,158(sp)
    1b40:	10017b16 	blt	r2,zero,2130 <___vfprintf_internal_r+0x1c64>
    1b44:	00bfdfc4 	movi	r2,-129
    1b48:	90a4703a 	and	r18,r18,r2
    1b4c:	003bb106 	br	a14 <__alt_data_end+0xf8000a14>
    1b50:	d9003617 	ldw	r4,216(sp)
    1b54:	d9403817 	ldw	r5,224(sp)
    1b58:	da003d15 	stw	r8,244(sp)
    1b5c:	00076ec0 	call	76ec <__fpclassifyd>
    1b60:	da003d17 	ldw	r8,244(sp)
    1b64:	1000f026 	beq	r2,zero,1f28 <___vfprintf_internal_r+0x1a5c>
    1b68:	d9002917 	ldw	r4,164(sp)
    1b6c:	05bff7c4 	movi	r22,-33
    1b70:	00bfffc4 	movi	r2,-1
    1b74:	8dac703a 	and	r22,r17,r22
    1b78:	20820026 	beq	r4,r2,237c <___vfprintf_internal_r+0x1eb0>
    1b7c:	008011c4 	movi	r2,71
    1b80:	b081f726 	beq	r22,r2,2360 <___vfprintf_internal_r+0x1e94>
    1b84:	d9003817 	ldw	r4,224(sp)
    1b88:	90c04014 	ori	r3,r18,256
    1b8c:	d8c02b15 	stw	r3,172(sp)
    1b90:	20021516 	blt	r4,zero,23e8 <___vfprintf_internal_r+0x1f1c>
    1b94:	dcc03817 	ldw	r19,224(sp)
    1b98:	d8002a05 	stb	zero,168(sp)
    1b9c:	00801984 	movi	r2,102
    1ba0:	8881f926 	beq	r17,r2,2388 <___vfprintf_internal_r+0x1ebc>
    1ba4:	00801184 	movi	r2,70
    1ba8:	88821c26 	beq	r17,r2,241c <___vfprintf_internal_r+0x1f50>
    1bac:	00801144 	movi	r2,69
    1bb0:	b081ef26 	beq	r22,r2,2370 <___vfprintf_internal_r+0x1ea4>
    1bb4:	d8c02917 	ldw	r3,164(sp)
    1bb8:	d8802104 	addi	r2,sp,132
    1bbc:	d8800315 	stw	r2,12(sp)
    1bc0:	d9403617 	ldw	r5,216(sp)
    1bc4:	d8802504 	addi	r2,sp,148
    1bc8:	d9002c17 	ldw	r4,176(sp)
    1bcc:	d8800215 	stw	r2,8(sp)
    1bd0:	d8802604 	addi	r2,sp,152
    1bd4:	d8c00015 	stw	r3,0(sp)
    1bd8:	d8800115 	stw	r2,4(sp)
    1bdc:	01c00084 	movi	r7,2
    1be0:	980d883a 	mov	r6,r19
    1be4:	d8c03c15 	stw	r3,240(sp)
    1be8:	da003d15 	stw	r8,244(sp)
    1bec:	0002af00 	call	2af0 <_dtoa_r>
    1bf0:	1021883a 	mov	r16,r2
    1bf4:	008019c4 	movi	r2,103
    1bf8:	d8c03c17 	ldw	r3,240(sp)
    1bfc:	da003d17 	ldw	r8,244(sp)
    1c00:	88817126 	beq	r17,r2,21c8 <___vfprintf_internal_r+0x1cfc>
    1c04:	008011c4 	movi	r2,71
    1c08:	88829226 	beq	r17,r2,2654 <___vfprintf_internal_r+0x2188>
    1c0c:	80f9883a 	add	fp,r16,r3
    1c10:	d9003617 	ldw	r4,216(sp)
    1c14:	000d883a 	mov	r6,zero
    1c18:	000f883a 	mov	r7,zero
    1c1c:	980b883a 	mov	r5,r19
    1c20:	da003d15 	stw	r8,244(sp)
    1c24:	000b7400 	call	b740 <__eqdf2>
    1c28:	da003d17 	ldw	r8,244(sp)
    1c2c:	10018d26 	beq	r2,zero,2264 <___vfprintf_internal_r+0x1d98>
    1c30:	d8802117 	ldw	r2,132(sp)
    1c34:	1700062e 	bgeu	r2,fp,1c50 <___vfprintf_internal_r+0x1784>
    1c38:	01000c04 	movi	r4,48
    1c3c:	10c00044 	addi	r3,r2,1
    1c40:	d8c02115 	stw	r3,132(sp)
    1c44:	11000005 	stb	r4,0(r2)
    1c48:	d8802117 	ldw	r2,132(sp)
    1c4c:	173ffb36 	bltu	r2,fp,1c3c <__alt_data_end+0xf8001c3c>
    1c50:	1405c83a 	sub	r2,r2,r16
    1c54:	d8803315 	stw	r2,204(sp)
    1c58:	008011c4 	movi	r2,71
    1c5c:	b0817626 	beq	r22,r2,2238 <___vfprintf_internal_r+0x1d6c>
    1c60:	00801944 	movi	r2,101
    1c64:	1442810e 	bge	r2,r17,266c <___vfprintf_internal_r+0x21a0>
    1c68:	d8c02617 	ldw	r3,152(sp)
    1c6c:	00801984 	movi	r2,102
    1c70:	d8c03215 	stw	r3,200(sp)
    1c74:	8881fe26 	beq	r17,r2,2470 <___vfprintf_internal_r+0x1fa4>
    1c78:	d8c03217 	ldw	r3,200(sp)
    1c7c:	d9003317 	ldw	r4,204(sp)
    1c80:	1901dd16 	blt	r3,r4,23f8 <___vfprintf_internal_r+0x1f2c>
    1c84:	9480004c 	andi	r18,r18,1
    1c88:	90022b1e 	bne	r18,zero,2538 <___vfprintf_internal_r+0x206c>
    1c8c:	1805883a 	mov	r2,r3
    1c90:	18028016 	blt	r3,zero,2694 <___vfprintf_internal_r+0x21c8>
    1c94:	d8c03217 	ldw	r3,200(sp)
    1c98:	044019c4 	movi	r17,103
    1c9c:	d8c02e15 	stw	r3,184(sp)
    1ca0:	df002a07 	ldb	fp,168(sp)
    1ca4:	e001531e 	bne	fp,zero,21f4 <___vfprintf_internal_r+0x1d28>
    1ca8:	df002783 	ldbu	fp,158(sp)
    1cac:	d8802a15 	stw	r2,168(sp)
    1cb0:	dc802b17 	ldw	r18,172(sp)
    1cb4:	d8002915 	stw	zero,164(sp)
    1cb8:	003bd106 	br	c00 <__alt_data_end+0xf8000c00>
    1cbc:	d8802d17 	ldw	r2,180(sp)
    1cc0:	d8c02d17 	ldw	r3,180(sp)
    1cc4:	d9002d17 	ldw	r4,180(sp)
    1cc8:	10800017 	ldw	r2,0(r2)
    1ccc:	18c00117 	ldw	r3,4(r3)
    1cd0:	21000204 	addi	r4,r4,8
    1cd4:	d8803615 	stw	r2,216(sp)
    1cd8:	d8c03815 	stw	r3,224(sp)
    1cdc:	d9002d15 	stw	r4,180(sp)
    1ce0:	003b7506 	br	ab8 <__alt_data_end+0xf8000ab8>
    1ce4:	ac400007 	ldb	r17,0(r21)
    1ce8:	003a5906 	br	650 <__alt_data_end+0xf8000650>
    1cec:	9080100c 	andi	r2,r18,64
    1cf0:	1000a826 	beq	r2,zero,1f94 <___vfprintf_internal_r+0x1ac8>
    1cf4:	d9002d17 	ldw	r4,180(sp)
    1cf8:	002d883a 	mov	r22,zero
    1cfc:	24c0000b 	ldhu	r19,0(r4)
    1d00:	21000104 	addi	r4,r4,4
    1d04:	d9002d15 	stw	r4,180(sp)
    1d08:	003ccb06 	br	1038 <__alt_data_end+0xf8001038>
    1d0c:	d8c02d17 	ldw	r3,180(sp)
    1d10:	d9002917 	ldw	r4,164(sp)
    1d14:	002d883a 	mov	r22,zero
    1d18:	18800104 	addi	r2,r3,4
    1d1c:	1cc00017 	ldw	r19,0(r3)
    1d20:	203ebb0e 	bge	r4,zero,1810 <__alt_data_end+0xf8001810>
    1d24:	003ef106 	br	18ec <__alt_data_end+0xf80018ec>
    1d28:	9080040c 	andi	r2,r18,16
    1d2c:	1000921e 	bne	r2,zero,1f78 <___vfprintf_internal_r+0x1aac>
    1d30:	9480100c 	andi	r18,r18,64
    1d34:	90013926 	beq	r18,zero,221c <___vfprintf_internal_r+0x1d50>
    1d38:	d9002d17 	ldw	r4,180(sp)
    1d3c:	d9402f17 	ldw	r5,188(sp)
    1d40:	20800017 	ldw	r2,0(r4)
    1d44:	21000104 	addi	r4,r4,4
    1d48:	d9002d15 	stw	r4,180(sp)
    1d4c:	1140000d 	sth	r5,0(r2)
    1d50:	003a1606 	br	5ac <__alt_data_end+0xf80005ac>
    1d54:	9080100c 	andi	r2,r18,64
    1d58:	10008026 	beq	r2,zero,1f5c <___vfprintf_internal_r+0x1a90>
    1d5c:	d8c02d17 	ldw	r3,180(sp)
    1d60:	1cc0000f 	ldh	r19,0(r3)
    1d64:	18c00104 	addi	r3,r3,4
    1d68:	d8c02d15 	stw	r3,180(sp)
    1d6c:	982dd7fa 	srai	r22,r19,31
    1d70:	b005883a 	mov	r2,r22
    1d74:	003b1f06 	br	9f4 <__alt_data_end+0xf80009f4>
    1d78:	9080100c 	andi	r2,r18,64
    1d7c:	d8002785 	stb	zero,158(sp)
    1d80:	10008a1e 	bne	r2,zero,1fac <___vfprintf_internal_r+0x1ae0>
    1d84:	d9402d17 	ldw	r5,180(sp)
    1d88:	d8c02917 	ldw	r3,164(sp)
    1d8c:	002d883a 	mov	r22,zero
    1d90:	28800104 	addi	r2,r5,4
    1d94:	2cc00017 	ldw	r19,0(r5)
    1d98:	183e4b0e 	bge	r3,zero,16c8 <__alt_data_end+0xf80016c8>
    1d9c:	9d86b03a 	or	r3,r19,r22
    1da0:	d8802d15 	stw	r2,180(sp)
    1da4:	183e4c1e 	bne	r3,zero,16d8 <__alt_data_end+0xf80016d8>
    1da8:	0039883a 	mov	fp,zero
    1dac:	0005883a 	mov	r2,zero
    1db0:	003d4006 	br	12b4 <__alt_data_end+0xf80012b4>
    1db4:	01400074 	movhi	r5,1
    1db8:	297e0084 	addi	r5,r5,-2046
    1dbc:	d9402b15 	stw	r5,172(sp)
    1dc0:	d9402b17 	ldw	r5,172(sp)
    1dc4:	1c47883a 	add	r3,r3,r17
    1dc8:	10800044 	addi	r2,r2,1
    1dcc:	41400015 	stw	r5,0(r8)
    1dd0:	44400115 	stw	r17,4(r8)
    1dd4:	d8c02015 	stw	r3,128(sp)
    1dd8:	d8801f15 	stw	r2,124(sp)
    1ddc:	010001c4 	movi	r4,7
    1de0:	20bec816 	blt	r4,r2,1904 <__alt_data_end+0xf8001904>
    1de4:	42000204 	addi	r8,r8,8
    1de8:	003ecd06 	br	1920 <__alt_data_end+0xf8001920>
    1dec:	d9002917 	ldw	r4,164(sp)
    1df0:	d8002785 	stb	zero,158(sp)
    1df4:	203d2d16 	blt	r4,zero,12ac <__alt_data_end+0xf80012ac>
    1df8:	00bfdfc4 	movi	r2,-129
    1dfc:	90a4703a 	and	r18,r18,r2
    1e00:	003a9106 	br	848 <__alt_data_end+0xf8000848>
    1e04:	01000074 	movhi	r4,1
    1e08:	213e0084 	addi	r4,r4,-2046
    1e0c:	d9002b15 	stw	r4,172(sp)
    1e10:	003c0c06 	br	e44 <__alt_data_end+0xf8000e44>
    1e14:	d9002c17 	ldw	r4,176(sp)
    1e18:	d9801e04 	addi	r6,sp,120
    1e1c:	b80b883a 	mov	r5,r23
    1e20:	0007ac80 	call	7ac8 <__sprint_r>
    1e24:	103aab1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1e28:	d8c02017 	ldw	r3,128(sp)
    1e2c:	da000404 	addi	r8,sp,16
    1e30:	003d4106 	br	1338 <__alt_data_end+0xf8001338>
    1e34:	d8801f17 	ldw	r2,124(sp)
    1e38:	01400074 	movhi	r5,1
    1e3c:	01000044 	movi	r4,1
    1e40:	18c00044 	addi	r3,r3,1
    1e44:	10800044 	addi	r2,r2,1
    1e48:	297e0004 	addi	r5,r5,-2048
    1e4c:	41000115 	stw	r4,4(r8)
    1e50:	41400015 	stw	r5,0(r8)
    1e54:	d8c02015 	stw	r3,128(sp)
    1e58:	d8801f15 	stw	r2,124(sp)
    1e5c:	010001c4 	movi	r4,7
    1e60:	20805c16 	blt	r4,r2,1fd4 <___vfprintf_internal_r+0x1b08>
    1e64:	42000204 	addi	r8,r8,8
    1e68:	8800041e 	bne	r17,zero,1e7c <___vfprintf_internal_r+0x19b0>
    1e6c:	d8803317 	ldw	r2,204(sp)
    1e70:	1000021e 	bne	r2,zero,1e7c <___vfprintf_internal_r+0x19b0>
    1e74:	9080004c 	andi	r2,r18,1
    1e78:	103c0926 	beq	r2,zero,ea0 <__alt_data_end+0xf8000ea0>
    1e7c:	d9003717 	ldw	r4,220(sp)
    1e80:	d8801f17 	ldw	r2,124(sp)
    1e84:	d9403417 	ldw	r5,208(sp)
    1e88:	20c7883a 	add	r3,r4,r3
    1e8c:	10800044 	addi	r2,r2,1
    1e90:	41000115 	stw	r4,4(r8)
    1e94:	41400015 	stw	r5,0(r8)
    1e98:	d8c02015 	stw	r3,128(sp)
    1e9c:	d8801f15 	stw	r2,124(sp)
    1ea0:	010001c4 	movi	r4,7
    1ea4:	20812116 	blt	r4,r2,232c <___vfprintf_internal_r+0x1e60>
    1ea8:	42000204 	addi	r8,r8,8
    1eac:	0463c83a 	sub	r17,zero,r17
    1eb0:	0440730e 	bge	zero,r17,2080 <___vfprintf_internal_r+0x1bb4>
    1eb4:	05800404 	movi	r22,16
    1eb8:	b440860e 	bge	r22,r17,20d4 <___vfprintf_internal_r+0x1c08>
    1ebc:	01400074 	movhi	r5,1
    1ec0:	297e0084 	addi	r5,r5,-2046
    1ec4:	d9402b15 	stw	r5,172(sp)
    1ec8:	070001c4 	movi	fp,7
    1ecc:	dcc02c17 	ldw	r19,176(sp)
    1ed0:	00000306 	br	1ee0 <___vfprintf_internal_r+0x1a14>
    1ed4:	42000204 	addi	r8,r8,8
    1ed8:	8c7ffc04 	addi	r17,r17,-16
    1edc:	b440800e 	bge	r22,r17,20e0 <___vfprintf_internal_r+0x1c14>
    1ee0:	18c00404 	addi	r3,r3,16
    1ee4:	10800044 	addi	r2,r2,1
    1ee8:	45000015 	stw	r20,0(r8)
    1eec:	45800115 	stw	r22,4(r8)
    1ef0:	d8c02015 	stw	r3,128(sp)
    1ef4:	d8801f15 	stw	r2,124(sp)
    1ef8:	e0bff60e 	bge	fp,r2,1ed4 <__alt_data_end+0xf8001ed4>
    1efc:	d9801e04 	addi	r6,sp,120
    1f00:	b80b883a 	mov	r5,r23
    1f04:	9809883a 	mov	r4,r19
    1f08:	0007ac80 	call	7ac8 <__sprint_r>
    1f0c:	103a711e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1f10:	d8c02017 	ldw	r3,128(sp)
    1f14:	d8801f17 	ldw	r2,124(sp)
    1f18:	da000404 	addi	r8,sp,16
    1f1c:	003fee06 	br	1ed8 <__alt_data_end+0xf8001ed8>
    1f20:	00bfffc4 	movi	r2,-1
    1f24:	003a6f06 	br	8e4 <__alt_data_end+0xf80008e4>
    1f28:	008011c4 	movi	r2,71
    1f2c:	1440b816 	blt	r2,r17,2210 <___vfprintf_internal_r+0x1d44>
    1f30:	04000074 	movhi	r16,1
    1f34:	843df204 	addi	r16,r16,-2104
    1f38:	00c000c4 	movi	r3,3
    1f3c:	00bfdfc4 	movi	r2,-129
    1f40:	d8c02a15 	stw	r3,168(sp)
    1f44:	90a4703a 	and	r18,r18,r2
    1f48:	df002783 	ldbu	fp,158(sp)
    1f4c:	d8c02e15 	stw	r3,184(sp)
    1f50:	d8002915 	stw	zero,164(sp)
    1f54:	d8003215 	stw	zero,200(sp)
    1f58:	003b2906 	br	c00 <__alt_data_end+0xf8000c00>
    1f5c:	d9002d17 	ldw	r4,180(sp)
    1f60:	24c00017 	ldw	r19,0(r4)
    1f64:	21000104 	addi	r4,r4,4
    1f68:	d9002d15 	stw	r4,180(sp)
    1f6c:	982dd7fa 	srai	r22,r19,31
    1f70:	b005883a 	mov	r2,r22
    1f74:	003a9f06 	br	9f4 <__alt_data_end+0xf80009f4>
    1f78:	d9402d17 	ldw	r5,180(sp)
    1f7c:	d8c02f17 	ldw	r3,188(sp)
    1f80:	28800017 	ldw	r2,0(r5)
    1f84:	29400104 	addi	r5,r5,4
    1f88:	d9402d15 	stw	r5,180(sp)
    1f8c:	10c00015 	stw	r3,0(r2)
    1f90:	00398606 	br	5ac <__alt_data_end+0xf80005ac>
    1f94:	d9402d17 	ldw	r5,180(sp)
    1f98:	002d883a 	mov	r22,zero
    1f9c:	2cc00017 	ldw	r19,0(r5)
    1fa0:	29400104 	addi	r5,r5,4
    1fa4:	d9402d15 	stw	r5,180(sp)
    1fa8:	003c2306 	br	1038 <__alt_data_end+0xf8001038>
    1fac:	d8c02d17 	ldw	r3,180(sp)
    1fb0:	d9002917 	ldw	r4,164(sp)
    1fb4:	002d883a 	mov	r22,zero
    1fb8:	18800104 	addi	r2,r3,4
    1fbc:	1cc0000b 	ldhu	r19,0(r3)
    1fc0:	203dc10e 	bge	r4,zero,16c8 <__alt_data_end+0xf80016c8>
    1fc4:	003f7506 	br	1d9c <__alt_data_end+0xf8001d9c>
    1fc8:	04000074 	movhi	r16,1
    1fcc:	843df004 	addi	r16,r16,-2112
    1fd0:	003acc06 	br	b04 <__alt_data_end+0xf8000b04>
    1fd4:	d9002c17 	ldw	r4,176(sp)
    1fd8:	d9801e04 	addi	r6,sp,120
    1fdc:	b80b883a 	mov	r5,r23
    1fe0:	0007ac80 	call	7ac8 <__sprint_r>
    1fe4:	103a3b1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    1fe8:	dc402617 	ldw	r17,152(sp)
    1fec:	d8c02017 	ldw	r3,128(sp)
    1ff0:	da000404 	addi	r8,sp,16
    1ff4:	003f9c06 	br	1e68 <__alt_data_end+0xf8001e68>
    1ff8:	ac400043 	ldbu	r17,1(r21)
    1ffc:	94800814 	ori	r18,r18,32
    2000:	ad400044 	addi	r21,r21,1
    2004:	8c403fcc 	andi	r17,r17,255
    2008:	8c40201c 	xori	r17,r17,128
    200c:	8c7fe004 	addi	r17,r17,-128
    2010:	00398f06 	br	650 <__alt_data_end+0xf8000650>
    2014:	d8c02d15 	stw	r3,180(sp)
    2018:	0039883a 	mov	fp,zero
    201c:	003e3506 	br	18f4 <__alt_data_end+0xf80018f4>
    2020:	d9002c17 	ldw	r4,176(sp)
    2024:	d9801e04 	addi	r6,sp,120
    2028:	b80b883a 	mov	r5,r23
    202c:	0007ac80 	call	7ac8 <__sprint_r>
    2030:	103a281e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    2034:	d8c02017 	ldw	r3,128(sp)
    2038:	da000404 	addi	r8,sp,16
    203c:	003cd006 	br	1380 <__alt_data_end+0xf8001380>
    2040:	8009883a 	mov	r4,r16
    2044:	da003d15 	stw	r8,244(sp)
    2048:	00004340 	call	434 <strlen>
    204c:	d8802e15 	stw	r2,184(sp)
    2050:	da003d17 	ldw	r8,244(sp)
    2054:	103c340e 	bge	r2,zero,1128 <__alt_data_end+0xf8001128>
    2058:	0005883a 	mov	r2,zero
    205c:	003c3206 	br	1128 <__alt_data_end+0xf8001128>
    2060:	d9002c17 	ldw	r4,176(sp)
    2064:	d9801e04 	addi	r6,sp,120
    2068:	b80b883a 	mov	r5,r23
    206c:	0007ac80 	call	7ac8 <__sprint_r>
    2070:	103a181e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    2074:	d8c02017 	ldw	r3,128(sp)
    2078:	d8801f17 	ldw	r2,124(sp)
    207c:	da000404 	addi	r8,sp,16
    2080:	d9403317 	ldw	r5,204(sp)
    2084:	10800044 	addi	r2,r2,1
    2088:	44000015 	stw	r16,0(r8)
    208c:	28c7883a 	add	r3,r5,r3
    2090:	003b7d06 	br	e88 <__alt_data_end+0xf8000e88>
    2094:	01000074 	movhi	r4,1
    2098:	213e0484 	addi	r4,r4,-2030
    209c:	d9003515 	stw	r4,212(sp)
    20a0:	003b1406 	br	cf4 <__alt_data_end+0xf8000cf4>
    20a4:	013fffc4 	movi	r4,-1
    20a8:	003a3506 	br	980 <__alt_data_end+0xf8000980>
    20ac:	0023883a 	mov	r17,zero
    20b0:	003d9d06 	br	1728 <__alt_data_end+0xf8001728>
    20b4:	d9002c17 	ldw	r4,176(sp)
    20b8:	d9801e04 	addi	r6,sp,120
    20bc:	b80b883a 	mov	r5,r23
    20c0:	0007ac80 	call	7ac8 <__sprint_r>
    20c4:	103a031e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    20c8:	d8c02017 	ldw	r3,128(sp)
    20cc:	da000404 	addi	r8,sp,16
    20d0:	003d9406 	br	1724 <__alt_data_end+0xf8001724>
    20d4:	01000074 	movhi	r4,1
    20d8:	213e0084 	addi	r4,r4,-2046
    20dc:	d9002b15 	stw	r4,172(sp)
    20e0:	d9002b17 	ldw	r4,172(sp)
    20e4:	1c47883a 	add	r3,r3,r17
    20e8:	10800044 	addi	r2,r2,1
    20ec:	41000015 	stw	r4,0(r8)
    20f0:	44400115 	stw	r17,4(r8)
    20f4:	d8c02015 	stw	r3,128(sp)
    20f8:	d8801f15 	stw	r2,124(sp)
    20fc:	010001c4 	movi	r4,7
    2100:	20bfd716 	blt	r4,r2,2060 <__alt_data_end+0xf8002060>
    2104:	42000204 	addi	r8,r8,8
    2108:	003fdd06 	br	2080 <__alt_data_end+0xf8002080>
    210c:	d9002c17 	ldw	r4,176(sp)
    2110:	d9801e04 	addi	r6,sp,120
    2114:	b80b883a 	mov	r5,r23
    2118:	0007ac80 	call	7ac8 <__sprint_r>
    211c:	1039ed1e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    2120:	d8802617 	ldw	r2,152(sp)
    2124:	d8c02017 	ldw	r3,128(sp)
    2128:	da000404 	addi	r8,sp,16
    212c:	003e1006 	br	1970 <__alt_data_end+0xf8001970>
    2130:	00800044 	movi	r2,1
    2134:	10803fcc 	andi	r2,r2,255
    2138:	00c00044 	movi	r3,1
    213c:	10fa3526 	beq	r2,r3,a14 <__alt_data_end+0xf8000a14>
    2140:	00c00084 	movi	r3,2
    2144:	10fbcb26 	beq	r2,r3,1074 <__alt_data_end+0xf8001074>
    2148:	003a8f06 	br	b88 <__alt_data_end+0xf8000b88>
    214c:	01000074 	movhi	r4,1
    2150:	213e0484 	addi	r4,r4,-2030
    2154:	d9003515 	stw	r4,212(sp)
    2158:	003b7606 	br	f34 <__alt_data_end+0xf8000f34>
    215c:	d8802917 	ldw	r2,164(sp)
    2160:	00c00184 	movi	r3,6
    2164:	1880012e 	bgeu	r3,r2,216c <___vfprintf_internal_r+0x1ca0>
    2168:	1805883a 	mov	r2,r3
    216c:	d8802e15 	stw	r2,184(sp)
    2170:	1000ef16 	blt	r2,zero,2530 <___vfprintf_internal_r+0x2064>
    2174:	04000074 	movhi	r16,1
    2178:	d8802a15 	stw	r2,168(sp)
    217c:	dcc02d15 	stw	r19,180(sp)
    2180:	d8002915 	stw	zero,164(sp)
    2184:	d8003215 	stw	zero,200(sp)
    2188:	843dfe04 	addi	r16,r16,-2056
    218c:	0039883a 	mov	fp,zero
    2190:	003aa206 	br	c1c <__alt_data_end+0xf8000c1c>
    2194:	0021883a 	mov	r16,zero
    2198:	003e0706 	br	19b8 <__alt_data_end+0xf80019b8>
    219c:	d9002c17 	ldw	r4,176(sp)
    21a0:	d9801e04 	addi	r6,sp,120
    21a4:	b80b883a 	mov	r5,r23
    21a8:	0007ac80 	call	7ac8 <__sprint_r>
    21ac:	1039c91e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    21b0:	d8802617 	ldw	r2,152(sp)
    21b4:	d9403317 	ldw	r5,204(sp)
    21b8:	d8c02017 	ldw	r3,128(sp)
    21bc:	da000404 	addi	r8,sp,16
    21c0:	2885c83a 	sub	r2,r5,r2
    21c4:	003dfb06 	br	19b4 <__alt_data_end+0xf80019b4>
    21c8:	9080004c 	andi	r2,r18,1
    21cc:	103e8f1e 	bne	r2,zero,1c0c <__alt_data_end+0xf8001c0c>
    21d0:	d8802117 	ldw	r2,132(sp)
    21d4:	003e9e06 	br	1c50 <__alt_data_end+0xf8001c50>
    21d8:	1025883a 	mov	r18,r2
    21dc:	0039883a 	mov	fp,zero
    21e0:	00800084 	movi	r2,2
    21e4:	003fd306 	br	2134 <__alt_data_end+0xf8002134>
    21e8:	07000b44 	movi	fp,45
    21ec:	df002785 	stb	fp,158(sp)
    21f0:	003a4006 	br	af4 <__alt_data_end+0xf8000af4>
    21f4:	00c00b44 	movi	r3,45
    21f8:	d8c02785 	stb	r3,158(sp)
    21fc:	d8802a15 	stw	r2,168(sp)
    2200:	dc802b17 	ldw	r18,172(sp)
    2204:	d8002915 	stw	zero,164(sp)
    2208:	07000b44 	movi	fp,45
    220c:	003a8006 	br	c10 <__alt_data_end+0xf8000c10>
    2210:	04000074 	movhi	r16,1
    2214:	843df304 	addi	r16,r16,-2100
    2218:	003f4706 	br	1f38 <__alt_data_end+0xf8001f38>
    221c:	d8c02d17 	ldw	r3,180(sp)
    2220:	d9002f17 	ldw	r4,188(sp)
    2224:	18800017 	ldw	r2,0(r3)
    2228:	18c00104 	addi	r3,r3,4
    222c:	d8c02d15 	stw	r3,180(sp)
    2230:	11000015 	stw	r4,0(r2)
    2234:	0038dd06 	br	5ac <__alt_data_end+0xf80005ac>
    2238:	dd802617 	ldw	r22,152(sp)
    223c:	00bfff44 	movi	r2,-3
    2240:	b0801c16 	blt	r22,r2,22b4 <___vfprintf_internal_r+0x1de8>
    2244:	d9402917 	ldw	r5,164(sp)
    2248:	2d801a16 	blt	r5,r22,22b4 <___vfprintf_internal_r+0x1de8>
    224c:	dd803215 	stw	r22,200(sp)
    2250:	003e8906 	br	1c78 <__alt_data_end+0xf8001c78>
    2254:	01000074 	movhi	r4,1
    2258:	213e0084 	addi	r4,r4,-2046
    225c:	d9002b15 	stw	r4,172(sp)
    2260:	003c9106 	br	14a8 <__alt_data_end+0xf80014a8>
    2264:	e005883a 	mov	r2,fp
    2268:	003e7906 	br	1c50 <__alt_data_end+0xf8001c50>
    226c:	d9402917 	ldw	r5,164(sp)
    2270:	df002783 	ldbu	fp,158(sp)
    2274:	dcc02d15 	stw	r19,180(sp)
    2278:	d9402a15 	stw	r5,168(sp)
    227c:	d9402e15 	stw	r5,184(sp)
    2280:	d8002915 	stw	zero,164(sp)
    2284:	d8003215 	stw	zero,200(sp)
    2288:	003a5d06 	br	c00 <__alt_data_end+0xf8000c00>
    228c:	9080004c 	andi	r2,r18,1
    2290:	0039883a 	mov	fp,zero
    2294:	10000426 	beq	r2,zero,22a8 <___vfprintf_internal_r+0x1ddc>
    2298:	00800c04 	movi	r2,48
    229c:	dc001dc4 	addi	r16,sp,119
    22a0:	d8801dc5 	stb	r2,119(sp)
    22a4:	003b8006 	br	10a8 <__alt_data_end+0xf80010a8>
    22a8:	d8002e15 	stw	zero,184(sp)
    22ac:	dc001e04 	addi	r16,sp,120
    22b0:	003a4d06 	br	be8 <__alt_data_end+0xf8000be8>
    22b4:	8c7fff84 	addi	r17,r17,-2
    22b8:	b5bfffc4 	addi	r22,r22,-1
    22bc:	dd802615 	stw	r22,152(sp)
    22c0:	dc4022c5 	stb	r17,139(sp)
    22c4:	b000bf16 	blt	r22,zero,25c4 <___vfprintf_internal_r+0x20f8>
    22c8:	00800ac4 	movi	r2,43
    22cc:	d8802305 	stb	r2,140(sp)
    22d0:	00800244 	movi	r2,9
    22d4:	15807016 	blt	r2,r22,2498 <___vfprintf_internal_r+0x1fcc>
    22d8:	00800c04 	movi	r2,48
    22dc:	b5800c04 	addi	r22,r22,48
    22e0:	d8802345 	stb	r2,141(sp)
    22e4:	dd802385 	stb	r22,142(sp)
    22e8:	d88023c4 	addi	r2,sp,143
    22ec:	df0022c4 	addi	fp,sp,139
    22f0:	d8c03317 	ldw	r3,204(sp)
    22f4:	1739c83a 	sub	fp,r2,fp
    22f8:	d9003317 	ldw	r4,204(sp)
    22fc:	e0c7883a 	add	r3,fp,r3
    2300:	df003a15 	stw	fp,232(sp)
    2304:	d8c02e15 	stw	r3,184(sp)
    2308:	00800044 	movi	r2,1
    230c:	1100b30e 	bge	r2,r4,25dc <___vfprintf_internal_r+0x2110>
    2310:	d8c02e17 	ldw	r3,184(sp)
    2314:	18c00044 	addi	r3,r3,1
    2318:	d8c02e15 	stw	r3,184(sp)
    231c:	1805883a 	mov	r2,r3
    2320:	1800ac16 	blt	r3,zero,25d4 <___vfprintf_internal_r+0x2108>
    2324:	d8003215 	stw	zero,200(sp)
    2328:	003e5d06 	br	1ca0 <__alt_data_end+0xf8001ca0>
    232c:	d9002c17 	ldw	r4,176(sp)
    2330:	d9801e04 	addi	r6,sp,120
    2334:	b80b883a 	mov	r5,r23
    2338:	0007ac80 	call	7ac8 <__sprint_r>
    233c:	1039651e 	bne	r2,zero,8d4 <__alt_data_end+0xf80008d4>
    2340:	dc402617 	ldw	r17,152(sp)
    2344:	d8c02017 	ldw	r3,128(sp)
    2348:	d8801f17 	ldw	r2,124(sp)
    234c:	da000404 	addi	r8,sp,16
    2350:	003ed606 	br	1eac <__alt_data_end+0xf8001eac>
    2354:	582b883a 	mov	r21,r11
    2358:	d8002915 	stw	zero,164(sp)
    235c:	0038bd06 	br	654 <__alt_data_end+0xf8000654>
    2360:	d8802917 	ldw	r2,164(sp)
    2364:	103e071e 	bne	r2,zero,1b84 <__alt_data_end+0xf8001b84>
    2368:	dc002915 	stw	r16,164(sp)
    236c:	003e0506 	br	1b84 <__alt_data_end+0xf8001b84>
    2370:	d9002917 	ldw	r4,164(sp)
    2374:	20c00044 	addi	r3,r4,1
    2378:	003e0f06 	br	1bb8 <__alt_data_end+0xf8001bb8>
    237c:	01400184 	movi	r5,6
    2380:	d9402915 	stw	r5,164(sp)
    2384:	003dff06 	br	1b84 <__alt_data_end+0xf8001b84>
    2388:	d8802104 	addi	r2,sp,132
    238c:	d8800315 	stw	r2,12(sp)
    2390:	d8802504 	addi	r2,sp,148
    2394:	d8800215 	stw	r2,8(sp)
    2398:	d8802604 	addi	r2,sp,152
    239c:	d8800115 	stw	r2,4(sp)
    23a0:	d8802917 	ldw	r2,164(sp)
    23a4:	d9403617 	ldw	r5,216(sp)
    23a8:	d9002c17 	ldw	r4,176(sp)
    23ac:	d8800015 	stw	r2,0(sp)
    23b0:	01c000c4 	movi	r7,3
    23b4:	980d883a 	mov	r6,r19
    23b8:	da003d15 	stw	r8,244(sp)
    23bc:	0002af00 	call	2af0 <_dtoa_r>
    23c0:	d8c02917 	ldw	r3,164(sp)
    23c4:	da003d17 	ldw	r8,244(sp)
    23c8:	1021883a 	mov	r16,r2
    23cc:	10f9883a 	add	fp,r2,r3
    23d0:	81000007 	ldb	r4,0(r16)
    23d4:	00800c04 	movi	r2,48
    23d8:	20805e26 	beq	r4,r2,2554 <___vfprintf_internal_r+0x2088>
    23dc:	d8c02617 	ldw	r3,152(sp)
    23e0:	e0f9883a 	add	fp,fp,r3
    23e4:	003e0a06 	br	1c10 <__alt_data_end+0xf8001c10>
    23e8:	00c00b44 	movi	r3,45
    23ec:	24e0003c 	xorhi	r19,r4,32768
    23f0:	d8c02a05 	stb	r3,168(sp)
    23f4:	003de906 	br	1b9c <__alt_data_end+0xf8001b9c>
    23f8:	d8c03217 	ldw	r3,200(sp)
    23fc:	00c07a0e 	bge	zero,r3,25e8 <___vfprintf_internal_r+0x211c>
    2400:	00800044 	movi	r2,1
    2404:	d9003317 	ldw	r4,204(sp)
    2408:	1105883a 	add	r2,r2,r4
    240c:	d8802e15 	stw	r2,184(sp)
    2410:	10004e16 	blt	r2,zero,254c <___vfprintf_internal_r+0x2080>
    2414:	044019c4 	movi	r17,103
    2418:	003e2106 	br	1ca0 <__alt_data_end+0xf8001ca0>
    241c:	d9002917 	ldw	r4,164(sp)
    2420:	d8802104 	addi	r2,sp,132
    2424:	d8800315 	stw	r2,12(sp)
    2428:	d9000015 	stw	r4,0(sp)
    242c:	d8802504 	addi	r2,sp,148
    2430:	d9403617 	ldw	r5,216(sp)
    2434:	d9002c17 	ldw	r4,176(sp)
    2438:	d8800215 	stw	r2,8(sp)
    243c:	d8802604 	addi	r2,sp,152
    2440:	d8800115 	stw	r2,4(sp)
    2444:	01c000c4 	movi	r7,3
    2448:	980d883a 	mov	r6,r19
    244c:	da003d15 	stw	r8,244(sp)
    2450:	0002af00 	call	2af0 <_dtoa_r>
    2454:	d8c02917 	ldw	r3,164(sp)
    2458:	da003d17 	ldw	r8,244(sp)
    245c:	1021883a 	mov	r16,r2
    2460:	00801184 	movi	r2,70
    2464:	80f9883a 	add	fp,r16,r3
    2468:	88bfd926 	beq	r17,r2,23d0 <__alt_data_end+0xf80023d0>
    246c:	003de806 	br	1c10 <__alt_data_end+0xf8001c10>
    2470:	d9002917 	ldw	r4,164(sp)
    2474:	00c04d0e 	bge	zero,r3,25ac <___vfprintf_internal_r+0x20e0>
    2478:	2000441e 	bne	r4,zero,258c <___vfprintf_internal_r+0x20c0>
    247c:	9480004c 	andi	r18,r18,1
    2480:	9000421e 	bne	r18,zero,258c <___vfprintf_internal_r+0x20c0>
    2484:	1805883a 	mov	r2,r3
    2488:	18007016 	blt	r3,zero,264c <___vfprintf_internal_r+0x2180>
    248c:	d8c03217 	ldw	r3,200(sp)
    2490:	d8c02e15 	stw	r3,184(sp)
    2494:	003e0206 	br	1ca0 <__alt_data_end+0xf8001ca0>
    2498:	df0022c4 	addi	fp,sp,139
    249c:	dc002915 	stw	r16,164(sp)
    24a0:	4027883a 	mov	r19,r8
    24a4:	e021883a 	mov	r16,fp
    24a8:	b009883a 	mov	r4,r22
    24ac:	01400284 	movi	r5,10
    24b0:	000a47c0 	call	a47c <__modsi3>
    24b4:	10800c04 	addi	r2,r2,48
    24b8:	843fffc4 	addi	r16,r16,-1
    24bc:	b009883a 	mov	r4,r22
    24c0:	01400284 	movi	r5,10
    24c4:	80800005 	stb	r2,0(r16)
    24c8:	000a3f80 	call	a3f8 <__divsi3>
    24cc:	102d883a 	mov	r22,r2
    24d0:	00800244 	movi	r2,9
    24d4:	15bff416 	blt	r2,r22,24a8 <__alt_data_end+0xf80024a8>
    24d8:	9811883a 	mov	r8,r19
    24dc:	b0800c04 	addi	r2,r22,48
    24e0:	8027883a 	mov	r19,r16
    24e4:	997fffc4 	addi	r5,r19,-1
    24e8:	98bfffc5 	stb	r2,-1(r19)
    24ec:	dc002917 	ldw	r16,164(sp)
    24f0:	2f006a2e 	bgeu	r5,fp,269c <___vfprintf_internal_r+0x21d0>
    24f4:	d9c02384 	addi	r7,sp,142
    24f8:	3ccfc83a 	sub	r7,r7,r19
    24fc:	d9002344 	addi	r4,sp,141
    2500:	e1cf883a 	add	r7,fp,r7
    2504:	00000106 	br	250c <___vfprintf_internal_r+0x2040>
    2508:	28800003 	ldbu	r2,0(r5)
    250c:	20800005 	stb	r2,0(r4)
    2510:	21000044 	addi	r4,r4,1
    2514:	29400044 	addi	r5,r5,1
    2518:	393ffb1e 	bne	r7,r4,2508 <__alt_data_end+0xf8002508>
    251c:	d8802304 	addi	r2,sp,140
    2520:	14c5c83a 	sub	r2,r2,r19
    2524:	d8c02344 	addi	r3,sp,141
    2528:	1885883a 	add	r2,r3,r2
    252c:	003f7006 	br	22f0 <__alt_data_end+0xf80022f0>
    2530:	0005883a 	mov	r2,zero
    2534:	003f0f06 	br	2174 <__alt_data_end+0xf8002174>
    2538:	d8c03217 	ldw	r3,200(sp)
    253c:	18c00044 	addi	r3,r3,1
    2540:	d8c02e15 	stw	r3,184(sp)
    2544:	1805883a 	mov	r2,r3
    2548:	183fb20e 	bge	r3,zero,2414 <__alt_data_end+0xf8002414>
    254c:	0005883a 	mov	r2,zero
    2550:	003fb006 	br	2414 <__alt_data_end+0xf8002414>
    2554:	d9003617 	ldw	r4,216(sp)
    2558:	000d883a 	mov	r6,zero
    255c:	000f883a 	mov	r7,zero
    2560:	980b883a 	mov	r5,r19
    2564:	d8c03c15 	stw	r3,240(sp)
    2568:	da003d15 	stw	r8,244(sp)
    256c:	000b7400 	call	b740 <__eqdf2>
    2570:	d8c03c17 	ldw	r3,240(sp)
    2574:	da003d17 	ldw	r8,244(sp)
    2578:	103f9826 	beq	r2,zero,23dc <__alt_data_end+0xf80023dc>
    257c:	00800044 	movi	r2,1
    2580:	10c7c83a 	sub	r3,r2,r3
    2584:	d8c02615 	stw	r3,152(sp)
    2588:	003f9506 	br	23e0 <__alt_data_end+0xf80023e0>
    258c:	d9002917 	ldw	r4,164(sp)
    2590:	d8c03217 	ldw	r3,200(sp)
    2594:	20800044 	addi	r2,r4,1
    2598:	1885883a 	add	r2,r3,r2
    259c:	d8802e15 	stw	r2,184(sp)
    25a0:	103dbf0e 	bge	r2,zero,1ca0 <__alt_data_end+0xf8001ca0>
    25a4:	0005883a 	mov	r2,zero
    25a8:	003dbd06 	br	1ca0 <__alt_data_end+0xf8001ca0>
    25ac:	2000211e 	bne	r4,zero,2634 <___vfprintf_internal_r+0x2168>
    25b0:	9480004c 	andi	r18,r18,1
    25b4:	90001f1e 	bne	r18,zero,2634 <___vfprintf_internal_r+0x2168>
    25b8:	00800044 	movi	r2,1
    25bc:	d8802e15 	stw	r2,184(sp)
    25c0:	003db706 	br	1ca0 <__alt_data_end+0xf8001ca0>
    25c4:	00800b44 	movi	r2,45
    25c8:	05adc83a 	sub	r22,zero,r22
    25cc:	d8802305 	stb	r2,140(sp)
    25d0:	003f3f06 	br	22d0 <__alt_data_end+0xf80022d0>
    25d4:	0005883a 	mov	r2,zero
    25d8:	003f5206 	br	2324 <__alt_data_end+0xf8002324>
    25dc:	90a4703a 	and	r18,r18,r2
    25e0:	903f4e26 	beq	r18,zero,231c <__alt_data_end+0xf800231c>
    25e4:	003f4a06 	br	2310 <__alt_data_end+0xf8002310>
    25e8:	00800084 	movi	r2,2
    25ec:	10c5c83a 	sub	r2,r2,r3
    25f0:	003f8406 	br	2404 <__alt_data_end+0xf8002404>
    25f4:	d8802d17 	ldw	r2,180(sp)
    25f8:	d9002d17 	ldw	r4,180(sp)
    25fc:	ac400043 	ldbu	r17,1(r21)
    2600:	10800017 	ldw	r2,0(r2)
    2604:	582b883a 	mov	r21,r11
    2608:	d8802915 	stw	r2,164(sp)
    260c:	20800104 	addi	r2,r4,4
    2610:	d9002917 	ldw	r4,164(sp)
    2614:	d8802d15 	stw	r2,180(sp)
    2618:	203e7a0e 	bge	r4,zero,2004 <__alt_data_end+0xf8002004>
    261c:	8c403fcc 	andi	r17,r17,255
    2620:	00bfffc4 	movi	r2,-1
    2624:	8c40201c 	xori	r17,r17,128
    2628:	d8802915 	stw	r2,164(sp)
    262c:	8c7fe004 	addi	r17,r17,-128
    2630:	00380706 	br	650 <__alt_data_end+0xf8000650>
    2634:	d8c02917 	ldw	r3,164(sp)
    2638:	18c00084 	addi	r3,r3,2
    263c:	d8c02e15 	stw	r3,184(sp)
    2640:	1805883a 	mov	r2,r3
    2644:	183d960e 	bge	r3,zero,1ca0 <__alt_data_end+0xf8001ca0>
    2648:	003fd606 	br	25a4 <__alt_data_end+0xf80025a4>
    264c:	0005883a 	mov	r2,zero
    2650:	003f8e06 	br	248c <__alt_data_end+0xf800248c>
    2654:	9080004c 	andi	r2,r18,1
    2658:	103f811e 	bne	r2,zero,2460 <__alt_data_end+0xf8002460>
    265c:	d8802117 	ldw	r2,132(sp)
    2660:	1405c83a 	sub	r2,r2,r16
    2664:	d8803315 	stw	r2,204(sp)
    2668:	b47ef326 	beq	r22,r17,2238 <__alt_data_end+0xf8002238>
    266c:	dd802617 	ldw	r22,152(sp)
    2670:	003f1106 	br	22b8 <__alt_data_end+0xf80022b8>
    2674:	d9c02785 	stb	r7,158(sp)
    2678:	00390406 	br	a8c <__alt_data_end+0xf8000a8c>
    267c:	d9c02785 	stb	r7,158(sp)
    2680:	0038d306 	br	9d0 <__alt_data_end+0xf80009d0>
    2684:	d9c02785 	stb	r7,158(sp)
    2688:	003a6106 	br	1010 <__alt_data_end+0xf8001010>
    268c:	d9c02785 	stb	r7,158(sp)
    2690:	003af806 	br	1274 <__alt_data_end+0xf8001274>
    2694:	0005883a 	mov	r2,zero
    2698:	003d7e06 	br	1c94 <__alt_data_end+0xf8001c94>
    269c:	d8802344 	addi	r2,sp,141
    26a0:	003f1306 	br	22f0 <__alt_data_end+0xf80022f0>
    26a4:	d9c02785 	stb	r7,158(sp)
    26a8:	00392306 	br	b38 <__alt_data_end+0xf8000b38>
    26ac:	d9c02785 	stb	r7,158(sp)
    26b0:	003aa906 	br	1158 <__alt_data_end+0xf8001158>
    26b4:	d9c02785 	stb	r7,158(sp)
    26b8:	003a3d06 	br	fb0 <__alt_data_end+0xf8000fb0>
    26bc:	d9c02785 	stb	r7,158(sp)
    26c0:	003aca06 	br	11ec <__alt_data_end+0xf80011ec>

000026c4 <__vfprintf_internal>:
    26c4:	00800074 	movhi	r2,1
    26c8:	10859b04 	addi	r2,r2,5740
    26cc:	300f883a 	mov	r7,r6
    26d0:	280d883a 	mov	r6,r5
    26d4:	200b883a 	mov	r5,r4
    26d8:	11000017 	ldw	r4,0(r2)
    26dc:	00004cc1 	jmpi	4cc <___vfprintf_internal_r>

000026e0 <__sbprintf>:
    26e0:	2880030b 	ldhu	r2,12(r5)
    26e4:	2ac01917 	ldw	r11,100(r5)
    26e8:	2a80038b 	ldhu	r10,14(r5)
    26ec:	2a400717 	ldw	r9,28(r5)
    26f0:	2a000917 	ldw	r8,36(r5)
    26f4:	defee204 	addi	sp,sp,-1144
    26f8:	00c10004 	movi	r3,1024
    26fc:	dc011a15 	stw	r16,1128(sp)
    2700:	10bfff4c 	andi	r2,r2,65533
    2704:	2821883a 	mov	r16,r5
    2708:	d8cb883a 	add	r5,sp,r3
    270c:	dc811c15 	stw	r18,1136(sp)
    2710:	dc411b15 	stw	r17,1132(sp)
    2714:	dfc11d15 	stw	ra,1140(sp)
    2718:	2025883a 	mov	r18,r4
    271c:	d881030d 	sth	r2,1036(sp)
    2720:	dac11915 	stw	r11,1124(sp)
    2724:	da81038d 	sth	r10,1038(sp)
    2728:	da410715 	stw	r9,1052(sp)
    272c:	da010915 	stw	r8,1060(sp)
    2730:	dec10015 	stw	sp,1024(sp)
    2734:	dec10415 	stw	sp,1040(sp)
    2738:	d8c10215 	stw	r3,1032(sp)
    273c:	d8c10515 	stw	r3,1044(sp)
    2740:	d8010615 	stw	zero,1048(sp)
    2744:	00004cc0 	call	4cc <___vfprintf_internal_r>
    2748:	1023883a 	mov	r17,r2
    274c:	10000416 	blt	r2,zero,2760 <__sbprintf+0x80>
    2750:	d9410004 	addi	r5,sp,1024
    2754:	9009883a 	mov	r4,r18
    2758:	00043940 	call	4394 <_fflush_r>
    275c:	10000d1e 	bne	r2,zero,2794 <__sbprintf+0xb4>
    2760:	d881030b 	ldhu	r2,1036(sp)
    2764:	1080100c 	andi	r2,r2,64
    2768:	10000326 	beq	r2,zero,2778 <__sbprintf+0x98>
    276c:	8080030b 	ldhu	r2,12(r16)
    2770:	10801014 	ori	r2,r2,64
    2774:	8080030d 	sth	r2,12(r16)
    2778:	8805883a 	mov	r2,r17
    277c:	dfc11d17 	ldw	ra,1140(sp)
    2780:	dc811c17 	ldw	r18,1136(sp)
    2784:	dc411b17 	ldw	r17,1132(sp)
    2788:	dc011a17 	ldw	r16,1128(sp)
    278c:	dec11e04 	addi	sp,sp,1144
    2790:	f800283a 	ret
    2794:	047fffc4 	movi	r17,-1
    2798:	003ff106 	br	2760 <__alt_data_end+0xf8002760>

0000279c <__swsetup_r>:
    279c:	00800074 	movhi	r2,1
    27a0:	defffd04 	addi	sp,sp,-12
    27a4:	10859b04 	addi	r2,r2,5740
    27a8:	dc400115 	stw	r17,4(sp)
    27ac:	2023883a 	mov	r17,r4
    27b0:	11000017 	ldw	r4,0(r2)
    27b4:	dc000015 	stw	r16,0(sp)
    27b8:	dfc00215 	stw	ra,8(sp)
    27bc:	2821883a 	mov	r16,r5
    27c0:	20000226 	beq	r4,zero,27cc <__swsetup_r+0x30>
    27c4:	20800e17 	ldw	r2,56(r4)
    27c8:	10003126 	beq	r2,zero,2890 <__swsetup_r+0xf4>
    27cc:	8080030b 	ldhu	r2,12(r16)
    27d0:	10c0020c 	andi	r3,r2,8
    27d4:	1009883a 	mov	r4,r2
    27d8:	18000f26 	beq	r3,zero,2818 <__swsetup_r+0x7c>
    27dc:	80c00417 	ldw	r3,16(r16)
    27e0:	18001526 	beq	r3,zero,2838 <__swsetup_r+0x9c>
    27e4:	1100004c 	andi	r4,r2,1
    27e8:	20001c1e 	bne	r4,zero,285c <__swsetup_r+0xc0>
    27ec:	1080008c 	andi	r2,r2,2
    27f0:	1000291e 	bne	r2,zero,2898 <__swsetup_r+0xfc>
    27f4:	80800517 	ldw	r2,20(r16)
    27f8:	80800215 	stw	r2,8(r16)
    27fc:	18001c26 	beq	r3,zero,2870 <__swsetup_r+0xd4>
    2800:	0005883a 	mov	r2,zero
    2804:	dfc00217 	ldw	ra,8(sp)
    2808:	dc400117 	ldw	r17,4(sp)
    280c:	dc000017 	ldw	r16,0(sp)
    2810:	dec00304 	addi	sp,sp,12
    2814:	f800283a 	ret
    2818:	2080040c 	andi	r2,r4,16
    281c:	10002e26 	beq	r2,zero,28d8 <__swsetup_r+0x13c>
    2820:	2080010c 	andi	r2,r4,4
    2824:	10001e1e 	bne	r2,zero,28a0 <__swsetup_r+0x104>
    2828:	80c00417 	ldw	r3,16(r16)
    282c:	20800214 	ori	r2,r4,8
    2830:	8080030d 	sth	r2,12(r16)
    2834:	183feb1e 	bne	r3,zero,27e4 <__alt_data_end+0xf80027e4>
    2838:	1100a00c 	andi	r4,r2,640
    283c:	01408004 	movi	r5,512
    2840:	217fe826 	beq	r4,r5,27e4 <__alt_data_end+0xf80027e4>
    2844:	800b883a 	mov	r5,r16
    2848:	8809883a 	mov	r4,r17
    284c:	00053140 	call	5314 <__smakebuf_r>
    2850:	8080030b 	ldhu	r2,12(r16)
    2854:	80c00417 	ldw	r3,16(r16)
    2858:	003fe206 	br	27e4 <__alt_data_end+0xf80027e4>
    285c:	80800517 	ldw	r2,20(r16)
    2860:	80000215 	stw	zero,8(r16)
    2864:	0085c83a 	sub	r2,zero,r2
    2868:	80800615 	stw	r2,24(r16)
    286c:	183fe41e 	bne	r3,zero,2800 <__alt_data_end+0xf8002800>
    2870:	80c0030b 	ldhu	r3,12(r16)
    2874:	0005883a 	mov	r2,zero
    2878:	1900200c 	andi	r4,r3,128
    287c:	203fe126 	beq	r4,zero,2804 <__alt_data_end+0xf8002804>
    2880:	18c01014 	ori	r3,r3,64
    2884:	80c0030d 	sth	r3,12(r16)
    2888:	00bfffc4 	movi	r2,-1
    288c:	003fdd06 	br	2804 <__alt_data_end+0xf8002804>
    2890:	00047700 	call	4770 <__sinit>
    2894:	003fcd06 	br	27cc <__alt_data_end+0xf80027cc>
    2898:	0005883a 	mov	r2,zero
    289c:	003fd606 	br	27f8 <__alt_data_end+0xf80027f8>
    28a0:	81400c17 	ldw	r5,48(r16)
    28a4:	28000626 	beq	r5,zero,28c0 <__swsetup_r+0x124>
    28a8:	80801004 	addi	r2,r16,64
    28ac:	28800326 	beq	r5,r2,28bc <__swsetup_r+0x120>
    28b0:	8809883a 	mov	r4,r17
    28b4:	00048e40 	call	48e4 <_free_r>
    28b8:	8100030b 	ldhu	r4,12(r16)
    28bc:	80000c15 	stw	zero,48(r16)
    28c0:	80c00417 	ldw	r3,16(r16)
    28c4:	00bff6c4 	movi	r2,-37
    28c8:	1108703a 	and	r4,r2,r4
    28cc:	80000115 	stw	zero,4(r16)
    28d0:	80c00015 	stw	r3,0(r16)
    28d4:	003fd506 	br	282c <__alt_data_end+0xf800282c>
    28d8:	00800244 	movi	r2,9
    28dc:	88800015 	stw	r2,0(r17)
    28e0:	20801014 	ori	r2,r4,64
    28e4:	8080030d 	sth	r2,12(r16)
    28e8:	00bfffc4 	movi	r2,-1
    28ec:	003fc506 	br	2804 <__alt_data_end+0xf8002804>

000028f0 <quorem>:
    28f0:	defff704 	addi	sp,sp,-36
    28f4:	dc800215 	stw	r18,8(sp)
    28f8:	20800417 	ldw	r2,16(r4)
    28fc:	2c800417 	ldw	r18,16(r5)
    2900:	dfc00815 	stw	ra,32(sp)
    2904:	ddc00715 	stw	r23,28(sp)
    2908:	dd800615 	stw	r22,24(sp)
    290c:	dd400515 	stw	r21,20(sp)
    2910:	dd000415 	stw	r20,16(sp)
    2914:	dcc00315 	stw	r19,12(sp)
    2918:	dc400115 	stw	r17,4(sp)
    291c:	dc000015 	stw	r16,0(sp)
    2920:	14807116 	blt	r2,r18,2ae8 <quorem+0x1f8>
    2924:	94bfffc4 	addi	r18,r18,-1
    2928:	94ad883a 	add	r22,r18,r18
    292c:	b5ad883a 	add	r22,r22,r22
    2930:	2c400504 	addi	r17,r5,20
    2934:	8da9883a 	add	r20,r17,r22
    2938:	25400504 	addi	r21,r4,20
    293c:	282f883a 	mov	r23,r5
    2940:	adad883a 	add	r22,r21,r22
    2944:	a1400017 	ldw	r5,0(r20)
    2948:	2021883a 	mov	r16,r4
    294c:	b1000017 	ldw	r4,0(r22)
    2950:	29400044 	addi	r5,r5,1
    2954:	000a4f00 	call	a4f0 <__udivsi3>
    2958:	1027883a 	mov	r19,r2
    295c:	10002c26 	beq	r2,zero,2a10 <quorem+0x120>
    2960:	a813883a 	mov	r9,r21
    2964:	880b883a 	mov	r5,r17
    2968:	0009883a 	mov	r4,zero
    296c:	000d883a 	mov	r6,zero
    2970:	2a000017 	ldw	r8,0(r5)
    2974:	49c00017 	ldw	r7,0(r9)
    2978:	29400104 	addi	r5,r5,4
    297c:	40bfffcc 	andi	r2,r8,65535
    2980:	14c5383a 	mul	r2,r2,r19
    2984:	4010d43a 	srli	r8,r8,16
    2988:	38ffffcc 	andi	r3,r7,65535
    298c:	1105883a 	add	r2,r2,r4
    2990:	1008d43a 	srli	r4,r2,16
    2994:	44d1383a 	mul	r8,r8,r19
    2998:	198d883a 	add	r6,r3,r6
    299c:	10ffffcc 	andi	r3,r2,65535
    29a0:	30c7c83a 	sub	r3,r6,r3
    29a4:	380ed43a 	srli	r7,r7,16
    29a8:	4105883a 	add	r2,r8,r4
    29ac:	180dd43a 	srai	r6,r3,16
    29b0:	113fffcc 	andi	r4,r2,65535
    29b4:	390fc83a 	sub	r7,r7,r4
    29b8:	398d883a 	add	r6,r7,r6
    29bc:	300e943a 	slli	r7,r6,16
    29c0:	18ffffcc 	andi	r3,r3,65535
    29c4:	1008d43a 	srli	r4,r2,16
    29c8:	38ceb03a 	or	r7,r7,r3
    29cc:	49c00015 	stw	r7,0(r9)
    29d0:	300dd43a 	srai	r6,r6,16
    29d4:	4a400104 	addi	r9,r9,4
    29d8:	a17fe52e 	bgeu	r20,r5,2970 <__alt_data_end+0xf8002970>
    29dc:	b0800017 	ldw	r2,0(r22)
    29e0:	10000b1e 	bne	r2,zero,2a10 <quorem+0x120>
    29e4:	b0bfff04 	addi	r2,r22,-4
    29e8:	a880082e 	bgeu	r21,r2,2a0c <quorem+0x11c>
    29ec:	b0ffff17 	ldw	r3,-4(r22)
    29f0:	18000326 	beq	r3,zero,2a00 <quorem+0x110>
    29f4:	00000506 	br	2a0c <quorem+0x11c>
    29f8:	10c00017 	ldw	r3,0(r2)
    29fc:	1800031e 	bne	r3,zero,2a0c <quorem+0x11c>
    2a00:	10bfff04 	addi	r2,r2,-4
    2a04:	94bfffc4 	addi	r18,r18,-1
    2a08:	a8bffb36 	bltu	r21,r2,29f8 <__alt_data_end+0xf80029f8>
    2a0c:	84800415 	stw	r18,16(r16)
    2a10:	b80b883a 	mov	r5,r23
    2a14:	8009883a 	mov	r4,r16
    2a18:	0006a540 	call	6a54 <__mcmp>
    2a1c:	10002616 	blt	r2,zero,2ab8 <quorem+0x1c8>
    2a20:	9cc00044 	addi	r19,r19,1
    2a24:	a805883a 	mov	r2,r21
    2a28:	000b883a 	mov	r5,zero
    2a2c:	11000017 	ldw	r4,0(r2)
    2a30:	89800017 	ldw	r6,0(r17)
    2a34:	10800104 	addi	r2,r2,4
    2a38:	20ffffcc 	andi	r3,r4,65535
    2a3c:	194b883a 	add	r5,r3,r5
    2a40:	30ffffcc 	andi	r3,r6,65535
    2a44:	28c7c83a 	sub	r3,r5,r3
    2a48:	300cd43a 	srli	r6,r6,16
    2a4c:	2008d43a 	srli	r4,r4,16
    2a50:	180bd43a 	srai	r5,r3,16
    2a54:	18ffffcc 	andi	r3,r3,65535
    2a58:	2189c83a 	sub	r4,r4,r6
    2a5c:	2149883a 	add	r4,r4,r5
    2a60:	200c943a 	slli	r6,r4,16
    2a64:	8c400104 	addi	r17,r17,4
    2a68:	200bd43a 	srai	r5,r4,16
    2a6c:	30c6b03a 	or	r3,r6,r3
    2a70:	10ffff15 	stw	r3,-4(r2)
    2a74:	a47fed2e 	bgeu	r20,r17,2a2c <__alt_data_end+0xf8002a2c>
    2a78:	9485883a 	add	r2,r18,r18
    2a7c:	1085883a 	add	r2,r2,r2
    2a80:	a887883a 	add	r3,r21,r2
    2a84:	18800017 	ldw	r2,0(r3)
    2a88:	10000b1e 	bne	r2,zero,2ab8 <quorem+0x1c8>
    2a8c:	18bfff04 	addi	r2,r3,-4
    2a90:	a880082e 	bgeu	r21,r2,2ab4 <quorem+0x1c4>
    2a94:	18ffff17 	ldw	r3,-4(r3)
    2a98:	18000326 	beq	r3,zero,2aa8 <quorem+0x1b8>
    2a9c:	00000506 	br	2ab4 <quorem+0x1c4>
    2aa0:	10c00017 	ldw	r3,0(r2)
    2aa4:	1800031e 	bne	r3,zero,2ab4 <quorem+0x1c4>
    2aa8:	10bfff04 	addi	r2,r2,-4
    2aac:	94bfffc4 	addi	r18,r18,-1
    2ab0:	a8bffb36 	bltu	r21,r2,2aa0 <__alt_data_end+0xf8002aa0>
    2ab4:	84800415 	stw	r18,16(r16)
    2ab8:	9805883a 	mov	r2,r19
    2abc:	dfc00817 	ldw	ra,32(sp)
    2ac0:	ddc00717 	ldw	r23,28(sp)
    2ac4:	dd800617 	ldw	r22,24(sp)
    2ac8:	dd400517 	ldw	r21,20(sp)
    2acc:	dd000417 	ldw	r20,16(sp)
    2ad0:	dcc00317 	ldw	r19,12(sp)
    2ad4:	dc800217 	ldw	r18,8(sp)
    2ad8:	dc400117 	ldw	r17,4(sp)
    2adc:	dc000017 	ldw	r16,0(sp)
    2ae0:	dec00904 	addi	sp,sp,36
    2ae4:	f800283a 	ret
    2ae8:	0005883a 	mov	r2,zero
    2aec:	003ff306 	br	2abc <__alt_data_end+0xf8002abc>

00002af0 <_dtoa_r>:
    2af0:	20801017 	ldw	r2,64(r4)
    2af4:	deffde04 	addi	sp,sp,-136
    2af8:	df002015 	stw	fp,128(sp)
    2afc:	dcc01b15 	stw	r19,108(sp)
    2b00:	dc801a15 	stw	r18,104(sp)
    2b04:	dc401915 	stw	r17,100(sp)
    2b08:	dc001815 	stw	r16,96(sp)
    2b0c:	dfc02115 	stw	ra,132(sp)
    2b10:	ddc01f15 	stw	r23,124(sp)
    2b14:	dd801e15 	stw	r22,120(sp)
    2b18:	dd401d15 	stw	r21,116(sp)
    2b1c:	dd001c15 	stw	r20,112(sp)
    2b20:	d9c00315 	stw	r7,12(sp)
    2b24:	2039883a 	mov	fp,r4
    2b28:	3023883a 	mov	r17,r6
    2b2c:	2825883a 	mov	r18,r5
    2b30:	dc002417 	ldw	r16,144(sp)
    2b34:	3027883a 	mov	r19,r6
    2b38:	10000826 	beq	r2,zero,2b5c <_dtoa_r+0x6c>
    2b3c:	21801117 	ldw	r6,68(r4)
    2b40:	00c00044 	movi	r3,1
    2b44:	100b883a 	mov	r5,r2
    2b48:	1986983a 	sll	r3,r3,r6
    2b4c:	11800115 	stw	r6,4(r2)
    2b50:	10c00215 	stw	r3,8(r2)
    2b54:	00062340 	call	6234 <_Bfree>
    2b58:	e0001015 	stw	zero,64(fp)
    2b5c:	88002e16 	blt	r17,zero,2c18 <_dtoa_r+0x128>
    2b60:	80000015 	stw	zero,0(r16)
    2b64:	889ffc2c 	andhi	r2,r17,32752
    2b68:	00dffc34 	movhi	r3,32752
    2b6c:	10c01c26 	beq	r2,r3,2be0 <_dtoa_r+0xf0>
    2b70:	000d883a 	mov	r6,zero
    2b74:	000f883a 	mov	r7,zero
    2b78:	9009883a 	mov	r4,r18
    2b7c:	980b883a 	mov	r5,r19
    2b80:	000b7400 	call	b740 <__eqdf2>
    2b84:	10002b1e 	bne	r2,zero,2c34 <_dtoa_r+0x144>
    2b88:	d9c02317 	ldw	r7,140(sp)
    2b8c:	00800044 	movi	r2,1
    2b90:	38800015 	stw	r2,0(r7)
    2b94:	d8802517 	ldw	r2,148(sp)
    2b98:	10019e26 	beq	r2,zero,3214 <_dtoa_r+0x724>
    2b9c:	d8c02517 	ldw	r3,148(sp)
    2ba0:	00800074 	movhi	r2,1
    2ba4:	10be0044 	addi	r2,r2,-2047
    2ba8:	18800015 	stw	r2,0(r3)
    2bac:	10bfffc4 	addi	r2,r2,-1
    2bb0:	dfc02117 	ldw	ra,132(sp)
    2bb4:	df002017 	ldw	fp,128(sp)
    2bb8:	ddc01f17 	ldw	r23,124(sp)
    2bbc:	dd801e17 	ldw	r22,120(sp)
    2bc0:	dd401d17 	ldw	r21,116(sp)
    2bc4:	dd001c17 	ldw	r20,112(sp)
    2bc8:	dcc01b17 	ldw	r19,108(sp)
    2bcc:	dc801a17 	ldw	r18,104(sp)
    2bd0:	dc401917 	ldw	r17,100(sp)
    2bd4:	dc001817 	ldw	r16,96(sp)
    2bd8:	dec02204 	addi	sp,sp,136
    2bdc:	f800283a 	ret
    2be0:	d8c02317 	ldw	r3,140(sp)
    2be4:	0089c3c4 	movi	r2,9999
    2be8:	18800015 	stw	r2,0(r3)
    2bec:	90017726 	beq	r18,zero,31cc <_dtoa_r+0x6dc>
    2bf0:	00800074 	movhi	r2,1
    2bf4:	10be0c04 	addi	r2,r2,-2000
    2bf8:	d9002517 	ldw	r4,148(sp)
    2bfc:	203fec26 	beq	r4,zero,2bb0 <__alt_data_end+0xf8002bb0>
    2c00:	10c000c7 	ldb	r3,3(r2)
    2c04:	1801781e 	bne	r3,zero,31e8 <_dtoa_r+0x6f8>
    2c08:	10c000c4 	addi	r3,r2,3
    2c0c:	d9802517 	ldw	r6,148(sp)
    2c10:	30c00015 	stw	r3,0(r6)
    2c14:	003fe606 	br	2bb0 <__alt_data_end+0xf8002bb0>
    2c18:	04e00034 	movhi	r19,32768
    2c1c:	9cffffc4 	addi	r19,r19,-1
    2c20:	00800044 	movi	r2,1
    2c24:	8ce6703a 	and	r19,r17,r19
    2c28:	80800015 	stw	r2,0(r16)
    2c2c:	9823883a 	mov	r17,r19
    2c30:	003fcc06 	br	2b64 <__alt_data_end+0xf8002b64>
    2c34:	d8800204 	addi	r2,sp,8
    2c38:	d8800015 	stw	r2,0(sp)
    2c3c:	d9c00104 	addi	r7,sp,4
    2c40:	900b883a 	mov	r5,r18
    2c44:	980d883a 	mov	r6,r19
    2c48:	e009883a 	mov	r4,fp
    2c4c:	8820d53a 	srli	r16,r17,20
    2c50:	0006e200 	call	6e20 <__d2b>
    2c54:	d8800915 	stw	r2,36(sp)
    2c58:	8001651e 	bne	r16,zero,31f0 <_dtoa_r+0x700>
    2c5c:	dd800217 	ldw	r22,8(sp)
    2c60:	dc000117 	ldw	r16,4(sp)
    2c64:	00800804 	movi	r2,32
    2c68:	b421883a 	add	r16,r22,r16
    2c6c:	80c10c84 	addi	r3,r16,1074
    2c70:	10c2d10e 	bge	r2,r3,37b8 <_dtoa_r+0xcc8>
    2c74:	00801004 	movi	r2,64
    2c78:	81010484 	addi	r4,r16,1042
    2c7c:	10c7c83a 	sub	r3,r2,r3
    2c80:	9108d83a 	srl	r4,r18,r4
    2c84:	88e2983a 	sll	r17,r17,r3
    2c88:	2448b03a 	or	r4,r4,r17
    2c8c:	000cb080 	call	cb08 <__floatunsidf>
    2c90:	017f8434 	movhi	r5,65040
    2c94:	01800044 	movi	r6,1
    2c98:	1009883a 	mov	r4,r2
    2c9c:	194b883a 	add	r5,r3,r5
    2ca0:	843fffc4 	addi	r16,r16,-1
    2ca4:	d9801115 	stw	r6,68(sp)
    2ca8:	000d883a 	mov	r6,zero
    2cac:	01cffe34 	movhi	r7,16376
    2cb0:	000c0b00 	call	c0b0 <__subdf3>
    2cb4:	0198dbf4 	movhi	r6,25455
    2cb8:	01cff4f4 	movhi	r7,16339
    2cbc:	3190d844 	addi	r6,r6,17249
    2cc0:	39e1e9c4 	addi	r7,r7,-30809
    2cc4:	1009883a 	mov	r4,r2
    2cc8:	180b883a 	mov	r5,r3
    2ccc:	000b9980 	call	b998 <__muldf3>
    2cd0:	01a2d874 	movhi	r6,35681
    2cd4:	01cff1f4 	movhi	r7,16327
    2cd8:	31b22cc4 	addi	r6,r6,-14157
    2cdc:	39e28a04 	addi	r7,r7,-30168
    2ce0:	180b883a 	mov	r5,r3
    2ce4:	1009883a 	mov	r4,r2
    2ce8:	000a5ac0 	call	a5ac <__adddf3>
    2cec:	8009883a 	mov	r4,r16
    2cf0:	1029883a 	mov	r20,r2
    2cf4:	1823883a 	mov	r17,r3
    2cf8:	000ca2c0 	call	ca2c <__floatsidf>
    2cfc:	019427f4 	movhi	r6,20639
    2d00:	01cff4f4 	movhi	r7,16339
    2d04:	319e7ec4 	addi	r6,r6,31227
    2d08:	39d104c4 	addi	r7,r7,17427
    2d0c:	1009883a 	mov	r4,r2
    2d10:	180b883a 	mov	r5,r3
    2d14:	000b9980 	call	b998 <__muldf3>
    2d18:	100d883a 	mov	r6,r2
    2d1c:	180f883a 	mov	r7,r3
    2d20:	a009883a 	mov	r4,r20
    2d24:	880b883a 	mov	r5,r17
    2d28:	000a5ac0 	call	a5ac <__adddf3>
    2d2c:	1009883a 	mov	r4,r2
    2d30:	180b883a 	mov	r5,r3
    2d34:	1029883a 	mov	r20,r2
    2d38:	1823883a 	mov	r17,r3
    2d3c:	000c9ac0 	call	c9ac <__fixdfsi>
    2d40:	000d883a 	mov	r6,zero
    2d44:	000f883a 	mov	r7,zero
    2d48:	a009883a 	mov	r4,r20
    2d4c:	880b883a 	mov	r5,r17
    2d50:	d8800515 	stw	r2,20(sp)
    2d54:	000b8a40 	call	b8a4 <__ledf2>
    2d58:	10028716 	blt	r2,zero,3778 <_dtoa_r+0xc88>
    2d5c:	d8c00517 	ldw	r3,20(sp)
    2d60:	00800584 	movi	r2,22
    2d64:	10c27536 	bltu	r2,r3,373c <_dtoa_r+0xc4c>
    2d68:	180490fa 	slli	r2,r3,3
    2d6c:	00c00074 	movhi	r3,1
    2d70:	18fe2804 	addi	r3,r3,-1888
    2d74:	1885883a 	add	r2,r3,r2
    2d78:	11000017 	ldw	r4,0(r2)
    2d7c:	11400117 	ldw	r5,4(r2)
    2d80:	900d883a 	mov	r6,r18
    2d84:	980f883a 	mov	r7,r19
    2d88:	000b7c80 	call	b7c8 <__gedf2>
    2d8c:	00828d0e 	bge	zero,r2,37c4 <_dtoa_r+0xcd4>
    2d90:	d9000517 	ldw	r4,20(sp)
    2d94:	d8000e15 	stw	zero,56(sp)
    2d98:	213fffc4 	addi	r4,r4,-1
    2d9c:	d9000515 	stw	r4,20(sp)
    2da0:	b42dc83a 	sub	r22,r22,r16
    2da4:	b5bfffc4 	addi	r22,r22,-1
    2da8:	b0026f16 	blt	r22,zero,3768 <_dtoa_r+0xc78>
    2dac:	d8000815 	stw	zero,32(sp)
    2db0:	d9c00517 	ldw	r7,20(sp)
    2db4:	38026416 	blt	r7,zero,3748 <_dtoa_r+0xc58>
    2db8:	b1ed883a 	add	r22,r22,r7
    2dbc:	d9c00d15 	stw	r7,52(sp)
    2dc0:	d8000a15 	stw	zero,40(sp)
    2dc4:	d9800317 	ldw	r6,12(sp)
    2dc8:	00800244 	movi	r2,9
    2dcc:	11811436 	bltu	r2,r6,3220 <_dtoa_r+0x730>
    2dd0:	00800144 	movi	r2,5
    2dd4:	1184e10e 	bge	r2,r6,415c <_dtoa_r+0x166c>
    2dd8:	31bfff04 	addi	r6,r6,-4
    2ddc:	d9800315 	stw	r6,12(sp)
    2de0:	0023883a 	mov	r17,zero
    2de4:	d9800317 	ldw	r6,12(sp)
    2de8:	008000c4 	movi	r2,3
    2dec:	30836726 	beq	r6,r2,3b8c <_dtoa_r+0x109c>
    2df0:	1183410e 	bge	r2,r6,3af8 <_dtoa_r+0x1008>
    2df4:	d9c00317 	ldw	r7,12(sp)
    2df8:	00800104 	movi	r2,4
    2dfc:	38827c26 	beq	r7,r2,37f0 <_dtoa_r+0xd00>
    2e00:	00800144 	movi	r2,5
    2e04:	3884c41e 	bne	r7,r2,4118 <_dtoa_r+0x1628>
    2e08:	00800044 	movi	r2,1
    2e0c:	d8800b15 	stw	r2,44(sp)
    2e10:	d8c00517 	ldw	r3,20(sp)
    2e14:	d9002217 	ldw	r4,136(sp)
    2e18:	1907883a 	add	r3,r3,r4
    2e1c:	19800044 	addi	r6,r3,1
    2e20:	d8c00c15 	stw	r3,48(sp)
    2e24:	d9800615 	stw	r6,24(sp)
    2e28:	0183a40e 	bge	zero,r6,3cbc <_dtoa_r+0x11cc>
    2e2c:	d9800617 	ldw	r6,24(sp)
    2e30:	3021883a 	mov	r16,r6
    2e34:	e0001115 	stw	zero,68(fp)
    2e38:	008005c4 	movi	r2,23
    2e3c:	1184c92e 	bgeu	r2,r6,4164 <_dtoa_r+0x1674>
    2e40:	00c00044 	movi	r3,1
    2e44:	00800104 	movi	r2,4
    2e48:	1085883a 	add	r2,r2,r2
    2e4c:	11000504 	addi	r4,r2,20
    2e50:	180b883a 	mov	r5,r3
    2e54:	18c00044 	addi	r3,r3,1
    2e58:	313ffb2e 	bgeu	r6,r4,2e48 <__alt_data_end+0xf8002e48>
    2e5c:	e1401115 	stw	r5,68(fp)
    2e60:	e009883a 	mov	r4,fp
    2e64:	000618c0 	call	618c <_Balloc>
    2e68:	d8800715 	stw	r2,28(sp)
    2e6c:	e0801015 	stw	r2,64(fp)
    2e70:	00800384 	movi	r2,14
    2e74:	1400f736 	bltu	r2,r16,3254 <_dtoa_r+0x764>
    2e78:	8800f626 	beq	r17,zero,3254 <_dtoa_r+0x764>
    2e7c:	d9c00517 	ldw	r7,20(sp)
    2e80:	01c39a0e 	bge	zero,r7,3cec <_dtoa_r+0x11fc>
    2e84:	388003cc 	andi	r2,r7,15
    2e88:	100490fa 	slli	r2,r2,3
    2e8c:	382bd13a 	srai	r21,r7,4
    2e90:	00c00074 	movhi	r3,1
    2e94:	18fe2804 	addi	r3,r3,-1888
    2e98:	1885883a 	add	r2,r3,r2
    2e9c:	a8c0040c 	andi	r3,r21,16
    2ea0:	12400017 	ldw	r9,0(r2)
    2ea4:	12000117 	ldw	r8,4(r2)
    2ea8:	18037926 	beq	r3,zero,3c90 <_dtoa_r+0x11a0>
    2eac:	00800074 	movhi	r2,1
    2eb0:	10be1e04 	addi	r2,r2,-1928
    2eb4:	11800817 	ldw	r6,32(r2)
    2eb8:	11c00917 	ldw	r7,36(r2)
    2ebc:	9009883a 	mov	r4,r18
    2ec0:	980b883a 	mov	r5,r19
    2ec4:	da001715 	stw	r8,92(sp)
    2ec8:	da401615 	stw	r9,88(sp)
    2ecc:	000ae580 	call	ae58 <__divdf3>
    2ed0:	da001717 	ldw	r8,92(sp)
    2ed4:	da401617 	ldw	r9,88(sp)
    2ed8:	ad4003cc 	andi	r21,r21,15
    2edc:	040000c4 	movi	r16,3
    2ee0:	1023883a 	mov	r17,r2
    2ee4:	1829883a 	mov	r20,r3
    2ee8:	a8001126 	beq	r21,zero,2f30 <_dtoa_r+0x440>
    2eec:	05c00074 	movhi	r23,1
    2ef0:	bdfe1e04 	addi	r23,r23,-1928
    2ef4:	4805883a 	mov	r2,r9
    2ef8:	4007883a 	mov	r3,r8
    2efc:	a980004c 	andi	r6,r21,1
    2f00:	1009883a 	mov	r4,r2
    2f04:	a82bd07a 	srai	r21,r21,1
    2f08:	180b883a 	mov	r5,r3
    2f0c:	30000426 	beq	r6,zero,2f20 <_dtoa_r+0x430>
    2f10:	b9800017 	ldw	r6,0(r23)
    2f14:	b9c00117 	ldw	r7,4(r23)
    2f18:	84000044 	addi	r16,r16,1
    2f1c:	000b9980 	call	b998 <__muldf3>
    2f20:	bdc00204 	addi	r23,r23,8
    2f24:	a83ff51e 	bne	r21,zero,2efc <__alt_data_end+0xf8002efc>
    2f28:	1013883a 	mov	r9,r2
    2f2c:	1811883a 	mov	r8,r3
    2f30:	480d883a 	mov	r6,r9
    2f34:	400f883a 	mov	r7,r8
    2f38:	8809883a 	mov	r4,r17
    2f3c:	a00b883a 	mov	r5,r20
    2f40:	000ae580 	call	ae58 <__divdf3>
    2f44:	d8800f15 	stw	r2,60(sp)
    2f48:	d8c01015 	stw	r3,64(sp)
    2f4c:	d8c00e17 	ldw	r3,56(sp)
    2f50:	18000626 	beq	r3,zero,2f6c <_dtoa_r+0x47c>
    2f54:	d9000f17 	ldw	r4,60(sp)
    2f58:	d9401017 	ldw	r5,64(sp)
    2f5c:	000d883a 	mov	r6,zero
    2f60:	01cffc34 	movhi	r7,16368
    2f64:	000b8a40 	call	b8a4 <__ledf2>
    2f68:	10040b16 	blt	r2,zero,3f98 <_dtoa_r+0x14a8>
    2f6c:	8009883a 	mov	r4,r16
    2f70:	000ca2c0 	call	ca2c <__floatsidf>
    2f74:	d9800f17 	ldw	r6,60(sp)
    2f78:	d9c01017 	ldw	r7,64(sp)
    2f7c:	1009883a 	mov	r4,r2
    2f80:	180b883a 	mov	r5,r3
    2f84:	000b9980 	call	b998 <__muldf3>
    2f88:	000d883a 	mov	r6,zero
    2f8c:	01d00734 	movhi	r7,16412
    2f90:	1009883a 	mov	r4,r2
    2f94:	180b883a 	mov	r5,r3
    2f98:	000a5ac0 	call	a5ac <__adddf3>
    2f9c:	1021883a 	mov	r16,r2
    2fa0:	d8800617 	ldw	r2,24(sp)
    2fa4:	047f3034 	movhi	r17,64704
    2fa8:	1c63883a 	add	r17,r3,r17
    2fac:	10031826 	beq	r2,zero,3c10 <_dtoa_r+0x1120>
    2fb0:	d8c00517 	ldw	r3,20(sp)
    2fb4:	db000617 	ldw	r12,24(sp)
    2fb8:	d8c01315 	stw	r3,76(sp)
    2fbc:	d9000b17 	ldw	r4,44(sp)
    2fc0:	20038f26 	beq	r4,zero,3e00 <_dtoa_r+0x1310>
    2fc4:	60bfffc4 	addi	r2,r12,-1
    2fc8:	100490fa 	slli	r2,r2,3
    2fcc:	00c00074 	movhi	r3,1
    2fd0:	18fe2804 	addi	r3,r3,-1888
    2fd4:	1885883a 	add	r2,r3,r2
    2fd8:	11800017 	ldw	r6,0(r2)
    2fdc:	11c00117 	ldw	r7,4(r2)
    2fe0:	d8800717 	ldw	r2,28(sp)
    2fe4:	0009883a 	mov	r4,zero
    2fe8:	014ff834 	movhi	r5,16352
    2fec:	db001615 	stw	r12,88(sp)
    2ff0:	15c00044 	addi	r23,r2,1
    2ff4:	000ae580 	call	ae58 <__divdf3>
    2ff8:	800d883a 	mov	r6,r16
    2ffc:	880f883a 	mov	r7,r17
    3000:	1009883a 	mov	r4,r2
    3004:	180b883a 	mov	r5,r3
    3008:	000c0b00 	call	c0b0 <__subdf3>
    300c:	d9401017 	ldw	r5,64(sp)
    3010:	d9000f17 	ldw	r4,60(sp)
    3014:	102b883a 	mov	r21,r2
    3018:	d8c01215 	stw	r3,72(sp)
    301c:	000c9ac0 	call	c9ac <__fixdfsi>
    3020:	1009883a 	mov	r4,r2
    3024:	1029883a 	mov	r20,r2
    3028:	000ca2c0 	call	ca2c <__floatsidf>
    302c:	d9000f17 	ldw	r4,60(sp)
    3030:	d9401017 	ldw	r5,64(sp)
    3034:	100d883a 	mov	r6,r2
    3038:	180f883a 	mov	r7,r3
    303c:	000c0b00 	call	c0b0 <__subdf3>
    3040:	1823883a 	mov	r17,r3
    3044:	d8c00717 	ldw	r3,28(sp)
    3048:	d9401217 	ldw	r5,72(sp)
    304c:	a2000c04 	addi	r8,r20,48
    3050:	1021883a 	mov	r16,r2
    3054:	1a000005 	stb	r8,0(r3)
    3058:	800d883a 	mov	r6,r16
    305c:	880f883a 	mov	r7,r17
    3060:	a809883a 	mov	r4,r21
    3064:	4029883a 	mov	r20,r8
    3068:	000b7c80 	call	b7c8 <__gedf2>
    306c:	00841d16 	blt	zero,r2,40e4 <_dtoa_r+0x15f4>
    3070:	800d883a 	mov	r6,r16
    3074:	880f883a 	mov	r7,r17
    3078:	0009883a 	mov	r4,zero
    307c:	014ffc34 	movhi	r5,16368
    3080:	000c0b00 	call	c0b0 <__subdf3>
    3084:	d9401217 	ldw	r5,72(sp)
    3088:	100d883a 	mov	r6,r2
    308c:	180f883a 	mov	r7,r3
    3090:	a809883a 	mov	r4,r21
    3094:	000b7c80 	call	b7c8 <__gedf2>
    3098:	db001617 	ldw	r12,88(sp)
    309c:	00840e16 	blt	zero,r2,40d8 <_dtoa_r+0x15e8>
    30a0:	00800044 	movi	r2,1
    30a4:	13006b0e 	bge	r2,r12,3254 <_dtoa_r+0x764>
    30a8:	d9000717 	ldw	r4,28(sp)
    30ac:	dd800f15 	stw	r22,60(sp)
    30b0:	dcc01015 	stw	r19,64(sp)
    30b4:	2319883a 	add	r12,r4,r12
    30b8:	dcc01217 	ldw	r19,72(sp)
    30bc:	602d883a 	mov	r22,r12
    30c0:	dc801215 	stw	r18,72(sp)
    30c4:	b825883a 	mov	r18,r23
    30c8:	00000906 	br	30f0 <_dtoa_r+0x600>
    30cc:	000c0b00 	call	c0b0 <__subdf3>
    30d0:	a80d883a 	mov	r6,r21
    30d4:	980f883a 	mov	r7,r19
    30d8:	1009883a 	mov	r4,r2
    30dc:	180b883a 	mov	r5,r3
    30e0:	000b8a40 	call	b8a4 <__ledf2>
    30e4:	1003e816 	blt	r2,zero,4088 <_dtoa_r+0x1598>
    30e8:	b825883a 	mov	r18,r23
    30ec:	bd83e926 	beq	r23,r22,4094 <_dtoa_r+0x15a4>
    30f0:	a809883a 	mov	r4,r21
    30f4:	980b883a 	mov	r5,r19
    30f8:	000d883a 	mov	r6,zero
    30fc:	01d00934 	movhi	r7,16420
    3100:	000b9980 	call	b998 <__muldf3>
    3104:	000d883a 	mov	r6,zero
    3108:	01d00934 	movhi	r7,16420
    310c:	8009883a 	mov	r4,r16
    3110:	880b883a 	mov	r5,r17
    3114:	102b883a 	mov	r21,r2
    3118:	1827883a 	mov	r19,r3
    311c:	000b9980 	call	b998 <__muldf3>
    3120:	180b883a 	mov	r5,r3
    3124:	1009883a 	mov	r4,r2
    3128:	1821883a 	mov	r16,r3
    312c:	1023883a 	mov	r17,r2
    3130:	000c9ac0 	call	c9ac <__fixdfsi>
    3134:	1009883a 	mov	r4,r2
    3138:	1029883a 	mov	r20,r2
    313c:	000ca2c0 	call	ca2c <__floatsidf>
    3140:	8809883a 	mov	r4,r17
    3144:	800b883a 	mov	r5,r16
    3148:	100d883a 	mov	r6,r2
    314c:	180f883a 	mov	r7,r3
    3150:	000c0b00 	call	c0b0 <__subdf3>
    3154:	a5000c04 	addi	r20,r20,48
    3158:	a80d883a 	mov	r6,r21
    315c:	980f883a 	mov	r7,r19
    3160:	1009883a 	mov	r4,r2
    3164:	180b883a 	mov	r5,r3
    3168:	95000005 	stb	r20,0(r18)
    316c:	1021883a 	mov	r16,r2
    3170:	1823883a 	mov	r17,r3
    3174:	000b8a40 	call	b8a4 <__ledf2>
    3178:	bdc00044 	addi	r23,r23,1
    317c:	800d883a 	mov	r6,r16
    3180:	880f883a 	mov	r7,r17
    3184:	0009883a 	mov	r4,zero
    3188:	014ffc34 	movhi	r5,16368
    318c:	103fcf0e 	bge	r2,zero,30cc <__alt_data_end+0xf80030cc>
    3190:	d8c01317 	ldw	r3,76(sp)
    3194:	d8c00515 	stw	r3,20(sp)
    3198:	d9400917 	ldw	r5,36(sp)
    319c:	e009883a 	mov	r4,fp
    31a0:	00062340 	call	6234 <_Bfree>
    31a4:	d9000517 	ldw	r4,20(sp)
    31a8:	d9802317 	ldw	r6,140(sp)
    31ac:	d9c02517 	ldw	r7,148(sp)
    31b0:	b8000005 	stb	zero,0(r23)
    31b4:	20800044 	addi	r2,r4,1
    31b8:	30800015 	stw	r2,0(r6)
    31bc:	3802aa26 	beq	r7,zero,3c68 <_dtoa_r+0x1178>
    31c0:	3dc00015 	stw	r23,0(r7)
    31c4:	d8800717 	ldw	r2,28(sp)
    31c8:	003e7906 	br	2bb0 <__alt_data_end+0xf8002bb0>
    31cc:	00800434 	movhi	r2,16
    31d0:	10bfffc4 	addi	r2,r2,-1
    31d4:	88a2703a 	and	r17,r17,r2
    31d8:	883e851e 	bne	r17,zero,2bf0 <__alt_data_end+0xf8002bf0>
    31dc:	00800074 	movhi	r2,1
    31e0:	10be0904 	addi	r2,r2,-2012
    31e4:	003e8406 	br	2bf8 <__alt_data_end+0xf8002bf8>
    31e8:	10c00204 	addi	r3,r2,8
    31ec:	003e8706 	br	2c0c <__alt_data_end+0xf8002c0c>
    31f0:	01400434 	movhi	r5,16
    31f4:	297fffc4 	addi	r5,r5,-1
    31f8:	994a703a 	and	r5,r19,r5
    31fc:	9009883a 	mov	r4,r18
    3200:	843f0044 	addi	r16,r16,-1023
    3204:	294ffc34 	orhi	r5,r5,16368
    3208:	dd800217 	ldw	r22,8(sp)
    320c:	d8001115 	stw	zero,68(sp)
    3210:	003ea506 	br	2ca8 <__alt_data_end+0xf8002ca8>
    3214:	00800074 	movhi	r2,1
    3218:	10be0004 	addi	r2,r2,-2048
    321c:	003e6406 	br	2bb0 <__alt_data_end+0xf8002bb0>
    3220:	e0001115 	stw	zero,68(fp)
    3224:	000b883a 	mov	r5,zero
    3228:	e009883a 	mov	r4,fp
    322c:	000618c0 	call	618c <_Balloc>
    3230:	01bfffc4 	movi	r6,-1
    3234:	01c00044 	movi	r7,1
    3238:	d8800715 	stw	r2,28(sp)
    323c:	d9800c15 	stw	r6,48(sp)
    3240:	e0801015 	stw	r2,64(fp)
    3244:	d8000315 	stw	zero,12(sp)
    3248:	d9c00b15 	stw	r7,44(sp)
    324c:	d9800615 	stw	r6,24(sp)
    3250:	d8002215 	stw	zero,136(sp)
    3254:	d8800117 	ldw	r2,4(sp)
    3258:	10008916 	blt	r2,zero,3480 <_dtoa_r+0x990>
    325c:	d9000517 	ldw	r4,20(sp)
    3260:	00c00384 	movi	r3,14
    3264:	19008616 	blt	r3,r4,3480 <_dtoa_r+0x990>
    3268:	200490fa 	slli	r2,r4,3
    326c:	00c00074 	movhi	r3,1
    3270:	d9802217 	ldw	r6,136(sp)
    3274:	18fe2804 	addi	r3,r3,-1888
    3278:	1885883a 	add	r2,r3,r2
    327c:	14000017 	ldw	r16,0(r2)
    3280:	14400117 	ldw	r17,4(r2)
    3284:	30016316 	blt	r6,zero,3814 <_dtoa_r+0xd24>
    3288:	800d883a 	mov	r6,r16
    328c:	880f883a 	mov	r7,r17
    3290:	9009883a 	mov	r4,r18
    3294:	980b883a 	mov	r5,r19
    3298:	000ae580 	call	ae58 <__divdf3>
    329c:	180b883a 	mov	r5,r3
    32a0:	1009883a 	mov	r4,r2
    32a4:	000c9ac0 	call	c9ac <__fixdfsi>
    32a8:	1009883a 	mov	r4,r2
    32ac:	102b883a 	mov	r21,r2
    32b0:	000ca2c0 	call	ca2c <__floatsidf>
    32b4:	800d883a 	mov	r6,r16
    32b8:	880f883a 	mov	r7,r17
    32bc:	1009883a 	mov	r4,r2
    32c0:	180b883a 	mov	r5,r3
    32c4:	000b9980 	call	b998 <__muldf3>
    32c8:	100d883a 	mov	r6,r2
    32cc:	180f883a 	mov	r7,r3
    32d0:	9009883a 	mov	r4,r18
    32d4:	980b883a 	mov	r5,r19
    32d8:	000c0b00 	call	c0b0 <__subdf3>
    32dc:	d9c00717 	ldw	r7,28(sp)
    32e0:	1009883a 	mov	r4,r2
    32e4:	a8800c04 	addi	r2,r21,48
    32e8:	38800005 	stb	r2,0(r7)
    32ec:	3dc00044 	addi	r23,r7,1
    32f0:	d9c00617 	ldw	r7,24(sp)
    32f4:	01800044 	movi	r6,1
    32f8:	180b883a 	mov	r5,r3
    32fc:	2005883a 	mov	r2,r4
    3300:	39803826 	beq	r7,r6,33e4 <_dtoa_r+0x8f4>
    3304:	000d883a 	mov	r6,zero
    3308:	01d00934 	movhi	r7,16420
    330c:	000b9980 	call	b998 <__muldf3>
    3310:	000d883a 	mov	r6,zero
    3314:	000f883a 	mov	r7,zero
    3318:	1009883a 	mov	r4,r2
    331c:	180b883a 	mov	r5,r3
    3320:	1025883a 	mov	r18,r2
    3324:	1827883a 	mov	r19,r3
    3328:	000b7400 	call	b740 <__eqdf2>
    332c:	103f9a26 	beq	r2,zero,3198 <__alt_data_end+0xf8003198>
    3330:	d9c00617 	ldw	r7,24(sp)
    3334:	d8c00717 	ldw	r3,28(sp)
    3338:	b829883a 	mov	r20,r23
    333c:	38bfffc4 	addi	r2,r7,-1
    3340:	18ad883a 	add	r22,r3,r2
    3344:	00000a06 	br	3370 <_dtoa_r+0x880>
    3348:	000b9980 	call	b998 <__muldf3>
    334c:	000d883a 	mov	r6,zero
    3350:	000f883a 	mov	r7,zero
    3354:	1009883a 	mov	r4,r2
    3358:	180b883a 	mov	r5,r3
    335c:	1025883a 	mov	r18,r2
    3360:	1827883a 	mov	r19,r3
    3364:	b829883a 	mov	r20,r23
    3368:	000b7400 	call	b740 <__eqdf2>
    336c:	103f8a26 	beq	r2,zero,3198 <__alt_data_end+0xf8003198>
    3370:	800d883a 	mov	r6,r16
    3374:	880f883a 	mov	r7,r17
    3378:	9009883a 	mov	r4,r18
    337c:	980b883a 	mov	r5,r19
    3380:	000ae580 	call	ae58 <__divdf3>
    3384:	180b883a 	mov	r5,r3
    3388:	1009883a 	mov	r4,r2
    338c:	000c9ac0 	call	c9ac <__fixdfsi>
    3390:	1009883a 	mov	r4,r2
    3394:	102b883a 	mov	r21,r2
    3398:	000ca2c0 	call	ca2c <__floatsidf>
    339c:	800d883a 	mov	r6,r16
    33a0:	880f883a 	mov	r7,r17
    33a4:	1009883a 	mov	r4,r2
    33a8:	180b883a 	mov	r5,r3
    33ac:	000b9980 	call	b998 <__muldf3>
    33b0:	100d883a 	mov	r6,r2
    33b4:	180f883a 	mov	r7,r3
    33b8:	9009883a 	mov	r4,r18
    33bc:	980b883a 	mov	r5,r19
    33c0:	000c0b00 	call	c0b0 <__subdf3>
    33c4:	aa000c04 	addi	r8,r21,48
    33c8:	a2000005 	stb	r8,0(r20)
    33cc:	000d883a 	mov	r6,zero
    33d0:	01d00934 	movhi	r7,16420
    33d4:	1009883a 	mov	r4,r2
    33d8:	180b883a 	mov	r5,r3
    33dc:	a5c00044 	addi	r23,r20,1
    33e0:	b53fd91e 	bne	r22,r20,3348 <__alt_data_end+0xf8003348>
    33e4:	100d883a 	mov	r6,r2
    33e8:	180f883a 	mov	r7,r3
    33ec:	1009883a 	mov	r4,r2
    33f0:	180b883a 	mov	r5,r3
    33f4:	000a5ac0 	call	a5ac <__adddf3>
    33f8:	100d883a 	mov	r6,r2
    33fc:	180f883a 	mov	r7,r3
    3400:	8009883a 	mov	r4,r16
    3404:	880b883a 	mov	r5,r17
    3408:	1027883a 	mov	r19,r2
    340c:	1825883a 	mov	r18,r3
    3410:	000b8a40 	call	b8a4 <__ledf2>
    3414:	10000816 	blt	r2,zero,3438 <_dtoa_r+0x948>
    3418:	980d883a 	mov	r6,r19
    341c:	900f883a 	mov	r7,r18
    3420:	8009883a 	mov	r4,r16
    3424:	880b883a 	mov	r5,r17
    3428:	000b7400 	call	b740 <__eqdf2>
    342c:	103f5a1e 	bne	r2,zero,3198 <__alt_data_end+0xf8003198>
    3430:	ad40004c 	andi	r21,r21,1
    3434:	a83f5826 	beq	r21,zero,3198 <__alt_data_end+0xf8003198>
    3438:	bd3fffc3 	ldbu	r20,-1(r23)
    343c:	b8bfffc4 	addi	r2,r23,-1
    3440:	1007883a 	mov	r3,r2
    3444:	01400e44 	movi	r5,57
    3448:	d9800717 	ldw	r6,28(sp)
    344c:	00000506 	br	3464 <_dtoa_r+0x974>
    3450:	18ffffc4 	addi	r3,r3,-1
    3454:	11824726 	beq	r2,r6,3d74 <_dtoa_r+0x1284>
    3458:	1d000003 	ldbu	r20,0(r3)
    345c:	102f883a 	mov	r23,r2
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	a1003fcc 	andi	r4,r20,255
    3468:	2100201c 	xori	r4,r4,128
    346c:	213fe004 	addi	r4,r4,-128
    3470:	217ff726 	beq	r4,r5,3450 <__alt_data_end+0xf8003450>
    3474:	a2000044 	addi	r8,r20,1
    3478:	12000005 	stb	r8,0(r2)
    347c:	003f4606 	br	3198 <__alt_data_end+0xf8003198>
    3480:	d9000b17 	ldw	r4,44(sp)
    3484:	2000c826 	beq	r4,zero,37a8 <_dtoa_r+0xcb8>
    3488:	d9800317 	ldw	r6,12(sp)
    348c:	00c00044 	movi	r3,1
    3490:	1980f90e 	bge	r3,r6,3878 <_dtoa_r+0xd88>
    3494:	d8800617 	ldw	r2,24(sp)
    3498:	d8c00a17 	ldw	r3,40(sp)
    349c:	157fffc4 	addi	r21,r2,-1
    34a0:	1d41f316 	blt	r3,r21,3c70 <_dtoa_r+0x1180>
    34a4:	1d6bc83a 	sub	r21,r3,r21
    34a8:	d9c00617 	ldw	r7,24(sp)
    34ac:	3802aa16 	blt	r7,zero,3f58 <_dtoa_r+0x1468>
    34b0:	dd000817 	ldw	r20,32(sp)
    34b4:	d8800617 	ldw	r2,24(sp)
    34b8:	d8c00817 	ldw	r3,32(sp)
    34bc:	01400044 	movi	r5,1
    34c0:	e009883a 	mov	r4,fp
    34c4:	1887883a 	add	r3,r3,r2
    34c8:	d8c00815 	stw	r3,32(sp)
    34cc:	b0ad883a 	add	r22,r22,r2
    34d0:	00065980 	call	6598 <__i2b>
    34d4:	1023883a 	mov	r17,r2
    34d8:	a0000826 	beq	r20,zero,34fc <_dtoa_r+0xa0c>
    34dc:	0580070e 	bge	zero,r22,34fc <_dtoa_r+0xa0c>
    34e0:	a005883a 	mov	r2,r20
    34e4:	b500b916 	blt	r22,r20,37cc <_dtoa_r+0xcdc>
    34e8:	d9000817 	ldw	r4,32(sp)
    34ec:	a0a9c83a 	sub	r20,r20,r2
    34f0:	b0adc83a 	sub	r22,r22,r2
    34f4:	2089c83a 	sub	r4,r4,r2
    34f8:	d9000815 	stw	r4,32(sp)
    34fc:	d9800a17 	ldw	r6,40(sp)
    3500:	0181810e 	bge	zero,r6,3b08 <_dtoa_r+0x1018>
    3504:	d9c00b17 	ldw	r7,44(sp)
    3508:	3800b326 	beq	r7,zero,37d8 <_dtoa_r+0xce8>
    350c:	a800b226 	beq	r21,zero,37d8 <_dtoa_r+0xce8>
    3510:	880b883a 	mov	r5,r17
    3514:	a80d883a 	mov	r6,r21
    3518:	e009883a 	mov	r4,fp
    351c:	00067cc0 	call	67cc <__pow5mult>
    3520:	d9800917 	ldw	r6,36(sp)
    3524:	100b883a 	mov	r5,r2
    3528:	e009883a 	mov	r4,fp
    352c:	1023883a 	mov	r17,r2
    3530:	00065d40 	call	65d4 <__multiply>
    3534:	1021883a 	mov	r16,r2
    3538:	d8800a17 	ldw	r2,40(sp)
    353c:	d9400917 	ldw	r5,36(sp)
    3540:	e009883a 	mov	r4,fp
    3544:	1545c83a 	sub	r2,r2,r21
    3548:	d8800a15 	stw	r2,40(sp)
    354c:	00062340 	call	6234 <_Bfree>
    3550:	d8c00a17 	ldw	r3,40(sp)
    3554:	18009f1e 	bne	r3,zero,37d4 <_dtoa_r+0xce4>
    3558:	05c00044 	movi	r23,1
    355c:	e009883a 	mov	r4,fp
    3560:	b80b883a 	mov	r5,r23
    3564:	00065980 	call	6598 <__i2b>
    3568:	d9000d17 	ldw	r4,52(sp)
    356c:	102b883a 	mov	r21,r2
    3570:	2000ce26 	beq	r4,zero,38ac <_dtoa_r+0xdbc>
    3574:	200d883a 	mov	r6,r4
    3578:	100b883a 	mov	r5,r2
    357c:	e009883a 	mov	r4,fp
    3580:	00067cc0 	call	67cc <__pow5mult>
    3584:	d9800317 	ldw	r6,12(sp)
    3588:	102b883a 	mov	r21,r2
    358c:	b981810e 	bge	r23,r6,3b94 <_dtoa_r+0x10a4>
    3590:	0027883a 	mov	r19,zero
    3594:	a8800417 	ldw	r2,16(r21)
    3598:	05c00804 	movi	r23,32
    359c:	10800104 	addi	r2,r2,4
    35a0:	1085883a 	add	r2,r2,r2
    35a4:	1085883a 	add	r2,r2,r2
    35a8:	a885883a 	add	r2,r21,r2
    35ac:	11000017 	ldw	r4,0(r2)
    35b0:	00064800 	call	6480 <__hi0bits>
    35b4:	b885c83a 	sub	r2,r23,r2
    35b8:	1585883a 	add	r2,r2,r22
    35bc:	108007cc 	andi	r2,r2,31
    35c0:	1000b326 	beq	r2,zero,3890 <_dtoa_r+0xda0>
    35c4:	00c00804 	movi	r3,32
    35c8:	1887c83a 	sub	r3,r3,r2
    35cc:	01000104 	movi	r4,4
    35d0:	20c2cd0e 	bge	r4,r3,4108 <_dtoa_r+0x1618>
    35d4:	00c00704 	movi	r3,28
    35d8:	1885c83a 	sub	r2,r3,r2
    35dc:	d8c00817 	ldw	r3,32(sp)
    35e0:	a0a9883a 	add	r20,r20,r2
    35e4:	b0ad883a 	add	r22,r22,r2
    35e8:	1887883a 	add	r3,r3,r2
    35ec:	d8c00815 	stw	r3,32(sp)
    35f0:	d9800817 	ldw	r6,32(sp)
    35f4:	0180040e 	bge	zero,r6,3608 <_dtoa_r+0xb18>
    35f8:	800b883a 	mov	r5,r16
    35fc:	e009883a 	mov	r4,fp
    3600:	000690c0 	call	690c <__lshift>
    3604:	1021883a 	mov	r16,r2
    3608:	0580050e 	bge	zero,r22,3620 <_dtoa_r+0xb30>
    360c:	a80b883a 	mov	r5,r21
    3610:	b00d883a 	mov	r6,r22
    3614:	e009883a 	mov	r4,fp
    3618:	000690c0 	call	690c <__lshift>
    361c:	102b883a 	mov	r21,r2
    3620:	d9c00e17 	ldw	r7,56(sp)
    3624:	3801211e 	bne	r7,zero,3aac <_dtoa_r+0xfbc>
    3628:	d9800617 	ldw	r6,24(sp)
    362c:	0181380e 	bge	zero,r6,3b10 <_dtoa_r+0x1020>
    3630:	d8c00b17 	ldw	r3,44(sp)
    3634:	1800ab1e 	bne	r3,zero,38e4 <_dtoa_r+0xdf4>
    3638:	dc800717 	ldw	r18,28(sp)
    363c:	dcc00617 	ldw	r19,24(sp)
    3640:	9029883a 	mov	r20,r18
    3644:	00000206 	br	3650 <_dtoa_r+0xb60>
    3648:	000625c0 	call	625c <__multadd>
    364c:	1021883a 	mov	r16,r2
    3650:	a80b883a 	mov	r5,r21
    3654:	8009883a 	mov	r4,r16
    3658:	00028f00 	call	28f0 <quorem>
    365c:	10800c04 	addi	r2,r2,48
    3660:	90800005 	stb	r2,0(r18)
    3664:	94800044 	addi	r18,r18,1
    3668:	9507c83a 	sub	r3,r18,r20
    366c:	000f883a 	mov	r7,zero
    3670:	01800284 	movi	r6,10
    3674:	800b883a 	mov	r5,r16
    3678:	e009883a 	mov	r4,fp
    367c:	1cfff216 	blt	r3,r19,3648 <__alt_data_end+0xf8003648>
    3680:	1011883a 	mov	r8,r2
    3684:	d8800617 	ldw	r2,24(sp)
    3688:	0082370e 	bge	zero,r2,3f68 <_dtoa_r+0x1478>
    368c:	d9000717 	ldw	r4,28(sp)
    3690:	0025883a 	mov	r18,zero
    3694:	20af883a 	add	r23,r4,r2
    3698:	01800044 	movi	r6,1
    369c:	800b883a 	mov	r5,r16
    36a0:	e009883a 	mov	r4,fp
    36a4:	da001715 	stw	r8,92(sp)
    36a8:	000690c0 	call	690c <__lshift>
    36ac:	a80b883a 	mov	r5,r21
    36b0:	1009883a 	mov	r4,r2
    36b4:	d8800915 	stw	r2,36(sp)
    36b8:	0006a540 	call	6a54 <__mcmp>
    36bc:	da001717 	ldw	r8,92(sp)
    36c0:	0081800e 	bge	zero,r2,3cc4 <_dtoa_r+0x11d4>
    36c4:	b93fffc3 	ldbu	r4,-1(r23)
    36c8:	b8bfffc4 	addi	r2,r23,-1
    36cc:	1007883a 	mov	r3,r2
    36d0:	01800e44 	movi	r6,57
    36d4:	d9c00717 	ldw	r7,28(sp)
    36d8:	00000506 	br	36f0 <_dtoa_r+0xc00>
    36dc:	18ffffc4 	addi	r3,r3,-1
    36e0:	11c12326 	beq	r2,r7,3b70 <_dtoa_r+0x1080>
    36e4:	19000003 	ldbu	r4,0(r3)
    36e8:	102f883a 	mov	r23,r2
    36ec:	10bfffc4 	addi	r2,r2,-1
    36f0:	21403fcc 	andi	r5,r4,255
    36f4:	2940201c 	xori	r5,r5,128
    36f8:	297fe004 	addi	r5,r5,-128
    36fc:	29bff726 	beq	r5,r6,36dc <__alt_data_end+0xf80036dc>
    3700:	21000044 	addi	r4,r4,1
    3704:	11000005 	stb	r4,0(r2)
    3708:	a80b883a 	mov	r5,r21
    370c:	e009883a 	mov	r4,fp
    3710:	00062340 	call	6234 <_Bfree>
    3714:	883ea026 	beq	r17,zero,3198 <__alt_data_end+0xf8003198>
    3718:	90000426 	beq	r18,zero,372c <_dtoa_r+0xc3c>
    371c:	94400326 	beq	r18,r17,372c <_dtoa_r+0xc3c>
    3720:	900b883a 	mov	r5,r18
    3724:	e009883a 	mov	r4,fp
    3728:	00062340 	call	6234 <_Bfree>
    372c:	880b883a 	mov	r5,r17
    3730:	e009883a 	mov	r4,fp
    3734:	00062340 	call	6234 <_Bfree>
    3738:	003e9706 	br	3198 <__alt_data_end+0xf8003198>
    373c:	01800044 	movi	r6,1
    3740:	d9800e15 	stw	r6,56(sp)
    3744:	003d9606 	br	2da0 <__alt_data_end+0xf8002da0>
    3748:	d8800817 	ldw	r2,32(sp)
    374c:	d8c00517 	ldw	r3,20(sp)
    3750:	d8000d15 	stw	zero,52(sp)
    3754:	10c5c83a 	sub	r2,r2,r3
    3758:	00c9c83a 	sub	r4,zero,r3
    375c:	d8800815 	stw	r2,32(sp)
    3760:	d9000a15 	stw	r4,40(sp)
    3764:	003d9706 	br	2dc4 <__alt_data_end+0xf8002dc4>
    3768:	05adc83a 	sub	r22,zero,r22
    376c:	dd800815 	stw	r22,32(sp)
    3770:	002d883a 	mov	r22,zero
    3774:	003d8e06 	br	2db0 <__alt_data_end+0xf8002db0>
    3778:	d9000517 	ldw	r4,20(sp)
    377c:	000ca2c0 	call	ca2c <__floatsidf>
    3780:	100d883a 	mov	r6,r2
    3784:	180f883a 	mov	r7,r3
    3788:	a009883a 	mov	r4,r20
    378c:	880b883a 	mov	r5,r17
    3790:	000b7400 	call	b740 <__eqdf2>
    3794:	103d7126 	beq	r2,zero,2d5c <__alt_data_end+0xf8002d5c>
    3798:	d9c00517 	ldw	r7,20(sp)
    379c:	39ffffc4 	addi	r7,r7,-1
    37a0:	d9c00515 	stw	r7,20(sp)
    37a4:	003d6d06 	br	2d5c <__alt_data_end+0xf8002d5c>
    37a8:	dd400a17 	ldw	r21,40(sp)
    37ac:	dd000817 	ldw	r20,32(sp)
    37b0:	0023883a 	mov	r17,zero
    37b4:	003f4806 	br	34d8 <__alt_data_end+0xf80034d8>
    37b8:	10e3c83a 	sub	r17,r2,r3
    37bc:	9448983a 	sll	r4,r18,r17
    37c0:	003d3206 	br	2c8c <__alt_data_end+0xf8002c8c>
    37c4:	d8000e15 	stw	zero,56(sp)
    37c8:	003d7506 	br	2da0 <__alt_data_end+0xf8002da0>
    37cc:	b005883a 	mov	r2,r22
    37d0:	003f4506 	br	34e8 <__alt_data_end+0xf80034e8>
    37d4:	dc000915 	stw	r16,36(sp)
    37d8:	d9800a17 	ldw	r6,40(sp)
    37dc:	d9400917 	ldw	r5,36(sp)
    37e0:	e009883a 	mov	r4,fp
    37e4:	00067cc0 	call	67cc <__pow5mult>
    37e8:	1021883a 	mov	r16,r2
    37ec:	003f5a06 	br	3558 <__alt_data_end+0xf8003558>
    37f0:	01c00044 	movi	r7,1
    37f4:	d9c00b15 	stw	r7,44(sp)
    37f8:	d8802217 	ldw	r2,136(sp)
    37fc:	0081280e 	bge	zero,r2,3ca0 <_dtoa_r+0x11b0>
    3800:	100d883a 	mov	r6,r2
    3804:	1021883a 	mov	r16,r2
    3808:	d8800c15 	stw	r2,48(sp)
    380c:	d8800615 	stw	r2,24(sp)
    3810:	003d8806 	br	2e34 <__alt_data_end+0xf8002e34>
    3814:	d8800617 	ldw	r2,24(sp)
    3818:	00be9b16 	blt	zero,r2,3288 <__alt_data_end+0xf8003288>
    381c:	10010f1e 	bne	r2,zero,3c5c <_dtoa_r+0x116c>
    3820:	880b883a 	mov	r5,r17
    3824:	000d883a 	mov	r6,zero
    3828:	01d00534 	movhi	r7,16404
    382c:	8009883a 	mov	r4,r16
    3830:	000b9980 	call	b998 <__muldf3>
    3834:	900d883a 	mov	r6,r18
    3838:	980f883a 	mov	r7,r19
    383c:	1009883a 	mov	r4,r2
    3840:	180b883a 	mov	r5,r3
    3844:	000b7c80 	call	b7c8 <__gedf2>
    3848:	002b883a 	mov	r21,zero
    384c:	0023883a 	mov	r17,zero
    3850:	1000bf16 	blt	r2,zero,3b50 <_dtoa_r+0x1060>
    3854:	d9802217 	ldw	r6,136(sp)
    3858:	ddc00717 	ldw	r23,28(sp)
    385c:	018c303a 	nor	r6,zero,r6
    3860:	d9800515 	stw	r6,20(sp)
    3864:	a80b883a 	mov	r5,r21
    3868:	e009883a 	mov	r4,fp
    386c:	00062340 	call	6234 <_Bfree>
    3870:	883e4926 	beq	r17,zero,3198 <__alt_data_end+0xf8003198>
    3874:	003fad06 	br	372c <__alt_data_end+0xf800372c>
    3878:	d9c01117 	ldw	r7,68(sp)
    387c:	3801bc26 	beq	r7,zero,3f70 <_dtoa_r+0x1480>
    3880:	10810cc4 	addi	r2,r2,1075
    3884:	dd400a17 	ldw	r21,40(sp)
    3888:	dd000817 	ldw	r20,32(sp)
    388c:	003f0a06 	br	34b8 <__alt_data_end+0xf80034b8>
    3890:	00800704 	movi	r2,28
    3894:	d9000817 	ldw	r4,32(sp)
    3898:	a0a9883a 	add	r20,r20,r2
    389c:	b0ad883a 	add	r22,r22,r2
    38a0:	2089883a 	add	r4,r4,r2
    38a4:	d9000815 	stw	r4,32(sp)
    38a8:	003f5106 	br	35f0 <__alt_data_end+0xf80035f0>
    38ac:	d8c00317 	ldw	r3,12(sp)
    38b0:	b8c1fc0e 	bge	r23,r3,40a4 <_dtoa_r+0x15b4>
    38b4:	0027883a 	mov	r19,zero
    38b8:	b805883a 	mov	r2,r23
    38bc:	003f3e06 	br	35b8 <__alt_data_end+0xf80035b8>
    38c0:	880b883a 	mov	r5,r17
    38c4:	e009883a 	mov	r4,fp
    38c8:	000f883a 	mov	r7,zero
    38cc:	01800284 	movi	r6,10
    38d0:	000625c0 	call	625c <__multadd>
    38d4:	d9000c17 	ldw	r4,48(sp)
    38d8:	1023883a 	mov	r17,r2
    38dc:	0102040e 	bge	zero,r4,40f0 <_dtoa_r+0x1600>
    38e0:	d9000615 	stw	r4,24(sp)
    38e4:	0500050e 	bge	zero,r20,38fc <_dtoa_r+0xe0c>
    38e8:	880b883a 	mov	r5,r17
    38ec:	a00d883a 	mov	r6,r20
    38f0:	e009883a 	mov	r4,fp
    38f4:	000690c0 	call	690c <__lshift>
    38f8:	1023883a 	mov	r17,r2
    38fc:	9801241e 	bne	r19,zero,3d90 <_dtoa_r+0x12a0>
    3900:	8829883a 	mov	r20,r17
    3904:	d9000617 	ldw	r4,24(sp)
    3908:	dcc00717 	ldw	r19,28(sp)
    390c:	9480004c 	andi	r18,r18,1
    3910:	20bfffc4 	addi	r2,r4,-1
    3914:	9885883a 	add	r2,r19,r2
    3918:	d8800415 	stw	r2,16(sp)
    391c:	dc800615 	stw	r18,24(sp)
    3920:	a80b883a 	mov	r5,r21
    3924:	8009883a 	mov	r4,r16
    3928:	00028f00 	call	28f0 <quorem>
    392c:	880b883a 	mov	r5,r17
    3930:	8009883a 	mov	r4,r16
    3934:	102f883a 	mov	r23,r2
    3938:	0006a540 	call	6a54 <__mcmp>
    393c:	a80b883a 	mov	r5,r21
    3940:	a00d883a 	mov	r6,r20
    3944:	e009883a 	mov	r4,fp
    3948:	102d883a 	mov	r22,r2
    394c:	0006ab40 	call	6ab4 <__mdiff>
    3950:	1007883a 	mov	r3,r2
    3954:	10800317 	ldw	r2,12(r2)
    3958:	bc800c04 	addi	r18,r23,48
    395c:	180b883a 	mov	r5,r3
    3960:	10004e1e 	bne	r2,zero,3a9c <_dtoa_r+0xfac>
    3964:	8009883a 	mov	r4,r16
    3968:	d8c01615 	stw	r3,88(sp)
    396c:	0006a540 	call	6a54 <__mcmp>
    3970:	d8c01617 	ldw	r3,88(sp)
    3974:	e009883a 	mov	r4,fp
    3978:	d8801615 	stw	r2,88(sp)
    397c:	180b883a 	mov	r5,r3
    3980:	00062340 	call	6234 <_Bfree>
    3984:	d8801617 	ldw	r2,88(sp)
    3988:	1000041e 	bne	r2,zero,399c <_dtoa_r+0xeac>
    398c:	d9800317 	ldw	r6,12(sp)
    3990:	3000021e 	bne	r6,zero,399c <_dtoa_r+0xeac>
    3994:	d8c00617 	ldw	r3,24(sp)
    3998:	18003726 	beq	r3,zero,3a78 <_dtoa_r+0xf88>
    399c:	b0002016 	blt	r22,zero,3a20 <_dtoa_r+0xf30>
    39a0:	b000041e 	bne	r22,zero,39b4 <_dtoa_r+0xec4>
    39a4:	d9000317 	ldw	r4,12(sp)
    39a8:	2000021e 	bne	r4,zero,39b4 <_dtoa_r+0xec4>
    39ac:	d8c00617 	ldw	r3,24(sp)
    39b0:	18001b26 	beq	r3,zero,3a20 <_dtoa_r+0xf30>
    39b4:	00810716 	blt	zero,r2,3dd4 <_dtoa_r+0x12e4>
    39b8:	d8c00417 	ldw	r3,16(sp)
    39bc:	9d800044 	addi	r22,r19,1
    39c0:	9c800005 	stb	r18,0(r19)
    39c4:	b02f883a 	mov	r23,r22
    39c8:	98c10626 	beq	r19,r3,3de4 <_dtoa_r+0x12f4>
    39cc:	800b883a 	mov	r5,r16
    39d0:	000f883a 	mov	r7,zero
    39d4:	01800284 	movi	r6,10
    39d8:	e009883a 	mov	r4,fp
    39dc:	000625c0 	call	625c <__multadd>
    39e0:	1021883a 	mov	r16,r2
    39e4:	000f883a 	mov	r7,zero
    39e8:	01800284 	movi	r6,10
    39ec:	880b883a 	mov	r5,r17
    39f0:	e009883a 	mov	r4,fp
    39f4:	8d002526 	beq	r17,r20,3a8c <_dtoa_r+0xf9c>
    39f8:	000625c0 	call	625c <__multadd>
    39fc:	a00b883a 	mov	r5,r20
    3a00:	000f883a 	mov	r7,zero
    3a04:	01800284 	movi	r6,10
    3a08:	e009883a 	mov	r4,fp
    3a0c:	1023883a 	mov	r17,r2
    3a10:	000625c0 	call	625c <__multadd>
    3a14:	1029883a 	mov	r20,r2
    3a18:	b027883a 	mov	r19,r22
    3a1c:	003fc006 	br	3920 <__alt_data_end+0xf8003920>
    3a20:	9011883a 	mov	r8,r18
    3a24:	00800e0e 	bge	zero,r2,3a60 <_dtoa_r+0xf70>
    3a28:	800b883a 	mov	r5,r16
    3a2c:	01800044 	movi	r6,1
    3a30:	e009883a 	mov	r4,fp
    3a34:	da001715 	stw	r8,92(sp)
    3a38:	000690c0 	call	690c <__lshift>
    3a3c:	a80b883a 	mov	r5,r21
    3a40:	1009883a 	mov	r4,r2
    3a44:	1021883a 	mov	r16,r2
    3a48:	0006a540 	call	6a54 <__mcmp>
    3a4c:	da001717 	ldw	r8,92(sp)
    3a50:	0081960e 	bge	zero,r2,40ac <_dtoa_r+0x15bc>
    3a54:	00800e44 	movi	r2,57
    3a58:	40817026 	beq	r8,r2,401c <_dtoa_r+0x152c>
    3a5c:	ba000c44 	addi	r8,r23,49
    3a60:	8825883a 	mov	r18,r17
    3a64:	9dc00044 	addi	r23,r19,1
    3a68:	9a000005 	stb	r8,0(r19)
    3a6c:	a023883a 	mov	r17,r20
    3a70:	dc000915 	stw	r16,36(sp)
    3a74:	003f2406 	br	3708 <__alt_data_end+0xf8003708>
    3a78:	00800e44 	movi	r2,57
    3a7c:	9011883a 	mov	r8,r18
    3a80:	90816626 	beq	r18,r2,401c <_dtoa_r+0x152c>
    3a84:	05bff516 	blt	zero,r22,3a5c <__alt_data_end+0xf8003a5c>
    3a88:	003ff506 	br	3a60 <__alt_data_end+0xf8003a60>
    3a8c:	000625c0 	call	625c <__multadd>
    3a90:	1023883a 	mov	r17,r2
    3a94:	1029883a 	mov	r20,r2
    3a98:	003fdf06 	br	3a18 <__alt_data_end+0xf8003a18>
    3a9c:	e009883a 	mov	r4,fp
    3aa0:	00062340 	call	6234 <_Bfree>
    3aa4:	00800044 	movi	r2,1
    3aa8:	003fbc06 	br	399c <__alt_data_end+0xf800399c>
    3aac:	a80b883a 	mov	r5,r21
    3ab0:	8009883a 	mov	r4,r16
    3ab4:	0006a540 	call	6a54 <__mcmp>
    3ab8:	103edb0e 	bge	r2,zero,3628 <__alt_data_end+0xf8003628>
    3abc:	800b883a 	mov	r5,r16
    3ac0:	000f883a 	mov	r7,zero
    3ac4:	01800284 	movi	r6,10
    3ac8:	e009883a 	mov	r4,fp
    3acc:	000625c0 	call	625c <__multadd>
    3ad0:	1021883a 	mov	r16,r2
    3ad4:	d8800517 	ldw	r2,20(sp)
    3ad8:	d8c00b17 	ldw	r3,44(sp)
    3adc:	10bfffc4 	addi	r2,r2,-1
    3ae0:	d8800515 	stw	r2,20(sp)
    3ae4:	183f761e 	bne	r3,zero,38c0 <__alt_data_end+0xf80038c0>
    3ae8:	d9000c17 	ldw	r4,48(sp)
    3aec:	0101730e 	bge	zero,r4,40bc <_dtoa_r+0x15cc>
    3af0:	d9000615 	stw	r4,24(sp)
    3af4:	003ed006 	br	3638 <__alt_data_end+0xf8003638>
    3af8:	00800084 	movi	r2,2
    3afc:	3081861e 	bne	r6,r2,4118 <_dtoa_r+0x1628>
    3b00:	d8000b15 	stw	zero,44(sp)
    3b04:	003f3c06 	br	37f8 <__alt_data_end+0xf80037f8>
    3b08:	dc000917 	ldw	r16,36(sp)
    3b0c:	003e9206 	br	3558 <__alt_data_end+0xf8003558>
    3b10:	d9c00317 	ldw	r7,12(sp)
    3b14:	00800084 	movi	r2,2
    3b18:	11fec50e 	bge	r2,r7,3630 <__alt_data_end+0xf8003630>
    3b1c:	d9000617 	ldw	r4,24(sp)
    3b20:	20013c1e 	bne	r4,zero,4014 <_dtoa_r+0x1524>
    3b24:	a80b883a 	mov	r5,r21
    3b28:	000f883a 	mov	r7,zero
    3b2c:	01800144 	movi	r6,5
    3b30:	e009883a 	mov	r4,fp
    3b34:	000625c0 	call	625c <__multadd>
    3b38:	100b883a 	mov	r5,r2
    3b3c:	8009883a 	mov	r4,r16
    3b40:	102b883a 	mov	r21,r2
    3b44:	0006a540 	call	6a54 <__mcmp>
    3b48:	dc000915 	stw	r16,36(sp)
    3b4c:	00bf410e 	bge	zero,r2,3854 <__alt_data_end+0xf8003854>
    3b50:	d9c00717 	ldw	r7,28(sp)
    3b54:	00800c44 	movi	r2,49
    3b58:	38800005 	stb	r2,0(r7)
    3b5c:	d8800517 	ldw	r2,20(sp)
    3b60:	3dc00044 	addi	r23,r7,1
    3b64:	10800044 	addi	r2,r2,1
    3b68:	d8800515 	stw	r2,20(sp)
    3b6c:	003f3d06 	br	3864 <__alt_data_end+0xf8003864>
    3b70:	d9800517 	ldw	r6,20(sp)
    3b74:	d9c00717 	ldw	r7,28(sp)
    3b78:	00800c44 	movi	r2,49
    3b7c:	31800044 	addi	r6,r6,1
    3b80:	d9800515 	stw	r6,20(sp)
    3b84:	38800005 	stb	r2,0(r7)
    3b88:	003edf06 	br	3708 <__alt_data_end+0xf8003708>
    3b8c:	d8000b15 	stw	zero,44(sp)
    3b90:	003c9f06 	br	2e10 <__alt_data_end+0xf8002e10>
    3b94:	903e7e1e 	bne	r18,zero,3590 <__alt_data_end+0xf8003590>
    3b98:	00800434 	movhi	r2,16
    3b9c:	10bfffc4 	addi	r2,r2,-1
    3ba0:	9884703a 	and	r2,r19,r2
    3ba4:	1000ea1e 	bne	r2,zero,3f50 <_dtoa_r+0x1460>
    3ba8:	9cdffc2c 	andhi	r19,r19,32752
    3bac:	9800e826 	beq	r19,zero,3f50 <_dtoa_r+0x1460>
    3bb0:	d9c00817 	ldw	r7,32(sp)
    3bb4:	b5800044 	addi	r22,r22,1
    3bb8:	04c00044 	movi	r19,1
    3bbc:	39c00044 	addi	r7,r7,1
    3bc0:	d9c00815 	stw	r7,32(sp)
    3bc4:	d8800d17 	ldw	r2,52(sp)
    3bc8:	103e721e 	bne	r2,zero,3594 <__alt_data_end+0xf8003594>
    3bcc:	00800044 	movi	r2,1
    3bd0:	003e7906 	br	35b8 <__alt_data_end+0xf80035b8>
    3bd4:	8009883a 	mov	r4,r16
    3bd8:	000ca2c0 	call	ca2c <__floatsidf>
    3bdc:	d9800f17 	ldw	r6,60(sp)
    3be0:	d9c01017 	ldw	r7,64(sp)
    3be4:	1009883a 	mov	r4,r2
    3be8:	180b883a 	mov	r5,r3
    3bec:	000b9980 	call	b998 <__muldf3>
    3bf0:	000d883a 	mov	r6,zero
    3bf4:	01d00734 	movhi	r7,16412
    3bf8:	1009883a 	mov	r4,r2
    3bfc:	180b883a 	mov	r5,r3
    3c00:	000a5ac0 	call	a5ac <__adddf3>
    3c04:	047f3034 	movhi	r17,64704
    3c08:	1021883a 	mov	r16,r2
    3c0c:	1c63883a 	add	r17,r3,r17
    3c10:	d9000f17 	ldw	r4,60(sp)
    3c14:	d9401017 	ldw	r5,64(sp)
    3c18:	000d883a 	mov	r6,zero
    3c1c:	01d00534 	movhi	r7,16404
    3c20:	000c0b00 	call	c0b0 <__subdf3>
    3c24:	800d883a 	mov	r6,r16
    3c28:	880f883a 	mov	r7,r17
    3c2c:	1009883a 	mov	r4,r2
    3c30:	180b883a 	mov	r5,r3
    3c34:	102b883a 	mov	r21,r2
    3c38:	1829883a 	mov	r20,r3
    3c3c:	000b7c80 	call	b7c8 <__gedf2>
    3c40:	00806c16 	blt	zero,r2,3df4 <_dtoa_r+0x1304>
    3c44:	89e0003c 	xorhi	r7,r17,32768
    3c48:	800d883a 	mov	r6,r16
    3c4c:	a809883a 	mov	r4,r21
    3c50:	a00b883a 	mov	r5,r20
    3c54:	000b8a40 	call	b8a4 <__ledf2>
    3c58:	103d7e0e 	bge	r2,zero,3254 <__alt_data_end+0xf8003254>
    3c5c:	002b883a 	mov	r21,zero
    3c60:	0023883a 	mov	r17,zero
    3c64:	003efb06 	br	3854 <__alt_data_end+0xf8003854>
    3c68:	d8800717 	ldw	r2,28(sp)
    3c6c:	003bd006 	br	2bb0 <__alt_data_end+0xf8002bb0>
    3c70:	d9000a17 	ldw	r4,40(sp)
    3c74:	d9800d17 	ldw	r6,52(sp)
    3c78:	dd400a15 	stw	r21,40(sp)
    3c7c:	a905c83a 	sub	r2,r21,r4
    3c80:	308d883a 	add	r6,r6,r2
    3c84:	d9800d15 	stw	r6,52(sp)
    3c88:	002b883a 	mov	r21,zero
    3c8c:	003e0606 	br	34a8 <__alt_data_end+0xf80034a8>
    3c90:	9023883a 	mov	r17,r18
    3c94:	9829883a 	mov	r20,r19
    3c98:	04000084 	movi	r16,2
    3c9c:	003c9206 	br	2ee8 <__alt_data_end+0xf8002ee8>
    3ca0:	04000044 	movi	r16,1
    3ca4:	dc000c15 	stw	r16,48(sp)
    3ca8:	dc000615 	stw	r16,24(sp)
    3cac:	dc002215 	stw	r16,136(sp)
    3cb0:	e0001115 	stw	zero,68(fp)
    3cb4:	000b883a 	mov	r5,zero
    3cb8:	003c6906 	br	2e60 <__alt_data_end+0xf8002e60>
    3cbc:	3021883a 	mov	r16,r6
    3cc0:	003ffb06 	br	3cb0 <__alt_data_end+0xf8003cb0>
    3cc4:	1000021e 	bne	r2,zero,3cd0 <_dtoa_r+0x11e0>
    3cc8:	4200004c 	andi	r8,r8,1
    3ccc:	403e7d1e 	bne	r8,zero,36c4 <__alt_data_end+0xf80036c4>
    3cd0:	01000c04 	movi	r4,48
    3cd4:	00000106 	br	3cdc <_dtoa_r+0x11ec>
    3cd8:	102f883a 	mov	r23,r2
    3cdc:	b8bfffc4 	addi	r2,r23,-1
    3ce0:	10c00007 	ldb	r3,0(r2)
    3ce4:	193ffc26 	beq	r3,r4,3cd8 <__alt_data_end+0xf8003cd8>
    3ce8:	003e8706 	br	3708 <__alt_data_end+0xf8003708>
    3cec:	d8800517 	ldw	r2,20(sp)
    3cf0:	00a3c83a 	sub	r17,zero,r2
    3cf4:	8800a426 	beq	r17,zero,3f88 <_dtoa_r+0x1498>
    3cf8:	888003cc 	andi	r2,r17,15
    3cfc:	100490fa 	slli	r2,r2,3
    3d00:	00c00074 	movhi	r3,1
    3d04:	18fe2804 	addi	r3,r3,-1888
    3d08:	1885883a 	add	r2,r3,r2
    3d0c:	11800017 	ldw	r6,0(r2)
    3d10:	11c00117 	ldw	r7,4(r2)
    3d14:	9009883a 	mov	r4,r18
    3d18:	980b883a 	mov	r5,r19
    3d1c:	8823d13a 	srai	r17,r17,4
    3d20:	000b9980 	call	b998 <__muldf3>
    3d24:	d8800f15 	stw	r2,60(sp)
    3d28:	d8c01015 	stw	r3,64(sp)
    3d2c:	8800e826 	beq	r17,zero,40d0 <_dtoa_r+0x15e0>
    3d30:	05000074 	movhi	r20,1
    3d34:	a53e1e04 	addi	r20,r20,-1928
    3d38:	04000084 	movi	r16,2
    3d3c:	8980004c 	andi	r6,r17,1
    3d40:	1009883a 	mov	r4,r2
    3d44:	8823d07a 	srai	r17,r17,1
    3d48:	180b883a 	mov	r5,r3
    3d4c:	30000426 	beq	r6,zero,3d60 <_dtoa_r+0x1270>
    3d50:	a1800017 	ldw	r6,0(r20)
    3d54:	a1c00117 	ldw	r7,4(r20)
    3d58:	84000044 	addi	r16,r16,1
    3d5c:	000b9980 	call	b998 <__muldf3>
    3d60:	a5000204 	addi	r20,r20,8
    3d64:	883ff51e 	bne	r17,zero,3d3c <__alt_data_end+0xf8003d3c>
    3d68:	d8800f15 	stw	r2,60(sp)
    3d6c:	d8c01015 	stw	r3,64(sp)
    3d70:	003c7606 	br	2f4c <__alt_data_end+0xf8002f4c>
    3d74:	00c00c04 	movi	r3,48
    3d78:	10c00005 	stb	r3,0(r2)
    3d7c:	d8c00517 	ldw	r3,20(sp)
    3d80:	bd3fffc3 	ldbu	r20,-1(r23)
    3d84:	18c00044 	addi	r3,r3,1
    3d88:	d8c00515 	stw	r3,20(sp)
    3d8c:	003db906 	br	3474 <__alt_data_end+0xf8003474>
    3d90:	89400117 	ldw	r5,4(r17)
    3d94:	e009883a 	mov	r4,fp
    3d98:	000618c0 	call	618c <_Balloc>
    3d9c:	89800417 	ldw	r6,16(r17)
    3da0:	89400304 	addi	r5,r17,12
    3da4:	11000304 	addi	r4,r2,12
    3da8:	31800084 	addi	r6,r6,2
    3dac:	318d883a 	add	r6,r6,r6
    3db0:	318d883a 	add	r6,r6,r6
    3db4:	1027883a 	mov	r19,r2
    3db8:	0005dc00 	call	5dc0 <memcpy>
    3dbc:	01800044 	movi	r6,1
    3dc0:	980b883a 	mov	r5,r19
    3dc4:	e009883a 	mov	r4,fp
    3dc8:	000690c0 	call	690c <__lshift>
    3dcc:	1029883a 	mov	r20,r2
    3dd0:	003ecc06 	br	3904 <__alt_data_end+0xf8003904>
    3dd4:	00800e44 	movi	r2,57
    3dd8:	90809026 	beq	r18,r2,401c <_dtoa_r+0x152c>
    3ddc:	92000044 	addi	r8,r18,1
    3de0:	003f1f06 	br	3a60 <__alt_data_end+0xf8003a60>
    3de4:	9011883a 	mov	r8,r18
    3de8:	8825883a 	mov	r18,r17
    3dec:	a023883a 	mov	r17,r20
    3df0:	003e2906 	br	3698 <__alt_data_end+0xf8003698>
    3df4:	002b883a 	mov	r21,zero
    3df8:	0023883a 	mov	r17,zero
    3dfc:	003f5406 	br	3b50 <__alt_data_end+0xf8003b50>
    3e00:	61bfffc4 	addi	r6,r12,-1
    3e04:	300490fa 	slli	r2,r6,3
    3e08:	00c00074 	movhi	r3,1
    3e0c:	18fe2804 	addi	r3,r3,-1888
    3e10:	1885883a 	add	r2,r3,r2
    3e14:	11000017 	ldw	r4,0(r2)
    3e18:	11400117 	ldw	r5,4(r2)
    3e1c:	d8800717 	ldw	r2,28(sp)
    3e20:	880f883a 	mov	r7,r17
    3e24:	d9801215 	stw	r6,72(sp)
    3e28:	800d883a 	mov	r6,r16
    3e2c:	db001615 	stw	r12,88(sp)
    3e30:	15c00044 	addi	r23,r2,1
    3e34:	000b9980 	call	b998 <__muldf3>
    3e38:	d9401017 	ldw	r5,64(sp)
    3e3c:	d9000f17 	ldw	r4,60(sp)
    3e40:	d8c01515 	stw	r3,84(sp)
    3e44:	d8801415 	stw	r2,80(sp)
    3e48:	000c9ac0 	call	c9ac <__fixdfsi>
    3e4c:	1009883a 	mov	r4,r2
    3e50:	1021883a 	mov	r16,r2
    3e54:	000ca2c0 	call	ca2c <__floatsidf>
    3e58:	d9000f17 	ldw	r4,60(sp)
    3e5c:	d9401017 	ldw	r5,64(sp)
    3e60:	100d883a 	mov	r6,r2
    3e64:	180f883a 	mov	r7,r3
    3e68:	000c0b00 	call	c0b0 <__subdf3>
    3e6c:	1829883a 	mov	r20,r3
    3e70:	d8c00717 	ldw	r3,28(sp)
    3e74:	84000c04 	addi	r16,r16,48
    3e78:	1023883a 	mov	r17,r2
    3e7c:	1c000005 	stb	r16,0(r3)
    3e80:	db001617 	ldw	r12,88(sp)
    3e84:	00800044 	movi	r2,1
    3e88:	60802226 	beq	r12,r2,3f14 <_dtoa_r+0x1424>
    3e8c:	d9c00717 	ldw	r7,28(sp)
    3e90:	8805883a 	mov	r2,r17
    3e94:	b82b883a 	mov	r21,r23
    3e98:	3b19883a 	add	r12,r7,r12
    3e9c:	6023883a 	mov	r17,r12
    3ea0:	a007883a 	mov	r3,r20
    3ea4:	dc800f15 	stw	r18,60(sp)
    3ea8:	000d883a 	mov	r6,zero
    3eac:	01d00934 	movhi	r7,16420
    3eb0:	1009883a 	mov	r4,r2
    3eb4:	180b883a 	mov	r5,r3
    3eb8:	000b9980 	call	b998 <__muldf3>
    3ebc:	180b883a 	mov	r5,r3
    3ec0:	1009883a 	mov	r4,r2
    3ec4:	1829883a 	mov	r20,r3
    3ec8:	1025883a 	mov	r18,r2
    3ecc:	000c9ac0 	call	c9ac <__fixdfsi>
    3ed0:	1009883a 	mov	r4,r2
    3ed4:	1021883a 	mov	r16,r2
    3ed8:	000ca2c0 	call	ca2c <__floatsidf>
    3edc:	100d883a 	mov	r6,r2
    3ee0:	180f883a 	mov	r7,r3
    3ee4:	9009883a 	mov	r4,r18
    3ee8:	a00b883a 	mov	r5,r20
    3eec:	84000c04 	addi	r16,r16,48
    3ef0:	000c0b00 	call	c0b0 <__subdf3>
    3ef4:	ad400044 	addi	r21,r21,1
    3ef8:	ac3fffc5 	stb	r16,-1(r21)
    3efc:	ac7fea1e 	bne	r21,r17,3ea8 <__alt_data_end+0xf8003ea8>
    3f00:	1023883a 	mov	r17,r2
    3f04:	d8801217 	ldw	r2,72(sp)
    3f08:	dc800f17 	ldw	r18,60(sp)
    3f0c:	1829883a 	mov	r20,r3
    3f10:	b8af883a 	add	r23,r23,r2
    3f14:	d9001417 	ldw	r4,80(sp)
    3f18:	d9401517 	ldw	r5,84(sp)
    3f1c:	000d883a 	mov	r6,zero
    3f20:	01cff834 	movhi	r7,16352
    3f24:	000a5ac0 	call	a5ac <__adddf3>
    3f28:	880d883a 	mov	r6,r17
    3f2c:	a00f883a 	mov	r7,r20
    3f30:	1009883a 	mov	r4,r2
    3f34:	180b883a 	mov	r5,r3
    3f38:	000b8a40 	call	b8a4 <__ledf2>
    3f3c:	10003e0e 	bge	r2,zero,4038 <_dtoa_r+0x1548>
    3f40:	d9001317 	ldw	r4,76(sp)
    3f44:	bd3fffc3 	ldbu	r20,-1(r23)
    3f48:	d9000515 	stw	r4,20(sp)
    3f4c:	003d3b06 	br	343c <__alt_data_end+0xf800343c>
    3f50:	0027883a 	mov	r19,zero
    3f54:	003f1b06 	br	3bc4 <__alt_data_end+0xf8003bc4>
    3f58:	d8800817 	ldw	r2,32(sp)
    3f5c:	11e9c83a 	sub	r20,r2,r7
    3f60:	0005883a 	mov	r2,zero
    3f64:	003d5406 	br	34b8 <__alt_data_end+0xf80034b8>
    3f68:	00800044 	movi	r2,1
    3f6c:	003dc706 	br	368c <__alt_data_end+0xf800368c>
    3f70:	d8c00217 	ldw	r3,8(sp)
    3f74:	00800d84 	movi	r2,54
    3f78:	dd400a17 	ldw	r21,40(sp)
    3f7c:	10c5c83a 	sub	r2,r2,r3
    3f80:	dd000817 	ldw	r20,32(sp)
    3f84:	003d4c06 	br	34b8 <__alt_data_end+0xf80034b8>
    3f88:	dc800f15 	stw	r18,60(sp)
    3f8c:	dcc01015 	stw	r19,64(sp)
    3f90:	04000084 	movi	r16,2
    3f94:	003bed06 	br	2f4c <__alt_data_end+0xf8002f4c>
    3f98:	d9000617 	ldw	r4,24(sp)
    3f9c:	203f0d26 	beq	r4,zero,3bd4 <__alt_data_end+0xf8003bd4>
    3fa0:	d9800c17 	ldw	r6,48(sp)
    3fa4:	01bcab0e 	bge	zero,r6,3254 <__alt_data_end+0xf8003254>
    3fa8:	d9401017 	ldw	r5,64(sp)
    3fac:	d9000f17 	ldw	r4,60(sp)
    3fb0:	000d883a 	mov	r6,zero
    3fb4:	01d00934 	movhi	r7,16420
    3fb8:	000b9980 	call	b998 <__muldf3>
    3fbc:	81000044 	addi	r4,r16,1
    3fc0:	d8800f15 	stw	r2,60(sp)
    3fc4:	d8c01015 	stw	r3,64(sp)
    3fc8:	000ca2c0 	call	ca2c <__floatsidf>
    3fcc:	d9800f17 	ldw	r6,60(sp)
    3fd0:	d9c01017 	ldw	r7,64(sp)
    3fd4:	1009883a 	mov	r4,r2
    3fd8:	180b883a 	mov	r5,r3
    3fdc:	000b9980 	call	b998 <__muldf3>
    3fe0:	01d00734 	movhi	r7,16412
    3fe4:	000d883a 	mov	r6,zero
    3fe8:	1009883a 	mov	r4,r2
    3fec:	180b883a 	mov	r5,r3
    3ff0:	000a5ac0 	call	a5ac <__adddf3>
    3ff4:	d9c00517 	ldw	r7,20(sp)
    3ff8:	047f3034 	movhi	r17,64704
    3ffc:	1021883a 	mov	r16,r2
    4000:	39ffffc4 	addi	r7,r7,-1
    4004:	d9c01315 	stw	r7,76(sp)
    4008:	1c63883a 	add	r17,r3,r17
    400c:	db000c17 	ldw	r12,48(sp)
    4010:	003bea06 	br	2fbc <__alt_data_end+0xf8002fbc>
    4014:	dc000915 	stw	r16,36(sp)
    4018:	003e0e06 	br	3854 <__alt_data_end+0xf8003854>
    401c:	01000e44 	movi	r4,57
    4020:	8825883a 	mov	r18,r17
    4024:	9dc00044 	addi	r23,r19,1
    4028:	99000005 	stb	r4,0(r19)
    402c:	a023883a 	mov	r17,r20
    4030:	dc000915 	stw	r16,36(sp)
    4034:	003da406 	br	36c8 <__alt_data_end+0xf80036c8>
    4038:	d9801417 	ldw	r6,80(sp)
    403c:	d9c01517 	ldw	r7,84(sp)
    4040:	0009883a 	mov	r4,zero
    4044:	014ff834 	movhi	r5,16352
    4048:	000c0b00 	call	c0b0 <__subdf3>
    404c:	880d883a 	mov	r6,r17
    4050:	a00f883a 	mov	r7,r20
    4054:	1009883a 	mov	r4,r2
    4058:	180b883a 	mov	r5,r3
    405c:	000b7c80 	call	b7c8 <__gedf2>
    4060:	00bc7c0e 	bge	zero,r2,3254 <__alt_data_end+0xf8003254>
    4064:	01000c04 	movi	r4,48
    4068:	00000106 	br	4070 <_dtoa_r+0x1580>
    406c:	102f883a 	mov	r23,r2
    4070:	b8bfffc4 	addi	r2,r23,-1
    4074:	10c00007 	ldb	r3,0(r2)
    4078:	193ffc26 	beq	r3,r4,406c <__alt_data_end+0xf800406c>
    407c:	d9801317 	ldw	r6,76(sp)
    4080:	d9800515 	stw	r6,20(sp)
    4084:	003c4406 	br	3198 <__alt_data_end+0xf8003198>
    4088:	d9801317 	ldw	r6,76(sp)
    408c:	d9800515 	stw	r6,20(sp)
    4090:	003cea06 	br	343c <__alt_data_end+0xf800343c>
    4094:	dd800f17 	ldw	r22,60(sp)
    4098:	dcc01017 	ldw	r19,64(sp)
    409c:	dc801217 	ldw	r18,72(sp)
    40a0:	003c6c06 	br	3254 <__alt_data_end+0xf8003254>
    40a4:	903e031e 	bne	r18,zero,38b4 <__alt_data_end+0xf80038b4>
    40a8:	003ebb06 	br	3b98 <__alt_data_end+0xf8003b98>
    40ac:	103e6c1e 	bne	r2,zero,3a60 <__alt_data_end+0xf8003a60>
    40b0:	4080004c 	andi	r2,r8,1
    40b4:	103e6a26 	beq	r2,zero,3a60 <__alt_data_end+0xf8003a60>
    40b8:	003e6606 	br	3a54 <__alt_data_end+0xf8003a54>
    40bc:	d8c00317 	ldw	r3,12(sp)
    40c0:	00800084 	movi	r2,2
    40c4:	10c02916 	blt	r2,r3,416c <_dtoa_r+0x167c>
    40c8:	d9000c17 	ldw	r4,48(sp)
    40cc:	003e8806 	br	3af0 <__alt_data_end+0xf8003af0>
    40d0:	04000084 	movi	r16,2
    40d4:	003b9d06 	br	2f4c <__alt_data_end+0xf8002f4c>
    40d8:	d9001317 	ldw	r4,76(sp)
    40dc:	d9000515 	stw	r4,20(sp)
    40e0:	003cd606 	br	343c <__alt_data_end+0xf800343c>
    40e4:	d8801317 	ldw	r2,76(sp)
    40e8:	d8800515 	stw	r2,20(sp)
    40ec:	003c2a06 	br	3198 <__alt_data_end+0xf8003198>
    40f0:	d9800317 	ldw	r6,12(sp)
    40f4:	00800084 	movi	r2,2
    40f8:	11801516 	blt	r2,r6,4150 <_dtoa_r+0x1660>
    40fc:	d9c00c17 	ldw	r7,48(sp)
    4100:	d9c00615 	stw	r7,24(sp)
    4104:	003df706 	br	38e4 <__alt_data_end+0xf80038e4>
    4108:	193d3926 	beq	r3,r4,35f0 <__alt_data_end+0xf80035f0>
    410c:	00c00f04 	movi	r3,60
    4110:	1885c83a 	sub	r2,r3,r2
    4114:	003ddf06 	br	3894 <__alt_data_end+0xf8003894>
    4118:	e009883a 	mov	r4,fp
    411c:	e0001115 	stw	zero,68(fp)
    4120:	000b883a 	mov	r5,zero
    4124:	000618c0 	call	618c <_Balloc>
    4128:	d8800715 	stw	r2,28(sp)
    412c:	d8c00717 	ldw	r3,28(sp)
    4130:	00bfffc4 	movi	r2,-1
    4134:	01000044 	movi	r4,1
    4138:	d8800c15 	stw	r2,48(sp)
    413c:	e0c01015 	stw	r3,64(fp)
    4140:	d9000b15 	stw	r4,44(sp)
    4144:	d8800615 	stw	r2,24(sp)
    4148:	d8002215 	stw	zero,136(sp)
    414c:	003c4106 	br	3254 <__alt_data_end+0xf8003254>
    4150:	d8c00c17 	ldw	r3,48(sp)
    4154:	d8c00615 	stw	r3,24(sp)
    4158:	003e7006 	br	3b1c <__alt_data_end+0xf8003b1c>
    415c:	04400044 	movi	r17,1
    4160:	003b2006 	br	2de4 <__alt_data_end+0xf8002de4>
    4164:	000b883a 	mov	r5,zero
    4168:	003b3d06 	br	2e60 <__alt_data_end+0xf8002e60>
    416c:	d8800c17 	ldw	r2,48(sp)
    4170:	d8800615 	stw	r2,24(sp)
    4174:	003e6906 	br	3b1c <__alt_data_end+0xf8003b1c>

00004178 <__sflush_r>:
    4178:	2880030b 	ldhu	r2,12(r5)
    417c:	defffb04 	addi	sp,sp,-20
    4180:	dcc00315 	stw	r19,12(sp)
    4184:	dc400115 	stw	r17,4(sp)
    4188:	dfc00415 	stw	ra,16(sp)
    418c:	dc800215 	stw	r18,8(sp)
    4190:	dc000015 	stw	r16,0(sp)
    4194:	10c0020c 	andi	r3,r2,8
    4198:	2823883a 	mov	r17,r5
    419c:	2027883a 	mov	r19,r4
    41a0:	1800311e 	bne	r3,zero,4268 <__sflush_r+0xf0>
    41a4:	28c00117 	ldw	r3,4(r5)
    41a8:	10820014 	ori	r2,r2,2048
    41ac:	2880030d 	sth	r2,12(r5)
    41b0:	00c04b0e 	bge	zero,r3,42e0 <__sflush_r+0x168>
    41b4:	8a000a17 	ldw	r8,40(r17)
    41b8:	40002326 	beq	r8,zero,4248 <__sflush_r+0xd0>
    41bc:	9c000017 	ldw	r16,0(r19)
    41c0:	10c4000c 	andi	r3,r2,4096
    41c4:	98000015 	stw	zero,0(r19)
    41c8:	18004826 	beq	r3,zero,42ec <__sflush_r+0x174>
    41cc:	89801417 	ldw	r6,80(r17)
    41d0:	10c0010c 	andi	r3,r2,4
    41d4:	18000626 	beq	r3,zero,41f0 <__sflush_r+0x78>
    41d8:	88c00117 	ldw	r3,4(r17)
    41dc:	88800c17 	ldw	r2,48(r17)
    41e0:	30cdc83a 	sub	r6,r6,r3
    41e4:	10000226 	beq	r2,zero,41f0 <__sflush_r+0x78>
    41e8:	88800f17 	ldw	r2,60(r17)
    41ec:	308dc83a 	sub	r6,r6,r2
    41f0:	89400717 	ldw	r5,28(r17)
    41f4:	000f883a 	mov	r7,zero
    41f8:	9809883a 	mov	r4,r19
    41fc:	403ee83a 	callr	r8
    4200:	00ffffc4 	movi	r3,-1
    4204:	10c04426 	beq	r2,r3,4318 <__sflush_r+0x1a0>
    4208:	88c0030b 	ldhu	r3,12(r17)
    420c:	89000417 	ldw	r4,16(r17)
    4210:	88000115 	stw	zero,4(r17)
    4214:	197dffcc 	andi	r5,r3,63487
    4218:	8940030d 	sth	r5,12(r17)
    421c:	89000015 	stw	r4,0(r17)
    4220:	18c4000c 	andi	r3,r3,4096
    4224:	18002c1e 	bne	r3,zero,42d8 <__sflush_r+0x160>
    4228:	89400c17 	ldw	r5,48(r17)
    422c:	9c000015 	stw	r16,0(r19)
    4230:	28000526 	beq	r5,zero,4248 <__sflush_r+0xd0>
    4234:	88801004 	addi	r2,r17,64
    4238:	28800226 	beq	r5,r2,4244 <__sflush_r+0xcc>
    423c:	9809883a 	mov	r4,r19
    4240:	00048e40 	call	48e4 <_free_r>
    4244:	88000c15 	stw	zero,48(r17)
    4248:	0005883a 	mov	r2,zero
    424c:	dfc00417 	ldw	ra,16(sp)
    4250:	dcc00317 	ldw	r19,12(sp)
    4254:	dc800217 	ldw	r18,8(sp)
    4258:	dc400117 	ldw	r17,4(sp)
    425c:	dc000017 	ldw	r16,0(sp)
    4260:	dec00504 	addi	sp,sp,20
    4264:	f800283a 	ret
    4268:	2c800417 	ldw	r18,16(r5)
    426c:	903ff626 	beq	r18,zero,4248 <__alt_data_end+0xf8004248>
    4270:	2c000017 	ldw	r16,0(r5)
    4274:	108000cc 	andi	r2,r2,3
    4278:	2c800015 	stw	r18,0(r5)
    427c:	84a1c83a 	sub	r16,r16,r18
    4280:	1000131e 	bne	r2,zero,42d0 <__sflush_r+0x158>
    4284:	28800517 	ldw	r2,20(r5)
    4288:	88800215 	stw	r2,8(r17)
    428c:	04000316 	blt	zero,r16,429c <__sflush_r+0x124>
    4290:	003fed06 	br	4248 <__alt_data_end+0xf8004248>
    4294:	90a5883a 	add	r18,r18,r2
    4298:	043feb0e 	bge	zero,r16,4248 <__alt_data_end+0xf8004248>
    429c:	88800917 	ldw	r2,36(r17)
    42a0:	89400717 	ldw	r5,28(r17)
    42a4:	800f883a 	mov	r7,r16
    42a8:	900d883a 	mov	r6,r18
    42ac:	9809883a 	mov	r4,r19
    42b0:	103ee83a 	callr	r2
    42b4:	80a1c83a 	sub	r16,r16,r2
    42b8:	00bff616 	blt	zero,r2,4294 <__alt_data_end+0xf8004294>
    42bc:	88c0030b 	ldhu	r3,12(r17)
    42c0:	00bfffc4 	movi	r2,-1
    42c4:	18c01014 	ori	r3,r3,64
    42c8:	88c0030d 	sth	r3,12(r17)
    42cc:	003fdf06 	br	424c <__alt_data_end+0xf800424c>
    42d0:	0005883a 	mov	r2,zero
    42d4:	003fec06 	br	4288 <__alt_data_end+0xf8004288>
    42d8:	88801415 	stw	r2,80(r17)
    42dc:	003fd206 	br	4228 <__alt_data_end+0xf8004228>
    42e0:	28c00f17 	ldw	r3,60(r5)
    42e4:	00ffb316 	blt	zero,r3,41b4 <__alt_data_end+0xf80041b4>
    42e8:	003fd706 	br	4248 <__alt_data_end+0xf8004248>
    42ec:	89400717 	ldw	r5,28(r17)
    42f0:	000d883a 	mov	r6,zero
    42f4:	01c00044 	movi	r7,1
    42f8:	9809883a 	mov	r4,r19
    42fc:	403ee83a 	callr	r8
    4300:	100d883a 	mov	r6,r2
    4304:	00bfffc4 	movi	r2,-1
    4308:	30801426 	beq	r6,r2,435c <__sflush_r+0x1e4>
    430c:	8880030b 	ldhu	r2,12(r17)
    4310:	8a000a17 	ldw	r8,40(r17)
    4314:	003fae06 	br	41d0 <__alt_data_end+0xf80041d0>
    4318:	98c00017 	ldw	r3,0(r19)
    431c:	183fba26 	beq	r3,zero,4208 <__alt_data_end+0xf8004208>
    4320:	01000744 	movi	r4,29
    4324:	19000626 	beq	r3,r4,4340 <__sflush_r+0x1c8>
    4328:	01000584 	movi	r4,22
    432c:	19000426 	beq	r3,r4,4340 <__sflush_r+0x1c8>
    4330:	88c0030b 	ldhu	r3,12(r17)
    4334:	18c01014 	ori	r3,r3,64
    4338:	88c0030d 	sth	r3,12(r17)
    433c:	003fc306 	br	424c <__alt_data_end+0xf800424c>
    4340:	8880030b 	ldhu	r2,12(r17)
    4344:	88c00417 	ldw	r3,16(r17)
    4348:	88000115 	stw	zero,4(r17)
    434c:	10bdffcc 	andi	r2,r2,63487
    4350:	8880030d 	sth	r2,12(r17)
    4354:	88c00015 	stw	r3,0(r17)
    4358:	003fb306 	br	4228 <__alt_data_end+0xf8004228>
    435c:	98800017 	ldw	r2,0(r19)
    4360:	103fea26 	beq	r2,zero,430c <__alt_data_end+0xf800430c>
    4364:	00c00744 	movi	r3,29
    4368:	10c00226 	beq	r2,r3,4374 <__sflush_r+0x1fc>
    436c:	00c00584 	movi	r3,22
    4370:	10c0031e 	bne	r2,r3,4380 <__sflush_r+0x208>
    4374:	9c000015 	stw	r16,0(r19)
    4378:	0005883a 	mov	r2,zero
    437c:	003fb306 	br	424c <__alt_data_end+0xf800424c>
    4380:	88c0030b 	ldhu	r3,12(r17)
    4384:	3005883a 	mov	r2,r6
    4388:	18c01014 	ori	r3,r3,64
    438c:	88c0030d 	sth	r3,12(r17)
    4390:	003fae06 	br	424c <__alt_data_end+0xf800424c>

00004394 <_fflush_r>:
    4394:	defffd04 	addi	sp,sp,-12
    4398:	dc000115 	stw	r16,4(sp)
    439c:	dfc00215 	stw	ra,8(sp)
    43a0:	2021883a 	mov	r16,r4
    43a4:	20000226 	beq	r4,zero,43b0 <_fflush_r+0x1c>
    43a8:	20800e17 	ldw	r2,56(r4)
    43ac:	10000c26 	beq	r2,zero,43e0 <_fflush_r+0x4c>
    43b0:	2880030f 	ldh	r2,12(r5)
    43b4:	1000051e 	bne	r2,zero,43cc <_fflush_r+0x38>
    43b8:	0005883a 	mov	r2,zero
    43bc:	dfc00217 	ldw	ra,8(sp)
    43c0:	dc000117 	ldw	r16,4(sp)
    43c4:	dec00304 	addi	sp,sp,12
    43c8:	f800283a 	ret
    43cc:	8009883a 	mov	r4,r16
    43d0:	dfc00217 	ldw	ra,8(sp)
    43d4:	dc000117 	ldw	r16,4(sp)
    43d8:	dec00304 	addi	sp,sp,12
    43dc:	00041781 	jmpi	4178 <__sflush_r>
    43e0:	d9400015 	stw	r5,0(sp)
    43e4:	00047700 	call	4770 <__sinit>
    43e8:	d9400017 	ldw	r5,0(sp)
    43ec:	003ff006 	br	43b0 <__alt_data_end+0xf80043b0>

000043f0 <fflush>:
    43f0:	20000526 	beq	r4,zero,4408 <fflush+0x18>
    43f4:	00800074 	movhi	r2,1
    43f8:	10859b04 	addi	r2,r2,5740
    43fc:	200b883a 	mov	r5,r4
    4400:	11000017 	ldw	r4,0(r2)
    4404:	00043941 	jmpi	4394 <_fflush_r>
    4408:	00800074 	movhi	r2,1
    440c:	10859a04 	addi	r2,r2,5736
    4410:	11000017 	ldw	r4,0(r2)
    4414:	01400034 	movhi	r5,0
    4418:	2950e504 	addi	r5,r5,17300
    441c:	00051741 	jmpi	5174 <_fwalk_reent>

00004420 <__fp_unlock>:
    4420:	0005883a 	mov	r2,zero
    4424:	f800283a 	ret

00004428 <_cleanup_r>:
    4428:	01400074 	movhi	r5,1
    442c:	29646304 	addi	r5,r5,-28276
    4430:	00051741 	jmpi	5174 <_fwalk_reent>

00004434 <__sinit.part.1>:
    4434:	defff704 	addi	sp,sp,-36
    4438:	00c00034 	movhi	r3,0
    443c:	dfc00815 	stw	ra,32(sp)
    4440:	ddc00715 	stw	r23,28(sp)
    4444:	dd800615 	stw	r22,24(sp)
    4448:	dd400515 	stw	r21,20(sp)
    444c:	dd000415 	stw	r20,16(sp)
    4450:	dcc00315 	stw	r19,12(sp)
    4454:	dc800215 	stw	r18,8(sp)
    4458:	dc400115 	stw	r17,4(sp)
    445c:	dc000015 	stw	r16,0(sp)
    4460:	18d10a04 	addi	r3,r3,17448
    4464:	24000117 	ldw	r16,4(r4)
    4468:	20c00f15 	stw	r3,60(r4)
    446c:	2080bb04 	addi	r2,r4,748
    4470:	00c000c4 	movi	r3,3
    4474:	20c0b915 	stw	r3,740(r4)
    4478:	2080ba15 	stw	r2,744(r4)
    447c:	2000b815 	stw	zero,736(r4)
    4480:	05c00204 	movi	r23,8
    4484:	00800104 	movi	r2,4
    4488:	2025883a 	mov	r18,r4
    448c:	b80d883a 	mov	r6,r23
    4490:	81001704 	addi	r4,r16,92
    4494:	000b883a 	mov	r5,zero
    4498:	80000015 	stw	zero,0(r16)
    449c:	80000115 	stw	zero,4(r16)
    44a0:	80000215 	stw	zero,8(r16)
    44a4:	8080030d 	sth	r2,12(r16)
    44a8:	80001915 	stw	zero,100(r16)
    44ac:	8000038d 	sth	zero,14(r16)
    44b0:	80000415 	stw	zero,16(r16)
    44b4:	80000515 	stw	zero,20(r16)
    44b8:	80000615 	stw	zero,24(r16)
    44bc:	00060640 	call	6064 <memset>
    44c0:	05800034 	movhi	r22,0
    44c4:	94400217 	ldw	r17,8(r18)
    44c8:	05400034 	movhi	r21,0
    44cc:	05000034 	movhi	r20,0
    44d0:	04c00034 	movhi	r19,0
    44d4:	b59ded04 	addi	r22,r22,30644
    44d8:	ad5e0404 	addi	r21,r21,30736
    44dc:	a51e2304 	addi	r20,r20,30860
    44e0:	9cde3a04 	addi	r19,r19,30952
    44e4:	85800815 	stw	r22,32(r16)
    44e8:	85400915 	stw	r21,36(r16)
    44ec:	85000a15 	stw	r20,40(r16)
    44f0:	84c00b15 	stw	r19,44(r16)
    44f4:	84000715 	stw	r16,28(r16)
    44f8:	00800284 	movi	r2,10
    44fc:	8880030d 	sth	r2,12(r17)
    4500:	00800044 	movi	r2,1
    4504:	b80d883a 	mov	r6,r23
    4508:	89001704 	addi	r4,r17,92
    450c:	000b883a 	mov	r5,zero
    4510:	88000015 	stw	zero,0(r17)
    4514:	88000115 	stw	zero,4(r17)
    4518:	88000215 	stw	zero,8(r17)
    451c:	88001915 	stw	zero,100(r17)
    4520:	8880038d 	sth	r2,14(r17)
    4524:	88000415 	stw	zero,16(r17)
    4528:	88000515 	stw	zero,20(r17)
    452c:	88000615 	stw	zero,24(r17)
    4530:	00060640 	call	6064 <memset>
    4534:	94000317 	ldw	r16,12(r18)
    4538:	00800484 	movi	r2,18
    453c:	8c400715 	stw	r17,28(r17)
    4540:	8d800815 	stw	r22,32(r17)
    4544:	8d400915 	stw	r21,36(r17)
    4548:	8d000a15 	stw	r20,40(r17)
    454c:	8cc00b15 	stw	r19,44(r17)
    4550:	8080030d 	sth	r2,12(r16)
    4554:	00800084 	movi	r2,2
    4558:	80000015 	stw	zero,0(r16)
    455c:	80000115 	stw	zero,4(r16)
    4560:	80000215 	stw	zero,8(r16)
    4564:	80001915 	stw	zero,100(r16)
    4568:	8080038d 	sth	r2,14(r16)
    456c:	80000415 	stw	zero,16(r16)
    4570:	80000515 	stw	zero,20(r16)
    4574:	80000615 	stw	zero,24(r16)
    4578:	b80d883a 	mov	r6,r23
    457c:	000b883a 	mov	r5,zero
    4580:	81001704 	addi	r4,r16,92
    4584:	00060640 	call	6064 <memset>
    4588:	00800044 	movi	r2,1
    458c:	84000715 	stw	r16,28(r16)
    4590:	85800815 	stw	r22,32(r16)
    4594:	85400915 	stw	r21,36(r16)
    4598:	85000a15 	stw	r20,40(r16)
    459c:	84c00b15 	stw	r19,44(r16)
    45a0:	90800e15 	stw	r2,56(r18)
    45a4:	dfc00817 	ldw	ra,32(sp)
    45a8:	ddc00717 	ldw	r23,28(sp)
    45ac:	dd800617 	ldw	r22,24(sp)
    45b0:	dd400517 	ldw	r21,20(sp)
    45b4:	dd000417 	ldw	r20,16(sp)
    45b8:	dcc00317 	ldw	r19,12(sp)
    45bc:	dc800217 	ldw	r18,8(sp)
    45c0:	dc400117 	ldw	r17,4(sp)
    45c4:	dc000017 	ldw	r16,0(sp)
    45c8:	dec00904 	addi	sp,sp,36
    45cc:	f800283a 	ret

000045d0 <__fp_lock>:
    45d0:	0005883a 	mov	r2,zero
    45d4:	f800283a 	ret

000045d8 <__sfmoreglue>:
    45d8:	defffc04 	addi	sp,sp,-16
    45dc:	dc400115 	stw	r17,4(sp)
    45e0:	2c7fffc4 	addi	r17,r5,-1
    45e4:	8c401a24 	muli	r17,r17,104
    45e8:	dc800215 	stw	r18,8(sp)
    45ec:	2825883a 	mov	r18,r5
    45f0:	89401d04 	addi	r5,r17,116
    45f4:	dc000015 	stw	r16,0(sp)
    45f8:	dfc00315 	stw	ra,12(sp)
    45fc:	00054d00 	call	54d0 <_malloc_r>
    4600:	1021883a 	mov	r16,r2
    4604:	10000726 	beq	r2,zero,4624 <__sfmoreglue+0x4c>
    4608:	11000304 	addi	r4,r2,12
    460c:	10000015 	stw	zero,0(r2)
    4610:	14800115 	stw	r18,4(r2)
    4614:	11000215 	stw	r4,8(r2)
    4618:	89801a04 	addi	r6,r17,104
    461c:	000b883a 	mov	r5,zero
    4620:	00060640 	call	6064 <memset>
    4624:	8005883a 	mov	r2,r16
    4628:	dfc00317 	ldw	ra,12(sp)
    462c:	dc800217 	ldw	r18,8(sp)
    4630:	dc400117 	ldw	r17,4(sp)
    4634:	dc000017 	ldw	r16,0(sp)
    4638:	dec00404 	addi	sp,sp,16
    463c:	f800283a 	ret

00004640 <__sfp>:
    4640:	defffb04 	addi	sp,sp,-20
    4644:	dc000015 	stw	r16,0(sp)
    4648:	04000074 	movhi	r16,1
    464c:	84059a04 	addi	r16,r16,5736
    4650:	dcc00315 	stw	r19,12(sp)
    4654:	2027883a 	mov	r19,r4
    4658:	81000017 	ldw	r4,0(r16)
    465c:	dfc00415 	stw	ra,16(sp)
    4660:	dc800215 	stw	r18,8(sp)
    4664:	20800e17 	ldw	r2,56(r4)
    4668:	dc400115 	stw	r17,4(sp)
    466c:	1000021e 	bne	r2,zero,4678 <__sfp+0x38>
    4670:	00044340 	call	4434 <__sinit.part.1>
    4674:	81000017 	ldw	r4,0(r16)
    4678:	2480b804 	addi	r18,r4,736
    467c:	047fffc4 	movi	r17,-1
    4680:	91000117 	ldw	r4,4(r18)
    4684:	94000217 	ldw	r16,8(r18)
    4688:	213fffc4 	addi	r4,r4,-1
    468c:	20000a16 	blt	r4,zero,46b8 <__sfp+0x78>
    4690:	8080030f 	ldh	r2,12(r16)
    4694:	10000c26 	beq	r2,zero,46c8 <__sfp+0x88>
    4698:	80c01d04 	addi	r3,r16,116
    469c:	00000206 	br	46a8 <__sfp+0x68>
    46a0:	18bfe60f 	ldh	r2,-104(r3)
    46a4:	10000826 	beq	r2,zero,46c8 <__sfp+0x88>
    46a8:	213fffc4 	addi	r4,r4,-1
    46ac:	1c3ffd04 	addi	r16,r3,-12
    46b0:	18c01a04 	addi	r3,r3,104
    46b4:	247ffa1e 	bne	r4,r17,46a0 <__alt_data_end+0xf80046a0>
    46b8:	90800017 	ldw	r2,0(r18)
    46bc:	10001d26 	beq	r2,zero,4734 <__sfp+0xf4>
    46c0:	1025883a 	mov	r18,r2
    46c4:	003fee06 	br	4680 <__alt_data_end+0xf8004680>
    46c8:	00bfffc4 	movi	r2,-1
    46cc:	8080038d 	sth	r2,14(r16)
    46d0:	00800044 	movi	r2,1
    46d4:	8080030d 	sth	r2,12(r16)
    46d8:	80001915 	stw	zero,100(r16)
    46dc:	80000015 	stw	zero,0(r16)
    46e0:	80000215 	stw	zero,8(r16)
    46e4:	80000115 	stw	zero,4(r16)
    46e8:	80000415 	stw	zero,16(r16)
    46ec:	80000515 	stw	zero,20(r16)
    46f0:	80000615 	stw	zero,24(r16)
    46f4:	01800204 	movi	r6,8
    46f8:	000b883a 	mov	r5,zero
    46fc:	81001704 	addi	r4,r16,92
    4700:	00060640 	call	6064 <memset>
    4704:	8005883a 	mov	r2,r16
    4708:	80000c15 	stw	zero,48(r16)
    470c:	80000d15 	stw	zero,52(r16)
    4710:	80001115 	stw	zero,68(r16)
    4714:	80001215 	stw	zero,72(r16)
    4718:	dfc00417 	ldw	ra,16(sp)
    471c:	dcc00317 	ldw	r19,12(sp)
    4720:	dc800217 	ldw	r18,8(sp)
    4724:	dc400117 	ldw	r17,4(sp)
    4728:	dc000017 	ldw	r16,0(sp)
    472c:	dec00504 	addi	sp,sp,20
    4730:	f800283a 	ret
    4734:	01400104 	movi	r5,4
    4738:	9809883a 	mov	r4,r19
    473c:	00045d80 	call	45d8 <__sfmoreglue>
    4740:	90800015 	stw	r2,0(r18)
    4744:	103fde1e 	bne	r2,zero,46c0 <__alt_data_end+0xf80046c0>
    4748:	00800304 	movi	r2,12
    474c:	98800015 	stw	r2,0(r19)
    4750:	0005883a 	mov	r2,zero
    4754:	003ff006 	br	4718 <__alt_data_end+0xf8004718>

00004758 <_cleanup>:
    4758:	00800074 	movhi	r2,1
    475c:	10859a04 	addi	r2,r2,5736
    4760:	11000017 	ldw	r4,0(r2)
    4764:	01400074 	movhi	r5,1
    4768:	29646304 	addi	r5,r5,-28276
    476c:	00051741 	jmpi	5174 <_fwalk_reent>

00004770 <__sinit>:
    4770:	20800e17 	ldw	r2,56(r4)
    4774:	10000126 	beq	r2,zero,477c <__sinit+0xc>
    4778:	f800283a 	ret
    477c:	00044341 	jmpi	4434 <__sinit.part.1>

00004780 <__sfp_lock_acquire>:
    4780:	f800283a 	ret

00004784 <__sfp_lock_release>:
    4784:	f800283a 	ret

00004788 <__sinit_lock_acquire>:
    4788:	f800283a 	ret

0000478c <__sinit_lock_release>:
    478c:	f800283a 	ret

00004790 <__fp_lock_all>:
    4790:	00800074 	movhi	r2,1
    4794:	10859b04 	addi	r2,r2,5740
    4798:	11000017 	ldw	r4,0(r2)
    479c:	01400034 	movhi	r5,0
    47a0:	29517404 	addi	r5,r5,17872
    47a4:	00050b01 	jmpi	50b0 <_fwalk>

000047a8 <__fp_unlock_all>:
    47a8:	00800074 	movhi	r2,1
    47ac:	10859b04 	addi	r2,r2,5740
    47b0:	11000017 	ldw	r4,0(r2)
    47b4:	01400034 	movhi	r5,0
    47b8:	29510804 	addi	r5,r5,17440
    47bc:	00050b01 	jmpi	50b0 <_fwalk>

000047c0 <_malloc_trim_r>:
    47c0:	defffb04 	addi	sp,sp,-20
    47c4:	dcc00315 	stw	r19,12(sp)
    47c8:	04c00074 	movhi	r19,1
    47cc:	dc800215 	stw	r18,8(sp)
    47d0:	dc400115 	stw	r17,4(sp)
    47d4:	dc000015 	stw	r16,0(sp)
    47d8:	dfc00415 	stw	ra,16(sp)
    47dc:	2821883a 	mov	r16,r5
    47e0:	9cffe804 	addi	r19,r19,-96
    47e4:	2025883a 	mov	r18,r4
    47e8:	000d1900 	call	d190 <__malloc_lock>
    47ec:	98800217 	ldw	r2,8(r19)
    47f0:	14400117 	ldw	r17,4(r2)
    47f4:	00bfff04 	movi	r2,-4
    47f8:	88a2703a 	and	r17,r17,r2
    47fc:	8c21c83a 	sub	r16,r17,r16
    4800:	8403fbc4 	addi	r16,r16,4079
    4804:	8020d33a 	srli	r16,r16,12
    4808:	0083ffc4 	movi	r2,4095
    480c:	843fffc4 	addi	r16,r16,-1
    4810:	8020933a 	slli	r16,r16,12
    4814:	1400060e 	bge	r2,r16,4830 <_malloc_trim_r+0x70>
    4818:	000b883a 	mov	r5,zero
    481c:	9009883a 	mov	r4,r18
    4820:	00077600 	call	7760 <_sbrk_r>
    4824:	98c00217 	ldw	r3,8(r19)
    4828:	1c47883a 	add	r3,r3,r17
    482c:	10c00a26 	beq	r2,r3,4858 <_malloc_trim_r+0x98>
    4830:	9009883a 	mov	r4,r18
    4834:	000d1b40 	call	d1b4 <__malloc_unlock>
    4838:	0005883a 	mov	r2,zero
    483c:	dfc00417 	ldw	ra,16(sp)
    4840:	dcc00317 	ldw	r19,12(sp)
    4844:	dc800217 	ldw	r18,8(sp)
    4848:	dc400117 	ldw	r17,4(sp)
    484c:	dc000017 	ldw	r16,0(sp)
    4850:	dec00504 	addi	sp,sp,20
    4854:	f800283a 	ret
    4858:	040bc83a 	sub	r5,zero,r16
    485c:	9009883a 	mov	r4,r18
    4860:	00077600 	call	7760 <_sbrk_r>
    4864:	00ffffc4 	movi	r3,-1
    4868:	10c00d26 	beq	r2,r3,48a0 <_malloc_trim_r+0xe0>
    486c:	00c00074 	movhi	r3,1
    4870:	18cca104 	addi	r3,r3,12932
    4874:	18800017 	ldw	r2,0(r3)
    4878:	99000217 	ldw	r4,8(r19)
    487c:	8c23c83a 	sub	r17,r17,r16
    4880:	8c400054 	ori	r17,r17,1
    4884:	1421c83a 	sub	r16,r2,r16
    4888:	24400115 	stw	r17,4(r4)
    488c:	9009883a 	mov	r4,r18
    4890:	1c000015 	stw	r16,0(r3)
    4894:	000d1b40 	call	d1b4 <__malloc_unlock>
    4898:	00800044 	movi	r2,1
    489c:	003fe706 	br	483c <__alt_data_end+0xf800483c>
    48a0:	000b883a 	mov	r5,zero
    48a4:	9009883a 	mov	r4,r18
    48a8:	00077600 	call	7760 <_sbrk_r>
    48ac:	99000217 	ldw	r4,8(r19)
    48b0:	014003c4 	movi	r5,15
    48b4:	1107c83a 	sub	r3,r2,r4
    48b8:	28ffdd0e 	bge	r5,r3,4830 <__alt_data_end+0xf8004830>
    48bc:	01400074 	movhi	r5,1
    48c0:	29459d04 	addi	r5,r5,5748
    48c4:	29400017 	ldw	r5,0(r5)
    48c8:	18c00054 	ori	r3,r3,1
    48cc:	20c00115 	stw	r3,4(r4)
    48d0:	00c00074 	movhi	r3,1
    48d4:	1145c83a 	sub	r2,r2,r5
    48d8:	18cca104 	addi	r3,r3,12932
    48dc:	18800015 	stw	r2,0(r3)
    48e0:	003fd306 	br	4830 <__alt_data_end+0xf8004830>

000048e4 <_free_r>:
    48e4:	28004126 	beq	r5,zero,49ec <_free_r+0x108>
    48e8:	defffd04 	addi	sp,sp,-12
    48ec:	dc400115 	stw	r17,4(sp)
    48f0:	dc000015 	stw	r16,0(sp)
    48f4:	2023883a 	mov	r17,r4
    48f8:	2821883a 	mov	r16,r5
    48fc:	dfc00215 	stw	ra,8(sp)
    4900:	000d1900 	call	d190 <__malloc_lock>
    4904:	81ffff17 	ldw	r7,-4(r16)
    4908:	00bfff84 	movi	r2,-2
    490c:	01000074 	movhi	r4,1
    4910:	81bffe04 	addi	r6,r16,-8
    4914:	3884703a 	and	r2,r7,r2
    4918:	213fe804 	addi	r4,r4,-96
    491c:	308b883a 	add	r5,r6,r2
    4920:	2a400117 	ldw	r9,4(r5)
    4924:	22000217 	ldw	r8,8(r4)
    4928:	00ffff04 	movi	r3,-4
    492c:	48c6703a 	and	r3,r9,r3
    4930:	2a005726 	beq	r5,r8,4a90 <_free_r+0x1ac>
    4934:	28c00115 	stw	r3,4(r5)
    4938:	39c0004c 	andi	r7,r7,1
    493c:	3800091e 	bne	r7,zero,4964 <_free_r+0x80>
    4940:	823ffe17 	ldw	r8,-8(r16)
    4944:	22400204 	addi	r9,r4,8
    4948:	320dc83a 	sub	r6,r6,r8
    494c:	31c00217 	ldw	r7,8(r6)
    4950:	1205883a 	add	r2,r2,r8
    4954:	3a406526 	beq	r7,r9,4aec <_free_r+0x208>
    4958:	32000317 	ldw	r8,12(r6)
    495c:	3a000315 	stw	r8,12(r7)
    4960:	41c00215 	stw	r7,8(r8)
    4964:	28cf883a 	add	r7,r5,r3
    4968:	39c00117 	ldw	r7,4(r7)
    496c:	39c0004c 	andi	r7,r7,1
    4970:	38003a26 	beq	r7,zero,4a5c <_free_r+0x178>
    4974:	10c00054 	ori	r3,r2,1
    4978:	30c00115 	stw	r3,4(r6)
    497c:	3087883a 	add	r3,r6,r2
    4980:	18800015 	stw	r2,0(r3)
    4984:	00c07fc4 	movi	r3,511
    4988:	18801936 	bltu	r3,r2,49f0 <_free_r+0x10c>
    498c:	1004d0fa 	srli	r2,r2,3
    4990:	01c00044 	movi	r7,1
    4994:	21400117 	ldw	r5,4(r4)
    4998:	10c00044 	addi	r3,r2,1
    499c:	18c7883a 	add	r3,r3,r3
    49a0:	1005d0ba 	srai	r2,r2,2
    49a4:	18c7883a 	add	r3,r3,r3
    49a8:	18c7883a 	add	r3,r3,r3
    49ac:	1907883a 	add	r3,r3,r4
    49b0:	3884983a 	sll	r2,r7,r2
    49b4:	19c00017 	ldw	r7,0(r3)
    49b8:	1a3ffe04 	addi	r8,r3,-8
    49bc:	1144b03a 	or	r2,r2,r5
    49c0:	32000315 	stw	r8,12(r6)
    49c4:	31c00215 	stw	r7,8(r6)
    49c8:	20800115 	stw	r2,4(r4)
    49cc:	19800015 	stw	r6,0(r3)
    49d0:	39800315 	stw	r6,12(r7)
    49d4:	8809883a 	mov	r4,r17
    49d8:	dfc00217 	ldw	ra,8(sp)
    49dc:	dc400117 	ldw	r17,4(sp)
    49e0:	dc000017 	ldw	r16,0(sp)
    49e4:	dec00304 	addi	sp,sp,12
    49e8:	000d1b41 	jmpi	d1b4 <__malloc_unlock>
    49ec:	f800283a 	ret
    49f0:	100ad27a 	srli	r5,r2,9
    49f4:	00c00104 	movi	r3,4
    49f8:	19404a36 	bltu	r3,r5,4b24 <_free_r+0x240>
    49fc:	100ad1ba 	srli	r5,r2,6
    4a00:	28c00e44 	addi	r3,r5,57
    4a04:	18c7883a 	add	r3,r3,r3
    4a08:	29400e04 	addi	r5,r5,56
    4a0c:	18c7883a 	add	r3,r3,r3
    4a10:	18c7883a 	add	r3,r3,r3
    4a14:	1909883a 	add	r4,r3,r4
    4a18:	20c00017 	ldw	r3,0(r4)
    4a1c:	01c00074 	movhi	r7,1
    4a20:	213ffe04 	addi	r4,r4,-8
    4a24:	39ffe804 	addi	r7,r7,-96
    4a28:	20c04426 	beq	r4,r3,4b3c <_free_r+0x258>
    4a2c:	01ffff04 	movi	r7,-4
    4a30:	19400117 	ldw	r5,4(r3)
    4a34:	29ca703a 	and	r5,r5,r7
    4a38:	1140022e 	bgeu	r2,r5,4a44 <_free_r+0x160>
    4a3c:	18c00217 	ldw	r3,8(r3)
    4a40:	20fffb1e 	bne	r4,r3,4a30 <__alt_data_end+0xf8004a30>
    4a44:	19000317 	ldw	r4,12(r3)
    4a48:	31000315 	stw	r4,12(r6)
    4a4c:	30c00215 	stw	r3,8(r6)
    4a50:	21800215 	stw	r6,8(r4)
    4a54:	19800315 	stw	r6,12(r3)
    4a58:	003fde06 	br	49d4 <__alt_data_end+0xf80049d4>
    4a5c:	29c00217 	ldw	r7,8(r5)
    4a60:	10c5883a 	add	r2,r2,r3
    4a64:	00c00074 	movhi	r3,1
    4a68:	18ffea04 	addi	r3,r3,-88
    4a6c:	38c03b26 	beq	r7,r3,4b5c <_free_r+0x278>
    4a70:	2a000317 	ldw	r8,12(r5)
    4a74:	11400054 	ori	r5,r2,1
    4a78:	3087883a 	add	r3,r6,r2
    4a7c:	3a000315 	stw	r8,12(r7)
    4a80:	41c00215 	stw	r7,8(r8)
    4a84:	31400115 	stw	r5,4(r6)
    4a88:	18800015 	stw	r2,0(r3)
    4a8c:	003fbd06 	br	4984 <__alt_data_end+0xf8004984>
    4a90:	39c0004c 	andi	r7,r7,1
    4a94:	10c5883a 	add	r2,r2,r3
    4a98:	3800071e 	bne	r7,zero,4ab8 <_free_r+0x1d4>
    4a9c:	81fffe17 	ldw	r7,-8(r16)
    4aa0:	31cdc83a 	sub	r6,r6,r7
    4aa4:	30c00317 	ldw	r3,12(r6)
    4aa8:	31400217 	ldw	r5,8(r6)
    4aac:	11c5883a 	add	r2,r2,r7
    4ab0:	28c00315 	stw	r3,12(r5)
    4ab4:	19400215 	stw	r5,8(r3)
    4ab8:	10c00054 	ori	r3,r2,1
    4abc:	30c00115 	stw	r3,4(r6)
    4ac0:	00c00074 	movhi	r3,1
    4ac4:	18c59e04 	addi	r3,r3,5752
    4ac8:	18c00017 	ldw	r3,0(r3)
    4acc:	21800215 	stw	r6,8(r4)
    4ad0:	10ffc036 	bltu	r2,r3,49d4 <__alt_data_end+0xf80049d4>
    4ad4:	00800074 	movhi	r2,1
    4ad8:	108c9804 	addi	r2,r2,12896
    4adc:	11400017 	ldw	r5,0(r2)
    4ae0:	8809883a 	mov	r4,r17
    4ae4:	00047c00 	call	47c0 <_malloc_trim_r>
    4ae8:	003fba06 	br	49d4 <__alt_data_end+0xf80049d4>
    4aec:	28c9883a 	add	r4,r5,r3
    4af0:	21000117 	ldw	r4,4(r4)
    4af4:	2100004c 	andi	r4,r4,1
    4af8:	2000391e 	bne	r4,zero,4be0 <_free_r+0x2fc>
    4afc:	29c00217 	ldw	r7,8(r5)
    4b00:	29000317 	ldw	r4,12(r5)
    4b04:	1885883a 	add	r2,r3,r2
    4b08:	10c00054 	ori	r3,r2,1
    4b0c:	39000315 	stw	r4,12(r7)
    4b10:	21c00215 	stw	r7,8(r4)
    4b14:	30c00115 	stw	r3,4(r6)
    4b18:	308d883a 	add	r6,r6,r2
    4b1c:	30800015 	stw	r2,0(r6)
    4b20:	003fac06 	br	49d4 <__alt_data_end+0xf80049d4>
    4b24:	00c00504 	movi	r3,20
    4b28:	19401536 	bltu	r3,r5,4b80 <_free_r+0x29c>
    4b2c:	28c01704 	addi	r3,r5,92
    4b30:	18c7883a 	add	r3,r3,r3
    4b34:	294016c4 	addi	r5,r5,91
    4b38:	003fb406 	br	4a0c <__alt_data_end+0xf8004a0c>
    4b3c:	280bd0ba 	srai	r5,r5,2
    4b40:	00c00044 	movi	r3,1
    4b44:	38800117 	ldw	r2,4(r7)
    4b48:	194a983a 	sll	r5,r3,r5
    4b4c:	2007883a 	mov	r3,r4
    4b50:	2884b03a 	or	r2,r5,r2
    4b54:	38800115 	stw	r2,4(r7)
    4b58:	003fbb06 	br	4a48 <__alt_data_end+0xf8004a48>
    4b5c:	21800515 	stw	r6,20(r4)
    4b60:	21800415 	stw	r6,16(r4)
    4b64:	10c00054 	ori	r3,r2,1
    4b68:	31c00315 	stw	r7,12(r6)
    4b6c:	31c00215 	stw	r7,8(r6)
    4b70:	30c00115 	stw	r3,4(r6)
    4b74:	308d883a 	add	r6,r6,r2
    4b78:	30800015 	stw	r2,0(r6)
    4b7c:	003f9506 	br	49d4 <__alt_data_end+0xf80049d4>
    4b80:	00c01504 	movi	r3,84
    4b84:	19400536 	bltu	r3,r5,4b9c <_free_r+0x2b8>
    4b88:	100ad33a 	srli	r5,r2,12
    4b8c:	28c01bc4 	addi	r3,r5,111
    4b90:	18c7883a 	add	r3,r3,r3
    4b94:	29401b84 	addi	r5,r5,110
    4b98:	003f9c06 	br	4a0c <__alt_data_end+0xf8004a0c>
    4b9c:	00c05504 	movi	r3,340
    4ba0:	19400536 	bltu	r3,r5,4bb8 <_free_r+0x2d4>
    4ba4:	100ad3fa 	srli	r5,r2,15
    4ba8:	28c01e04 	addi	r3,r5,120
    4bac:	18c7883a 	add	r3,r3,r3
    4bb0:	29401dc4 	addi	r5,r5,119
    4bb4:	003f9506 	br	4a0c <__alt_data_end+0xf8004a0c>
    4bb8:	00c15504 	movi	r3,1364
    4bbc:	19400536 	bltu	r3,r5,4bd4 <_free_r+0x2f0>
    4bc0:	100ad4ba 	srli	r5,r2,18
    4bc4:	28c01f44 	addi	r3,r5,125
    4bc8:	18c7883a 	add	r3,r3,r3
    4bcc:	29401f04 	addi	r5,r5,124
    4bd0:	003f8e06 	br	4a0c <__alt_data_end+0xf8004a0c>
    4bd4:	00c03f84 	movi	r3,254
    4bd8:	01401f84 	movi	r5,126
    4bdc:	003f8b06 	br	4a0c <__alt_data_end+0xf8004a0c>
    4be0:	10c00054 	ori	r3,r2,1
    4be4:	30c00115 	stw	r3,4(r6)
    4be8:	308d883a 	add	r6,r6,r2
    4bec:	30800015 	stw	r2,0(r6)
    4bf0:	003f7806 	br	49d4 <__alt_data_end+0xf80049d4>

00004bf4 <__sfvwrite_r>:
    4bf4:	30800217 	ldw	r2,8(r6)
    4bf8:	10006726 	beq	r2,zero,4d98 <__sfvwrite_r+0x1a4>
    4bfc:	28c0030b 	ldhu	r3,12(r5)
    4c00:	defff404 	addi	sp,sp,-48
    4c04:	dd400715 	stw	r21,28(sp)
    4c08:	dd000615 	stw	r20,24(sp)
    4c0c:	dc000215 	stw	r16,8(sp)
    4c10:	dfc00b15 	stw	ra,44(sp)
    4c14:	df000a15 	stw	fp,40(sp)
    4c18:	ddc00915 	stw	r23,36(sp)
    4c1c:	dd800815 	stw	r22,32(sp)
    4c20:	dcc00515 	stw	r19,20(sp)
    4c24:	dc800415 	stw	r18,16(sp)
    4c28:	dc400315 	stw	r17,12(sp)
    4c2c:	1880020c 	andi	r2,r3,8
    4c30:	2821883a 	mov	r16,r5
    4c34:	202b883a 	mov	r21,r4
    4c38:	3029883a 	mov	r20,r6
    4c3c:	10002726 	beq	r2,zero,4cdc <__sfvwrite_r+0xe8>
    4c40:	28800417 	ldw	r2,16(r5)
    4c44:	10002526 	beq	r2,zero,4cdc <__sfvwrite_r+0xe8>
    4c48:	1880008c 	andi	r2,r3,2
    4c4c:	a4400017 	ldw	r17,0(r20)
    4c50:	10002a26 	beq	r2,zero,4cfc <__sfvwrite_r+0x108>
    4c54:	05a00034 	movhi	r22,32768
    4c58:	0027883a 	mov	r19,zero
    4c5c:	0025883a 	mov	r18,zero
    4c60:	b5bf0004 	addi	r22,r22,-1024
    4c64:	980d883a 	mov	r6,r19
    4c68:	a809883a 	mov	r4,r21
    4c6c:	90004626 	beq	r18,zero,4d88 <__sfvwrite_r+0x194>
    4c70:	900f883a 	mov	r7,r18
    4c74:	b480022e 	bgeu	r22,r18,4c80 <__sfvwrite_r+0x8c>
    4c78:	01e00034 	movhi	r7,32768
    4c7c:	39ff0004 	addi	r7,r7,-1024
    4c80:	80800917 	ldw	r2,36(r16)
    4c84:	81400717 	ldw	r5,28(r16)
    4c88:	103ee83a 	callr	r2
    4c8c:	0080570e 	bge	zero,r2,4dec <__sfvwrite_r+0x1f8>
    4c90:	a0c00217 	ldw	r3,8(r20)
    4c94:	98a7883a 	add	r19,r19,r2
    4c98:	90a5c83a 	sub	r18,r18,r2
    4c9c:	1885c83a 	sub	r2,r3,r2
    4ca0:	a0800215 	stw	r2,8(r20)
    4ca4:	103fef1e 	bne	r2,zero,4c64 <__alt_data_end+0xf8004c64>
    4ca8:	0005883a 	mov	r2,zero
    4cac:	dfc00b17 	ldw	ra,44(sp)
    4cb0:	df000a17 	ldw	fp,40(sp)
    4cb4:	ddc00917 	ldw	r23,36(sp)
    4cb8:	dd800817 	ldw	r22,32(sp)
    4cbc:	dd400717 	ldw	r21,28(sp)
    4cc0:	dd000617 	ldw	r20,24(sp)
    4cc4:	dcc00517 	ldw	r19,20(sp)
    4cc8:	dc800417 	ldw	r18,16(sp)
    4ccc:	dc400317 	ldw	r17,12(sp)
    4cd0:	dc000217 	ldw	r16,8(sp)
    4cd4:	dec00c04 	addi	sp,sp,48
    4cd8:	f800283a 	ret
    4cdc:	800b883a 	mov	r5,r16
    4ce0:	a809883a 	mov	r4,r21
    4ce4:	000279c0 	call	279c <__swsetup_r>
    4ce8:	1000eb1e 	bne	r2,zero,5098 <__sfvwrite_r+0x4a4>
    4cec:	80c0030b 	ldhu	r3,12(r16)
    4cf0:	a4400017 	ldw	r17,0(r20)
    4cf4:	1880008c 	andi	r2,r3,2
    4cf8:	103fd61e 	bne	r2,zero,4c54 <__alt_data_end+0xf8004c54>
    4cfc:	1880004c 	andi	r2,r3,1
    4d00:	10003f1e 	bne	r2,zero,4e00 <__sfvwrite_r+0x20c>
    4d04:	0039883a 	mov	fp,zero
    4d08:	0025883a 	mov	r18,zero
    4d0c:	90001a26 	beq	r18,zero,4d78 <__sfvwrite_r+0x184>
    4d10:	1880800c 	andi	r2,r3,512
    4d14:	84c00217 	ldw	r19,8(r16)
    4d18:	10002126 	beq	r2,zero,4da0 <__sfvwrite_r+0x1ac>
    4d1c:	982f883a 	mov	r23,r19
    4d20:	94c09336 	bltu	r18,r19,4f70 <__sfvwrite_r+0x37c>
    4d24:	1881200c 	andi	r2,r3,1152
    4d28:	10009e1e 	bne	r2,zero,4fa4 <__sfvwrite_r+0x3b0>
    4d2c:	81000017 	ldw	r4,0(r16)
    4d30:	b80d883a 	mov	r6,r23
    4d34:	e00b883a 	mov	r5,fp
    4d38:	0005f080 	call	5f08 <memmove>
    4d3c:	80c00217 	ldw	r3,8(r16)
    4d40:	81000017 	ldw	r4,0(r16)
    4d44:	9005883a 	mov	r2,r18
    4d48:	1ce7c83a 	sub	r19,r3,r19
    4d4c:	25cf883a 	add	r7,r4,r23
    4d50:	84c00215 	stw	r19,8(r16)
    4d54:	81c00015 	stw	r7,0(r16)
    4d58:	a0c00217 	ldw	r3,8(r20)
    4d5c:	e0b9883a 	add	fp,fp,r2
    4d60:	90a5c83a 	sub	r18,r18,r2
    4d64:	18a7c83a 	sub	r19,r3,r2
    4d68:	a4c00215 	stw	r19,8(r20)
    4d6c:	983fce26 	beq	r19,zero,4ca8 <__alt_data_end+0xf8004ca8>
    4d70:	80c0030b 	ldhu	r3,12(r16)
    4d74:	903fe61e 	bne	r18,zero,4d10 <__alt_data_end+0xf8004d10>
    4d78:	8f000017 	ldw	fp,0(r17)
    4d7c:	8c800117 	ldw	r18,4(r17)
    4d80:	8c400204 	addi	r17,r17,8
    4d84:	003fe106 	br	4d0c <__alt_data_end+0xf8004d0c>
    4d88:	8cc00017 	ldw	r19,0(r17)
    4d8c:	8c800117 	ldw	r18,4(r17)
    4d90:	8c400204 	addi	r17,r17,8
    4d94:	003fb306 	br	4c64 <__alt_data_end+0xf8004c64>
    4d98:	0005883a 	mov	r2,zero
    4d9c:	f800283a 	ret
    4da0:	81000017 	ldw	r4,0(r16)
    4da4:	80800417 	ldw	r2,16(r16)
    4da8:	11005736 	bltu	r2,r4,4f08 <__sfvwrite_r+0x314>
    4dac:	85c00517 	ldw	r23,20(r16)
    4db0:	95c05536 	bltu	r18,r23,4f08 <__sfvwrite_r+0x314>
    4db4:	00a00034 	movhi	r2,32768
    4db8:	10bfffc4 	addi	r2,r2,-1
    4dbc:	9009883a 	mov	r4,r18
    4dc0:	1480012e 	bgeu	r2,r18,4dc8 <__sfvwrite_r+0x1d4>
    4dc4:	1009883a 	mov	r4,r2
    4dc8:	b80b883a 	mov	r5,r23
    4dcc:	000a3f80 	call	a3f8 <__divsi3>
    4dd0:	15cf383a 	mul	r7,r2,r23
    4dd4:	81400717 	ldw	r5,28(r16)
    4dd8:	80800917 	ldw	r2,36(r16)
    4ddc:	e00d883a 	mov	r6,fp
    4de0:	a809883a 	mov	r4,r21
    4de4:	103ee83a 	callr	r2
    4de8:	00bfdb16 	blt	zero,r2,4d58 <__alt_data_end+0xf8004d58>
    4dec:	8080030b 	ldhu	r2,12(r16)
    4df0:	10801014 	ori	r2,r2,64
    4df4:	8080030d 	sth	r2,12(r16)
    4df8:	00bfffc4 	movi	r2,-1
    4dfc:	003fab06 	br	4cac <__alt_data_end+0xf8004cac>
    4e00:	0027883a 	mov	r19,zero
    4e04:	0011883a 	mov	r8,zero
    4e08:	0039883a 	mov	fp,zero
    4e0c:	0025883a 	mov	r18,zero
    4e10:	90001f26 	beq	r18,zero,4e90 <__sfvwrite_r+0x29c>
    4e14:	40005a26 	beq	r8,zero,4f80 <__sfvwrite_r+0x38c>
    4e18:	982d883a 	mov	r22,r19
    4e1c:	94c0012e 	bgeu	r18,r19,4e24 <__sfvwrite_r+0x230>
    4e20:	902d883a 	mov	r22,r18
    4e24:	81000017 	ldw	r4,0(r16)
    4e28:	80800417 	ldw	r2,16(r16)
    4e2c:	b02f883a 	mov	r23,r22
    4e30:	81c00517 	ldw	r7,20(r16)
    4e34:	1100032e 	bgeu	r2,r4,4e44 <__sfvwrite_r+0x250>
    4e38:	80c00217 	ldw	r3,8(r16)
    4e3c:	38c7883a 	add	r3,r7,r3
    4e40:	1d801816 	blt	r3,r22,4ea4 <__sfvwrite_r+0x2b0>
    4e44:	b1c03e16 	blt	r22,r7,4f40 <__sfvwrite_r+0x34c>
    4e48:	80800917 	ldw	r2,36(r16)
    4e4c:	81400717 	ldw	r5,28(r16)
    4e50:	e00d883a 	mov	r6,fp
    4e54:	da000115 	stw	r8,4(sp)
    4e58:	a809883a 	mov	r4,r21
    4e5c:	103ee83a 	callr	r2
    4e60:	102f883a 	mov	r23,r2
    4e64:	da000117 	ldw	r8,4(sp)
    4e68:	00bfe00e 	bge	zero,r2,4dec <__alt_data_end+0xf8004dec>
    4e6c:	9de7c83a 	sub	r19,r19,r23
    4e70:	98001f26 	beq	r19,zero,4ef0 <__sfvwrite_r+0x2fc>
    4e74:	a0800217 	ldw	r2,8(r20)
    4e78:	e5f9883a 	add	fp,fp,r23
    4e7c:	95e5c83a 	sub	r18,r18,r23
    4e80:	15efc83a 	sub	r23,r2,r23
    4e84:	a5c00215 	stw	r23,8(r20)
    4e88:	b83f8726 	beq	r23,zero,4ca8 <__alt_data_end+0xf8004ca8>
    4e8c:	903fe11e 	bne	r18,zero,4e14 <__alt_data_end+0xf8004e14>
    4e90:	8f000017 	ldw	fp,0(r17)
    4e94:	8c800117 	ldw	r18,4(r17)
    4e98:	0011883a 	mov	r8,zero
    4e9c:	8c400204 	addi	r17,r17,8
    4ea0:	003fdb06 	br	4e10 <__alt_data_end+0xf8004e10>
    4ea4:	180d883a 	mov	r6,r3
    4ea8:	e00b883a 	mov	r5,fp
    4eac:	da000115 	stw	r8,4(sp)
    4eb0:	d8c00015 	stw	r3,0(sp)
    4eb4:	0005f080 	call	5f08 <memmove>
    4eb8:	d8c00017 	ldw	r3,0(sp)
    4ebc:	80800017 	ldw	r2,0(r16)
    4ec0:	800b883a 	mov	r5,r16
    4ec4:	a809883a 	mov	r4,r21
    4ec8:	10c5883a 	add	r2,r2,r3
    4ecc:	80800015 	stw	r2,0(r16)
    4ed0:	d8c00015 	stw	r3,0(sp)
    4ed4:	00043940 	call	4394 <_fflush_r>
    4ed8:	d8c00017 	ldw	r3,0(sp)
    4edc:	da000117 	ldw	r8,4(sp)
    4ee0:	103fc21e 	bne	r2,zero,4dec <__alt_data_end+0xf8004dec>
    4ee4:	182f883a 	mov	r23,r3
    4ee8:	9de7c83a 	sub	r19,r19,r23
    4eec:	983fe11e 	bne	r19,zero,4e74 <__alt_data_end+0xf8004e74>
    4ef0:	800b883a 	mov	r5,r16
    4ef4:	a809883a 	mov	r4,r21
    4ef8:	00043940 	call	4394 <_fflush_r>
    4efc:	103fbb1e 	bne	r2,zero,4dec <__alt_data_end+0xf8004dec>
    4f00:	0011883a 	mov	r8,zero
    4f04:	003fdb06 	br	4e74 <__alt_data_end+0xf8004e74>
    4f08:	94c0012e 	bgeu	r18,r19,4f10 <__sfvwrite_r+0x31c>
    4f0c:	9027883a 	mov	r19,r18
    4f10:	980d883a 	mov	r6,r19
    4f14:	e00b883a 	mov	r5,fp
    4f18:	0005f080 	call	5f08 <memmove>
    4f1c:	80800217 	ldw	r2,8(r16)
    4f20:	80c00017 	ldw	r3,0(r16)
    4f24:	14c5c83a 	sub	r2,r2,r19
    4f28:	1cc7883a 	add	r3,r3,r19
    4f2c:	80800215 	stw	r2,8(r16)
    4f30:	80c00015 	stw	r3,0(r16)
    4f34:	10004326 	beq	r2,zero,5044 <__sfvwrite_r+0x450>
    4f38:	9805883a 	mov	r2,r19
    4f3c:	003f8606 	br	4d58 <__alt_data_end+0xf8004d58>
    4f40:	b00d883a 	mov	r6,r22
    4f44:	e00b883a 	mov	r5,fp
    4f48:	da000115 	stw	r8,4(sp)
    4f4c:	0005f080 	call	5f08 <memmove>
    4f50:	80800217 	ldw	r2,8(r16)
    4f54:	80c00017 	ldw	r3,0(r16)
    4f58:	da000117 	ldw	r8,4(sp)
    4f5c:	1585c83a 	sub	r2,r2,r22
    4f60:	1dad883a 	add	r22,r3,r22
    4f64:	80800215 	stw	r2,8(r16)
    4f68:	85800015 	stw	r22,0(r16)
    4f6c:	003fbf06 	br	4e6c <__alt_data_end+0xf8004e6c>
    4f70:	81000017 	ldw	r4,0(r16)
    4f74:	9027883a 	mov	r19,r18
    4f78:	902f883a 	mov	r23,r18
    4f7c:	003f6c06 	br	4d30 <__alt_data_end+0xf8004d30>
    4f80:	900d883a 	mov	r6,r18
    4f84:	01400284 	movi	r5,10
    4f88:	e009883a 	mov	r4,fp
    4f8c:	0005cdc0 	call	5cdc <memchr>
    4f90:	10003e26 	beq	r2,zero,508c <__sfvwrite_r+0x498>
    4f94:	10800044 	addi	r2,r2,1
    4f98:	1727c83a 	sub	r19,r2,fp
    4f9c:	02000044 	movi	r8,1
    4fa0:	003f9d06 	br	4e18 <__alt_data_end+0xf8004e18>
    4fa4:	80800517 	ldw	r2,20(r16)
    4fa8:	81400417 	ldw	r5,16(r16)
    4fac:	81c00017 	ldw	r7,0(r16)
    4fb0:	10a7883a 	add	r19,r2,r2
    4fb4:	9885883a 	add	r2,r19,r2
    4fb8:	1026d7fa 	srli	r19,r2,31
    4fbc:	396dc83a 	sub	r22,r7,r5
    4fc0:	b1000044 	addi	r4,r22,1
    4fc4:	9885883a 	add	r2,r19,r2
    4fc8:	1027d07a 	srai	r19,r2,1
    4fcc:	2485883a 	add	r2,r4,r18
    4fd0:	980d883a 	mov	r6,r19
    4fd4:	9880022e 	bgeu	r19,r2,4fe0 <__sfvwrite_r+0x3ec>
    4fd8:	1027883a 	mov	r19,r2
    4fdc:	100d883a 	mov	r6,r2
    4fe0:	18c1000c 	andi	r3,r3,1024
    4fe4:	18001c26 	beq	r3,zero,5058 <__sfvwrite_r+0x464>
    4fe8:	300b883a 	mov	r5,r6
    4fec:	a809883a 	mov	r4,r21
    4ff0:	00054d00 	call	54d0 <_malloc_r>
    4ff4:	102f883a 	mov	r23,r2
    4ff8:	10002926 	beq	r2,zero,50a0 <__sfvwrite_r+0x4ac>
    4ffc:	81400417 	ldw	r5,16(r16)
    5000:	b00d883a 	mov	r6,r22
    5004:	1009883a 	mov	r4,r2
    5008:	0005dc00 	call	5dc0 <memcpy>
    500c:	8080030b 	ldhu	r2,12(r16)
    5010:	00fedfc4 	movi	r3,-1153
    5014:	10c4703a 	and	r2,r2,r3
    5018:	10802014 	ori	r2,r2,128
    501c:	8080030d 	sth	r2,12(r16)
    5020:	bd89883a 	add	r4,r23,r22
    5024:	9d8fc83a 	sub	r7,r19,r22
    5028:	85c00415 	stw	r23,16(r16)
    502c:	84c00515 	stw	r19,20(r16)
    5030:	81000015 	stw	r4,0(r16)
    5034:	9027883a 	mov	r19,r18
    5038:	81c00215 	stw	r7,8(r16)
    503c:	902f883a 	mov	r23,r18
    5040:	003f3b06 	br	4d30 <__alt_data_end+0xf8004d30>
    5044:	800b883a 	mov	r5,r16
    5048:	a809883a 	mov	r4,r21
    504c:	00043940 	call	4394 <_fflush_r>
    5050:	103fb926 	beq	r2,zero,4f38 <__alt_data_end+0xf8004f38>
    5054:	003f6506 	br	4dec <__alt_data_end+0xf8004dec>
    5058:	a809883a 	mov	r4,r21
    505c:	00071880 	call	7188 <_realloc_r>
    5060:	102f883a 	mov	r23,r2
    5064:	103fee1e 	bne	r2,zero,5020 <__alt_data_end+0xf8005020>
    5068:	81400417 	ldw	r5,16(r16)
    506c:	a809883a 	mov	r4,r21
    5070:	00048e40 	call	48e4 <_free_r>
    5074:	8080030b 	ldhu	r2,12(r16)
    5078:	00ffdfc4 	movi	r3,-129
    507c:	1884703a 	and	r2,r3,r2
    5080:	00c00304 	movi	r3,12
    5084:	a8c00015 	stw	r3,0(r21)
    5088:	003f5906 	br	4df0 <__alt_data_end+0xf8004df0>
    508c:	94c00044 	addi	r19,r18,1
    5090:	02000044 	movi	r8,1
    5094:	003f6006 	br	4e18 <__alt_data_end+0xf8004e18>
    5098:	00bfffc4 	movi	r2,-1
    509c:	003f0306 	br	4cac <__alt_data_end+0xf8004cac>
    50a0:	00800304 	movi	r2,12
    50a4:	a8800015 	stw	r2,0(r21)
    50a8:	8080030b 	ldhu	r2,12(r16)
    50ac:	003f5006 	br	4df0 <__alt_data_end+0xf8004df0>

000050b0 <_fwalk>:
    50b0:	defff704 	addi	sp,sp,-36
    50b4:	dd000415 	stw	r20,16(sp)
    50b8:	dfc00815 	stw	ra,32(sp)
    50bc:	ddc00715 	stw	r23,28(sp)
    50c0:	dd800615 	stw	r22,24(sp)
    50c4:	dd400515 	stw	r21,20(sp)
    50c8:	dcc00315 	stw	r19,12(sp)
    50cc:	dc800215 	stw	r18,8(sp)
    50d0:	dc400115 	stw	r17,4(sp)
    50d4:	dc000015 	stw	r16,0(sp)
    50d8:	2500b804 	addi	r20,r4,736
    50dc:	a0002326 	beq	r20,zero,516c <_fwalk+0xbc>
    50e0:	282b883a 	mov	r21,r5
    50e4:	002f883a 	mov	r23,zero
    50e8:	05800044 	movi	r22,1
    50ec:	04ffffc4 	movi	r19,-1
    50f0:	a4400117 	ldw	r17,4(r20)
    50f4:	a4800217 	ldw	r18,8(r20)
    50f8:	8c7fffc4 	addi	r17,r17,-1
    50fc:	88000d16 	blt	r17,zero,5134 <_fwalk+0x84>
    5100:	94000304 	addi	r16,r18,12
    5104:	94800384 	addi	r18,r18,14
    5108:	8080000b 	ldhu	r2,0(r16)
    510c:	8c7fffc4 	addi	r17,r17,-1
    5110:	813ffd04 	addi	r4,r16,-12
    5114:	b080042e 	bgeu	r22,r2,5128 <_fwalk+0x78>
    5118:	9080000f 	ldh	r2,0(r18)
    511c:	14c00226 	beq	r2,r19,5128 <_fwalk+0x78>
    5120:	a83ee83a 	callr	r21
    5124:	b8aeb03a 	or	r23,r23,r2
    5128:	84001a04 	addi	r16,r16,104
    512c:	94801a04 	addi	r18,r18,104
    5130:	8cfff51e 	bne	r17,r19,5108 <__alt_data_end+0xf8005108>
    5134:	a5000017 	ldw	r20,0(r20)
    5138:	a03fed1e 	bne	r20,zero,50f0 <__alt_data_end+0xf80050f0>
    513c:	b805883a 	mov	r2,r23
    5140:	dfc00817 	ldw	ra,32(sp)
    5144:	ddc00717 	ldw	r23,28(sp)
    5148:	dd800617 	ldw	r22,24(sp)
    514c:	dd400517 	ldw	r21,20(sp)
    5150:	dd000417 	ldw	r20,16(sp)
    5154:	dcc00317 	ldw	r19,12(sp)
    5158:	dc800217 	ldw	r18,8(sp)
    515c:	dc400117 	ldw	r17,4(sp)
    5160:	dc000017 	ldw	r16,0(sp)
    5164:	dec00904 	addi	sp,sp,36
    5168:	f800283a 	ret
    516c:	002f883a 	mov	r23,zero
    5170:	003ff206 	br	513c <__alt_data_end+0xf800513c>

00005174 <_fwalk_reent>:
    5174:	defff704 	addi	sp,sp,-36
    5178:	dd000415 	stw	r20,16(sp)
    517c:	dfc00815 	stw	ra,32(sp)
    5180:	ddc00715 	stw	r23,28(sp)
    5184:	dd800615 	stw	r22,24(sp)
    5188:	dd400515 	stw	r21,20(sp)
    518c:	dcc00315 	stw	r19,12(sp)
    5190:	dc800215 	stw	r18,8(sp)
    5194:	dc400115 	stw	r17,4(sp)
    5198:	dc000015 	stw	r16,0(sp)
    519c:	2500b804 	addi	r20,r4,736
    51a0:	a0002326 	beq	r20,zero,5230 <_fwalk_reent+0xbc>
    51a4:	282b883a 	mov	r21,r5
    51a8:	2027883a 	mov	r19,r4
    51ac:	002f883a 	mov	r23,zero
    51b0:	05800044 	movi	r22,1
    51b4:	04bfffc4 	movi	r18,-1
    51b8:	a4400117 	ldw	r17,4(r20)
    51bc:	a4000217 	ldw	r16,8(r20)
    51c0:	8c7fffc4 	addi	r17,r17,-1
    51c4:	88000c16 	blt	r17,zero,51f8 <_fwalk_reent+0x84>
    51c8:	84000304 	addi	r16,r16,12
    51cc:	8080000b 	ldhu	r2,0(r16)
    51d0:	8c7fffc4 	addi	r17,r17,-1
    51d4:	817ffd04 	addi	r5,r16,-12
    51d8:	b080052e 	bgeu	r22,r2,51f0 <_fwalk_reent+0x7c>
    51dc:	8080008f 	ldh	r2,2(r16)
    51e0:	9809883a 	mov	r4,r19
    51e4:	14800226 	beq	r2,r18,51f0 <_fwalk_reent+0x7c>
    51e8:	a83ee83a 	callr	r21
    51ec:	b8aeb03a 	or	r23,r23,r2
    51f0:	84001a04 	addi	r16,r16,104
    51f4:	8cbff51e 	bne	r17,r18,51cc <__alt_data_end+0xf80051cc>
    51f8:	a5000017 	ldw	r20,0(r20)
    51fc:	a03fee1e 	bne	r20,zero,51b8 <__alt_data_end+0xf80051b8>
    5200:	b805883a 	mov	r2,r23
    5204:	dfc00817 	ldw	ra,32(sp)
    5208:	ddc00717 	ldw	r23,28(sp)
    520c:	dd800617 	ldw	r22,24(sp)
    5210:	dd400517 	ldw	r21,20(sp)
    5214:	dd000417 	ldw	r20,16(sp)
    5218:	dcc00317 	ldw	r19,12(sp)
    521c:	dc800217 	ldw	r18,8(sp)
    5220:	dc400117 	ldw	r17,4(sp)
    5224:	dc000017 	ldw	r16,0(sp)
    5228:	dec00904 	addi	sp,sp,36
    522c:	f800283a 	ret
    5230:	002f883a 	mov	r23,zero
    5234:	003ff206 	br	5200 <__alt_data_end+0xf8005200>

00005238 <_setlocale_r>:
    5238:	30001b26 	beq	r6,zero,52a8 <_setlocale_r+0x70>
    523c:	01400074 	movhi	r5,1
    5240:	defffe04 	addi	sp,sp,-8
    5244:	297e0e04 	addi	r5,r5,-1992
    5248:	3009883a 	mov	r4,r6
    524c:	dc000015 	stw	r16,0(sp)
    5250:	dfc00115 	stw	ra,4(sp)
    5254:	3021883a 	mov	r16,r6
    5258:	00078f00 	call	78f0 <strcmp>
    525c:	1000061e 	bne	r2,zero,5278 <_setlocale_r+0x40>
    5260:	00800074 	movhi	r2,1
    5264:	10be0d04 	addi	r2,r2,-1996
    5268:	dfc00117 	ldw	ra,4(sp)
    526c:	dc000017 	ldw	r16,0(sp)
    5270:	dec00204 	addi	sp,sp,8
    5274:	f800283a 	ret
    5278:	01400074 	movhi	r5,1
    527c:	297e0d04 	addi	r5,r5,-1996
    5280:	8009883a 	mov	r4,r16
    5284:	00078f00 	call	78f0 <strcmp>
    5288:	103ff526 	beq	r2,zero,5260 <__alt_data_end+0xf8005260>
    528c:	01400074 	movhi	r5,1
    5290:	297df804 	addi	r5,r5,-2080
    5294:	8009883a 	mov	r4,r16
    5298:	00078f00 	call	78f0 <strcmp>
    529c:	103ff026 	beq	r2,zero,5260 <__alt_data_end+0xf8005260>
    52a0:	0005883a 	mov	r2,zero
    52a4:	003ff006 	br	5268 <__alt_data_end+0xf8005268>
    52a8:	00800074 	movhi	r2,1
    52ac:	10be0d04 	addi	r2,r2,-1996
    52b0:	f800283a 	ret

000052b4 <__locale_charset>:
    52b4:	00800074 	movhi	r2,1
    52b8:	10bfd204 	addi	r2,r2,-184
    52bc:	f800283a 	ret

000052c0 <__locale_mb_cur_max>:
    52c0:	00800074 	movhi	r2,1
    52c4:	10859c04 	addi	r2,r2,5744
    52c8:	10800017 	ldw	r2,0(r2)
    52cc:	f800283a 	ret

000052d0 <__locale_msgcharset>:
    52d0:	00800074 	movhi	r2,1
    52d4:	10bfca04 	addi	r2,r2,-216
    52d8:	f800283a 	ret

000052dc <__locale_cjk_lang>:
    52dc:	0005883a 	mov	r2,zero
    52e0:	f800283a 	ret

000052e4 <_localeconv_r>:
    52e4:	00800074 	movhi	r2,1
    52e8:	10bfda04 	addi	r2,r2,-152
    52ec:	f800283a 	ret

000052f0 <setlocale>:
    52f0:	00800074 	movhi	r2,1
    52f4:	10859b04 	addi	r2,r2,5740
    52f8:	280d883a 	mov	r6,r5
    52fc:	200b883a 	mov	r5,r4
    5300:	11000017 	ldw	r4,0(r2)
    5304:	00052381 	jmpi	5238 <_setlocale_r>

00005308 <localeconv>:
    5308:	00800074 	movhi	r2,1
    530c:	10bfda04 	addi	r2,r2,-152
    5310:	f800283a 	ret

00005314 <__smakebuf_r>:
    5314:	2880030b 	ldhu	r2,12(r5)
    5318:	10c0008c 	andi	r3,r2,2
    531c:	1800411e 	bne	r3,zero,5424 <__smakebuf_r+0x110>
    5320:	deffec04 	addi	sp,sp,-80
    5324:	dc000f15 	stw	r16,60(sp)
    5328:	2821883a 	mov	r16,r5
    532c:	2940038f 	ldh	r5,14(r5)
    5330:	dc401015 	stw	r17,64(sp)
    5334:	dfc01315 	stw	ra,76(sp)
    5338:	dcc01215 	stw	r19,72(sp)
    533c:	dc801115 	stw	r18,68(sp)
    5340:	2023883a 	mov	r17,r4
    5344:	28001c16 	blt	r5,zero,53b8 <__smakebuf_r+0xa4>
    5348:	d80d883a 	mov	r6,sp
    534c:	00094980 	call	9498 <_fstat_r>
    5350:	10001816 	blt	r2,zero,53b4 <__smakebuf_r+0xa0>
    5354:	d8800117 	ldw	r2,4(sp)
    5358:	00e00014 	movui	r3,32768
    535c:	10bc000c 	andi	r2,r2,61440
    5360:	14c80020 	cmpeqi	r19,r2,8192
    5364:	10c03726 	beq	r2,r3,5444 <__smakebuf_r+0x130>
    5368:	80c0030b 	ldhu	r3,12(r16)
    536c:	18c20014 	ori	r3,r3,2048
    5370:	80c0030d 	sth	r3,12(r16)
    5374:	00c80004 	movi	r3,8192
    5378:	10c0521e 	bne	r2,r3,54c4 <__smakebuf_r+0x1b0>
    537c:	8140038f 	ldh	r5,14(r16)
    5380:	8809883a 	mov	r4,r17
    5384:	00094f40 	call	94f4 <_isatty_r>
    5388:	10004c26 	beq	r2,zero,54bc <__smakebuf_r+0x1a8>
    538c:	8080030b 	ldhu	r2,12(r16)
    5390:	80c010c4 	addi	r3,r16,67
    5394:	80c00015 	stw	r3,0(r16)
    5398:	10800054 	ori	r2,r2,1
    539c:	8080030d 	sth	r2,12(r16)
    53a0:	00800044 	movi	r2,1
    53a4:	80c00415 	stw	r3,16(r16)
    53a8:	80800515 	stw	r2,20(r16)
    53ac:	04810004 	movi	r18,1024
    53b0:	00000706 	br	53d0 <__smakebuf_r+0xbc>
    53b4:	8080030b 	ldhu	r2,12(r16)
    53b8:	10c0200c 	andi	r3,r2,128
    53bc:	18001f1e 	bne	r3,zero,543c <__smakebuf_r+0x128>
    53c0:	04810004 	movi	r18,1024
    53c4:	10820014 	ori	r2,r2,2048
    53c8:	8080030d 	sth	r2,12(r16)
    53cc:	0027883a 	mov	r19,zero
    53d0:	900b883a 	mov	r5,r18
    53d4:	8809883a 	mov	r4,r17
    53d8:	00054d00 	call	54d0 <_malloc_r>
    53dc:	10002c26 	beq	r2,zero,5490 <__smakebuf_r+0x17c>
    53e0:	80c0030b 	ldhu	r3,12(r16)
    53e4:	01000034 	movhi	r4,0
    53e8:	21110a04 	addi	r4,r4,17448
    53ec:	89000f15 	stw	r4,60(r17)
    53f0:	18c02014 	ori	r3,r3,128
    53f4:	80c0030d 	sth	r3,12(r16)
    53f8:	80800015 	stw	r2,0(r16)
    53fc:	80800415 	stw	r2,16(r16)
    5400:	84800515 	stw	r18,20(r16)
    5404:	98001a1e 	bne	r19,zero,5470 <__smakebuf_r+0x15c>
    5408:	dfc01317 	ldw	ra,76(sp)
    540c:	dcc01217 	ldw	r19,72(sp)
    5410:	dc801117 	ldw	r18,68(sp)
    5414:	dc401017 	ldw	r17,64(sp)
    5418:	dc000f17 	ldw	r16,60(sp)
    541c:	dec01404 	addi	sp,sp,80
    5420:	f800283a 	ret
    5424:	288010c4 	addi	r2,r5,67
    5428:	28800015 	stw	r2,0(r5)
    542c:	28800415 	stw	r2,16(r5)
    5430:	00800044 	movi	r2,1
    5434:	28800515 	stw	r2,20(r5)
    5438:	f800283a 	ret
    543c:	04801004 	movi	r18,64
    5440:	003fe006 	br	53c4 <__alt_data_end+0xf80053c4>
    5444:	81000a17 	ldw	r4,40(r16)
    5448:	00c00034 	movhi	r3,0
    544c:	18de2304 	addi	r3,r3,30860
    5450:	20ffc51e 	bne	r4,r3,5368 <__alt_data_end+0xf8005368>
    5454:	8080030b 	ldhu	r2,12(r16)
    5458:	04810004 	movi	r18,1024
    545c:	84801315 	stw	r18,76(r16)
    5460:	1484b03a 	or	r2,r2,r18
    5464:	8080030d 	sth	r2,12(r16)
    5468:	0027883a 	mov	r19,zero
    546c:	003fd806 	br	53d0 <__alt_data_end+0xf80053d0>
    5470:	8140038f 	ldh	r5,14(r16)
    5474:	8809883a 	mov	r4,r17
    5478:	00094f40 	call	94f4 <_isatty_r>
    547c:	103fe226 	beq	r2,zero,5408 <__alt_data_end+0xf8005408>
    5480:	8080030b 	ldhu	r2,12(r16)
    5484:	10800054 	ori	r2,r2,1
    5488:	8080030d 	sth	r2,12(r16)
    548c:	003fde06 	br	5408 <__alt_data_end+0xf8005408>
    5490:	8080030b 	ldhu	r2,12(r16)
    5494:	10c0800c 	andi	r3,r2,512
    5498:	183fdb1e 	bne	r3,zero,5408 <__alt_data_end+0xf8005408>
    549c:	10800094 	ori	r2,r2,2
    54a0:	80c010c4 	addi	r3,r16,67
    54a4:	8080030d 	sth	r2,12(r16)
    54a8:	00800044 	movi	r2,1
    54ac:	80c00015 	stw	r3,0(r16)
    54b0:	80c00415 	stw	r3,16(r16)
    54b4:	80800515 	stw	r2,20(r16)
    54b8:	003fd306 	br	5408 <__alt_data_end+0xf8005408>
    54bc:	04810004 	movi	r18,1024
    54c0:	003fc306 	br	53d0 <__alt_data_end+0xf80053d0>
    54c4:	0027883a 	mov	r19,zero
    54c8:	04810004 	movi	r18,1024
    54cc:	003fc006 	br	53d0 <__alt_data_end+0xf80053d0>

000054d0 <_malloc_r>:
    54d0:	defff504 	addi	sp,sp,-44
    54d4:	dc800315 	stw	r18,12(sp)
    54d8:	dfc00a15 	stw	ra,40(sp)
    54dc:	df000915 	stw	fp,36(sp)
    54e0:	ddc00815 	stw	r23,32(sp)
    54e4:	dd800715 	stw	r22,28(sp)
    54e8:	dd400615 	stw	r21,24(sp)
    54ec:	dd000515 	stw	r20,20(sp)
    54f0:	dcc00415 	stw	r19,16(sp)
    54f4:	dc400215 	stw	r17,8(sp)
    54f8:	dc000115 	stw	r16,4(sp)
    54fc:	288002c4 	addi	r2,r5,11
    5500:	00c00584 	movi	r3,22
    5504:	2025883a 	mov	r18,r4
    5508:	18807f2e 	bgeu	r3,r2,5708 <_malloc_r+0x238>
    550c:	047ffe04 	movi	r17,-8
    5510:	1462703a 	and	r17,r2,r17
    5514:	8800a316 	blt	r17,zero,57a4 <_malloc_r+0x2d4>
    5518:	8940a236 	bltu	r17,r5,57a4 <_malloc_r+0x2d4>
    551c:	000d1900 	call	d190 <__malloc_lock>
    5520:	00807dc4 	movi	r2,503
    5524:	1441e92e 	bgeu	r2,r17,5ccc <_malloc_r+0x7fc>
    5528:	8804d27a 	srli	r2,r17,9
    552c:	1000a126 	beq	r2,zero,57b4 <_malloc_r+0x2e4>
    5530:	00c00104 	movi	r3,4
    5534:	18811e36 	bltu	r3,r2,59b0 <_malloc_r+0x4e0>
    5538:	8804d1ba 	srli	r2,r17,6
    553c:	12000e44 	addi	r8,r2,57
    5540:	11c00e04 	addi	r7,r2,56
    5544:	4209883a 	add	r4,r8,r8
    5548:	04c00074 	movhi	r19,1
    554c:	2109883a 	add	r4,r4,r4
    5550:	9cffe804 	addi	r19,r19,-96
    5554:	2109883a 	add	r4,r4,r4
    5558:	9909883a 	add	r4,r19,r4
    555c:	24000117 	ldw	r16,4(r4)
    5560:	213ffe04 	addi	r4,r4,-8
    5564:	24009726 	beq	r4,r16,57c4 <_malloc_r+0x2f4>
    5568:	80800117 	ldw	r2,4(r16)
    556c:	01bfff04 	movi	r6,-4
    5570:	014003c4 	movi	r5,15
    5574:	1184703a 	and	r2,r2,r6
    5578:	1447c83a 	sub	r3,r2,r17
    557c:	28c00716 	blt	r5,r3,559c <_malloc_r+0xcc>
    5580:	1800920e 	bge	r3,zero,57cc <_malloc_r+0x2fc>
    5584:	84000317 	ldw	r16,12(r16)
    5588:	24008e26 	beq	r4,r16,57c4 <_malloc_r+0x2f4>
    558c:	80800117 	ldw	r2,4(r16)
    5590:	1184703a 	and	r2,r2,r6
    5594:	1447c83a 	sub	r3,r2,r17
    5598:	28fff90e 	bge	r5,r3,5580 <__alt_data_end+0xf8005580>
    559c:	3809883a 	mov	r4,r7
    55a0:	01800074 	movhi	r6,1
    55a4:	9c000417 	ldw	r16,16(r19)
    55a8:	31bfe804 	addi	r6,r6,-96
    55ac:	32000204 	addi	r8,r6,8
    55b0:	82013426 	beq	r16,r8,5a84 <_malloc_r+0x5b4>
    55b4:	80c00117 	ldw	r3,4(r16)
    55b8:	00bfff04 	movi	r2,-4
    55bc:	188e703a 	and	r7,r3,r2
    55c0:	3c45c83a 	sub	r2,r7,r17
    55c4:	00c003c4 	movi	r3,15
    55c8:	18811f16 	blt	r3,r2,5a48 <_malloc_r+0x578>
    55cc:	32000515 	stw	r8,20(r6)
    55d0:	32000415 	stw	r8,16(r6)
    55d4:	10007f0e 	bge	r2,zero,57d4 <_malloc_r+0x304>
    55d8:	00807fc4 	movi	r2,511
    55dc:	11c0fd36 	bltu	r2,r7,59d4 <_malloc_r+0x504>
    55e0:	3806d0fa 	srli	r3,r7,3
    55e4:	01c00044 	movi	r7,1
    55e8:	30800117 	ldw	r2,4(r6)
    55ec:	19400044 	addi	r5,r3,1
    55f0:	294b883a 	add	r5,r5,r5
    55f4:	1807d0ba 	srai	r3,r3,2
    55f8:	294b883a 	add	r5,r5,r5
    55fc:	294b883a 	add	r5,r5,r5
    5600:	298b883a 	add	r5,r5,r6
    5604:	38c6983a 	sll	r3,r7,r3
    5608:	29c00017 	ldw	r7,0(r5)
    560c:	2a7ffe04 	addi	r9,r5,-8
    5610:	1886b03a 	or	r3,r3,r2
    5614:	82400315 	stw	r9,12(r16)
    5618:	81c00215 	stw	r7,8(r16)
    561c:	30c00115 	stw	r3,4(r6)
    5620:	2c000015 	stw	r16,0(r5)
    5624:	3c000315 	stw	r16,12(r7)
    5628:	2005d0ba 	srai	r2,r4,2
    562c:	01400044 	movi	r5,1
    5630:	288a983a 	sll	r5,r5,r2
    5634:	19406f36 	bltu	r3,r5,57f4 <_malloc_r+0x324>
    5638:	28c4703a 	and	r2,r5,r3
    563c:	10000a1e 	bne	r2,zero,5668 <_malloc_r+0x198>
    5640:	00bfff04 	movi	r2,-4
    5644:	294b883a 	add	r5,r5,r5
    5648:	2088703a 	and	r4,r4,r2
    564c:	28c4703a 	and	r2,r5,r3
    5650:	21000104 	addi	r4,r4,4
    5654:	1000041e 	bne	r2,zero,5668 <_malloc_r+0x198>
    5658:	294b883a 	add	r5,r5,r5
    565c:	28c4703a 	and	r2,r5,r3
    5660:	21000104 	addi	r4,r4,4
    5664:	103ffc26 	beq	r2,zero,5658 <__alt_data_end+0xf8005658>
    5668:	02bfff04 	movi	r10,-4
    566c:	024003c4 	movi	r9,15
    5670:	21800044 	addi	r6,r4,1
    5674:	318d883a 	add	r6,r6,r6
    5678:	318d883a 	add	r6,r6,r6
    567c:	318d883a 	add	r6,r6,r6
    5680:	998d883a 	add	r6,r19,r6
    5684:	333ffe04 	addi	r12,r6,-8
    5688:	2017883a 	mov	r11,r4
    568c:	31800104 	addi	r6,r6,4
    5690:	34000017 	ldw	r16,0(r6)
    5694:	31fffd04 	addi	r7,r6,-12
    5698:	81c0041e 	bne	r16,r7,56ac <_malloc_r+0x1dc>
    569c:	0000fb06 	br	5a8c <_malloc_r+0x5bc>
    56a0:	1801030e 	bge	r3,zero,5ab0 <_malloc_r+0x5e0>
    56a4:	84000317 	ldw	r16,12(r16)
    56a8:	81c0f826 	beq	r16,r7,5a8c <_malloc_r+0x5bc>
    56ac:	80800117 	ldw	r2,4(r16)
    56b0:	1284703a 	and	r2,r2,r10
    56b4:	1447c83a 	sub	r3,r2,r17
    56b8:	48fff90e 	bge	r9,r3,56a0 <__alt_data_end+0xf80056a0>
    56bc:	80800317 	ldw	r2,12(r16)
    56c0:	81000217 	ldw	r4,8(r16)
    56c4:	89400054 	ori	r5,r17,1
    56c8:	81400115 	stw	r5,4(r16)
    56cc:	20800315 	stw	r2,12(r4)
    56d0:	11000215 	stw	r4,8(r2)
    56d4:	8463883a 	add	r17,r16,r17
    56d8:	9c400515 	stw	r17,20(r19)
    56dc:	9c400415 	stw	r17,16(r19)
    56e0:	18800054 	ori	r2,r3,1
    56e4:	88800115 	stw	r2,4(r17)
    56e8:	8a000315 	stw	r8,12(r17)
    56ec:	8a000215 	stw	r8,8(r17)
    56f0:	88e3883a 	add	r17,r17,r3
    56f4:	88c00015 	stw	r3,0(r17)
    56f8:	9009883a 	mov	r4,r18
    56fc:	000d1b40 	call	d1b4 <__malloc_unlock>
    5700:	80800204 	addi	r2,r16,8
    5704:	00001b06 	br	5774 <_malloc_r+0x2a4>
    5708:	04400404 	movi	r17,16
    570c:	89402536 	bltu	r17,r5,57a4 <_malloc_r+0x2d4>
    5710:	000d1900 	call	d190 <__malloc_lock>
    5714:	00800184 	movi	r2,6
    5718:	01000084 	movi	r4,2
    571c:	04c00074 	movhi	r19,1
    5720:	1085883a 	add	r2,r2,r2
    5724:	9cffe804 	addi	r19,r19,-96
    5728:	1085883a 	add	r2,r2,r2
    572c:	9885883a 	add	r2,r19,r2
    5730:	14000117 	ldw	r16,4(r2)
    5734:	10fffe04 	addi	r3,r2,-8
    5738:	80c0d926 	beq	r16,r3,5aa0 <_malloc_r+0x5d0>
    573c:	80c00117 	ldw	r3,4(r16)
    5740:	81000317 	ldw	r4,12(r16)
    5744:	00bfff04 	movi	r2,-4
    5748:	1884703a 	and	r2,r3,r2
    574c:	81400217 	ldw	r5,8(r16)
    5750:	8085883a 	add	r2,r16,r2
    5754:	10c00117 	ldw	r3,4(r2)
    5758:	29000315 	stw	r4,12(r5)
    575c:	21400215 	stw	r5,8(r4)
    5760:	18c00054 	ori	r3,r3,1
    5764:	10c00115 	stw	r3,4(r2)
    5768:	9009883a 	mov	r4,r18
    576c:	000d1b40 	call	d1b4 <__malloc_unlock>
    5770:	80800204 	addi	r2,r16,8
    5774:	dfc00a17 	ldw	ra,40(sp)
    5778:	df000917 	ldw	fp,36(sp)
    577c:	ddc00817 	ldw	r23,32(sp)
    5780:	dd800717 	ldw	r22,28(sp)
    5784:	dd400617 	ldw	r21,24(sp)
    5788:	dd000517 	ldw	r20,20(sp)
    578c:	dcc00417 	ldw	r19,16(sp)
    5790:	dc800317 	ldw	r18,12(sp)
    5794:	dc400217 	ldw	r17,8(sp)
    5798:	dc000117 	ldw	r16,4(sp)
    579c:	dec00b04 	addi	sp,sp,44
    57a0:	f800283a 	ret
    57a4:	00800304 	movi	r2,12
    57a8:	90800015 	stw	r2,0(r18)
    57ac:	0005883a 	mov	r2,zero
    57b0:	003ff006 	br	5774 <__alt_data_end+0xf8005774>
    57b4:	01002004 	movi	r4,128
    57b8:	02001004 	movi	r8,64
    57bc:	01c00fc4 	movi	r7,63
    57c0:	003f6106 	br	5548 <__alt_data_end+0xf8005548>
    57c4:	4009883a 	mov	r4,r8
    57c8:	003f7506 	br	55a0 <__alt_data_end+0xf80055a0>
    57cc:	81000317 	ldw	r4,12(r16)
    57d0:	003fde06 	br	574c <__alt_data_end+0xf800574c>
    57d4:	81c5883a 	add	r2,r16,r7
    57d8:	11400117 	ldw	r5,4(r2)
    57dc:	9009883a 	mov	r4,r18
    57e0:	29400054 	ori	r5,r5,1
    57e4:	11400115 	stw	r5,4(r2)
    57e8:	000d1b40 	call	d1b4 <__malloc_unlock>
    57ec:	80800204 	addi	r2,r16,8
    57f0:	003fe006 	br	5774 <__alt_data_end+0xf8005774>
    57f4:	9c000217 	ldw	r16,8(r19)
    57f8:	00bfff04 	movi	r2,-4
    57fc:	85800117 	ldw	r22,4(r16)
    5800:	b0ac703a 	and	r22,r22,r2
    5804:	b4400336 	bltu	r22,r17,5814 <_malloc_r+0x344>
    5808:	b445c83a 	sub	r2,r22,r17
    580c:	00c003c4 	movi	r3,15
    5810:	18805d16 	blt	r3,r2,5988 <_malloc_r+0x4b8>
    5814:	05c00074 	movhi	r23,1
    5818:	00800074 	movhi	r2,1
    581c:	108c9804 	addi	r2,r2,12896
    5820:	bdc59d04 	addi	r23,r23,5748
    5824:	15400017 	ldw	r21,0(r2)
    5828:	b8c00017 	ldw	r3,0(r23)
    582c:	00bfffc4 	movi	r2,-1
    5830:	858d883a 	add	r6,r16,r22
    5834:	8d6b883a 	add	r21,r17,r21
    5838:	1880ea26 	beq	r3,r2,5be4 <_malloc_r+0x714>
    583c:	ad4403c4 	addi	r21,r21,4111
    5840:	00bc0004 	movi	r2,-4096
    5844:	a8aa703a 	and	r21,r21,r2
    5848:	a80b883a 	mov	r5,r21
    584c:	9009883a 	mov	r4,r18
    5850:	d9800015 	stw	r6,0(sp)
    5854:	00077600 	call	7760 <_sbrk_r>
    5858:	1029883a 	mov	r20,r2
    585c:	00bfffc4 	movi	r2,-1
    5860:	d9800017 	ldw	r6,0(sp)
    5864:	a080e826 	beq	r20,r2,5c08 <_malloc_r+0x738>
    5868:	a180a636 	bltu	r20,r6,5b04 <_malloc_r+0x634>
    586c:	07000074 	movhi	fp,1
    5870:	e70ca104 	addi	fp,fp,12932
    5874:	e0800017 	ldw	r2,0(fp)
    5878:	a887883a 	add	r3,r21,r2
    587c:	e0c00015 	stw	r3,0(fp)
    5880:	3500e626 	beq	r6,r20,5c1c <_malloc_r+0x74c>
    5884:	b9000017 	ldw	r4,0(r23)
    5888:	00bfffc4 	movi	r2,-1
    588c:	2080ee26 	beq	r4,r2,5c48 <_malloc_r+0x778>
    5890:	a185c83a 	sub	r2,r20,r6
    5894:	10c5883a 	add	r2,r2,r3
    5898:	e0800015 	stw	r2,0(fp)
    589c:	a0c001cc 	andi	r3,r20,7
    58a0:	1800bc26 	beq	r3,zero,5b94 <_malloc_r+0x6c4>
    58a4:	a0e9c83a 	sub	r20,r20,r3
    58a8:	00840204 	movi	r2,4104
    58ac:	a5000204 	addi	r20,r20,8
    58b0:	10c7c83a 	sub	r3,r2,r3
    58b4:	a545883a 	add	r2,r20,r21
    58b8:	1083ffcc 	andi	r2,r2,4095
    58bc:	18abc83a 	sub	r21,r3,r2
    58c0:	a80b883a 	mov	r5,r21
    58c4:	9009883a 	mov	r4,r18
    58c8:	00077600 	call	7760 <_sbrk_r>
    58cc:	00ffffc4 	movi	r3,-1
    58d0:	10c0e126 	beq	r2,r3,5c58 <_malloc_r+0x788>
    58d4:	1505c83a 	sub	r2,r2,r20
    58d8:	1545883a 	add	r2,r2,r21
    58dc:	10800054 	ori	r2,r2,1
    58e0:	e0c00017 	ldw	r3,0(fp)
    58e4:	9d000215 	stw	r20,8(r19)
    58e8:	a0800115 	stw	r2,4(r20)
    58ec:	a8c7883a 	add	r3,r21,r3
    58f0:	e0c00015 	stw	r3,0(fp)
    58f4:	84c00e26 	beq	r16,r19,5930 <_malloc_r+0x460>
    58f8:	018003c4 	movi	r6,15
    58fc:	3580a72e 	bgeu	r6,r22,5b9c <_malloc_r+0x6cc>
    5900:	81400117 	ldw	r5,4(r16)
    5904:	013ffe04 	movi	r4,-8
    5908:	b0bffd04 	addi	r2,r22,-12
    590c:	1104703a 	and	r2,r2,r4
    5910:	2900004c 	andi	r4,r5,1
    5914:	2088b03a 	or	r4,r4,r2
    5918:	81000115 	stw	r4,4(r16)
    591c:	01400144 	movi	r5,5
    5920:	8089883a 	add	r4,r16,r2
    5924:	21400115 	stw	r5,4(r4)
    5928:	21400215 	stw	r5,8(r4)
    592c:	3080cd36 	bltu	r6,r2,5c64 <_malloc_r+0x794>
    5930:	00800074 	movhi	r2,1
    5934:	108c9704 	addi	r2,r2,12892
    5938:	11000017 	ldw	r4,0(r2)
    593c:	20c0012e 	bgeu	r4,r3,5944 <_malloc_r+0x474>
    5940:	10c00015 	stw	r3,0(r2)
    5944:	00800074 	movhi	r2,1
    5948:	108c9604 	addi	r2,r2,12888
    594c:	11000017 	ldw	r4,0(r2)
    5950:	9c000217 	ldw	r16,8(r19)
    5954:	20c0012e 	bgeu	r4,r3,595c <_malloc_r+0x48c>
    5958:	10c00015 	stw	r3,0(r2)
    595c:	80c00117 	ldw	r3,4(r16)
    5960:	00bfff04 	movi	r2,-4
    5964:	1886703a 	and	r3,r3,r2
    5968:	1c45c83a 	sub	r2,r3,r17
    596c:	1c400236 	bltu	r3,r17,5978 <_malloc_r+0x4a8>
    5970:	00c003c4 	movi	r3,15
    5974:	18800416 	blt	r3,r2,5988 <_malloc_r+0x4b8>
    5978:	9009883a 	mov	r4,r18
    597c:	000d1b40 	call	d1b4 <__malloc_unlock>
    5980:	0005883a 	mov	r2,zero
    5984:	003f7b06 	br	5774 <__alt_data_end+0xf8005774>
    5988:	88c00054 	ori	r3,r17,1
    598c:	80c00115 	stw	r3,4(r16)
    5990:	8463883a 	add	r17,r16,r17
    5994:	10800054 	ori	r2,r2,1
    5998:	9c400215 	stw	r17,8(r19)
    599c:	88800115 	stw	r2,4(r17)
    59a0:	9009883a 	mov	r4,r18
    59a4:	000d1b40 	call	d1b4 <__malloc_unlock>
    59a8:	80800204 	addi	r2,r16,8
    59ac:	003f7106 	br	5774 <__alt_data_end+0xf8005774>
    59b0:	00c00504 	movi	r3,20
    59b4:	18804a2e 	bgeu	r3,r2,5ae0 <_malloc_r+0x610>
    59b8:	00c01504 	movi	r3,84
    59bc:	18806e36 	bltu	r3,r2,5b78 <_malloc_r+0x6a8>
    59c0:	8804d33a 	srli	r2,r17,12
    59c4:	12001bc4 	addi	r8,r2,111
    59c8:	11c01b84 	addi	r7,r2,110
    59cc:	4209883a 	add	r4,r8,r8
    59d0:	003edd06 	br	5548 <__alt_data_end+0xf8005548>
    59d4:	3804d27a 	srli	r2,r7,9
    59d8:	00c00104 	movi	r3,4
    59dc:	1880442e 	bgeu	r3,r2,5af0 <_malloc_r+0x620>
    59e0:	00c00504 	movi	r3,20
    59e4:	18808136 	bltu	r3,r2,5bec <_malloc_r+0x71c>
    59e8:	11401704 	addi	r5,r2,92
    59ec:	10c016c4 	addi	r3,r2,91
    59f0:	294b883a 	add	r5,r5,r5
    59f4:	294b883a 	add	r5,r5,r5
    59f8:	294b883a 	add	r5,r5,r5
    59fc:	994b883a 	add	r5,r19,r5
    5a00:	28800017 	ldw	r2,0(r5)
    5a04:	01800074 	movhi	r6,1
    5a08:	297ffe04 	addi	r5,r5,-8
    5a0c:	31bfe804 	addi	r6,r6,-96
    5a10:	28806526 	beq	r5,r2,5ba8 <_malloc_r+0x6d8>
    5a14:	01bfff04 	movi	r6,-4
    5a18:	10c00117 	ldw	r3,4(r2)
    5a1c:	1986703a 	and	r3,r3,r6
    5a20:	38c0022e 	bgeu	r7,r3,5a2c <_malloc_r+0x55c>
    5a24:	10800217 	ldw	r2,8(r2)
    5a28:	28bffb1e 	bne	r5,r2,5a18 <__alt_data_end+0xf8005a18>
    5a2c:	11400317 	ldw	r5,12(r2)
    5a30:	98c00117 	ldw	r3,4(r19)
    5a34:	81400315 	stw	r5,12(r16)
    5a38:	80800215 	stw	r2,8(r16)
    5a3c:	2c000215 	stw	r16,8(r5)
    5a40:	14000315 	stw	r16,12(r2)
    5a44:	003ef806 	br	5628 <__alt_data_end+0xf8005628>
    5a48:	88c00054 	ori	r3,r17,1
    5a4c:	80c00115 	stw	r3,4(r16)
    5a50:	8463883a 	add	r17,r16,r17
    5a54:	34400515 	stw	r17,20(r6)
    5a58:	34400415 	stw	r17,16(r6)
    5a5c:	10c00054 	ori	r3,r2,1
    5a60:	8a000315 	stw	r8,12(r17)
    5a64:	8a000215 	stw	r8,8(r17)
    5a68:	88c00115 	stw	r3,4(r17)
    5a6c:	88a3883a 	add	r17,r17,r2
    5a70:	88800015 	stw	r2,0(r17)
    5a74:	9009883a 	mov	r4,r18
    5a78:	000d1b40 	call	d1b4 <__malloc_unlock>
    5a7c:	80800204 	addi	r2,r16,8
    5a80:	003f3c06 	br	5774 <__alt_data_end+0xf8005774>
    5a84:	30c00117 	ldw	r3,4(r6)
    5a88:	003ee706 	br	5628 <__alt_data_end+0xf8005628>
    5a8c:	5ac00044 	addi	r11,r11,1
    5a90:	588000cc 	andi	r2,r11,3
    5a94:	31800204 	addi	r6,r6,8
    5a98:	103efd1e 	bne	r2,zero,5690 <__alt_data_end+0xf8005690>
    5a9c:	00002406 	br	5b30 <_malloc_r+0x660>
    5aa0:	14000317 	ldw	r16,12(r2)
    5aa4:	143f251e 	bne	r2,r16,573c <__alt_data_end+0xf800573c>
    5aa8:	21000084 	addi	r4,r4,2
    5aac:	003ebc06 	br	55a0 <__alt_data_end+0xf80055a0>
    5ab0:	8085883a 	add	r2,r16,r2
    5ab4:	10c00117 	ldw	r3,4(r2)
    5ab8:	81000317 	ldw	r4,12(r16)
    5abc:	81400217 	ldw	r5,8(r16)
    5ac0:	18c00054 	ori	r3,r3,1
    5ac4:	10c00115 	stw	r3,4(r2)
    5ac8:	29000315 	stw	r4,12(r5)
    5acc:	21400215 	stw	r5,8(r4)
    5ad0:	9009883a 	mov	r4,r18
    5ad4:	000d1b40 	call	d1b4 <__malloc_unlock>
    5ad8:	80800204 	addi	r2,r16,8
    5adc:	003f2506 	br	5774 <__alt_data_end+0xf8005774>
    5ae0:	12001704 	addi	r8,r2,92
    5ae4:	11c016c4 	addi	r7,r2,91
    5ae8:	4209883a 	add	r4,r8,r8
    5aec:	003e9606 	br	5548 <__alt_data_end+0xf8005548>
    5af0:	3804d1ba 	srli	r2,r7,6
    5af4:	11400e44 	addi	r5,r2,57
    5af8:	10c00e04 	addi	r3,r2,56
    5afc:	294b883a 	add	r5,r5,r5
    5b00:	003fbc06 	br	59f4 <__alt_data_end+0xf80059f4>
    5b04:	84ff5926 	beq	r16,r19,586c <__alt_data_end+0xf800586c>
    5b08:	00800074 	movhi	r2,1
    5b0c:	10bfe804 	addi	r2,r2,-96
    5b10:	14000217 	ldw	r16,8(r2)
    5b14:	00bfff04 	movi	r2,-4
    5b18:	80c00117 	ldw	r3,4(r16)
    5b1c:	1886703a 	and	r3,r3,r2
    5b20:	003f9106 	br	5968 <__alt_data_end+0xf8005968>
    5b24:	60800217 	ldw	r2,8(r12)
    5b28:	213fffc4 	addi	r4,r4,-1
    5b2c:	1300651e 	bne	r2,r12,5cc4 <_malloc_r+0x7f4>
    5b30:	208000cc 	andi	r2,r4,3
    5b34:	633ffe04 	addi	r12,r12,-8
    5b38:	103ffa1e 	bne	r2,zero,5b24 <__alt_data_end+0xf8005b24>
    5b3c:	98800117 	ldw	r2,4(r19)
    5b40:	0146303a 	nor	r3,zero,r5
    5b44:	1884703a 	and	r2,r3,r2
    5b48:	98800115 	stw	r2,4(r19)
    5b4c:	294b883a 	add	r5,r5,r5
    5b50:	117f2836 	bltu	r2,r5,57f4 <__alt_data_end+0xf80057f4>
    5b54:	283f2726 	beq	r5,zero,57f4 <__alt_data_end+0xf80057f4>
    5b58:	2886703a 	and	r3,r5,r2
    5b5c:	5809883a 	mov	r4,r11
    5b60:	183ec31e 	bne	r3,zero,5670 <__alt_data_end+0xf8005670>
    5b64:	294b883a 	add	r5,r5,r5
    5b68:	2886703a 	and	r3,r5,r2
    5b6c:	21000104 	addi	r4,r4,4
    5b70:	183ffc26 	beq	r3,zero,5b64 <__alt_data_end+0xf8005b64>
    5b74:	003ebe06 	br	5670 <__alt_data_end+0xf8005670>
    5b78:	00c05504 	movi	r3,340
    5b7c:	18801236 	bltu	r3,r2,5bc8 <_malloc_r+0x6f8>
    5b80:	8804d3fa 	srli	r2,r17,15
    5b84:	12001e04 	addi	r8,r2,120
    5b88:	11c01dc4 	addi	r7,r2,119
    5b8c:	4209883a 	add	r4,r8,r8
    5b90:	003e6d06 	br	5548 <__alt_data_end+0xf8005548>
    5b94:	00c40004 	movi	r3,4096
    5b98:	003f4606 	br	58b4 <__alt_data_end+0xf80058b4>
    5b9c:	00800044 	movi	r2,1
    5ba0:	a0800115 	stw	r2,4(r20)
    5ba4:	003f7406 	br	5978 <__alt_data_end+0xf8005978>
    5ba8:	1805d0ba 	srai	r2,r3,2
    5bac:	01c00044 	movi	r7,1
    5bb0:	30c00117 	ldw	r3,4(r6)
    5bb4:	388e983a 	sll	r7,r7,r2
    5bb8:	2805883a 	mov	r2,r5
    5bbc:	38c6b03a 	or	r3,r7,r3
    5bc0:	30c00115 	stw	r3,4(r6)
    5bc4:	003f9b06 	br	5a34 <__alt_data_end+0xf8005a34>
    5bc8:	00c15504 	movi	r3,1364
    5bcc:	18801a36 	bltu	r3,r2,5c38 <_malloc_r+0x768>
    5bd0:	8804d4ba 	srli	r2,r17,18
    5bd4:	12001f44 	addi	r8,r2,125
    5bd8:	11c01f04 	addi	r7,r2,124
    5bdc:	4209883a 	add	r4,r8,r8
    5be0:	003e5906 	br	5548 <__alt_data_end+0xf8005548>
    5be4:	ad400404 	addi	r21,r21,16
    5be8:	003f1706 	br	5848 <__alt_data_end+0xf8005848>
    5bec:	00c01504 	movi	r3,84
    5bf0:	18802336 	bltu	r3,r2,5c80 <_malloc_r+0x7b0>
    5bf4:	3804d33a 	srli	r2,r7,12
    5bf8:	11401bc4 	addi	r5,r2,111
    5bfc:	10c01b84 	addi	r3,r2,110
    5c00:	294b883a 	add	r5,r5,r5
    5c04:	003f7b06 	br	59f4 <__alt_data_end+0xf80059f4>
    5c08:	9c000217 	ldw	r16,8(r19)
    5c0c:	00bfff04 	movi	r2,-4
    5c10:	80c00117 	ldw	r3,4(r16)
    5c14:	1886703a 	and	r3,r3,r2
    5c18:	003f5306 	br	5968 <__alt_data_end+0xf8005968>
    5c1c:	3083ffcc 	andi	r2,r6,4095
    5c20:	103f181e 	bne	r2,zero,5884 <__alt_data_end+0xf8005884>
    5c24:	99000217 	ldw	r4,8(r19)
    5c28:	b545883a 	add	r2,r22,r21
    5c2c:	10800054 	ori	r2,r2,1
    5c30:	20800115 	stw	r2,4(r4)
    5c34:	003f3e06 	br	5930 <__alt_data_end+0xf8005930>
    5c38:	01003f84 	movi	r4,254
    5c3c:	02001fc4 	movi	r8,127
    5c40:	01c01f84 	movi	r7,126
    5c44:	003e4006 	br	5548 <__alt_data_end+0xf8005548>
    5c48:	00800074 	movhi	r2,1
    5c4c:	10859d04 	addi	r2,r2,5748
    5c50:	15000015 	stw	r20,0(r2)
    5c54:	003f1106 	br	589c <__alt_data_end+0xf800589c>
    5c58:	00800044 	movi	r2,1
    5c5c:	002b883a 	mov	r21,zero
    5c60:	003f1f06 	br	58e0 <__alt_data_end+0xf80058e0>
    5c64:	81400204 	addi	r5,r16,8
    5c68:	9009883a 	mov	r4,r18
    5c6c:	00048e40 	call	48e4 <_free_r>
    5c70:	00800074 	movhi	r2,1
    5c74:	108ca104 	addi	r2,r2,12932
    5c78:	10c00017 	ldw	r3,0(r2)
    5c7c:	003f2c06 	br	5930 <__alt_data_end+0xf8005930>
    5c80:	00c05504 	movi	r3,340
    5c84:	18800536 	bltu	r3,r2,5c9c <_malloc_r+0x7cc>
    5c88:	3804d3fa 	srli	r2,r7,15
    5c8c:	11401e04 	addi	r5,r2,120
    5c90:	10c01dc4 	addi	r3,r2,119
    5c94:	294b883a 	add	r5,r5,r5
    5c98:	003f5606 	br	59f4 <__alt_data_end+0xf80059f4>
    5c9c:	00c15504 	movi	r3,1364
    5ca0:	18800536 	bltu	r3,r2,5cb8 <_malloc_r+0x7e8>
    5ca4:	3804d4ba 	srli	r2,r7,18
    5ca8:	11401f44 	addi	r5,r2,125
    5cac:	10c01f04 	addi	r3,r2,124
    5cb0:	294b883a 	add	r5,r5,r5
    5cb4:	003f4f06 	br	59f4 <__alt_data_end+0xf80059f4>
    5cb8:	01403f84 	movi	r5,254
    5cbc:	00c01f84 	movi	r3,126
    5cc0:	003f4c06 	br	59f4 <__alt_data_end+0xf80059f4>
    5cc4:	98800117 	ldw	r2,4(r19)
    5cc8:	003fa006 	br	5b4c <__alt_data_end+0xf8005b4c>
    5ccc:	8808d0fa 	srli	r4,r17,3
    5cd0:	20800044 	addi	r2,r4,1
    5cd4:	1085883a 	add	r2,r2,r2
    5cd8:	003e9006 	br	571c <__alt_data_end+0xf800571c>

00005cdc <memchr>:
    5cdc:	208000cc 	andi	r2,r4,3
    5ce0:	280f883a 	mov	r7,r5
    5ce4:	10003426 	beq	r2,zero,5db8 <memchr+0xdc>
    5ce8:	30bfffc4 	addi	r2,r6,-1
    5cec:	30001a26 	beq	r6,zero,5d58 <memchr+0x7c>
    5cf0:	20c00003 	ldbu	r3,0(r4)
    5cf4:	29803fcc 	andi	r6,r5,255
    5cf8:	30c0051e 	bne	r6,r3,5d10 <memchr+0x34>
    5cfc:	00001806 	br	5d60 <memchr+0x84>
    5d00:	10001526 	beq	r2,zero,5d58 <memchr+0x7c>
    5d04:	20c00003 	ldbu	r3,0(r4)
    5d08:	10bfffc4 	addi	r2,r2,-1
    5d0c:	30c01426 	beq	r6,r3,5d60 <memchr+0x84>
    5d10:	21000044 	addi	r4,r4,1
    5d14:	20c000cc 	andi	r3,r4,3
    5d18:	183ff91e 	bne	r3,zero,5d00 <__alt_data_end+0xf8005d00>
    5d1c:	020000c4 	movi	r8,3
    5d20:	40801136 	bltu	r8,r2,5d68 <memchr+0x8c>
    5d24:	10000c26 	beq	r2,zero,5d58 <memchr+0x7c>
    5d28:	20c00003 	ldbu	r3,0(r4)
    5d2c:	29403fcc 	andi	r5,r5,255
    5d30:	28c00b26 	beq	r5,r3,5d60 <memchr+0x84>
    5d34:	20c00044 	addi	r3,r4,1
    5d38:	39803fcc 	andi	r6,r7,255
    5d3c:	2089883a 	add	r4,r4,r2
    5d40:	00000306 	br	5d50 <memchr+0x74>
    5d44:	18c00044 	addi	r3,r3,1
    5d48:	197fffc3 	ldbu	r5,-1(r3)
    5d4c:	31400526 	beq	r6,r5,5d64 <memchr+0x88>
    5d50:	1805883a 	mov	r2,r3
    5d54:	20fffb1e 	bne	r4,r3,5d44 <__alt_data_end+0xf8005d44>
    5d58:	0005883a 	mov	r2,zero
    5d5c:	f800283a 	ret
    5d60:	2005883a 	mov	r2,r4
    5d64:	f800283a 	ret
    5d68:	28c03fcc 	andi	r3,r5,255
    5d6c:	1812923a 	slli	r9,r3,8
    5d70:	02ffbff4 	movhi	r11,65279
    5d74:	02a02074 	movhi	r10,32897
    5d78:	48d2b03a 	or	r9,r9,r3
    5d7c:	4806943a 	slli	r3,r9,16
    5d80:	5affbfc4 	addi	r11,r11,-257
    5d84:	52a02004 	addi	r10,r10,-32640
    5d88:	48d2b03a 	or	r9,r9,r3
    5d8c:	20c00017 	ldw	r3,0(r4)
    5d90:	48c6f03a 	xor	r3,r9,r3
    5d94:	1acd883a 	add	r6,r3,r11
    5d98:	00c6303a 	nor	r3,zero,r3
    5d9c:	30c6703a 	and	r3,r6,r3
    5da0:	1a86703a 	and	r3,r3,r10
    5da4:	183fe01e 	bne	r3,zero,5d28 <__alt_data_end+0xf8005d28>
    5da8:	10bfff04 	addi	r2,r2,-4
    5dac:	21000104 	addi	r4,r4,4
    5db0:	40bff636 	bltu	r8,r2,5d8c <__alt_data_end+0xf8005d8c>
    5db4:	003fdb06 	br	5d24 <__alt_data_end+0xf8005d24>
    5db8:	3005883a 	mov	r2,r6
    5dbc:	003fd706 	br	5d1c <__alt_data_end+0xf8005d1c>

00005dc0 <memcpy>:
    5dc0:	defffd04 	addi	sp,sp,-12
    5dc4:	dfc00215 	stw	ra,8(sp)
    5dc8:	dc400115 	stw	r17,4(sp)
    5dcc:	dc000015 	stw	r16,0(sp)
    5dd0:	00c003c4 	movi	r3,15
    5dd4:	2005883a 	mov	r2,r4
    5dd8:	1980452e 	bgeu	r3,r6,5ef0 <memcpy+0x130>
    5ddc:	2906b03a 	or	r3,r5,r4
    5de0:	18c000cc 	andi	r3,r3,3
    5de4:	1800441e 	bne	r3,zero,5ef8 <memcpy+0x138>
    5de8:	347ffc04 	addi	r17,r6,-16
    5dec:	8822d13a 	srli	r17,r17,4
    5df0:	28c00104 	addi	r3,r5,4
    5df4:	23400104 	addi	r13,r4,4
    5df8:	8820913a 	slli	r16,r17,4
    5dfc:	2b000204 	addi	r12,r5,8
    5e00:	22c00204 	addi	r11,r4,8
    5e04:	84000504 	addi	r16,r16,20
    5e08:	2a800304 	addi	r10,r5,12
    5e0c:	22400304 	addi	r9,r4,12
    5e10:	2c21883a 	add	r16,r5,r16
    5e14:	2811883a 	mov	r8,r5
    5e18:	200f883a 	mov	r7,r4
    5e1c:	41000017 	ldw	r4,0(r8)
    5e20:	1fc00017 	ldw	ra,0(r3)
    5e24:	63c00017 	ldw	r15,0(r12)
    5e28:	39000015 	stw	r4,0(r7)
    5e2c:	53800017 	ldw	r14,0(r10)
    5e30:	6fc00015 	stw	ra,0(r13)
    5e34:	5bc00015 	stw	r15,0(r11)
    5e38:	4b800015 	stw	r14,0(r9)
    5e3c:	18c00404 	addi	r3,r3,16
    5e40:	39c00404 	addi	r7,r7,16
    5e44:	42000404 	addi	r8,r8,16
    5e48:	6b400404 	addi	r13,r13,16
    5e4c:	63000404 	addi	r12,r12,16
    5e50:	5ac00404 	addi	r11,r11,16
    5e54:	52800404 	addi	r10,r10,16
    5e58:	4a400404 	addi	r9,r9,16
    5e5c:	1c3fef1e 	bne	r3,r16,5e1c <__alt_data_end+0xf8005e1c>
    5e60:	89c00044 	addi	r7,r17,1
    5e64:	380e913a 	slli	r7,r7,4
    5e68:	310003cc 	andi	r4,r6,15
    5e6c:	02c000c4 	movi	r11,3
    5e70:	11c7883a 	add	r3,r2,r7
    5e74:	29cb883a 	add	r5,r5,r7
    5e78:	5900212e 	bgeu	r11,r4,5f00 <memcpy+0x140>
    5e7c:	1813883a 	mov	r9,r3
    5e80:	2811883a 	mov	r8,r5
    5e84:	200f883a 	mov	r7,r4
    5e88:	42800017 	ldw	r10,0(r8)
    5e8c:	4a400104 	addi	r9,r9,4
    5e90:	39ffff04 	addi	r7,r7,-4
    5e94:	4abfff15 	stw	r10,-4(r9)
    5e98:	42000104 	addi	r8,r8,4
    5e9c:	59fffa36 	bltu	r11,r7,5e88 <__alt_data_end+0xf8005e88>
    5ea0:	213fff04 	addi	r4,r4,-4
    5ea4:	2008d0ba 	srli	r4,r4,2
    5ea8:	318000cc 	andi	r6,r6,3
    5eac:	21000044 	addi	r4,r4,1
    5eb0:	2109883a 	add	r4,r4,r4
    5eb4:	2109883a 	add	r4,r4,r4
    5eb8:	1907883a 	add	r3,r3,r4
    5ebc:	290b883a 	add	r5,r5,r4
    5ec0:	30000626 	beq	r6,zero,5edc <memcpy+0x11c>
    5ec4:	198d883a 	add	r6,r3,r6
    5ec8:	29c00003 	ldbu	r7,0(r5)
    5ecc:	18c00044 	addi	r3,r3,1
    5ed0:	29400044 	addi	r5,r5,1
    5ed4:	19ffffc5 	stb	r7,-1(r3)
    5ed8:	19bffb1e 	bne	r3,r6,5ec8 <__alt_data_end+0xf8005ec8>
    5edc:	dfc00217 	ldw	ra,8(sp)
    5ee0:	dc400117 	ldw	r17,4(sp)
    5ee4:	dc000017 	ldw	r16,0(sp)
    5ee8:	dec00304 	addi	sp,sp,12
    5eec:	f800283a 	ret
    5ef0:	2007883a 	mov	r3,r4
    5ef4:	003ff206 	br	5ec0 <__alt_data_end+0xf8005ec0>
    5ef8:	2007883a 	mov	r3,r4
    5efc:	003ff106 	br	5ec4 <__alt_data_end+0xf8005ec4>
    5f00:	200d883a 	mov	r6,r4
    5f04:	003fee06 	br	5ec0 <__alt_data_end+0xf8005ec0>

00005f08 <memmove>:
    5f08:	2005883a 	mov	r2,r4
    5f0c:	29000b2e 	bgeu	r5,r4,5f3c <memmove+0x34>
    5f10:	298f883a 	add	r7,r5,r6
    5f14:	21c0092e 	bgeu	r4,r7,5f3c <memmove+0x34>
    5f18:	2187883a 	add	r3,r4,r6
    5f1c:	198bc83a 	sub	r5,r3,r6
    5f20:	30004826 	beq	r6,zero,6044 <memmove+0x13c>
    5f24:	39ffffc4 	addi	r7,r7,-1
    5f28:	39000003 	ldbu	r4,0(r7)
    5f2c:	18ffffc4 	addi	r3,r3,-1
    5f30:	19000005 	stb	r4,0(r3)
    5f34:	28fffb1e 	bne	r5,r3,5f24 <__alt_data_end+0xf8005f24>
    5f38:	f800283a 	ret
    5f3c:	00c003c4 	movi	r3,15
    5f40:	1980412e 	bgeu	r3,r6,6048 <memmove+0x140>
    5f44:	2886b03a 	or	r3,r5,r2
    5f48:	18c000cc 	andi	r3,r3,3
    5f4c:	1800401e 	bne	r3,zero,6050 <memmove+0x148>
    5f50:	33fffc04 	addi	r15,r6,-16
    5f54:	781ed13a 	srli	r15,r15,4
    5f58:	28c00104 	addi	r3,r5,4
    5f5c:	13400104 	addi	r13,r2,4
    5f60:	781c913a 	slli	r14,r15,4
    5f64:	2b000204 	addi	r12,r5,8
    5f68:	12c00204 	addi	r11,r2,8
    5f6c:	73800504 	addi	r14,r14,20
    5f70:	2a800304 	addi	r10,r5,12
    5f74:	12400304 	addi	r9,r2,12
    5f78:	2b9d883a 	add	r14,r5,r14
    5f7c:	2811883a 	mov	r8,r5
    5f80:	100f883a 	mov	r7,r2
    5f84:	41000017 	ldw	r4,0(r8)
    5f88:	39c00404 	addi	r7,r7,16
    5f8c:	18c00404 	addi	r3,r3,16
    5f90:	393ffc15 	stw	r4,-16(r7)
    5f94:	193ffc17 	ldw	r4,-16(r3)
    5f98:	6b400404 	addi	r13,r13,16
    5f9c:	5ac00404 	addi	r11,r11,16
    5fa0:	693ffc15 	stw	r4,-16(r13)
    5fa4:	61000017 	ldw	r4,0(r12)
    5fa8:	4a400404 	addi	r9,r9,16
    5fac:	42000404 	addi	r8,r8,16
    5fb0:	593ffc15 	stw	r4,-16(r11)
    5fb4:	51000017 	ldw	r4,0(r10)
    5fb8:	63000404 	addi	r12,r12,16
    5fbc:	52800404 	addi	r10,r10,16
    5fc0:	493ffc15 	stw	r4,-16(r9)
    5fc4:	1bbfef1e 	bne	r3,r14,5f84 <__alt_data_end+0xf8005f84>
    5fc8:	79000044 	addi	r4,r15,1
    5fcc:	2008913a 	slli	r4,r4,4
    5fd0:	328003cc 	andi	r10,r6,15
    5fd4:	02c000c4 	movi	r11,3
    5fd8:	1107883a 	add	r3,r2,r4
    5fdc:	290b883a 	add	r5,r5,r4
    5fe0:	5a801e2e 	bgeu	r11,r10,605c <memmove+0x154>
    5fe4:	1813883a 	mov	r9,r3
    5fe8:	2811883a 	mov	r8,r5
    5fec:	500f883a 	mov	r7,r10
    5ff0:	41000017 	ldw	r4,0(r8)
    5ff4:	4a400104 	addi	r9,r9,4
    5ff8:	39ffff04 	addi	r7,r7,-4
    5ffc:	493fff15 	stw	r4,-4(r9)
    6000:	42000104 	addi	r8,r8,4
    6004:	59fffa36 	bltu	r11,r7,5ff0 <__alt_data_end+0xf8005ff0>
    6008:	513fff04 	addi	r4,r10,-4
    600c:	2008d0ba 	srli	r4,r4,2
    6010:	318000cc 	andi	r6,r6,3
    6014:	21000044 	addi	r4,r4,1
    6018:	2109883a 	add	r4,r4,r4
    601c:	2109883a 	add	r4,r4,r4
    6020:	1907883a 	add	r3,r3,r4
    6024:	290b883a 	add	r5,r5,r4
    6028:	30000b26 	beq	r6,zero,6058 <memmove+0x150>
    602c:	198d883a 	add	r6,r3,r6
    6030:	29c00003 	ldbu	r7,0(r5)
    6034:	18c00044 	addi	r3,r3,1
    6038:	29400044 	addi	r5,r5,1
    603c:	19ffffc5 	stb	r7,-1(r3)
    6040:	19bffb1e 	bne	r3,r6,6030 <__alt_data_end+0xf8006030>
    6044:	f800283a 	ret
    6048:	1007883a 	mov	r3,r2
    604c:	003ff606 	br	6028 <__alt_data_end+0xf8006028>
    6050:	1007883a 	mov	r3,r2
    6054:	003ff506 	br	602c <__alt_data_end+0xf800602c>
    6058:	f800283a 	ret
    605c:	500d883a 	mov	r6,r10
    6060:	003ff106 	br	6028 <__alt_data_end+0xf8006028>

00006064 <memset>:
    6064:	20c000cc 	andi	r3,r4,3
    6068:	2005883a 	mov	r2,r4
    606c:	18004426 	beq	r3,zero,6180 <memset+0x11c>
    6070:	31ffffc4 	addi	r7,r6,-1
    6074:	30004026 	beq	r6,zero,6178 <memset+0x114>
    6078:	2813883a 	mov	r9,r5
    607c:	200d883a 	mov	r6,r4
    6080:	2007883a 	mov	r3,r4
    6084:	00000406 	br	6098 <memset+0x34>
    6088:	3a3fffc4 	addi	r8,r7,-1
    608c:	31800044 	addi	r6,r6,1
    6090:	38003926 	beq	r7,zero,6178 <memset+0x114>
    6094:	400f883a 	mov	r7,r8
    6098:	18c00044 	addi	r3,r3,1
    609c:	32400005 	stb	r9,0(r6)
    60a0:	1a0000cc 	andi	r8,r3,3
    60a4:	403ff81e 	bne	r8,zero,6088 <__alt_data_end+0xf8006088>
    60a8:	010000c4 	movi	r4,3
    60ac:	21c02d2e 	bgeu	r4,r7,6164 <memset+0x100>
    60b0:	29003fcc 	andi	r4,r5,255
    60b4:	200c923a 	slli	r6,r4,8
    60b8:	3108b03a 	or	r4,r6,r4
    60bc:	200c943a 	slli	r6,r4,16
    60c0:	218cb03a 	or	r6,r4,r6
    60c4:	010003c4 	movi	r4,15
    60c8:	21c0182e 	bgeu	r4,r7,612c <memset+0xc8>
    60cc:	3b3ffc04 	addi	r12,r7,-16
    60d0:	6018d13a 	srli	r12,r12,4
    60d4:	1a000104 	addi	r8,r3,4
    60d8:	1ac00204 	addi	r11,r3,8
    60dc:	6008913a 	slli	r4,r12,4
    60e0:	1a800304 	addi	r10,r3,12
    60e4:	1813883a 	mov	r9,r3
    60e8:	21000504 	addi	r4,r4,20
    60ec:	1909883a 	add	r4,r3,r4
    60f0:	49800015 	stw	r6,0(r9)
    60f4:	41800015 	stw	r6,0(r8)
    60f8:	59800015 	stw	r6,0(r11)
    60fc:	51800015 	stw	r6,0(r10)
    6100:	42000404 	addi	r8,r8,16
    6104:	4a400404 	addi	r9,r9,16
    6108:	5ac00404 	addi	r11,r11,16
    610c:	52800404 	addi	r10,r10,16
    6110:	413ff71e 	bne	r8,r4,60f0 <__alt_data_end+0xf80060f0>
    6114:	63000044 	addi	r12,r12,1
    6118:	6018913a 	slli	r12,r12,4
    611c:	39c003cc 	andi	r7,r7,15
    6120:	010000c4 	movi	r4,3
    6124:	1b07883a 	add	r3,r3,r12
    6128:	21c00e2e 	bgeu	r4,r7,6164 <memset+0x100>
    612c:	1813883a 	mov	r9,r3
    6130:	3811883a 	mov	r8,r7
    6134:	010000c4 	movi	r4,3
    6138:	49800015 	stw	r6,0(r9)
    613c:	423fff04 	addi	r8,r8,-4
    6140:	4a400104 	addi	r9,r9,4
    6144:	223ffc36 	bltu	r4,r8,6138 <__alt_data_end+0xf8006138>
    6148:	393fff04 	addi	r4,r7,-4
    614c:	2008d0ba 	srli	r4,r4,2
    6150:	39c000cc 	andi	r7,r7,3
    6154:	21000044 	addi	r4,r4,1
    6158:	2109883a 	add	r4,r4,r4
    615c:	2109883a 	add	r4,r4,r4
    6160:	1907883a 	add	r3,r3,r4
    6164:	38000526 	beq	r7,zero,617c <memset+0x118>
    6168:	19cf883a 	add	r7,r3,r7
    616c:	19400005 	stb	r5,0(r3)
    6170:	18c00044 	addi	r3,r3,1
    6174:	38fffd1e 	bne	r7,r3,616c <__alt_data_end+0xf800616c>
    6178:	f800283a 	ret
    617c:	f800283a 	ret
    6180:	2007883a 	mov	r3,r4
    6184:	300f883a 	mov	r7,r6
    6188:	003fc706 	br	60a8 <__alt_data_end+0xf80060a8>

0000618c <_Balloc>:
    618c:	20801317 	ldw	r2,76(r4)
    6190:	defffc04 	addi	sp,sp,-16
    6194:	dc400115 	stw	r17,4(sp)
    6198:	dc000015 	stw	r16,0(sp)
    619c:	dfc00315 	stw	ra,12(sp)
    61a0:	dc800215 	stw	r18,8(sp)
    61a4:	2023883a 	mov	r17,r4
    61a8:	2821883a 	mov	r16,r5
    61ac:	10000f26 	beq	r2,zero,61ec <_Balloc+0x60>
    61b0:	8407883a 	add	r3,r16,r16
    61b4:	18c7883a 	add	r3,r3,r3
    61b8:	10c7883a 	add	r3,r2,r3
    61bc:	18800017 	ldw	r2,0(r3)
    61c0:	10001126 	beq	r2,zero,6208 <_Balloc+0x7c>
    61c4:	11000017 	ldw	r4,0(r2)
    61c8:	19000015 	stw	r4,0(r3)
    61cc:	10000415 	stw	zero,16(r2)
    61d0:	10000315 	stw	zero,12(r2)
    61d4:	dfc00317 	ldw	ra,12(sp)
    61d8:	dc800217 	ldw	r18,8(sp)
    61dc:	dc400117 	ldw	r17,4(sp)
    61e0:	dc000017 	ldw	r16,0(sp)
    61e4:	dec00404 	addi	sp,sp,16
    61e8:	f800283a 	ret
    61ec:	01800844 	movi	r6,33
    61f0:	01400104 	movi	r5,4
    61f4:	00090c80 	call	90c8 <_calloc_r>
    61f8:	88801315 	stw	r2,76(r17)
    61fc:	103fec1e 	bne	r2,zero,61b0 <__alt_data_end+0xf80061b0>
    6200:	0005883a 	mov	r2,zero
    6204:	003ff306 	br	61d4 <__alt_data_end+0xf80061d4>
    6208:	01400044 	movi	r5,1
    620c:	2c24983a 	sll	r18,r5,r16
    6210:	8809883a 	mov	r4,r17
    6214:	91800144 	addi	r6,r18,5
    6218:	318d883a 	add	r6,r6,r6
    621c:	318d883a 	add	r6,r6,r6
    6220:	00090c80 	call	90c8 <_calloc_r>
    6224:	103ff626 	beq	r2,zero,6200 <__alt_data_end+0xf8006200>
    6228:	14000115 	stw	r16,4(r2)
    622c:	14800215 	stw	r18,8(r2)
    6230:	003fe606 	br	61cc <__alt_data_end+0xf80061cc>

00006234 <_Bfree>:
    6234:	28000826 	beq	r5,zero,6258 <_Bfree+0x24>
    6238:	28c00117 	ldw	r3,4(r5)
    623c:	20801317 	ldw	r2,76(r4)
    6240:	18c7883a 	add	r3,r3,r3
    6244:	18c7883a 	add	r3,r3,r3
    6248:	10c5883a 	add	r2,r2,r3
    624c:	10c00017 	ldw	r3,0(r2)
    6250:	28c00015 	stw	r3,0(r5)
    6254:	11400015 	stw	r5,0(r2)
    6258:	f800283a 	ret

0000625c <__multadd>:
    625c:	defffa04 	addi	sp,sp,-24
    6260:	dc800315 	stw	r18,12(sp)
    6264:	dc400215 	stw	r17,8(sp)
    6268:	dc000115 	stw	r16,4(sp)
    626c:	2823883a 	mov	r17,r5
    6270:	2c000417 	ldw	r16,16(r5)
    6274:	dfc00515 	stw	ra,20(sp)
    6278:	dcc00415 	stw	r19,16(sp)
    627c:	2025883a 	mov	r18,r4
    6280:	29400504 	addi	r5,r5,20
    6284:	0011883a 	mov	r8,zero
    6288:	28c00017 	ldw	r3,0(r5)
    628c:	29400104 	addi	r5,r5,4
    6290:	42000044 	addi	r8,r8,1
    6294:	18bfffcc 	andi	r2,r3,65535
    6298:	1185383a 	mul	r2,r2,r6
    629c:	1806d43a 	srli	r3,r3,16
    62a0:	11cf883a 	add	r7,r2,r7
    62a4:	3808d43a 	srli	r4,r7,16
    62a8:	1987383a 	mul	r3,r3,r6
    62ac:	38bfffcc 	andi	r2,r7,65535
    62b0:	1907883a 	add	r3,r3,r4
    62b4:	1808943a 	slli	r4,r3,16
    62b8:	180ed43a 	srli	r7,r3,16
    62bc:	2085883a 	add	r2,r4,r2
    62c0:	28bfff15 	stw	r2,-4(r5)
    62c4:	443ff016 	blt	r8,r16,6288 <__alt_data_end+0xf8006288>
    62c8:	38000926 	beq	r7,zero,62f0 <__multadd+0x94>
    62cc:	88800217 	ldw	r2,8(r17)
    62d0:	80800f0e 	bge	r16,r2,6310 <__multadd+0xb4>
    62d4:	80800144 	addi	r2,r16,5
    62d8:	1085883a 	add	r2,r2,r2
    62dc:	1085883a 	add	r2,r2,r2
    62e0:	8885883a 	add	r2,r17,r2
    62e4:	11c00015 	stw	r7,0(r2)
    62e8:	84000044 	addi	r16,r16,1
    62ec:	8c000415 	stw	r16,16(r17)
    62f0:	8805883a 	mov	r2,r17
    62f4:	dfc00517 	ldw	ra,20(sp)
    62f8:	dcc00417 	ldw	r19,16(sp)
    62fc:	dc800317 	ldw	r18,12(sp)
    6300:	dc400217 	ldw	r17,8(sp)
    6304:	dc000117 	ldw	r16,4(sp)
    6308:	dec00604 	addi	sp,sp,24
    630c:	f800283a 	ret
    6310:	89400117 	ldw	r5,4(r17)
    6314:	9009883a 	mov	r4,r18
    6318:	d9c00015 	stw	r7,0(sp)
    631c:	29400044 	addi	r5,r5,1
    6320:	000618c0 	call	618c <_Balloc>
    6324:	89800417 	ldw	r6,16(r17)
    6328:	89400304 	addi	r5,r17,12
    632c:	11000304 	addi	r4,r2,12
    6330:	31800084 	addi	r6,r6,2
    6334:	318d883a 	add	r6,r6,r6
    6338:	318d883a 	add	r6,r6,r6
    633c:	1027883a 	mov	r19,r2
    6340:	0005dc00 	call	5dc0 <memcpy>
    6344:	d9c00017 	ldw	r7,0(sp)
    6348:	88000a26 	beq	r17,zero,6374 <__multadd+0x118>
    634c:	88c00117 	ldw	r3,4(r17)
    6350:	90801317 	ldw	r2,76(r18)
    6354:	18c7883a 	add	r3,r3,r3
    6358:	18c7883a 	add	r3,r3,r3
    635c:	10c5883a 	add	r2,r2,r3
    6360:	10c00017 	ldw	r3,0(r2)
    6364:	88c00015 	stw	r3,0(r17)
    6368:	14400015 	stw	r17,0(r2)
    636c:	9823883a 	mov	r17,r19
    6370:	003fd806 	br	62d4 <__alt_data_end+0xf80062d4>
    6374:	9823883a 	mov	r17,r19
    6378:	003fd606 	br	62d4 <__alt_data_end+0xf80062d4>

0000637c <__s2b>:
    637c:	defff904 	addi	sp,sp,-28
    6380:	dc400115 	stw	r17,4(sp)
    6384:	dc000015 	stw	r16,0(sp)
    6388:	2023883a 	mov	r17,r4
    638c:	2821883a 	mov	r16,r5
    6390:	39000204 	addi	r4,r7,8
    6394:	01400244 	movi	r5,9
    6398:	dcc00315 	stw	r19,12(sp)
    639c:	dc800215 	stw	r18,8(sp)
    63a0:	dfc00615 	stw	ra,24(sp)
    63a4:	dd400515 	stw	r21,20(sp)
    63a8:	dd000415 	stw	r20,16(sp)
    63ac:	3825883a 	mov	r18,r7
    63b0:	3027883a 	mov	r19,r6
    63b4:	000a3f80 	call	a3f8 <__divsi3>
    63b8:	00c00044 	movi	r3,1
    63bc:	000b883a 	mov	r5,zero
    63c0:	1880030e 	bge	r3,r2,63d0 <__s2b+0x54>
    63c4:	18c7883a 	add	r3,r3,r3
    63c8:	29400044 	addi	r5,r5,1
    63cc:	18bffd16 	blt	r3,r2,63c4 <__alt_data_end+0xf80063c4>
    63d0:	8809883a 	mov	r4,r17
    63d4:	000618c0 	call	618c <_Balloc>
    63d8:	d8c00717 	ldw	r3,28(sp)
    63dc:	10c00515 	stw	r3,20(r2)
    63e0:	00c00044 	movi	r3,1
    63e4:	10c00415 	stw	r3,16(r2)
    63e8:	00c00244 	movi	r3,9
    63ec:	1cc0210e 	bge	r3,r19,6474 <__s2b+0xf8>
    63f0:	80eb883a 	add	r21,r16,r3
    63f4:	a829883a 	mov	r20,r21
    63f8:	84e1883a 	add	r16,r16,r19
    63fc:	a1c00007 	ldb	r7,0(r20)
    6400:	01800284 	movi	r6,10
    6404:	a5000044 	addi	r20,r20,1
    6408:	100b883a 	mov	r5,r2
    640c:	39fff404 	addi	r7,r7,-48
    6410:	8809883a 	mov	r4,r17
    6414:	000625c0 	call	625c <__multadd>
    6418:	a43ff81e 	bne	r20,r16,63fc <__alt_data_end+0xf80063fc>
    641c:	ace1883a 	add	r16,r21,r19
    6420:	843ffe04 	addi	r16,r16,-8
    6424:	9c800a0e 	bge	r19,r18,6450 <__s2b+0xd4>
    6428:	94e5c83a 	sub	r18,r18,r19
    642c:	84a5883a 	add	r18,r16,r18
    6430:	81c00007 	ldb	r7,0(r16)
    6434:	01800284 	movi	r6,10
    6438:	84000044 	addi	r16,r16,1
    643c:	100b883a 	mov	r5,r2
    6440:	39fff404 	addi	r7,r7,-48
    6444:	8809883a 	mov	r4,r17
    6448:	000625c0 	call	625c <__multadd>
    644c:	84bff81e 	bne	r16,r18,6430 <__alt_data_end+0xf8006430>
    6450:	dfc00617 	ldw	ra,24(sp)
    6454:	dd400517 	ldw	r21,20(sp)
    6458:	dd000417 	ldw	r20,16(sp)
    645c:	dcc00317 	ldw	r19,12(sp)
    6460:	dc800217 	ldw	r18,8(sp)
    6464:	dc400117 	ldw	r17,4(sp)
    6468:	dc000017 	ldw	r16,0(sp)
    646c:	dec00704 	addi	sp,sp,28
    6470:	f800283a 	ret
    6474:	84000284 	addi	r16,r16,10
    6478:	1827883a 	mov	r19,r3
    647c:	003fe906 	br	6424 <__alt_data_end+0xf8006424>

00006480 <__hi0bits>:
    6480:	20bfffec 	andhi	r2,r4,65535
    6484:	1000141e 	bne	r2,zero,64d8 <__hi0bits+0x58>
    6488:	2008943a 	slli	r4,r4,16
    648c:	00800404 	movi	r2,16
    6490:	20ffc02c 	andhi	r3,r4,65280
    6494:	1800021e 	bne	r3,zero,64a0 <__hi0bits+0x20>
    6498:	2008923a 	slli	r4,r4,8
    649c:	10800204 	addi	r2,r2,8
    64a0:	20fc002c 	andhi	r3,r4,61440
    64a4:	1800021e 	bne	r3,zero,64b0 <__hi0bits+0x30>
    64a8:	2008913a 	slli	r4,r4,4
    64ac:	10800104 	addi	r2,r2,4
    64b0:	20f0002c 	andhi	r3,r4,49152
    64b4:	1800031e 	bne	r3,zero,64c4 <__hi0bits+0x44>
    64b8:	2109883a 	add	r4,r4,r4
    64bc:	10800084 	addi	r2,r2,2
    64c0:	2109883a 	add	r4,r4,r4
    64c4:	20000316 	blt	r4,zero,64d4 <__hi0bits+0x54>
    64c8:	2110002c 	andhi	r4,r4,16384
    64cc:	2000041e 	bne	r4,zero,64e0 <__hi0bits+0x60>
    64d0:	00800804 	movi	r2,32
    64d4:	f800283a 	ret
    64d8:	0005883a 	mov	r2,zero
    64dc:	003fec06 	br	6490 <__alt_data_end+0xf8006490>
    64e0:	10800044 	addi	r2,r2,1
    64e4:	f800283a 	ret

000064e8 <__lo0bits>:
    64e8:	20c00017 	ldw	r3,0(r4)
    64ec:	188001cc 	andi	r2,r3,7
    64f0:	10000826 	beq	r2,zero,6514 <__lo0bits+0x2c>
    64f4:	1880004c 	andi	r2,r3,1
    64f8:	1000211e 	bne	r2,zero,6580 <__lo0bits+0x98>
    64fc:	1880008c 	andi	r2,r3,2
    6500:	1000211e 	bne	r2,zero,6588 <__lo0bits+0xa0>
    6504:	1806d0ba 	srli	r3,r3,2
    6508:	00800084 	movi	r2,2
    650c:	20c00015 	stw	r3,0(r4)
    6510:	f800283a 	ret
    6514:	18bfffcc 	andi	r2,r3,65535
    6518:	10001326 	beq	r2,zero,6568 <__lo0bits+0x80>
    651c:	0005883a 	mov	r2,zero
    6520:	19403fcc 	andi	r5,r3,255
    6524:	2800021e 	bne	r5,zero,6530 <__lo0bits+0x48>
    6528:	1806d23a 	srli	r3,r3,8
    652c:	10800204 	addi	r2,r2,8
    6530:	194003cc 	andi	r5,r3,15
    6534:	2800021e 	bne	r5,zero,6540 <__lo0bits+0x58>
    6538:	1806d13a 	srli	r3,r3,4
    653c:	10800104 	addi	r2,r2,4
    6540:	194000cc 	andi	r5,r3,3
    6544:	2800021e 	bne	r5,zero,6550 <__lo0bits+0x68>
    6548:	1806d0ba 	srli	r3,r3,2
    654c:	10800084 	addi	r2,r2,2
    6550:	1940004c 	andi	r5,r3,1
    6554:	2800081e 	bne	r5,zero,6578 <__lo0bits+0x90>
    6558:	1806d07a 	srli	r3,r3,1
    655c:	1800051e 	bne	r3,zero,6574 <__lo0bits+0x8c>
    6560:	00800804 	movi	r2,32
    6564:	f800283a 	ret
    6568:	1806d43a 	srli	r3,r3,16
    656c:	00800404 	movi	r2,16
    6570:	003feb06 	br	6520 <__alt_data_end+0xf8006520>
    6574:	10800044 	addi	r2,r2,1
    6578:	20c00015 	stw	r3,0(r4)
    657c:	f800283a 	ret
    6580:	0005883a 	mov	r2,zero
    6584:	f800283a 	ret
    6588:	1806d07a 	srli	r3,r3,1
    658c:	00800044 	movi	r2,1
    6590:	20c00015 	stw	r3,0(r4)
    6594:	f800283a 	ret

00006598 <__i2b>:
    6598:	defffd04 	addi	sp,sp,-12
    659c:	dc000015 	stw	r16,0(sp)
    65a0:	04000044 	movi	r16,1
    65a4:	dc400115 	stw	r17,4(sp)
    65a8:	2823883a 	mov	r17,r5
    65ac:	800b883a 	mov	r5,r16
    65b0:	dfc00215 	stw	ra,8(sp)
    65b4:	000618c0 	call	618c <_Balloc>
    65b8:	14400515 	stw	r17,20(r2)
    65bc:	14000415 	stw	r16,16(r2)
    65c0:	dfc00217 	ldw	ra,8(sp)
    65c4:	dc400117 	ldw	r17,4(sp)
    65c8:	dc000017 	ldw	r16,0(sp)
    65cc:	dec00304 	addi	sp,sp,12
    65d0:	f800283a 	ret

000065d4 <__multiply>:
    65d4:	defffa04 	addi	sp,sp,-24
    65d8:	dcc00315 	stw	r19,12(sp)
    65dc:	dc800215 	stw	r18,8(sp)
    65e0:	34c00417 	ldw	r19,16(r6)
    65e4:	2c800417 	ldw	r18,16(r5)
    65e8:	dd000415 	stw	r20,16(sp)
    65ec:	dc400115 	stw	r17,4(sp)
    65f0:	dfc00515 	stw	ra,20(sp)
    65f4:	dc000015 	stw	r16,0(sp)
    65f8:	2829883a 	mov	r20,r5
    65fc:	3023883a 	mov	r17,r6
    6600:	94c0050e 	bge	r18,r19,6618 <__multiply+0x44>
    6604:	9007883a 	mov	r3,r18
    6608:	3029883a 	mov	r20,r6
    660c:	9825883a 	mov	r18,r19
    6610:	2823883a 	mov	r17,r5
    6614:	1827883a 	mov	r19,r3
    6618:	a0800217 	ldw	r2,8(r20)
    661c:	94e1883a 	add	r16,r18,r19
    6620:	a1400117 	ldw	r5,4(r20)
    6624:	1400010e 	bge	r2,r16,662c <__multiply+0x58>
    6628:	29400044 	addi	r5,r5,1
    662c:	000618c0 	call	618c <_Balloc>
    6630:	8415883a 	add	r10,r16,r16
    6634:	12c00504 	addi	r11,r2,20
    6638:	5295883a 	add	r10,r10,r10
    663c:	5a95883a 	add	r10,r11,r10
    6640:	5807883a 	mov	r3,r11
    6644:	5a80032e 	bgeu	r11,r10,6654 <__multiply+0x80>
    6648:	18000015 	stw	zero,0(r3)
    664c:	18c00104 	addi	r3,r3,4
    6650:	1abffd36 	bltu	r3,r10,6648 <__alt_data_end+0xf8006648>
    6654:	9ce7883a 	add	r19,r19,r19
    6658:	94a5883a 	add	r18,r18,r18
    665c:	89800504 	addi	r6,r17,20
    6660:	9ce7883a 	add	r19,r19,r19
    6664:	a3400504 	addi	r13,r20,20
    6668:	94a5883a 	add	r18,r18,r18
    666c:	34d9883a 	add	r12,r6,r19
    6670:	6c93883a 	add	r9,r13,r18
    6674:	3300422e 	bgeu	r6,r12,6780 <__multiply+0x1ac>
    6678:	37c00017 	ldw	ra,0(r6)
    667c:	fbffffcc 	andi	r15,ra,65535
    6680:	78001b26 	beq	r15,zero,66f0 <__multiply+0x11c>
    6684:	5811883a 	mov	r8,r11
    6688:	681d883a 	mov	r14,r13
    668c:	000f883a 	mov	r7,zero
    6690:	71000017 	ldw	r4,0(r14)
    6694:	40c00017 	ldw	r3,0(r8)
    6698:	73800104 	addi	r14,r14,4
    669c:	217fffcc 	andi	r5,r4,65535
    66a0:	2bcb383a 	mul	r5,r5,r15
    66a4:	2008d43a 	srli	r4,r4,16
    66a8:	1c7fffcc 	andi	r17,r3,65535
    66ac:	2c4b883a 	add	r5,r5,r17
    66b0:	29cb883a 	add	r5,r5,r7
    66b4:	23c9383a 	mul	r4,r4,r15
    66b8:	1806d43a 	srli	r3,r3,16
    66bc:	280ed43a 	srli	r7,r5,16
    66c0:	297fffcc 	andi	r5,r5,65535
    66c4:	20c7883a 	add	r3,r4,r3
    66c8:	19c7883a 	add	r3,r3,r7
    66cc:	1808943a 	slli	r4,r3,16
    66d0:	4023883a 	mov	r17,r8
    66d4:	180ed43a 	srli	r7,r3,16
    66d8:	214ab03a 	or	r5,r4,r5
    66dc:	41400015 	stw	r5,0(r8)
    66e0:	42000104 	addi	r8,r8,4
    66e4:	727fea36 	bltu	r14,r9,6690 <__alt_data_end+0xf8006690>
    66e8:	89c00115 	stw	r7,4(r17)
    66ec:	37c00017 	ldw	ra,0(r6)
    66f0:	f83ed43a 	srli	ra,ra,16
    66f4:	f8001f26 	beq	ra,zero,6774 <__multiply+0x1a0>
    66f8:	58c00017 	ldw	r3,0(r11)
    66fc:	681d883a 	mov	r14,r13
    6700:	581f883a 	mov	r15,r11
    6704:	1811883a 	mov	r8,r3
    6708:	5825883a 	mov	r18,r11
    670c:	000f883a 	mov	r7,zero
    6710:	00000106 	br	6718 <__multiply+0x144>
    6714:	8825883a 	mov	r18,r17
    6718:	7140000b 	ldhu	r5,0(r14)
    671c:	4010d43a 	srli	r8,r8,16
    6720:	193fffcc 	andi	r4,r3,65535
    6724:	2fcb383a 	mul	r5,r5,ra
    6728:	7bc00104 	addi	r15,r15,4
    672c:	73800104 	addi	r14,r14,4
    6730:	2a0b883a 	add	r5,r5,r8
    6734:	29cb883a 	add	r5,r5,r7
    6738:	2806943a 	slli	r3,r5,16
    673c:	94400104 	addi	r17,r18,4
    6740:	280ad43a 	srli	r5,r5,16
    6744:	1908b03a 	or	r4,r3,r4
    6748:	793fff15 	stw	r4,-4(r15)
    674c:	70ffff17 	ldw	r3,-4(r14)
    6750:	8a000017 	ldw	r8,0(r17)
    6754:	1806d43a 	srli	r3,r3,16
    6758:	413fffcc 	andi	r4,r8,65535
    675c:	1fc7383a 	mul	r3,r3,ra
    6760:	1907883a 	add	r3,r3,r4
    6764:	1947883a 	add	r3,r3,r5
    6768:	180ed43a 	srli	r7,r3,16
    676c:	727fe936 	bltu	r14,r9,6714 <__alt_data_end+0xf8006714>
    6770:	90c00115 	stw	r3,4(r18)
    6774:	31800104 	addi	r6,r6,4
    6778:	5ac00104 	addi	r11,r11,4
    677c:	333fbe36 	bltu	r6,r12,6678 <__alt_data_end+0xf8006678>
    6780:	0400090e 	bge	zero,r16,67a8 <__multiply+0x1d4>
    6784:	50ffff17 	ldw	r3,-4(r10)
    6788:	52bfff04 	addi	r10,r10,-4
    678c:	18000326 	beq	r3,zero,679c <__multiply+0x1c8>
    6790:	00000506 	br	67a8 <__multiply+0x1d4>
    6794:	50c00017 	ldw	r3,0(r10)
    6798:	1800031e 	bne	r3,zero,67a8 <__multiply+0x1d4>
    679c:	843fffc4 	addi	r16,r16,-1
    67a0:	52bfff04 	addi	r10,r10,-4
    67a4:	803ffb1e 	bne	r16,zero,6794 <__alt_data_end+0xf8006794>
    67a8:	14000415 	stw	r16,16(r2)
    67ac:	dfc00517 	ldw	ra,20(sp)
    67b0:	dd000417 	ldw	r20,16(sp)
    67b4:	dcc00317 	ldw	r19,12(sp)
    67b8:	dc800217 	ldw	r18,8(sp)
    67bc:	dc400117 	ldw	r17,4(sp)
    67c0:	dc000017 	ldw	r16,0(sp)
    67c4:	dec00604 	addi	sp,sp,24
    67c8:	f800283a 	ret

000067cc <__pow5mult>:
    67cc:	defffa04 	addi	sp,sp,-24
    67d0:	dcc00315 	stw	r19,12(sp)
    67d4:	dc000015 	stw	r16,0(sp)
    67d8:	dfc00515 	stw	ra,20(sp)
    67dc:	dd000415 	stw	r20,16(sp)
    67e0:	dc800215 	stw	r18,8(sp)
    67e4:	dc400115 	stw	r17,4(sp)
    67e8:	308000cc 	andi	r2,r6,3
    67ec:	3021883a 	mov	r16,r6
    67f0:	2027883a 	mov	r19,r4
    67f4:	10002f1e 	bne	r2,zero,68b4 <__pow5mult+0xe8>
    67f8:	2825883a 	mov	r18,r5
    67fc:	8021d0ba 	srai	r16,r16,2
    6800:	80001a26 	beq	r16,zero,686c <__pow5mult+0xa0>
    6804:	9c401217 	ldw	r17,72(r19)
    6808:	8800061e 	bne	r17,zero,6824 <__pow5mult+0x58>
    680c:	00003406 	br	68e0 <__pow5mult+0x114>
    6810:	8021d07a 	srai	r16,r16,1
    6814:	80001526 	beq	r16,zero,686c <__pow5mult+0xa0>
    6818:	88800017 	ldw	r2,0(r17)
    681c:	10001c26 	beq	r2,zero,6890 <__pow5mult+0xc4>
    6820:	1023883a 	mov	r17,r2
    6824:	8080004c 	andi	r2,r16,1
    6828:	103ff926 	beq	r2,zero,6810 <__alt_data_end+0xf8006810>
    682c:	880d883a 	mov	r6,r17
    6830:	900b883a 	mov	r5,r18
    6834:	9809883a 	mov	r4,r19
    6838:	00065d40 	call	65d4 <__multiply>
    683c:	90001b26 	beq	r18,zero,68ac <__pow5mult+0xe0>
    6840:	91000117 	ldw	r4,4(r18)
    6844:	98c01317 	ldw	r3,76(r19)
    6848:	8021d07a 	srai	r16,r16,1
    684c:	2109883a 	add	r4,r4,r4
    6850:	2109883a 	add	r4,r4,r4
    6854:	1907883a 	add	r3,r3,r4
    6858:	19000017 	ldw	r4,0(r3)
    685c:	91000015 	stw	r4,0(r18)
    6860:	1c800015 	stw	r18,0(r3)
    6864:	1025883a 	mov	r18,r2
    6868:	803feb1e 	bne	r16,zero,6818 <__alt_data_end+0xf8006818>
    686c:	9005883a 	mov	r2,r18
    6870:	dfc00517 	ldw	ra,20(sp)
    6874:	dd000417 	ldw	r20,16(sp)
    6878:	dcc00317 	ldw	r19,12(sp)
    687c:	dc800217 	ldw	r18,8(sp)
    6880:	dc400117 	ldw	r17,4(sp)
    6884:	dc000017 	ldw	r16,0(sp)
    6888:	dec00604 	addi	sp,sp,24
    688c:	f800283a 	ret
    6890:	880d883a 	mov	r6,r17
    6894:	880b883a 	mov	r5,r17
    6898:	9809883a 	mov	r4,r19
    689c:	00065d40 	call	65d4 <__multiply>
    68a0:	88800015 	stw	r2,0(r17)
    68a4:	10000015 	stw	zero,0(r2)
    68a8:	003fdd06 	br	6820 <__alt_data_end+0xf8006820>
    68ac:	1025883a 	mov	r18,r2
    68b0:	003fd706 	br	6810 <__alt_data_end+0xf8006810>
    68b4:	10bfffc4 	addi	r2,r2,-1
    68b8:	1085883a 	add	r2,r2,r2
    68bc:	00c00074 	movhi	r3,1
    68c0:	18fe1104 	addi	r3,r3,-1980
    68c4:	1085883a 	add	r2,r2,r2
    68c8:	1885883a 	add	r2,r3,r2
    68cc:	11800017 	ldw	r6,0(r2)
    68d0:	000f883a 	mov	r7,zero
    68d4:	000625c0 	call	625c <__multadd>
    68d8:	1025883a 	mov	r18,r2
    68dc:	003fc706 	br	67fc <__alt_data_end+0xf80067fc>
    68e0:	05000044 	movi	r20,1
    68e4:	a00b883a 	mov	r5,r20
    68e8:	9809883a 	mov	r4,r19
    68ec:	000618c0 	call	618c <_Balloc>
    68f0:	1023883a 	mov	r17,r2
    68f4:	00809c44 	movi	r2,625
    68f8:	88800515 	stw	r2,20(r17)
    68fc:	8d000415 	stw	r20,16(r17)
    6900:	9c401215 	stw	r17,72(r19)
    6904:	88000015 	stw	zero,0(r17)
    6908:	003fc606 	br	6824 <__alt_data_end+0xf8006824>

0000690c <__lshift>:
    690c:	defff904 	addi	sp,sp,-28
    6910:	dd400515 	stw	r21,20(sp)
    6914:	dcc00315 	stw	r19,12(sp)
    6918:	302bd17a 	srai	r21,r6,5
    691c:	2cc00417 	ldw	r19,16(r5)
    6920:	28800217 	ldw	r2,8(r5)
    6924:	dd000415 	stw	r20,16(sp)
    6928:	ace7883a 	add	r19,r21,r19
    692c:	dc800215 	stw	r18,8(sp)
    6930:	dc400115 	stw	r17,4(sp)
    6934:	dc000015 	stw	r16,0(sp)
    6938:	dfc00615 	stw	ra,24(sp)
    693c:	9c000044 	addi	r16,r19,1
    6940:	2823883a 	mov	r17,r5
    6944:	3029883a 	mov	r20,r6
    6948:	2025883a 	mov	r18,r4
    694c:	29400117 	ldw	r5,4(r5)
    6950:	1400030e 	bge	r2,r16,6960 <__lshift+0x54>
    6954:	1085883a 	add	r2,r2,r2
    6958:	29400044 	addi	r5,r5,1
    695c:	143ffd16 	blt	r2,r16,6954 <__alt_data_end+0xf8006954>
    6960:	9009883a 	mov	r4,r18
    6964:	000618c0 	call	618c <_Balloc>
    6968:	10c00504 	addi	r3,r2,20
    696c:	0540070e 	bge	zero,r21,698c <__lshift+0x80>
    6970:	ad6b883a 	add	r21,r21,r21
    6974:	ad6b883a 	add	r21,r21,r21
    6978:	1809883a 	mov	r4,r3
    697c:	1d47883a 	add	r3,r3,r21
    6980:	20000015 	stw	zero,0(r4)
    6984:	21000104 	addi	r4,r4,4
    6988:	193ffd1e 	bne	r3,r4,6980 <__alt_data_end+0xf8006980>
    698c:	8a000417 	ldw	r8,16(r17)
    6990:	89000504 	addi	r4,r17,20
    6994:	a18007cc 	andi	r6,r20,31
    6998:	4211883a 	add	r8,r8,r8
    699c:	4211883a 	add	r8,r8,r8
    69a0:	2211883a 	add	r8,r4,r8
    69a4:	30002326 	beq	r6,zero,6a34 <__lshift+0x128>
    69a8:	02400804 	movi	r9,32
    69ac:	4993c83a 	sub	r9,r9,r6
    69b0:	000b883a 	mov	r5,zero
    69b4:	21c00017 	ldw	r7,0(r4)
    69b8:	1815883a 	mov	r10,r3
    69bc:	18c00104 	addi	r3,r3,4
    69c0:	398e983a 	sll	r7,r7,r6
    69c4:	21000104 	addi	r4,r4,4
    69c8:	394ab03a 	or	r5,r7,r5
    69cc:	197fff15 	stw	r5,-4(r3)
    69d0:	217fff17 	ldw	r5,-4(r4)
    69d4:	2a4ad83a 	srl	r5,r5,r9
    69d8:	223ff636 	bltu	r4,r8,69b4 <__alt_data_end+0xf80069b4>
    69dc:	51400115 	stw	r5,4(r10)
    69e0:	28001a1e 	bne	r5,zero,6a4c <__lshift+0x140>
    69e4:	843fffc4 	addi	r16,r16,-1
    69e8:	14000415 	stw	r16,16(r2)
    69ec:	88000826 	beq	r17,zero,6a10 <__lshift+0x104>
    69f0:	89000117 	ldw	r4,4(r17)
    69f4:	90c01317 	ldw	r3,76(r18)
    69f8:	2109883a 	add	r4,r4,r4
    69fc:	2109883a 	add	r4,r4,r4
    6a00:	1907883a 	add	r3,r3,r4
    6a04:	19000017 	ldw	r4,0(r3)
    6a08:	89000015 	stw	r4,0(r17)
    6a0c:	1c400015 	stw	r17,0(r3)
    6a10:	dfc00617 	ldw	ra,24(sp)
    6a14:	dd400517 	ldw	r21,20(sp)
    6a18:	dd000417 	ldw	r20,16(sp)
    6a1c:	dcc00317 	ldw	r19,12(sp)
    6a20:	dc800217 	ldw	r18,8(sp)
    6a24:	dc400117 	ldw	r17,4(sp)
    6a28:	dc000017 	ldw	r16,0(sp)
    6a2c:	dec00704 	addi	sp,sp,28
    6a30:	f800283a 	ret
    6a34:	21400017 	ldw	r5,0(r4)
    6a38:	18c00104 	addi	r3,r3,4
    6a3c:	21000104 	addi	r4,r4,4
    6a40:	197fff15 	stw	r5,-4(r3)
    6a44:	223ffb36 	bltu	r4,r8,6a34 <__alt_data_end+0xf8006a34>
    6a48:	003fe606 	br	69e4 <__alt_data_end+0xf80069e4>
    6a4c:	9c000084 	addi	r16,r19,2
    6a50:	003fe406 	br	69e4 <__alt_data_end+0xf80069e4>

00006a54 <__mcmp>:
    6a54:	20800417 	ldw	r2,16(r4)
    6a58:	28c00417 	ldw	r3,16(r5)
    6a5c:	10c5c83a 	sub	r2,r2,r3
    6a60:	1000111e 	bne	r2,zero,6aa8 <__mcmp+0x54>
    6a64:	18c7883a 	add	r3,r3,r3
    6a68:	18c7883a 	add	r3,r3,r3
    6a6c:	21000504 	addi	r4,r4,20
    6a70:	29400504 	addi	r5,r5,20
    6a74:	20c5883a 	add	r2,r4,r3
    6a78:	28cb883a 	add	r5,r5,r3
    6a7c:	00000106 	br	6a84 <__mcmp+0x30>
    6a80:	20800a2e 	bgeu	r4,r2,6aac <__mcmp+0x58>
    6a84:	10bfff04 	addi	r2,r2,-4
    6a88:	297fff04 	addi	r5,r5,-4
    6a8c:	11800017 	ldw	r6,0(r2)
    6a90:	28c00017 	ldw	r3,0(r5)
    6a94:	30fffa26 	beq	r6,r3,6a80 <__alt_data_end+0xf8006a80>
    6a98:	30c00236 	bltu	r6,r3,6aa4 <__mcmp+0x50>
    6a9c:	00800044 	movi	r2,1
    6aa0:	f800283a 	ret
    6aa4:	00bfffc4 	movi	r2,-1
    6aa8:	f800283a 	ret
    6aac:	0005883a 	mov	r2,zero
    6ab0:	f800283a 	ret

00006ab4 <__mdiff>:
    6ab4:	28c00417 	ldw	r3,16(r5)
    6ab8:	30800417 	ldw	r2,16(r6)
    6abc:	defffa04 	addi	sp,sp,-24
    6ac0:	dcc00315 	stw	r19,12(sp)
    6ac4:	dc800215 	stw	r18,8(sp)
    6ac8:	dfc00515 	stw	ra,20(sp)
    6acc:	dd000415 	stw	r20,16(sp)
    6ad0:	dc400115 	stw	r17,4(sp)
    6ad4:	dc000015 	stw	r16,0(sp)
    6ad8:	1887c83a 	sub	r3,r3,r2
    6adc:	2825883a 	mov	r18,r5
    6ae0:	3027883a 	mov	r19,r6
    6ae4:	1800141e 	bne	r3,zero,6b38 <__mdiff+0x84>
    6ae8:	1085883a 	add	r2,r2,r2
    6aec:	1085883a 	add	r2,r2,r2
    6af0:	2a000504 	addi	r8,r5,20
    6af4:	34000504 	addi	r16,r6,20
    6af8:	4087883a 	add	r3,r8,r2
    6afc:	8085883a 	add	r2,r16,r2
    6b00:	00000106 	br	6b08 <__mdiff+0x54>
    6b04:	40c0592e 	bgeu	r8,r3,6c6c <__mdiff+0x1b8>
    6b08:	18ffff04 	addi	r3,r3,-4
    6b0c:	10bfff04 	addi	r2,r2,-4
    6b10:	19c00017 	ldw	r7,0(r3)
    6b14:	11400017 	ldw	r5,0(r2)
    6b18:	397ffa26 	beq	r7,r5,6b04 <__alt_data_end+0xf8006b04>
    6b1c:	3940592e 	bgeu	r7,r5,6c84 <__mdiff+0x1d0>
    6b20:	9005883a 	mov	r2,r18
    6b24:	4023883a 	mov	r17,r8
    6b28:	9825883a 	mov	r18,r19
    6b2c:	05000044 	movi	r20,1
    6b30:	1027883a 	mov	r19,r2
    6b34:	00000406 	br	6b48 <__mdiff+0x94>
    6b38:	18005616 	blt	r3,zero,6c94 <__mdiff+0x1e0>
    6b3c:	34400504 	addi	r17,r6,20
    6b40:	2c000504 	addi	r16,r5,20
    6b44:	0029883a 	mov	r20,zero
    6b48:	91400117 	ldw	r5,4(r18)
    6b4c:	000618c0 	call	618c <_Balloc>
    6b50:	92400417 	ldw	r9,16(r18)
    6b54:	9b000417 	ldw	r12,16(r19)
    6b58:	12c00504 	addi	r11,r2,20
    6b5c:	4a51883a 	add	r8,r9,r9
    6b60:	6319883a 	add	r12,r12,r12
    6b64:	4211883a 	add	r8,r8,r8
    6b68:	6319883a 	add	r12,r12,r12
    6b6c:	15000315 	stw	r20,12(r2)
    6b70:	8211883a 	add	r8,r16,r8
    6b74:	8b19883a 	add	r12,r17,r12
    6b78:	0007883a 	mov	r3,zero
    6b7c:	81400017 	ldw	r5,0(r16)
    6b80:	89c00017 	ldw	r7,0(r17)
    6b84:	59800104 	addi	r6,r11,4
    6b88:	293fffcc 	andi	r4,r5,65535
    6b8c:	20c7883a 	add	r3,r4,r3
    6b90:	393fffcc 	andi	r4,r7,65535
    6b94:	1909c83a 	sub	r4,r3,r4
    6b98:	280ad43a 	srli	r5,r5,16
    6b9c:	380ed43a 	srli	r7,r7,16
    6ba0:	2007d43a 	srai	r3,r4,16
    6ba4:	213fffcc 	andi	r4,r4,65535
    6ba8:	29cbc83a 	sub	r5,r5,r7
    6bac:	28c7883a 	add	r3,r5,r3
    6bb0:	180a943a 	slli	r5,r3,16
    6bb4:	8c400104 	addi	r17,r17,4
    6bb8:	84000104 	addi	r16,r16,4
    6bbc:	2908b03a 	or	r4,r5,r4
    6bc0:	59000015 	stw	r4,0(r11)
    6bc4:	1807d43a 	srai	r3,r3,16
    6bc8:	3015883a 	mov	r10,r6
    6bcc:	3017883a 	mov	r11,r6
    6bd0:	8b3fea36 	bltu	r17,r12,6b7c <__alt_data_end+0xf8006b7c>
    6bd4:	8200162e 	bgeu	r16,r8,6c30 <__mdiff+0x17c>
    6bd8:	8017883a 	mov	r11,r16
    6bdc:	59400017 	ldw	r5,0(r11)
    6be0:	31800104 	addi	r6,r6,4
    6be4:	5ac00104 	addi	r11,r11,4
    6be8:	293fffcc 	andi	r4,r5,65535
    6bec:	20c7883a 	add	r3,r4,r3
    6bf0:	280ed43a 	srli	r7,r5,16
    6bf4:	180bd43a 	srai	r5,r3,16
    6bf8:	193fffcc 	andi	r4,r3,65535
    6bfc:	3947883a 	add	r3,r7,r5
    6c00:	180a943a 	slli	r5,r3,16
    6c04:	1807d43a 	srai	r3,r3,16
    6c08:	2908b03a 	or	r4,r5,r4
    6c0c:	313fff15 	stw	r4,-4(r6)
    6c10:	5a3ff236 	bltu	r11,r8,6bdc <__alt_data_end+0xf8006bdc>
    6c14:	0406303a 	nor	r3,zero,r16
    6c18:	1a07883a 	add	r3,r3,r8
    6c1c:	1806d0ba 	srli	r3,r3,2
    6c20:	18c00044 	addi	r3,r3,1
    6c24:	18c7883a 	add	r3,r3,r3
    6c28:	18c7883a 	add	r3,r3,r3
    6c2c:	50d5883a 	add	r10,r10,r3
    6c30:	50ffff04 	addi	r3,r10,-4
    6c34:	2000041e 	bne	r4,zero,6c48 <__mdiff+0x194>
    6c38:	18ffff04 	addi	r3,r3,-4
    6c3c:	19000017 	ldw	r4,0(r3)
    6c40:	4a7fffc4 	addi	r9,r9,-1
    6c44:	203ffc26 	beq	r4,zero,6c38 <__alt_data_end+0xf8006c38>
    6c48:	12400415 	stw	r9,16(r2)
    6c4c:	dfc00517 	ldw	ra,20(sp)
    6c50:	dd000417 	ldw	r20,16(sp)
    6c54:	dcc00317 	ldw	r19,12(sp)
    6c58:	dc800217 	ldw	r18,8(sp)
    6c5c:	dc400117 	ldw	r17,4(sp)
    6c60:	dc000017 	ldw	r16,0(sp)
    6c64:	dec00604 	addi	sp,sp,24
    6c68:	f800283a 	ret
    6c6c:	000b883a 	mov	r5,zero
    6c70:	000618c0 	call	618c <_Balloc>
    6c74:	00c00044 	movi	r3,1
    6c78:	10c00415 	stw	r3,16(r2)
    6c7c:	10000515 	stw	zero,20(r2)
    6c80:	003ff206 	br	6c4c <__alt_data_end+0xf8006c4c>
    6c84:	8023883a 	mov	r17,r16
    6c88:	0029883a 	mov	r20,zero
    6c8c:	4021883a 	mov	r16,r8
    6c90:	003fad06 	br	6b48 <__alt_data_end+0xf8006b48>
    6c94:	9005883a 	mov	r2,r18
    6c98:	94400504 	addi	r17,r18,20
    6c9c:	9c000504 	addi	r16,r19,20
    6ca0:	9825883a 	mov	r18,r19
    6ca4:	05000044 	movi	r20,1
    6ca8:	1027883a 	mov	r19,r2
    6cac:	003fa606 	br	6b48 <__alt_data_end+0xf8006b48>

00006cb0 <__ulp>:
    6cb0:	295ffc2c 	andhi	r5,r5,32752
    6cb4:	00bf3034 	movhi	r2,64704
    6cb8:	2887883a 	add	r3,r5,r2
    6cbc:	00c0020e 	bge	zero,r3,6cc8 <__ulp+0x18>
    6cc0:	0005883a 	mov	r2,zero
    6cc4:	f800283a 	ret
    6cc8:	00c7c83a 	sub	r3,zero,r3
    6ccc:	1807d53a 	srai	r3,r3,20
    6cd0:	008004c4 	movi	r2,19
    6cd4:	10c00b0e 	bge	r2,r3,6d04 <__ulp+0x54>
    6cd8:	18bffb04 	addi	r2,r3,-20
    6cdc:	01000784 	movi	r4,30
    6ce0:	0007883a 	mov	r3,zero
    6ce4:	20800516 	blt	r4,r2,6cfc <__ulp+0x4c>
    6ce8:	010007c4 	movi	r4,31
    6cec:	2089c83a 	sub	r4,r4,r2
    6cf0:	00800044 	movi	r2,1
    6cf4:	1104983a 	sll	r2,r2,r4
    6cf8:	f800283a 	ret
    6cfc:	00800044 	movi	r2,1
    6d00:	f800283a 	ret
    6d04:	01400234 	movhi	r5,8
    6d08:	28c7d83a 	sra	r3,r5,r3
    6d0c:	0005883a 	mov	r2,zero
    6d10:	f800283a 	ret

00006d14 <__b2d>:
    6d14:	defffa04 	addi	sp,sp,-24
    6d18:	dc000015 	stw	r16,0(sp)
    6d1c:	24000417 	ldw	r16,16(r4)
    6d20:	dc400115 	stw	r17,4(sp)
    6d24:	24400504 	addi	r17,r4,20
    6d28:	8421883a 	add	r16,r16,r16
    6d2c:	8421883a 	add	r16,r16,r16
    6d30:	8c21883a 	add	r16,r17,r16
    6d34:	dc800215 	stw	r18,8(sp)
    6d38:	84bfff17 	ldw	r18,-4(r16)
    6d3c:	dd000415 	stw	r20,16(sp)
    6d40:	dcc00315 	stw	r19,12(sp)
    6d44:	9009883a 	mov	r4,r18
    6d48:	2829883a 	mov	r20,r5
    6d4c:	dfc00515 	stw	ra,20(sp)
    6d50:	00064800 	call	6480 <__hi0bits>
    6d54:	00c00804 	movi	r3,32
    6d58:	1889c83a 	sub	r4,r3,r2
    6d5c:	a1000015 	stw	r4,0(r20)
    6d60:	01000284 	movi	r4,10
    6d64:	84ffff04 	addi	r19,r16,-4
    6d68:	20801216 	blt	r4,r2,6db4 <__b2d+0xa0>
    6d6c:	018002c4 	movi	r6,11
    6d70:	308dc83a 	sub	r6,r6,r2
    6d74:	9186d83a 	srl	r3,r18,r6
    6d78:	18cffc34 	orhi	r3,r3,16368
    6d7c:	8cc0212e 	bgeu	r17,r19,6e04 <__b2d+0xf0>
    6d80:	813ffe17 	ldw	r4,-8(r16)
    6d84:	218cd83a 	srl	r6,r4,r6
    6d88:	10800544 	addi	r2,r2,21
    6d8c:	9084983a 	sll	r2,r18,r2
    6d90:	1184b03a 	or	r2,r2,r6
    6d94:	dfc00517 	ldw	ra,20(sp)
    6d98:	dd000417 	ldw	r20,16(sp)
    6d9c:	dcc00317 	ldw	r19,12(sp)
    6da0:	dc800217 	ldw	r18,8(sp)
    6da4:	dc400117 	ldw	r17,4(sp)
    6da8:	dc000017 	ldw	r16,0(sp)
    6dac:	dec00604 	addi	sp,sp,24
    6db0:	f800283a 	ret
    6db4:	8cc00f2e 	bgeu	r17,r19,6df4 <__b2d+0xe0>
    6db8:	117ffd44 	addi	r5,r2,-11
    6dbc:	80bffe17 	ldw	r2,-8(r16)
    6dc0:	28000e26 	beq	r5,zero,6dfc <__b2d+0xe8>
    6dc4:	1949c83a 	sub	r4,r3,r5
    6dc8:	9164983a 	sll	r18,r18,r5
    6dcc:	1106d83a 	srl	r3,r2,r4
    6dd0:	81bffe04 	addi	r6,r16,-8
    6dd4:	948ffc34 	orhi	r18,r18,16368
    6dd8:	90c6b03a 	or	r3,r18,r3
    6ddc:	89800e2e 	bgeu	r17,r6,6e18 <__b2d+0x104>
    6de0:	81bffd17 	ldw	r6,-12(r16)
    6de4:	1144983a 	sll	r2,r2,r5
    6de8:	310ad83a 	srl	r5,r6,r4
    6dec:	2884b03a 	or	r2,r5,r2
    6df0:	003fe806 	br	6d94 <__alt_data_end+0xf8006d94>
    6df4:	10bffd44 	addi	r2,r2,-11
    6df8:	1000041e 	bne	r2,zero,6e0c <__b2d+0xf8>
    6dfc:	90cffc34 	orhi	r3,r18,16368
    6e00:	003fe406 	br	6d94 <__alt_data_end+0xf8006d94>
    6e04:	000d883a 	mov	r6,zero
    6e08:	003fdf06 	br	6d88 <__alt_data_end+0xf8006d88>
    6e0c:	90a4983a 	sll	r18,r18,r2
    6e10:	0005883a 	mov	r2,zero
    6e14:	003ff906 	br	6dfc <__alt_data_end+0xf8006dfc>
    6e18:	1144983a 	sll	r2,r2,r5
    6e1c:	003fdd06 	br	6d94 <__alt_data_end+0xf8006d94>

00006e20 <__d2b>:
    6e20:	defff804 	addi	sp,sp,-32
    6e24:	dc000215 	stw	r16,8(sp)
    6e28:	3021883a 	mov	r16,r6
    6e2c:	dc400315 	stw	r17,12(sp)
    6e30:	8022907a 	slli	r17,r16,1
    6e34:	dd000615 	stw	r20,24(sp)
    6e38:	2829883a 	mov	r20,r5
    6e3c:	01400044 	movi	r5,1
    6e40:	dcc00515 	stw	r19,20(sp)
    6e44:	dc800415 	stw	r18,16(sp)
    6e48:	dfc00715 	stw	ra,28(sp)
    6e4c:	3825883a 	mov	r18,r7
    6e50:	8822d57a 	srli	r17,r17,21
    6e54:	000618c0 	call	618c <_Balloc>
    6e58:	1027883a 	mov	r19,r2
    6e5c:	00800434 	movhi	r2,16
    6e60:	10bfffc4 	addi	r2,r2,-1
    6e64:	808c703a 	and	r6,r16,r2
    6e68:	88000126 	beq	r17,zero,6e70 <__d2b+0x50>
    6e6c:	31800434 	orhi	r6,r6,16
    6e70:	d9800015 	stw	r6,0(sp)
    6e74:	a0002426 	beq	r20,zero,6f08 <__d2b+0xe8>
    6e78:	d9000104 	addi	r4,sp,4
    6e7c:	dd000115 	stw	r20,4(sp)
    6e80:	00064e80 	call	64e8 <__lo0bits>
    6e84:	d8c00017 	ldw	r3,0(sp)
    6e88:	10002f1e 	bne	r2,zero,6f48 <__d2b+0x128>
    6e8c:	d9000117 	ldw	r4,4(sp)
    6e90:	99000515 	stw	r4,20(r19)
    6e94:	1821003a 	cmpeq	r16,r3,zero
    6e98:	01000084 	movi	r4,2
    6e9c:	2421c83a 	sub	r16,r4,r16
    6ea0:	98c00615 	stw	r3,24(r19)
    6ea4:	9c000415 	stw	r16,16(r19)
    6ea8:	88001f1e 	bne	r17,zero,6f28 <__d2b+0x108>
    6eac:	10bef384 	addi	r2,r2,-1074
    6eb0:	90800015 	stw	r2,0(r18)
    6eb4:	00900034 	movhi	r2,16384
    6eb8:	10bfffc4 	addi	r2,r2,-1
    6ebc:	8085883a 	add	r2,r16,r2
    6ec0:	1085883a 	add	r2,r2,r2
    6ec4:	1085883a 	add	r2,r2,r2
    6ec8:	9885883a 	add	r2,r19,r2
    6ecc:	11000517 	ldw	r4,20(r2)
    6ed0:	8020917a 	slli	r16,r16,5
    6ed4:	00064800 	call	6480 <__hi0bits>
    6ed8:	d8c00817 	ldw	r3,32(sp)
    6edc:	8085c83a 	sub	r2,r16,r2
    6ee0:	18800015 	stw	r2,0(r3)
    6ee4:	9805883a 	mov	r2,r19
    6ee8:	dfc00717 	ldw	ra,28(sp)
    6eec:	dd000617 	ldw	r20,24(sp)
    6ef0:	dcc00517 	ldw	r19,20(sp)
    6ef4:	dc800417 	ldw	r18,16(sp)
    6ef8:	dc400317 	ldw	r17,12(sp)
    6efc:	dc000217 	ldw	r16,8(sp)
    6f00:	dec00804 	addi	sp,sp,32
    6f04:	f800283a 	ret
    6f08:	d809883a 	mov	r4,sp
    6f0c:	00064e80 	call	64e8 <__lo0bits>
    6f10:	d8c00017 	ldw	r3,0(sp)
    6f14:	04000044 	movi	r16,1
    6f18:	9c000415 	stw	r16,16(r19)
    6f1c:	98c00515 	stw	r3,20(r19)
    6f20:	10800804 	addi	r2,r2,32
    6f24:	883fe126 	beq	r17,zero,6eac <__alt_data_end+0xf8006eac>
    6f28:	00c00d44 	movi	r3,53
    6f2c:	8c7ef344 	addi	r17,r17,-1075
    6f30:	88a3883a 	add	r17,r17,r2
    6f34:	1885c83a 	sub	r2,r3,r2
    6f38:	d8c00817 	ldw	r3,32(sp)
    6f3c:	94400015 	stw	r17,0(r18)
    6f40:	18800015 	stw	r2,0(r3)
    6f44:	003fe706 	br	6ee4 <__alt_data_end+0xf8006ee4>
    6f48:	01000804 	movi	r4,32
    6f4c:	2089c83a 	sub	r4,r4,r2
    6f50:	1908983a 	sll	r4,r3,r4
    6f54:	d9400117 	ldw	r5,4(sp)
    6f58:	1886d83a 	srl	r3,r3,r2
    6f5c:	2148b03a 	or	r4,r4,r5
    6f60:	99000515 	stw	r4,20(r19)
    6f64:	d8c00015 	stw	r3,0(sp)
    6f68:	003fca06 	br	6e94 <__alt_data_end+0xf8006e94>

00006f6c <__ratio>:
    6f6c:	defff904 	addi	sp,sp,-28
    6f70:	dc400315 	stw	r17,12(sp)
    6f74:	2823883a 	mov	r17,r5
    6f78:	d9400104 	addi	r5,sp,4
    6f7c:	dfc00615 	stw	ra,24(sp)
    6f80:	dcc00515 	stw	r19,20(sp)
    6f84:	dc800415 	stw	r18,16(sp)
    6f88:	2027883a 	mov	r19,r4
    6f8c:	dc000215 	stw	r16,8(sp)
    6f90:	0006d140 	call	6d14 <__b2d>
    6f94:	d80b883a 	mov	r5,sp
    6f98:	8809883a 	mov	r4,r17
    6f9c:	1025883a 	mov	r18,r2
    6fa0:	1821883a 	mov	r16,r3
    6fa4:	0006d140 	call	6d14 <__b2d>
    6fa8:	8a000417 	ldw	r8,16(r17)
    6fac:	99000417 	ldw	r4,16(r19)
    6fb0:	d9400117 	ldw	r5,4(sp)
    6fb4:	2209c83a 	sub	r4,r4,r8
    6fb8:	2010917a 	slli	r8,r4,5
    6fbc:	d9000017 	ldw	r4,0(sp)
    6fc0:	2909c83a 	sub	r4,r5,r4
    6fc4:	4109883a 	add	r4,r8,r4
    6fc8:	01000e0e 	bge	zero,r4,7004 <__ratio+0x98>
    6fcc:	2008953a 	slli	r4,r4,20
    6fd0:	2421883a 	add	r16,r4,r16
    6fd4:	100d883a 	mov	r6,r2
    6fd8:	180f883a 	mov	r7,r3
    6fdc:	9009883a 	mov	r4,r18
    6fe0:	800b883a 	mov	r5,r16
    6fe4:	000ae580 	call	ae58 <__divdf3>
    6fe8:	dfc00617 	ldw	ra,24(sp)
    6fec:	dcc00517 	ldw	r19,20(sp)
    6ff0:	dc800417 	ldw	r18,16(sp)
    6ff4:	dc400317 	ldw	r17,12(sp)
    6ff8:	dc000217 	ldw	r16,8(sp)
    6ffc:	dec00704 	addi	sp,sp,28
    7000:	f800283a 	ret
    7004:	2008953a 	slli	r4,r4,20
    7008:	1907c83a 	sub	r3,r3,r4
    700c:	003ff106 	br	6fd4 <__alt_data_end+0xf8006fd4>

00007010 <_mprec_log10>:
    7010:	defffe04 	addi	sp,sp,-8
    7014:	dc000015 	stw	r16,0(sp)
    7018:	dfc00115 	stw	ra,4(sp)
    701c:	008005c4 	movi	r2,23
    7020:	2021883a 	mov	r16,r4
    7024:	11000d0e 	bge	r2,r4,705c <_mprec_log10+0x4c>
    7028:	0005883a 	mov	r2,zero
    702c:	00cffc34 	movhi	r3,16368
    7030:	843fffc4 	addi	r16,r16,-1
    7034:	000d883a 	mov	r6,zero
    7038:	01d00934 	movhi	r7,16420
    703c:	1009883a 	mov	r4,r2
    7040:	180b883a 	mov	r5,r3
    7044:	000b9980 	call	b998 <__muldf3>
    7048:	803ff91e 	bne	r16,zero,7030 <__alt_data_end+0xf8007030>
    704c:	dfc00117 	ldw	ra,4(sp)
    7050:	dc000017 	ldw	r16,0(sp)
    7054:	dec00204 	addi	sp,sp,8
    7058:	f800283a 	ret
    705c:	202090fa 	slli	r16,r4,3
    7060:	00800074 	movhi	r2,1
    7064:	10be2804 	addi	r2,r2,-1888
    7068:	1421883a 	add	r16,r2,r16
    706c:	80800017 	ldw	r2,0(r16)
    7070:	80c00117 	ldw	r3,4(r16)
    7074:	dfc00117 	ldw	ra,4(sp)
    7078:	dc000017 	ldw	r16,0(sp)
    707c:	dec00204 	addi	sp,sp,8
    7080:	f800283a 	ret

00007084 <__copybits>:
    7084:	297fffc4 	addi	r5,r5,-1
    7088:	280fd17a 	srai	r7,r5,5
    708c:	30c00417 	ldw	r3,16(r6)
    7090:	30800504 	addi	r2,r6,20
    7094:	39c00044 	addi	r7,r7,1
    7098:	18c7883a 	add	r3,r3,r3
    709c:	39cf883a 	add	r7,r7,r7
    70a0:	18c7883a 	add	r3,r3,r3
    70a4:	39cf883a 	add	r7,r7,r7
    70a8:	10c7883a 	add	r3,r2,r3
    70ac:	21cf883a 	add	r7,r4,r7
    70b0:	10c00d2e 	bgeu	r2,r3,70e8 <__copybits+0x64>
    70b4:	200b883a 	mov	r5,r4
    70b8:	12000017 	ldw	r8,0(r2)
    70bc:	29400104 	addi	r5,r5,4
    70c0:	10800104 	addi	r2,r2,4
    70c4:	2a3fff15 	stw	r8,-4(r5)
    70c8:	10fffb36 	bltu	r2,r3,70b8 <__alt_data_end+0xf80070b8>
    70cc:	1985c83a 	sub	r2,r3,r6
    70d0:	10bffac4 	addi	r2,r2,-21
    70d4:	1004d0ba 	srli	r2,r2,2
    70d8:	10800044 	addi	r2,r2,1
    70dc:	1085883a 	add	r2,r2,r2
    70e0:	1085883a 	add	r2,r2,r2
    70e4:	2089883a 	add	r4,r4,r2
    70e8:	21c0032e 	bgeu	r4,r7,70f8 <__copybits+0x74>
    70ec:	20000015 	stw	zero,0(r4)
    70f0:	21000104 	addi	r4,r4,4
    70f4:	21fffd36 	bltu	r4,r7,70ec <__alt_data_end+0xf80070ec>
    70f8:	f800283a 	ret

000070fc <__any_on>:
    70fc:	20c00417 	ldw	r3,16(r4)
    7100:	2805d17a 	srai	r2,r5,5
    7104:	21000504 	addi	r4,r4,20
    7108:	18800d0e 	bge	r3,r2,7140 <__any_on+0x44>
    710c:	18c7883a 	add	r3,r3,r3
    7110:	18c7883a 	add	r3,r3,r3
    7114:	20c7883a 	add	r3,r4,r3
    7118:	20c0192e 	bgeu	r4,r3,7180 <__any_on+0x84>
    711c:	18bfff17 	ldw	r2,-4(r3)
    7120:	18ffff04 	addi	r3,r3,-4
    7124:	1000041e 	bne	r2,zero,7138 <__any_on+0x3c>
    7128:	20c0142e 	bgeu	r4,r3,717c <__any_on+0x80>
    712c:	18ffff04 	addi	r3,r3,-4
    7130:	19400017 	ldw	r5,0(r3)
    7134:	283ffc26 	beq	r5,zero,7128 <__alt_data_end+0xf8007128>
    7138:	00800044 	movi	r2,1
    713c:	f800283a 	ret
    7140:	10c00a0e 	bge	r2,r3,716c <__any_on+0x70>
    7144:	1085883a 	add	r2,r2,r2
    7148:	1085883a 	add	r2,r2,r2
    714c:	294007cc 	andi	r5,r5,31
    7150:	2087883a 	add	r3,r4,r2
    7154:	283ff026 	beq	r5,zero,7118 <__alt_data_end+0xf8007118>
    7158:	19800017 	ldw	r6,0(r3)
    715c:	3144d83a 	srl	r2,r6,r5
    7160:	114a983a 	sll	r5,r2,r5
    7164:	317ff41e 	bne	r6,r5,7138 <__alt_data_end+0xf8007138>
    7168:	003feb06 	br	7118 <__alt_data_end+0xf8007118>
    716c:	1085883a 	add	r2,r2,r2
    7170:	1085883a 	add	r2,r2,r2
    7174:	2087883a 	add	r3,r4,r2
    7178:	003fe706 	br	7118 <__alt_data_end+0xf8007118>
    717c:	f800283a 	ret
    7180:	0005883a 	mov	r2,zero
    7184:	f800283a 	ret

00007188 <_realloc_r>:
    7188:	defff604 	addi	sp,sp,-40
    718c:	dc800215 	stw	r18,8(sp)
    7190:	dfc00915 	stw	ra,36(sp)
    7194:	df000815 	stw	fp,32(sp)
    7198:	ddc00715 	stw	r23,28(sp)
    719c:	dd800615 	stw	r22,24(sp)
    71a0:	dd400515 	stw	r21,20(sp)
    71a4:	dd000415 	stw	r20,16(sp)
    71a8:	dcc00315 	stw	r19,12(sp)
    71ac:	dc400115 	stw	r17,4(sp)
    71b0:	dc000015 	stw	r16,0(sp)
    71b4:	3025883a 	mov	r18,r6
    71b8:	2800b726 	beq	r5,zero,7498 <_realloc_r+0x310>
    71bc:	282b883a 	mov	r21,r5
    71c0:	2029883a 	mov	r20,r4
    71c4:	000d1900 	call	d190 <__malloc_lock>
    71c8:	a8bfff17 	ldw	r2,-4(r21)
    71cc:	043fff04 	movi	r16,-4
    71d0:	90c002c4 	addi	r3,r18,11
    71d4:	01000584 	movi	r4,22
    71d8:	acfffe04 	addi	r19,r21,-8
    71dc:	1420703a 	and	r16,r2,r16
    71e0:	20c0332e 	bgeu	r4,r3,72b0 <_realloc_r+0x128>
    71e4:	047ffe04 	movi	r17,-8
    71e8:	1c62703a 	and	r17,r3,r17
    71ec:	8807883a 	mov	r3,r17
    71f0:	88005816 	blt	r17,zero,7354 <_realloc_r+0x1cc>
    71f4:	8c805736 	bltu	r17,r18,7354 <_realloc_r+0x1cc>
    71f8:	80c0300e 	bge	r16,r3,72bc <_realloc_r+0x134>
    71fc:	07000074 	movhi	fp,1
    7200:	e73fe804 	addi	fp,fp,-96
    7204:	e1c00217 	ldw	r7,8(fp)
    7208:	9c09883a 	add	r4,r19,r16
    720c:	22000117 	ldw	r8,4(r4)
    7210:	21c06326 	beq	r4,r7,73a0 <_realloc_r+0x218>
    7214:	017fff84 	movi	r5,-2
    7218:	414a703a 	and	r5,r8,r5
    721c:	214b883a 	add	r5,r4,r5
    7220:	29800117 	ldw	r6,4(r5)
    7224:	3180004c 	andi	r6,r6,1
    7228:	30003f26 	beq	r6,zero,7328 <_realloc_r+0x1a0>
    722c:	1080004c 	andi	r2,r2,1
    7230:	10008326 	beq	r2,zero,7440 <_realloc_r+0x2b8>
    7234:	900b883a 	mov	r5,r18
    7238:	a009883a 	mov	r4,r20
    723c:	00054d00 	call	54d0 <_malloc_r>
    7240:	1025883a 	mov	r18,r2
    7244:	10011e26 	beq	r2,zero,76c0 <_realloc_r+0x538>
    7248:	a93fff17 	ldw	r4,-4(r21)
    724c:	10fffe04 	addi	r3,r2,-8
    7250:	00bfff84 	movi	r2,-2
    7254:	2084703a 	and	r2,r4,r2
    7258:	9885883a 	add	r2,r19,r2
    725c:	1880ee26 	beq	r3,r2,7618 <_realloc_r+0x490>
    7260:	81bfff04 	addi	r6,r16,-4
    7264:	00800904 	movi	r2,36
    7268:	1180b836 	bltu	r2,r6,754c <_realloc_r+0x3c4>
    726c:	00c004c4 	movi	r3,19
    7270:	19809636 	bltu	r3,r6,74cc <_realloc_r+0x344>
    7274:	9005883a 	mov	r2,r18
    7278:	a807883a 	mov	r3,r21
    727c:	19000017 	ldw	r4,0(r3)
    7280:	11000015 	stw	r4,0(r2)
    7284:	19000117 	ldw	r4,4(r3)
    7288:	11000115 	stw	r4,4(r2)
    728c:	18c00217 	ldw	r3,8(r3)
    7290:	10c00215 	stw	r3,8(r2)
    7294:	a80b883a 	mov	r5,r21
    7298:	a009883a 	mov	r4,r20
    729c:	00048e40 	call	48e4 <_free_r>
    72a0:	a009883a 	mov	r4,r20
    72a4:	000d1b40 	call	d1b4 <__malloc_unlock>
    72a8:	9005883a 	mov	r2,r18
    72ac:	00001206 	br	72f8 <_realloc_r+0x170>
    72b0:	00c00404 	movi	r3,16
    72b4:	1823883a 	mov	r17,r3
    72b8:	003fce06 	br	71f4 <__alt_data_end+0xf80071f4>
    72bc:	a825883a 	mov	r18,r21
    72c0:	8445c83a 	sub	r2,r16,r17
    72c4:	00c003c4 	movi	r3,15
    72c8:	18802636 	bltu	r3,r2,7364 <_realloc_r+0x1dc>
    72cc:	99800117 	ldw	r6,4(r19)
    72d0:	9c07883a 	add	r3,r19,r16
    72d4:	3180004c 	andi	r6,r6,1
    72d8:	3420b03a 	or	r16,r6,r16
    72dc:	9c000115 	stw	r16,4(r19)
    72e0:	18800117 	ldw	r2,4(r3)
    72e4:	10800054 	ori	r2,r2,1
    72e8:	18800115 	stw	r2,4(r3)
    72ec:	a009883a 	mov	r4,r20
    72f0:	000d1b40 	call	d1b4 <__malloc_unlock>
    72f4:	9005883a 	mov	r2,r18
    72f8:	dfc00917 	ldw	ra,36(sp)
    72fc:	df000817 	ldw	fp,32(sp)
    7300:	ddc00717 	ldw	r23,28(sp)
    7304:	dd800617 	ldw	r22,24(sp)
    7308:	dd400517 	ldw	r21,20(sp)
    730c:	dd000417 	ldw	r20,16(sp)
    7310:	dcc00317 	ldw	r19,12(sp)
    7314:	dc800217 	ldw	r18,8(sp)
    7318:	dc400117 	ldw	r17,4(sp)
    731c:	dc000017 	ldw	r16,0(sp)
    7320:	dec00a04 	addi	sp,sp,40
    7324:	f800283a 	ret
    7328:	017fff04 	movi	r5,-4
    732c:	414a703a 	and	r5,r8,r5
    7330:	814d883a 	add	r6,r16,r5
    7334:	30c01f16 	blt	r6,r3,73b4 <_realloc_r+0x22c>
    7338:	20800317 	ldw	r2,12(r4)
    733c:	20c00217 	ldw	r3,8(r4)
    7340:	a825883a 	mov	r18,r21
    7344:	3021883a 	mov	r16,r6
    7348:	18800315 	stw	r2,12(r3)
    734c:	10c00215 	stw	r3,8(r2)
    7350:	003fdb06 	br	72c0 <__alt_data_end+0xf80072c0>
    7354:	00800304 	movi	r2,12
    7358:	a0800015 	stw	r2,0(r20)
    735c:	0005883a 	mov	r2,zero
    7360:	003fe506 	br	72f8 <__alt_data_end+0xf80072f8>
    7364:	98c00117 	ldw	r3,4(r19)
    7368:	9c4b883a 	add	r5,r19,r17
    736c:	11000054 	ori	r4,r2,1
    7370:	18c0004c 	andi	r3,r3,1
    7374:	1c62b03a 	or	r17,r3,r17
    7378:	9c400115 	stw	r17,4(r19)
    737c:	29000115 	stw	r4,4(r5)
    7380:	2885883a 	add	r2,r5,r2
    7384:	10c00117 	ldw	r3,4(r2)
    7388:	29400204 	addi	r5,r5,8
    738c:	a009883a 	mov	r4,r20
    7390:	18c00054 	ori	r3,r3,1
    7394:	10c00115 	stw	r3,4(r2)
    7398:	00048e40 	call	48e4 <_free_r>
    739c:	003fd306 	br	72ec <__alt_data_end+0xf80072ec>
    73a0:	017fff04 	movi	r5,-4
    73a4:	414a703a 	and	r5,r8,r5
    73a8:	89800404 	addi	r6,r17,16
    73ac:	8151883a 	add	r8,r16,r5
    73b0:	4180590e 	bge	r8,r6,7518 <_realloc_r+0x390>
    73b4:	1080004c 	andi	r2,r2,1
    73b8:	103f9e1e 	bne	r2,zero,7234 <__alt_data_end+0xf8007234>
    73bc:	adbffe17 	ldw	r22,-8(r21)
    73c0:	00bfff04 	movi	r2,-4
    73c4:	9dadc83a 	sub	r22,r19,r22
    73c8:	b1800117 	ldw	r6,4(r22)
    73cc:	3084703a 	and	r2,r6,r2
    73d0:	20002026 	beq	r4,zero,7454 <_realloc_r+0x2cc>
    73d4:	80af883a 	add	r23,r16,r2
    73d8:	b96f883a 	add	r23,r23,r5
    73dc:	21c05f26 	beq	r4,r7,755c <_realloc_r+0x3d4>
    73e0:	b8c01c16 	blt	r23,r3,7454 <_realloc_r+0x2cc>
    73e4:	20800317 	ldw	r2,12(r4)
    73e8:	20c00217 	ldw	r3,8(r4)
    73ec:	81bfff04 	addi	r6,r16,-4
    73f0:	01000904 	movi	r4,36
    73f4:	18800315 	stw	r2,12(r3)
    73f8:	10c00215 	stw	r3,8(r2)
    73fc:	b0c00217 	ldw	r3,8(r22)
    7400:	b0800317 	ldw	r2,12(r22)
    7404:	b4800204 	addi	r18,r22,8
    7408:	18800315 	stw	r2,12(r3)
    740c:	10c00215 	stw	r3,8(r2)
    7410:	21801b36 	bltu	r4,r6,7480 <_realloc_r+0x2f8>
    7414:	008004c4 	movi	r2,19
    7418:	1180352e 	bgeu	r2,r6,74f0 <_realloc_r+0x368>
    741c:	a8800017 	ldw	r2,0(r21)
    7420:	b0800215 	stw	r2,8(r22)
    7424:	a8800117 	ldw	r2,4(r21)
    7428:	b0800315 	stw	r2,12(r22)
    742c:	008006c4 	movi	r2,27
    7430:	11807f36 	bltu	r2,r6,7630 <_realloc_r+0x4a8>
    7434:	b0800404 	addi	r2,r22,16
    7438:	ad400204 	addi	r21,r21,8
    743c:	00002d06 	br	74f4 <_realloc_r+0x36c>
    7440:	adbffe17 	ldw	r22,-8(r21)
    7444:	00bfff04 	movi	r2,-4
    7448:	9dadc83a 	sub	r22,r19,r22
    744c:	b1000117 	ldw	r4,4(r22)
    7450:	2084703a 	and	r2,r4,r2
    7454:	b03f7726 	beq	r22,zero,7234 <__alt_data_end+0xf8007234>
    7458:	80af883a 	add	r23,r16,r2
    745c:	b8ff7516 	blt	r23,r3,7234 <__alt_data_end+0xf8007234>
    7460:	b0800317 	ldw	r2,12(r22)
    7464:	b0c00217 	ldw	r3,8(r22)
    7468:	81bfff04 	addi	r6,r16,-4
    746c:	01000904 	movi	r4,36
    7470:	18800315 	stw	r2,12(r3)
    7474:	10c00215 	stw	r3,8(r2)
    7478:	b4800204 	addi	r18,r22,8
    747c:	21bfe52e 	bgeu	r4,r6,7414 <__alt_data_end+0xf8007414>
    7480:	a80b883a 	mov	r5,r21
    7484:	9009883a 	mov	r4,r18
    7488:	0005f080 	call	5f08 <memmove>
    748c:	b821883a 	mov	r16,r23
    7490:	b027883a 	mov	r19,r22
    7494:	003f8a06 	br	72c0 <__alt_data_end+0xf80072c0>
    7498:	300b883a 	mov	r5,r6
    749c:	dfc00917 	ldw	ra,36(sp)
    74a0:	df000817 	ldw	fp,32(sp)
    74a4:	ddc00717 	ldw	r23,28(sp)
    74a8:	dd800617 	ldw	r22,24(sp)
    74ac:	dd400517 	ldw	r21,20(sp)
    74b0:	dd000417 	ldw	r20,16(sp)
    74b4:	dcc00317 	ldw	r19,12(sp)
    74b8:	dc800217 	ldw	r18,8(sp)
    74bc:	dc400117 	ldw	r17,4(sp)
    74c0:	dc000017 	ldw	r16,0(sp)
    74c4:	dec00a04 	addi	sp,sp,40
    74c8:	00054d01 	jmpi	54d0 <_malloc_r>
    74cc:	a8c00017 	ldw	r3,0(r21)
    74d0:	90c00015 	stw	r3,0(r18)
    74d4:	a8c00117 	ldw	r3,4(r21)
    74d8:	90c00115 	stw	r3,4(r18)
    74dc:	00c006c4 	movi	r3,27
    74e0:	19804536 	bltu	r3,r6,75f8 <_realloc_r+0x470>
    74e4:	90800204 	addi	r2,r18,8
    74e8:	a8c00204 	addi	r3,r21,8
    74ec:	003f6306 	br	727c <__alt_data_end+0xf800727c>
    74f0:	9005883a 	mov	r2,r18
    74f4:	a8c00017 	ldw	r3,0(r21)
    74f8:	b821883a 	mov	r16,r23
    74fc:	b027883a 	mov	r19,r22
    7500:	10c00015 	stw	r3,0(r2)
    7504:	a8c00117 	ldw	r3,4(r21)
    7508:	10c00115 	stw	r3,4(r2)
    750c:	a8c00217 	ldw	r3,8(r21)
    7510:	10c00215 	stw	r3,8(r2)
    7514:	003f6a06 	br	72c0 <__alt_data_end+0xf80072c0>
    7518:	9c67883a 	add	r19,r19,r17
    751c:	4445c83a 	sub	r2,r8,r17
    7520:	e4c00215 	stw	r19,8(fp)
    7524:	10800054 	ori	r2,r2,1
    7528:	98800115 	stw	r2,4(r19)
    752c:	a8bfff17 	ldw	r2,-4(r21)
    7530:	a009883a 	mov	r4,r20
    7534:	1080004c 	andi	r2,r2,1
    7538:	1462b03a 	or	r17,r2,r17
    753c:	ac7fff15 	stw	r17,-4(r21)
    7540:	000d1b40 	call	d1b4 <__malloc_unlock>
    7544:	a805883a 	mov	r2,r21
    7548:	003f6b06 	br	72f8 <__alt_data_end+0xf80072f8>
    754c:	a80b883a 	mov	r5,r21
    7550:	9009883a 	mov	r4,r18
    7554:	0005f080 	call	5f08 <memmove>
    7558:	003f4e06 	br	7294 <__alt_data_end+0xf8007294>
    755c:	89000404 	addi	r4,r17,16
    7560:	b93fbc16 	blt	r23,r4,7454 <__alt_data_end+0xf8007454>
    7564:	b0800317 	ldw	r2,12(r22)
    7568:	b0c00217 	ldw	r3,8(r22)
    756c:	81bfff04 	addi	r6,r16,-4
    7570:	01000904 	movi	r4,36
    7574:	18800315 	stw	r2,12(r3)
    7578:	10c00215 	stw	r3,8(r2)
    757c:	b4800204 	addi	r18,r22,8
    7580:	21804336 	bltu	r4,r6,7690 <_realloc_r+0x508>
    7584:	008004c4 	movi	r2,19
    7588:	11803f2e 	bgeu	r2,r6,7688 <_realloc_r+0x500>
    758c:	a8800017 	ldw	r2,0(r21)
    7590:	b0800215 	stw	r2,8(r22)
    7594:	a8800117 	ldw	r2,4(r21)
    7598:	b0800315 	stw	r2,12(r22)
    759c:	008006c4 	movi	r2,27
    75a0:	11803f36 	bltu	r2,r6,76a0 <_realloc_r+0x518>
    75a4:	b0800404 	addi	r2,r22,16
    75a8:	ad400204 	addi	r21,r21,8
    75ac:	a8c00017 	ldw	r3,0(r21)
    75b0:	10c00015 	stw	r3,0(r2)
    75b4:	a8c00117 	ldw	r3,4(r21)
    75b8:	10c00115 	stw	r3,4(r2)
    75bc:	a8c00217 	ldw	r3,8(r21)
    75c0:	10c00215 	stw	r3,8(r2)
    75c4:	b447883a 	add	r3,r22,r17
    75c8:	bc45c83a 	sub	r2,r23,r17
    75cc:	e0c00215 	stw	r3,8(fp)
    75d0:	10800054 	ori	r2,r2,1
    75d4:	18800115 	stw	r2,4(r3)
    75d8:	b0800117 	ldw	r2,4(r22)
    75dc:	a009883a 	mov	r4,r20
    75e0:	1080004c 	andi	r2,r2,1
    75e4:	1462b03a 	or	r17,r2,r17
    75e8:	b4400115 	stw	r17,4(r22)
    75ec:	000d1b40 	call	d1b4 <__malloc_unlock>
    75f0:	9005883a 	mov	r2,r18
    75f4:	003f4006 	br	72f8 <__alt_data_end+0xf80072f8>
    75f8:	a8c00217 	ldw	r3,8(r21)
    75fc:	90c00215 	stw	r3,8(r18)
    7600:	a8c00317 	ldw	r3,12(r21)
    7604:	90c00315 	stw	r3,12(r18)
    7608:	30801126 	beq	r6,r2,7650 <_realloc_r+0x4c8>
    760c:	90800404 	addi	r2,r18,16
    7610:	a8c00404 	addi	r3,r21,16
    7614:	003f1906 	br	727c <__alt_data_end+0xf800727c>
    7618:	90ffff17 	ldw	r3,-4(r18)
    761c:	00bfff04 	movi	r2,-4
    7620:	a825883a 	mov	r18,r21
    7624:	1884703a 	and	r2,r3,r2
    7628:	80a1883a 	add	r16,r16,r2
    762c:	003f2406 	br	72c0 <__alt_data_end+0xf80072c0>
    7630:	a8800217 	ldw	r2,8(r21)
    7634:	b0800415 	stw	r2,16(r22)
    7638:	a8800317 	ldw	r2,12(r21)
    763c:	b0800515 	stw	r2,20(r22)
    7640:	31000a26 	beq	r6,r4,766c <_realloc_r+0x4e4>
    7644:	b0800604 	addi	r2,r22,24
    7648:	ad400404 	addi	r21,r21,16
    764c:	003fa906 	br	74f4 <__alt_data_end+0xf80074f4>
    7650:	a9000417 	ldw	r4,16(r21)
    7654:	90800604 	addi	r2,r18,24
    7658:	a8c00604 	addi	r3,r21,24
    765c:	91000415 	stw	r4,16(r18)
    7660:	a9000517 	ldw	r4,20(r21)
    7664:	91000515 	stw	r4,20(r18)
    7668:	003f0406 	br	727c <__alt_data_end+0xf800727c>
    766c:	a8c00417 	ldw	r3,16(r21)
    7670:	ad400604 	addi	r21,r21,24
    7674:	b0800804 	addi	r2,r22,32
    7678:	b0c00615 	stw	r3,24(r22)
    767c:	a8ffff17 	ldw	r3,-4(r21)
    7680:	b0c00715 	stw	r3,28(r22)
    7684:	003f9b06 	br	74f4 <__alt_data_end+0xf80074f4>
    7688:	9005883a 	mov	r2,r18
    768c:	003fc706 	br	75ac <__alt_data_end+0xf80075ac>
    7690:	a80b883a 	mov	r5,r21
    7694:	9009883a 	mov	r4,r18
    7698:	0005f080 	call	5f08 <memmove>
    769c:	003fc906 	br	75c4 <__alt_data_end+0xf80075c4>
    76a0:	a8800217 	ldw	r2,8(r21)
    76a4:	b0800415 	stw	r2,16(r22)
    76a8:	a8800317 	ldw	r2,12(r21)
    76ac:	b0800515 	stw	r2,20(r22)
    76b0:	31000726 	beq	r6,r4,76d0 <_realloc_r+0x548>
    76b4:	b0800604 	addi	r2,r22,24
    76b8:	ad400404 	addi	r21,r21,16
    76bc:	003fbb06 	br	75ac <__alt_data_end+0xf80075ac>
    76c0:	a009883a 	mov	r4,r20
    76c4:	000d1b40 	call	d1b4 <__malloc_unlock>
    76c8:	0005883a 	mov	r2,zero
    76cc:	003f0a06 	br	72f8 <__alt_data_end+0xf80072f8>
    76d0:	a8c00417 	ldw	r3,16(r21)
    76d4:	ad400604 	addi	r21,r21,24
    76d8:	b0800804 	addi	r2,r22,32
    76dc:	b0c00615 	stw	r3,24(r22)
    76e0:	a8ffff17 	ldw	r3,-4(r21)
    76e4:	b0c00715 	stw	r3,28(r22)
    76e8:	003fb006 	br	75ac <__alt_data_end+0xf80075ac>

000076ec <__fpclassifyd>:
    76ec:	00a00034 	movhi	r2,32768
    76f0:	10bfffc4 	addi	r2,r2,-1
    76f4:	2884703a 	and	r2,r5,r2
    76f8:	10000726 	beq	r2,zero,7718 <__fpclassifyd+0x2c>
    76fc:	00fffc34 	movhi	r3,65520
    7700:	019ff834 	movhi	r6,32736
    7704:	28c7883a 	add	r3,r5,r3
    7708:	31bfffc4 	addi	r6,r6,-1
    770c:	30c00536 	bltu	r6,r3,7724 <__fpclassifyd+0x38>
    7710:	00800104 	movi	r2,4
    7714:	f800283a 	ret
    7718:	2000021e 	bne	r4,zero,7724 <__fpclassifyd+0x38>
    771c:	00800084 	movi	r2,2
    7720:	f800283a 	ret
    7724:	00dffc34 	movhi	r3,32752
    7728:	019ff834 	movhi	r6,32736
    772c:	28cb883a 	add	r5,r5,r3
    7730:	31bfffc4 	addi	r6,r6,-1
    7734:	317ff62e 	bgeu	r6,r5,7710 <__alt_data_end+0xf8007710>
    7738:	01400434 	movhi	r5,16
    773c:	297fffc4 	addi	r5,r5,-1
    7740:	28800236 	bltu	r5,r2,774c <__fpclassifyd+0x60>
    7744:	008000c4 	movi	r2,3
    7748:	f800283a 	ret
    774c:	10c00226 	beq	r2,r3,7758 <__fpclassifyd+0x6c>
    7750:	0005883a 	mov	r2,zero
    7754:	f800283a 	ret
    7758:	2005003a 	cmpeq	r2,r4,zero
    775c:	f800283a 	ret

00007760 <_sbrk_r>:
    7760:	defffd04 	addi	sp,sp,-12
    7764:	dc000015 	stw	r16,0(sp)
    7768:	04000074 	movhi	r16,1
    776c:	dc400115 	stw	r17,4(sp)
    7770:	840c9904 	addi	r16,r16,12900
    7774:	2023883a 	mov	r17,r4
    7778:	2809883a 	mov	r4,r5
    777c:	dfc00215 	stw	ra,8(sp)
    7780:	80000015 	stw	zero,0(r16)
    7784:	000d3740 	call	d374 <sbrk>
    7788:	00ffffc4 	movi	r3,-1
    778c:	10c00526 	beq	r2,r3,77a4 <_sbrk_r+0x44>
    7790:	dfc00217 	ldw	ra,8(sp)
    7794:	dc400117 	ldw	r17,4(sp)
    7798:	dc000017 	ldw	r16,0(sp)
    779c:	dec00304 	addi	sp,sp,12
    77a0:	f800283a 	ret
    77a4:	80c00017 	ldw	r3,0(r16)
    77a8:	183ff926 	beq	r3,zero,7790 <__alt_data_end+0xf8007790>
    77ac:	88c00015 	stw	r3,0(r17)
    77b0:	003ff706 	br	7790 <__alt_data_end+0xf8007790>

000077b4 <__sread>:
    77b4:	defffe04 	addi	sp,sp,-8
    77b8:	dc000015 	stw	r16,0(sp)
    77bc:	2821883a 	mov	r16,r5
    77c0:	2940038f 	ldh	r5,14(r5)
    77c4:	dfc00115 	stw	ra,4(sp)
    77c8:	00095a80 	call	95a8 <_read_r>
    77cc:	10000716 	blt	r2,zero,77ec <__sread+0x38>
    77d0:	80c01417 	ldw	r3,80(r16)
    77d4:	1887883a 	add	r3,r3,r2
    77d8:	80c01415 	stw	r3,80(r16)
    77dc:	dfc00117 	ldw	ra,4(sp)
    77e0:	dc000017 	ldw	r16,0(sp)
    77e4:	dec00204 	addi	sp,sp,8
    77e8:	f800283a 	ret
    77ec:	80c0030b 	ldhu	r3,12(r16)
    77f0:	18fbffcc 	andi	r3,r3,61439
    77f4:	80c0030d 	sth	r3,12(r16)
    77f8:	dfc00117 	ldw	ra,4(sp)
    77fc:	dc000017 	ldw	r16,0(sp)
    7800:	dec00204 	addi	sp,sp,8
    7804:	f800283a 	ret

00007808 <__seofread>:
    7808:	0005883a 	mov	r2,zero
    780c:	f800283a 	ret

00007810 <__swrite>:
    7810:	2880030b 	ldhu	r2,12(r5)
    7814:	defffb04 	addi	sp,sp,-20
    7818:	dcc00315 	stw	r19,12(sp)
    781c:	dc800215 	stw	r18,8(sp)
    7820:	dc400115 	stw	r17,4(sp)
    7824:	dc000015 	stw	r16,0(sp)
    7828:	dfc00415 	stw	ra,16(sp)
    782c:	10c0400c 	andi	r3,r2,256
    7830:	2821883a 	mov	r16,r5
    7834:	2023883a 	mov	r17,r4
    7838:	3025883a 	mov	r18,r6
    783c:	3827883a 	mov	r19,r7
    7840:	18000526 	beq	r3,zero,7858 <__swrite+0x48>
    7844:	2940038f 	ldh	r5,14(r5)
    7848:	01c00084 	movi	r7,2
    784c:	000d883a 	mov	r6,zero
    7850:	00095480 	call	9548 <_lseek_r>
    7854:	8080030b 	ldhu	r2,12(r16)
    7858:	8140038f 	ldh	r5,14(r16)
    785c:	10bbffcc 	andi	r2,r2,61439
    7860:	980f883a 	mov	r7,r19
    7864:	900d883a 	mov	r6,r18
    7868:	8809883a 	mov	r4,r17
    786c:	8080030d 	sth	r2,12(r16)
    7870:	dfc00417 	ldw	ra,16(sp)
    7874:	dcc00317 	ldw	r19,12(sp)
    7878:	dc800217 	ldw	r18,8(sp)
    787c:	dc400117 	ldw	r17,4(sp)
    7880:	dc000017 	ldw	r16,0(sp)
    7884:	dec00504 	addi	sp,sp,20
    7888:	00090141 	jmpi	9014 <_write_r>

0000788c <__sseek>:
    788c:	defffe04 	addi	sp,sp,-8
    7890:	dc000015 	stw	r16,0(sp)
    7894:	2821883a 	mov	r16,r5
    7898:	2940038f 	ldh	r5,14(r5)
    789c:	dfc00115 	stw	ra,4(sp)
    78a0:	00095480 	call	9548 <_lseek_r>
    78a4:	00ffffc4 	movi	r3,-1
    78a8:	10c00826 	beq	r2,r3,78cc <__sseek+0x40>
    78ac:	80c0030b 	ldhu	r3,12(r16)
    78b0:	80801415 	stw	r2,80(r16)
    78b4:	18c40014 	ori	r3,r3,4096
    78b8:	80c0030d 	sth	r3,12(r16)
    78bc:	dfc00117 	ldw	ra,4(sp)
    78c0:	dc000017 	ldw	r16,0(sp)
    78c4:	dec00204 	addi	sp,sp,8
    78c8:	f800283a 	ret
    78cc:	80c0030b 	ldhu	r3,12(r16)
    78d0:	18fbffcc 	andi	r3,r3,61439
    78d4:	80c0030d 	sth	r3,12(r16)
    78d8:	dfc00117 	ldw	ra,4(sp)
    78dc:	dc000017 	ldw	r16,0(sp)
    78e0:	dec00204 	addi	sp,sp,8
    78e4:	f800283a 	ret

000078e8 <__sclose>:
    78e8:	2940038f 	ldh	r5,14(r5)
    78ec:	00090741 	jmpi	9074 <_close_r>

000078f0 <strcmp>:
    78f0:	2144b03a 	or	r2,r4,r5
    78f4:	108000cc 	andi	r2,r2,3
    78f8:	1000171e 	bne	r2,zero,7958 <strcmp+0x68>
    78fc:	20800017 	ldw	r2,0(r4)
    7900:	28c00017 	ldw	r3,0(r5)
    7904:	10c0141e 	bne	r2,r3,7958 <strcmp+0x68>
    7908:	027fbff4 	movhi	r9,65279
    790c:	4a7fbfc4 	addi	r9,r9,-257
    7910:	0086303a 	nor	r3,zero,r2
    7914:	02202074 	movhi	r8,32897
    7918:	1245883a 	add	r2,r2,r9
    791c:	42202004 	addi	r8,r8,-32640
    7920:	10c4703a 	and	r2,r2,r3
    7924:	1204703a 	and	r2,r2,r8
    7928:	10000226 	beq	r2,zero,7934 <strcmp+0x44>
    792c:	00002306 	br	79bc <strcmp+0xcc>
    7930:	1000221e 	bne	r2,zero,79bc <strcmp+0xcc>
    7934:	21000104 	addi	r4,r4,4
    7938:	20c00017 	ldw	r3,0(r4)
    793c:	29400104 	addi	r5,r5,4
    7940:	29800017 	ldw	r6,0(r5)
    7944:	1a4f883a 	add	r7,r3,r9
    7948:	00c4303a 	nor	r2,zero,r3
    794c:	3884703a 	and	r2,r7,r2
    7950:	1204703a 	and	r2,r2,r8
    7954:	19bff626 	beq	r3,r6,7930 <__alt_data_end+0xf8007930>
    7958:	20800003 	ldbu	r2,0(r4)
    795c:	10c03fcc 	andi	r3,r2,255
    7960:	18c0201c 	xori	r3,r3,128
    7964:	18ffe004 	addi	r3,r3,-128
    7968:	18000c26 	beq	r3,zero,799c <strcmp+0xac>
    796c:	29800007 	ldb	r6,0(r5)
    7970:	19800326 	beq	r3,r6,7980 <strcmp+0x90>
    7974:	00001306 	br	79c4 <strcmp+0xd4>
    7978:	29800007 	ldb	r6,0(r5)
    797c:	11800b1e 	bne	r2,r6,79ac <strcmp+0xbc>
    7980:	21000044 	addi	r4,r4,1
    7984:	20c00003 	ldbu	r3,0(r4)
    7988:	29400044 	addi	r5,r5,1
    798c:	18803fcc 	andi	r2,r3,255
    7990:	1080201c 	xori	r2,r2,128
    7994:	10bfe004 	addi	r2,r2,-128
    7998:	103ff71e 	bne	r2,zero,7978 <__alt_data_end+0xf8007978>
    799c:	0007883a 	mov	r3,zero
    79a0:	28800003 	ldbu	r2,0(r5)
    79a4:	1885c83a 	sub	r2,r3,r2
    79a8:	f800283a 	ret
    79ac:	28800003 	ldbu	r2,0(r5)
    79b0:	18c03fcc 	andi	r3,r3,255
    79b4:	1885c83a 	sub	r2,r3,r2
    79b8:	f800283a 	ret
    79bc:	0005883a 	mov	r2,zero
    79c0:	f800283a 	ret
    79c4:	10c03fcc 	andi	r3,r2,255
    79c8:	003ff506 	br	79a0 <__alt_data_end+0xf80079a0>

000079cc <__sprint_r.part.0>:
    79cc:	28801917 	ldw	r2,100(r5)
    79d0:	defff604 	addi	sp,sp,-40
    79d4:	dd400515 	stw	r21,20(sp)
    79d8:	dfc00915 	stw	ra,36(sp)
    79dc:	df000815 	stw	fp,32(sp)
    79e0:	ddc00715 	stw	r23,28(sp)
    79e4:	dd800615 	stw	r22,24(sp)
    79e8:	dd000415 	stw	r20,16(sp)
    79ec:	dcc00315 	stw	r19,12(sp)
    79f0:	dc800215 	stw	r18,8(sp)
    79f4:	dc400115 	stw	r17,4(sp)
    79f8:	dc000015 	stw	r16,0(sp)
    79fc:	1088000c 	andi	r2,r2,8192
    7a00:	302b883a 	mov	r21,r6
    7a04:	10002e26 	beq	r2,zero,7ac0 <__sprint_r.part.0+0xf4>
    7a08:	30800217 	ldw	r2,8(r6)
    7a0c:	35800017 	ldw	r22,0(r6)
    7a10:	10002926 	beq	r2,zero,7ab8 <__sprint_r.part.0+0xec>
    7a14:	2827883a 	mov	r19,r5
    7a18:	2029883a 	mov	r20,r4
    7a1c:	b5c00104 	addi	r23,r22,4
    7a20:	04bfffc4 	movi	r18,-1
    7a24:	bc400017 	ldw	r17,0(r23)
    7a28:	b4000017 	ldw	r16,0(r22)
    7a2c:	0039883a 	mov	fp,zero
    7a30:	8822d0ba 	srli	r17,r17,2
    7a34:	8800031e 	bne	r17,zero,7a44 <__sprint_r.part.0+0x78>
    7a38:	00001806 	br	7a9c <__sprint_r.part.0+0xd0>
    7a3c:	84000104 	addi	r16,r16,4
    7a40:	8f001526 	beq	r17,fp,7a98 <__sprint_r.part.0+0xcc>
    7a44:	81400017 	ldw	r5,0(r16)
    7a48:	980d883a 	mov	r6,r19
    7a4c:	a009883a 	mov	r4,r20
    7a50:	00093f40 	call	93f4 <_fputwc_r>
    7a54:	e7000044 	addi	fp,fp,1
    7a58:	14bff81e 	bne	r2,r18,7a3c <__alt_data_end+0xf8007a3c>
    7a5c:	9005883a 	mov	r2,r18
    7a60:	a8000215 	stw	zero,8(r21)
    7a64:	a8000115 	stw	zero,4(r21)
    7a68:	dfc00917 	ldw	ra,36(sp)
    7a6c:	df000817 	ldw	fp,32(sp)
    7a70:	ddc00717 	ldw	r23,28(sp)
    7a74:	dd800617 	ldw	r22,24(sp)
    7a78:	dd400517 	ldw	r21,20(sp)
    7a7c:	dd000417 	ldw	r20,16(sp)
    7a80:	dcc00317 	ldw	r19,12(sp)
    7a84:	dc800217 	ldw	r18,8(sp)
    7a88:	dc400117 	ldw	r17,4(sp)
    7a8c:	dc000017 	ldw	r16,0(sp)
    7a90:	dec00a04 	addi	sp,sp,40
    7a94:	f800283a 	ret
    7a98:	a8800217 	ldw	r2,8(r21)
    7a9c:	8c63883a 	add	r17,r17,r17
    7aa0:	8c63883a 	add	r17,r17,r17
    7aa4:	1445c83a 	sub	r2,r2,r17
    7aa8:	a8800215 	stw	r2,8(r21)
    7aac:	b5800204 	addi	r22,r22,8
    7ab0:	bdc00204 	addi	r23,r23,8
    7ab4:	103fdb1e 	bne	r2,zero,7a24 <__alt_data_end+0xf8007a24>
    7ab8:	0005883a 	mov	r2,zero
    7abc:	003fe806 	br	7a60 <__alt_data_end+0xf8007a60>
    7ac0:	0004bf40 	call	4bf4 <__sfvwrite_r>
    7ac4:	003fe606 	br	7a60 <__alt_data_end+0xf8007a60>

00007ac8 <__sprint_r>:
    7ac8:	30c00217 	ldw	r3,8(r6)
    7acc:	18000126 	beq	r3,zero,7ad4 <__sprint_r+0xc>
    7ad0:	00079cc1 	jmpi	79cc <__sprint_r.part.0>
    7ad4:	30000115 	stw	zero,4(r6)
    7ad8:	0005883a 	mov	r2,zero
    7adc:	f800283a 	ret

00007ae0 <___vfiprintf_internal_r>:
    7ae0:	deffc904 	addi	sp,sp,-220
    7ae4:	df003515 	stw	fp,212(sp)
    7ae8:	dd003115 	stw	r20,196(sp)
    7aec:	dfc03615 	stw	ra,216(sp)
    7af0:	ddc03415 	stw	r23,208(sp)
    7af4:	dd803315 	stw	r22,204(sp)
    7af8:	dd403215 	stw	r21,200(sp)
    7afc:	dcc03015 	stw	r19,192(sp)
    7b00:	dc802f15 	stw	r18,188(sp)
    7b04:	dc402e15 	stw	r17,184(sp)
    7b08:	dc002d15 	stw	r16,180(sp)
    7b0c:	d9002015 	stw	r4,128(sp)
    7b10:	d9c02215 	stw	r7,136(sp)
    7b14:	2829883a 	mov	r20,r5
    7b18:	3039883a 	mov	fp,r6
    7b1c:	20000226 	beq	r4,zero,7b28 <___vfiprintf_internal_r+0x48>
    7b20:	20800e17 	ldw	r2,56(r4)
    7b24:	1000cf26 	beq	r2,zero,7e64 <___vfiprintf_internal_r+0x384>
    7b28:	a080030b 	ldhu	r2,12(r20)
    7b2c:	10c8000c 	andi	r3,r2,8192
    7b30:	1800061e 	bne	r3,zero,7b4c <___vfiprintf_internal_r+0x6c>
    7b34:	a1001917 	ldw	r4,100(r20)
    7b38:	00f7ffc4 	movi	r3,-8193
    7b3c:	10880014 	ori	r2,r2,8192
    7b40:	20c6703a 	and	r3,r4,r3
    7b44:	a080030d 	sth	r2,12(r20)
    7b48:	a0c01915 	stw	r3,100(r20)
    7b4c:	10c0020c 	andi	r3,r2,8
    7b50:	1800a926 	beq	r3,zero,7df8 <___vfiprintf_internal_r+0x318>
    7b54:	a0c00417 	ldw	r3,16(r20)
    7b58:	1800a726 	beq	r3,zero,7df8 <___vfiprintf_internal_r+0x318>
    7b5c:	1080068c 	andi	r2,r2,26
    7b60:	00c00284 	movi	r3,10
    7b64:	10c0ac26 	beq	r2,r3,7e18 <___vfiprintf_internal_r+0x338>
    7b68:	da801a04 	addi	r10,sp,104
    7b6c:	da801e15 	stw	r10,120(sp)
    7b70:	d8801e17 	ldw	r2,120(sp)
    7b74:	da8019c4 	addi	r10,sp,103
    7b78:	05800074 	movhi	r22,1
    7b7c:	05c00074 	movhi	r23,1
    7b80:	da801f15 	stw	r10,124(sp)
    7b84:	1295c83a 	sub	r10,r2,r10
    7b88:	b5be5e04 	addi	r22,r22,-1672
    7b8c:	bdfe5a04 	addi	r23,r23,-1688
    7b90:	dec01a15 	stw	sp,104(sp)
    7b94:	d8001c15 	stw	zero,112(sp)
    7b98:	d8001b15 	stw	zero,108(sp)
    7b9c:	d8002615 	stw	zero,152(sp)
    7ba0:	d8002315 	stw	zero,140(sp)
    7ba4:	da802715 	stw	r10,156(sp)
    7ba8:	d811883a 	mov	r8,sp
    7bac:	dd002115 	stw	r20,132(sp)
    7bb0:	e021883a 	mov	r16,fp
    7bb4:	80800007 	ldb	r2,0(r16)
    7bb8:	1003ea26 	beq	r2,zero,8b64 <___vfiprintf_internal_r+0x1084>
    7bbc:	00c00944 	movi	r3,37
    7bc0:	8025883a 	mov	r18,r16
    7bc4:	10c0021e 	bne	r2,r3,7bd0 <___vfiprintf_internal_r+0xf0>
    7bc8:	00001606 	br	7c24 <___vfiprintf_internal_r+0x144>
    7bcc:	10c00326 	beq	r2,r3,7bdc <___vfiprintf_internal_r+0xfc>
    7bd0:	94800044 	addi	r18,r18,1
    7bd4:	90800007 	ldb	r2,0(r18)
    7bd8:	103ffc1e 	bne	r2,zero,7bcc <__alt_data_end+0xf8007bcc>
    7bdc:	9423c83a 	sub	r17,r18,r16
    7be0:	88001026 	beq	r17,zero,7c24 <___vfiprintf_internal_r+0x144>
    7be4:	d8c01c17 	ldw	r3,112(sp)
    7be8:	d8801b17 	ldw	r2,108(sp)
    7bec:	44000015 	stw	r16,0(r8)
    7bf0:	88c7883a 	add	r3,r17,r3
    7bf4:	10800044 	addi	r2,r2,1
    7bf8:	44400115 	stw	r17,4(r8)
    7bfc:	d8c01c15 	stw	r3,112(sp)
    7c00:	d8801b15 	stw	r2,108(sp)
    7c04:	010001c4 	movi	r4,7
    7c08:	2080760e 	bge	r4,r2,7de4 <___vfiprintf_internal_r+0x304>
    7c0c:	1803821e 	bne	r3,zero,8a18 <___vfiprintf_internal_r+0xf38>
    7c10:	da802317 	ldw	r10,140(sp)
    7c14:	d8001b15 	stw	zero,108(sp)
    7c18:	d811883a 	mov	r8,sp
    7c1c:	5455883a 	add	r10,r10,r17
    7c20:	da802315 	stw	r10,140(sp)
    7c24:	90800007 	ldb	r2,0(r18)
    7c28:	10044626 	beq	r2,zero,8d44 <___vfiprintf_internal_r+0x1264>
    7c2c:	90c00047 	ldb	r3,1(r18)
    7c30:	94000044 	addi	r16,r18,1
    7c34:	d8001d85 	stb	zero,118(sp)
    7c38:	0009883a 	mov	r4,zero
    7c3c:	000f883a 	mov	r7,zero
    7c40:	027fffc4 	movi	r9,-1
    7c44:	0023883a 	mov	r17,zero
    7c48:	0029883a 	mov	r20,zero
    7c4c:	01401604 	movi	r5,88
    7c50:	01800244 	movi	r6,9
    7c54:	03400a84 	movi	r13,42
    7c58:	03001b04 	movi	r12,108
    7c5c:	84000044 	addi	r16,r16,1
    7c60:	18bff804 	addi	r2,r3,-32
    7c64:	28827336 	bltu	r5,r2,8634 <___vfiprintf_internal_r+0xb54>
    7c68:	100490ba 	slli	r2,r2,2
    7c6c:	02800034 	movhi	r10,0
    7c70:	529f2004 	addi	r10,r10,31872
    7c74:	1285883a 	add	r2,r2,r10
    7c78:	10800017 	ldw	r2,0(r2)
    7c7c:	1000683a 	jmp	r2
    7c80:	00008368 	cmpgeui	zero,zero,525
    7c84:	00008634 	movhi	zero,536
    7c88:	00008634 	movhi	zero,536
    7c8c:	00008388 	cmpgei	zero,zero,526
    7c90:	00008634 	movhi	zero,536
    7c94:	00008634 	movhi	zero,536
    7c98:	00008634 	movhi	zero,536
    7c9c:	00008634 	movhi	zero,536
    7ca0:	00008634 	movhi	zero,536
    7ca4:	00008634 	movhi	zero,536
    7ca8:	00008570 	cmpltui	zero,zero,533
    7cac:	0000858c 	andi	zero,zero,534
    7cb0:	00008634 	movhi	zero,536
    7cb4:	00007e74 	movhi	zero,505
    7cb8:	0000859c 	xori	zero,zero,534
    7cbc:	00008634 	movhi	zero,536
    7cc0:	00008394 	movui	zero,526
    7cc4:	000083a0 	cmpeqi	zero,zero,526
    7cc8:	000083a0 	cmpeqi	zero,zero,526
    7ccc:	000083a0 	cmpeqi	zero,zero,526
    7cd0:	000083a0 	cmpeqi	zero,zero,526
    7cd4:	000083a0 	cmpeqi	zero,zero,526
    7cd8:	000083a0 	cmpeqi	zero,zero,526
    7cdc:	000083a0 	cmpeqi	zero,zero,526
    7ce0:	000083a0 	cmpeqi	zero,zero,526
    7ce4:	000083a0 	cmpeqi	zero,zero,526
    7ce8:	00008634 	movhi	zero,536
    7cec:	00008634 	movhi	zero,536
    7cf0:	00008634 	movhi	zero,536
    7cf4:	00008634 	movhi	zero,536
    7cf8:	00008634 	movhi	zero,536
    7cfc:	00008634 	movhi	zero,536
    7d00:	00008634 	movhi	zero,536
    7d04:	00008634 	movhi	zero,536
    7d08:	00008634 	movhi	zero,536
    7d0c:	00008634 	movhi	zero,536
    7d10:	000083cc 	andi	zero,zero,527
    7d14:	00008634 	movhi	zero,536
    7d18:	00008634 	movhi	zero,536
    7d1c:	00008634 	movhi	zero,536
    7d20:	00008634 	movhi	zero,536
    7d24:	00008634 	movhi	zero,536
    7d28:	00008634 	movhi	zero,536
    7d2c:	00008634 	movhi	zero,536
    7d30:	00008634 	movhi	zero,536
    7d34:	00008634 	movhi	zero,536
    7d38:	00008634 	movhi	zero,536
    7d3c:	00008404 	movi	zero,528
    7d40:	00008634 	movhi	zero,536
    7d44:	00008634 	movhi	zero,536
    7d48:	00008634 	movhi	zero,536
    7d4c:	00008634 	movhi	zero,536
    7d50:	00008634 	movhi	zero,536
    7d54:	0000845c 	xori	zero,zero,529
    7d58:	00008634 	movhi	zero,536
    7d5c:	00008634 	movhi	zero,536
    7d60:	000084cc 	andi	zero,zero,531
    7d64:	00008634 	movhi	zero,536
    7d68:	00008634 	movhi	zero,536
    7d6c:	00008634 	movhi	zero,536
    7d70:	00008634 	movhi	zero,536
    7d74:	00008634 	movhi	zero,536
    7d78:	00008634 	movhi	zero,536
    7d7c:	00008634 	movhi	zero,536
    7d80:	00008634 	movhi	zero,536
    7d84:	00008634 	movhi	zero,536
    7d88:	00008634 	movhi	zero,536
    7d8c:	00008278 	rdprs	zero,zero,521
    7d90:	000082a4 	muli	zero,zero,522
    7d94:	00008634 	movhi	zero,536
    7d98:	00008634 	movhi	zero,536
    7d9c:	00008634 	movhi	zero,536
    7da0:	000085dc 	xori	zero,zero,535
    7da4:	000082a4 	muli	zero,zero,522
    7da8:	00008634 	movhi	zero,536
    7dac:	00008634 	movhi	zero,536
    7db0:	00008138 	rdprs	zero,zero,516
    7db4:	00008634 	movhi	zero,536
    7db8:	00008148 	cmpgei	zero,zero,517
    7dbc:	00008184 	movi	zero,518
    7dc0:	00007e80 	call	7e8 <___vfprintf_internal_r+0x31c>
    7dc4:	0000812c 	andhi	zero,zero,516
    7dc8:	00008634 	movhi	zero,536
    7dcc:	00008508 	cmpgei	zero,zero,532
    7dd0:	00008634 	movhi	zero,536
    7dd4:	00008560 	cmpeqi	zero,zero,533
    7dd8:	00008634 	movhi	zero,536
    7ddc:	00008634 	movhi	zero,536
    7de0:	00008224 	muli	zero,zero,520
    7de4:	42000204 	addi	r8,r8,8
    7de8:	da802317 	ldw	r10,140(sp)
    7dec:	5455883a 	add	r10,r10,r17
    7df0:	da802315 	stw	r10,140(sp)
    7df4:	003f8b06 	br	7c24 <__alt_data_end+0xf8007c24>
    7df8:	d9002017 	ldw	r4,128(sp)
    7dfc:	a00b883a 	mov	r5,r20
    7e00:	000279c0 	call	279c <__swsetup_r>
    7e04:	1003b11e 	bne	r2,zero,8ccc <___vfiprintf_internal_r+0x11ec>
    7e08:	a080030b 	ldhu	r2,12(r20)
    7e0c:	00c00284 	movi	r3,10
    7e10:	1080068c 	andi	r2,r2,26
    7e14:	10ff541e 	bne	r2,r3,7b68 <__alt_data_end+0xf8007b68>
    7e18:	a080038f 	ldh	r2,14(r20)
    7e1c:	103f5216 	blt	r2,zero,7b68 <__alt_data_end+0xf8007b68>
    7e20:	d9c02217 	ldw	r7,136(sp)
    7e24:	d9002017 	ldw	r4,128(sp)
    7e28:	e00d883a 	mov	r6,fp
    7e2c:	a00b883a 	mov	r5,r20
    7e30:	0008f580 	call	8f58 <__sbprintf>
    7e34:	dfc03617 	ldw	ra,216(sp)
    7e38:	df003517 	ldw	fp,212(sp)
    7e3c:	ddc03417 	ldw	r23,208(sp)
    7e40:	dd803317 	ldw	r22,204(sp)
    7e44:	dd403217 	ldw	r21,200(sp)
    7e48:	dd003117 	ldw	r20,196(sp)
    7e4c:	dcc03017 	ldw	r19,192(sp)
    7e50:	dc802f17 	ldw	r18,188(sp)
    7e54:	dc402e17 	ldw	r17,184(sp)
    7e58:	dc002d17 	ldw	r16,180(sp)
    7e5c:	dec03704 	addi	sp,sp,220
    7e60:	f800283a 	ret
    7e64:	00047700 	call	4770 <__sinit>
    7e68:	003f2f06 	br	7b28 <__alt_data_end+0xf8007b28>
    7e6c:	0463c83a 	sub	r17,zero,r17
    7e70:	d8802215 	stw	r2,136(sp)
    7e74:	a5000114 	ori	r20,r20,4
    7e78:	80c00007 	ldb	r3,0(r16)
    7e7c:	003f7706 	br	7c5c <__alt_data_end+0xf8007c5c>
    7e80:	00800c04 	movi	r2,48
    7e84:	da802217 	ldw	r10,136(sp)
    7e88:	d8801d05 	stb	r2,116(sp)
    7e8c:	00801e04 	movi	r2,120
    7e90:	d8801d45 	stb	r2,117(sp)
    7e94:	d8001d85 	stb	zero,118(sp)
    7e98:	50c00104 	addi	r3,r10,4
    7e9c:	54800017 	ldw	r18,0(r10)
    7ea0:	0027883a 	mov	r19,zero
    7ea4:	a0800094 	ori	r2,r20,2
    7ea8:	48030b16 	blt	r9,zero,8ad8 <___vfiprintf_internal_r+0xff8>
    7eac:	00bfdfc4 	movi	r2,-129
    7eb0:	a096703a 	and	r11,r20,r2
    7eb4:	d8c02215 	stw	r3,136(sp)
    7eb8:	5d000094 	ori	r20,r11,2
    7ebc:	90032b1e 	bne	r18,zero,8b6c <___vfiprintf_internal_r+0x108c>
    7ec0:	00800074 	movhi	r2,1
    7ec4:	10bdf904 	addi	r2,r2,-2076
    7ec8:	d8802615 	stw	r2,152(sp)
    7ecc:	0039883a 	mov	fp,zero
    7ed0:	48017b1e 	bne	r9,zero,84c0 <___vfiprintf_internal_r+0x9e0>
    7ed4:	0013883a 	mov	r9,zero
    7ed8:	0027883a 	mov	r19,zero
    7edc:	dd401a04 	addi	r21,sp,104
    7ee0:	4825883a 	mov	r18,r9
    7ee4:	4cc0010e 	bge	r9,r19,7eec <___vfiprintf_internal_r+0x40c>
    7ee8:	9825883a 	mov	r18,r19
    7eec:	e7003fcc 	andi	fp,fp,255
    7ef0:	e700201c 	xori	fp,fp,128
    7ef4:	e73fe004 	addi	fp,fp,-128
    7ef8:	e0000126 	beq	fp,zero,7f00 <___vfiprintf_internal_r+0x420>
    7efc:	94800044 	addi	r18,r18,1
    7f00:	a380008c 	andi	r14,r20,2
    7f04:	70000126 	beq	r14,zero,7f0c <___vfiprintf_internal_r+0x42c>
    7f08:	94800084 	addi	r18,r18,2
    7f0c:	a700210c 	andi	fp,r20,132
    7f10:	e001df1e 	bne	fp,zero,8690 <___vfiprintf_internal_r+0xbb0>
    7f14:	8c87c83a 	sub	r3,r17,r18
    7f18:	00c1dd0e 	bge	zero,r3,8690 <___vfiprintf_internal_r+0xbb0>
    7f1c:	01c00404 	movi	r7,16
    7f20:	d8801c17 	ldw	r2,112(sp)
    7f24:	38c3ad0e 	bge	r7,r3,8ddc <___vfiprintf_internal_r+0x12fc>
    7f28:	02800074 	movhi	r10,1
    7f2c:	52be5e04 	addi	r10,r10,-1672
    7f30:	dc002915 	stw	r16,164(sp)
    7f34:	d9801b17 	ldw	r6,108(sp)
    7f38:	da802415 	stw	r10,144(sp)
    7f3c:	03c001c4 	movi	r15,7
    7f40:	da402515 	stw	r9,148(sp)
    7f44:	db802815 	stw	r14,160(sp)
    7f48:	1821883a 	mov	r16,r3
    7f4c:	00000506 	br	7f64 <___vfiprintf_internal_r+0x484>
    7f50:	31400084 	addi	r5,r6,2
    7f54:	42000204 	addi	r8,r8,8
    7f58:	200d883a 	mov	r6,r4
    7f5c:	843ffc04 	addi	r16,r16,-16
    7f60:	3c000d0e 	bge	r7,r16,7f98 <___vfiprintf_internal_r+0x4b8>
    7f64:	10800404 	addi	r2,r2,16
    7f68:	31000044 	addi	r4,r6,1
    7f6c:	45800015 	stw	r22,0(r8)
    7f70:	41c00115 	stw	r7,4(r8)
    7f74:	d8801c15 	stw	r2,112(sp)
    7f78:	d9001b15 	stw	r4,108(sp)
    7f7c:	793ff40e 	bge	r15,r4,7f50 <__alt_data_end+0xf8007f50>
    7f80:	1001b51e 	bne	r2,zero,8658 <___vfiprintf_internal_r+0xb78>
    7f84:	843ffc04 	addi	r16,r16,-16
    7f88:	000d883a 	mov	r6,zero
    7f8c:	01400044 	movi	r5,1
    7f90:	d811883a 	mov	r8,sp
    7f94:	3c3ff316 	blt	r7,r16,7f64 <__alt_data_end+0xf8007f64>
    7f98:	8007883a 	mov	r3,r16
    7f9c:	da402517 	ldw	r9,148(sp)
    7fa0:	db802817 	ldw	r14,160(sp)
    7fa4:	dc002917 	ldw	r16,164(sp)
    7fa8:	da802417 	ldw	r10,144(sp)
    7fac:	1885883a 	add	r2,r3,r2
    7fb0:	40c00115 	stw	r3,4(r8)
    7fb4:	42800015 	stw	r10,0(r8)
    7fb8:	d8801c15 	stw	r2,112(sp)
    7fbc:	d9401b15 	stw	r5,108(sp)
    7fc0:	00c001c4 	movi	r3,7
    7fc4:	19426016 	blt	r3,r5,8948 <___vfiprintf_internal_r+0xe68>
    7fc8:	d8c01d87 	ldb	r3,118(sp)
    7fcc:	42000204 	addi	r8,r8,8
    7fd0:	29000044 	addi	r4,r5,1
    7fd4:	1801b31e 	bne	r3,zero,86a4 <___vfiprintf_internal_r+0xbc4>
    7fd8:	7001c026 	beq	r14,zero,86dc <___vfiprintf_internal_r+0xbfc>
    7fdc:	d8c01d04 	addi	r3,sp,116
    7fe0:	10800084 	addi	r2,r2,2
    7fe4:	40c00015 	stw	r3,0(r8)
    7fe8:	00c00084 	movi	r3,2
    7fec:	40c00115 	stw	r3,4(r8)
    7ff0:	d8801c15 	stw	r2,112(sp)
    7ff4:	d9001b15 	stw	r4,108(sp)
    7ff8:	00c001c4 	movi	r3,7
    7ffc:	1902650e 	bge	r3,r4,8994 <___vfiprintf_internal_r+0xeb4>
    8000:	10029a1e 	bne	r2,zero,8a6c <___vfiprintf_internal_r+0xf8c>
    8004:	00c02004 	movi	r3,128
    8008:	01000044 	movi	r4,1
    800c:	000b883a 	mov	r5,zero
    8010:	d811883a 	mov	r8,sp
    8014:	e0c1b31e 	bne	fp,r3,86e4 <___vfiprintf_internal_r+0xc04>
    8018:	8cb9c83a 	sub	fp,r17,r18
    801c:	0701b10e 	bge	zero,fp,86e4 <___vfiprintf_internal_r+0xc04>
    8020:	01c00404 	movi	r7,16
    8024:	3f03890e 	bge	r7,fp,8e4c <___vfiprintf_internal_r+0x136c>
    8028:	00c00074 	movhi	r3,1
    802c:	18fe5a04 	addi	r3,r3,-1688
    8030:	d8c02415 	stw	r3,144(sp)
    8034:	8007883a 	mov	r3,r16
    8038:	034001c4 	movi	r13,7
    803c:	e021883a 	mov	r16,fp
    8040:	da402515 	stw	r9,148(sp)
    8044:	1839883a 	mov	fp,r3
    8048:	00000506 	br	8060 <___vfiprintf_internal_r+0x580>
    804c:	29800084 	addi	r6,r5,2
    8050:	42000204 	addi	r8,r8,8
    8054:	180b883a 	mov	r5,r3
    8058:	843ffc04 	addi	r16,r16,-16
    805c:	3c000d0e 	bge	r7,r16,8094 <___vfiprintf_internal_r+0x5b4>
    8060:	10800404 	addi	r2,r2,16
    8064:	28c00044 	addi	r3,r5,1
    8068:	45c00015 	stw	r23,0(r8)
    806c:	41c00115 	stw	r7,4(r8)
    8070:	d8801c15 	stw	r2,112(sp)
    8074:	d8c01b15 	stw	r3,108(sp)
    8078:	68fff40e 	bge	r13,r3,804c <__alt_data_end+0xf800804c>
    807c:	1002241e 	bne	r2,zero,8910 <___vfiprintf_internal_r+0xe30>
    8080:	843ffc04 	addi	r16,r16,-16
    8084:	01800044 	movi	r6,1
    8088:	000b883a 	mov	r5,zero
    808c:	d811883a 	mov	r8,sp
    8090:	3c3ff316 	blt	r7,r16,8060 <__alt_data_end+0xf8008060>
    8094:	da402517 	ldw	r9,148(sp)
    8098:	e007883a 	mov	r3,fp
    809c:	8039883a 	mov	fp,r16
    80a0:	1821883a 	mov	r16,r3
    80a4:	d8c02417 	ldw	r3,144(sp)
    80a8:	1705883a 	add	r2,r2,fp
    80ac:	47000115 	stw	fp,4(r8)
    80b0:	40c00015 	stw	r3,0(r8)
    80b4:	d8801c15 	stw	r2,112(sp)
    80b8:	d9801b15 	stw	r6,108(sp)
    80bc:	00c001c4 	movi	r3,7
    80c0:	19827616 	blt	r3,r6,8a9c <___vfiprintf_internal_r+0xfbc>
    80c4:	4cf9c83a 	sub	fp,r9,r19
    80c8:	42000204 	addi	r8,r8,8
    80cc:	31000044 	addi	r4,r6,1
    80d0:	300b883a 	mov	r5,r6
    80d4:	07018516 	blt	zero,fp,86ec <___vfiprintf_internal_r+0xc0c>
    80d8:	9885883a 	add	r2,r19,r2
    80dc:	45400015 	stw	r21,0(r8)
    80e0:	44c00115 	stw	r19,4(r8)
    80e4:	d8801c15 	stw	r2,112(sp)
    80e8:	d9001b15 	stw	r4,108(sp)
    80ec:	00c001c4 	movi	r3,7
    80f0:	1901dd0e 	bge	r3,r4,8868 <___vfiprintf_internal_r+0xd88>
    80f4:	1002401e 	bne	r2,zero,89f8 <___vfiprintf_internal_r+0xf18>
    80f8:	d8001b15 	stw	zero,108(sp)
    80fc:	a2c0010c 	andi	r11,r20,4
    8100:	58000226 	beq	r11,zero,810c <___vfiprintf_internal_r+0x62c>
    8104:	8ca7c83a 	sub	r19,r17,r18
    8108:	04c2f216 	blt	zero,r19,8cd4 <___vfiprintf_internal_r+0x11f4>
    810c:	8c80010e 	bge	r17,r18,8114 <___vfiprintf_internal_r+0x634>
    8110:	9023883a 	mov	r17,r18
    8114:	da802317 	ldw	r10,140(sp)
    8118:	5455883a 	add	r10,r10,r17
    811c:	da802315 	stw	r10,140(sp)
    8120:	d8001b15 	stw	zero,108(sp)
    8124:	d811883a 	mov	r8,sp
    8128:	003ea206 	br	7bb4 <__alt_data_end+0xf8007bb4>
    812c:	a5000814 	ori	r20,r20,32
    8130:	80c00007 	ldb	r3,0(r16)
    8134:	003ec906 	br	7c5c <__alt_data_end+0xf8007c5c>
    8138:	80c00007 	ldb	r3,0(r16)
    813c:	1b030926 	beq	r3,r12,8d64 <___vfiprintf_internal_r+0x1284>
    8140:	a5000414 	ori	r20,r20,16
    8144:	003ec506 	br	7c5c <__alt_data_end+0xf8007c5c>
    8148:	21003fcc 	andi	r4,r4,255
    814c:	20035e1e 	bne	r4,zero,8ec8 <___vfiprintf_internal_r+0x13e8>
    8150:	a080080c 	andi	r2,r20,32
    8154:	1002a526 	beq	r2,zero,8bec <___vfiprintf_internal_r+0x110c>
    8158:	da802217 	ldw	r10,136(sp)
    815c:	50800017 	ldw	r2,0(r10)
    8160:	da802317 	ldw	r10,140(sp)
    8164:	5007d7fa 	srai	r3,r10,31
    8168:	da802217 	ldw	r10,136(sp)
    816c:	10c00115 	stw	r3,4(r2)
    8170:	52800104 	addi	r10,r10,4
    8174:	da802215 	stw	r10,136(sp)
    8178:	da802317 	ldw	r10,140(sp)
    817c:	12800015 	stw	r10,0(r2)
    8180:	003e8c06 	br	7bb4 <__alt_data_end+0xf8007bb4>
    8184:	21003fcc 	andi	r4,r4,255
    8188:	2003511e 	bne	r4,zero,8ed0 <___vfiprintf_internal_r+0x13f0>
    818c:	a080080c 	andi	r2,r20,32
    8190:	1000a126 	beq	r2,zero,8418 <___vfiprintf_internal_r+0x938>
    8194:	da802217 	ldw	r10,136(sp)
    8198:	d8001d85 	stb	zero,118(sp)
    819c:	50800204 	addi	r2,r10,8
    81a0:	54800017 	ldw	r18,0(r10)
    81a4:	54c00117 	ldw	r19,4(r10)
    81a8:	4802b416 	blt	r9,zero,8c7c <___vfiprintf_internal_r+0x119c>
    81ac:	013fdfc4 	movi	r4,-129
    81b0:	94c6b03a 	or	r3,r18,r19
    81b4:	d8802215 	stw	r2,136(sp)
    81b8:	a128703a 	and	r20,r20,r4
    81bc:	1800a226 	beq	r3,zero,8448 <___vfiprintf_internal_r+0x968>
    81c0:	0039883a 	mov	fp,zero
    81c4:	dd401a04 	addi	r21,sp,104
    81c8:	9006d0fa 	srli	r3,r18,3
    81cc:	9808977a 	slli	r4,r19,29
    81d0:	9826d0fa 	srli	r19,r19,3
    81d4:	948001cc 	andi	r18,r18,7
    81d8:	90800c04 	addi	r2,r18,48
    81dc:	ad7fffc4 	addi	r21,r21,-1
    81e0:	20e4b03a 	or	r18,r4,r3
    81e4:	a8800005 	stb	r2,0(r21)
    81e8:	94c6b03a 	or	r3,r18,r19
    81ec:	183ff61e 	bne	r3,zero,81c8 <__alt_data_end+0xf80081c8>
    81f0:	a0c0004c 	andi	r3,r20,1
    81f4:	18005926 	beq	r3,zero,835c <___vfiprintf_internal_r+0x87c>
    81f8:	10803fcc 	andi	r2,r2,255
    81fc:	1080201c 	xori	r2,r2,128
    8200:	10bfe004 	addi	r2,r2,-128
    8204:	00c00c04 	movi	r3,48
    8208:	10c05426 	beq	r2,r3,835c <___vfiprintf_internal_r+0x87c>
    820c:	da801e17 	ldw	r10,120(sp)
    8210:	a8bfffc4 	addi	r2,r21,-1
    8214:	a8ffffc5 	stb	r3,-1(r21)
    8218:	50a7c83a 	sub	r19,r10,r2
    821c:	102b883a 	mov	r21,r2
    8220:	003f2f06 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8224:	21003fcc 	andi	r4,r4,255
    8228:	2003421e 	bne	r4,zero,8f34 <___vfiprintf_internal_r+0x1454>
    822c:	00800074 	movhi	r2,1
    8230:	10bdf904 	addi	r2,r2,-2076
    8234:	d8802615 	stw	r2,152(sp)
    8238:	a080080c 	andi	r2,r20,32
    823c:	1000aa26 	beq	r2,zero,84e8 <___vfiprintf_internal_r+0xa08>
    8240:	da802217 	ldw	r10,136(sp)
    8244:	54800017 	ldw	r18,0(r10)
    8248:	54c00117 	ldw	r19,4(r10)
    824c:	52800204 	addi	r10,r10,8
    8250:	da802215 	stw	r10,136(sp)
    8254:	a080004c 	andi	r2,r20,1
    8258:	1001d226 	beq	r2,zero,89a4 <___vfiprintf_internal_r+0xec4>
    825c:	94c4b03a 	or	r2,r18,r19
    8260:	1002351e 	bne	r2,zero,8b38 <___vfiprintf_internal_r+0x1058>
    8264:	d8001d85 	stb	zero,118(sp)
    8268:	48022216 	blt	r9,zero,8af4 <___vfiprintf_internal_r+0x1014>
    826c:	00bfdfc4 	movi	r2,-129
    8270:	a0a8703a 	and	r20,r20,r2
    8274:	003f1506 	br	7ecc <__alt_data_end+0xf8007ecc>
    8278:	da802217 	ldw	r10,136(sp)
    827c:	04800044 	movi	r18,1
    8280:	d8001d85 	stb	zero,118(sp)
    8284:	50800017 	ldw	r2,0(r10)
    8288:	52800104 	addi	r10,r10,4
    828c:	da802215 	stw	r10,136(sp)
    8290:	d8801005 	stb	r2,64(sp)
    8294:	9027883a 	mov	r19,r18
    8298:	dd401004 	addi	r21,sp,64
    829c:	0013883a 	mov	r9,zero
    82a0:	003f1706 	br	7f00 <__alt_data_end+0xf8007f00>
    82a4:	21003fcc 	andi	r4,r4,255
    82a8:	2003201e 	bne	r4,zero,8f2c <___vfiprintf_internal_r+0x144c>
    82ac:	a080080c 	andi	r2,r20,32
    82b0:	10004b26 	beq	r2,zero,83e0 <___vfiprintf_internal_r+0x900>
    82b4:	da802217 	ldw	r10,136(sp)
    82b8:	50800117 	ldw	r2,4(r10)
    82bc:	54800017 	ldw	r18,0(r10)
    82c0:	52800204 	addi	r10,r10,8
    82c4:	da802215 	stw	r10,136(sp)
    82c8:	1027883a 	mov	r19,r2
    82cc:	10022c16 	blt	r2,zero,8b80 <___vfiprintf_internal_r+0x10a0>
    82d0:	df001d83 	ldbu	fp,118(sp)
    82d4:	48007216 	blt	r9,zero,84a0 <___vfiprintf_internal_r+0x9c0>
    82d8:	00ffdfc4 	movi	r3,-129
    82dc:	94c4b03a 	or	r2,r18,r19
    82e0:	a0e8703a 	and	r20,r20,r3
    82e4:	1000cc26 	beq	r2,zero,8618 <___vfiprintf_internal_r+0xb38>
    82e8:	98021026 	beq	r19,zero,8b2c <___vfiprintf_internal_r+0x104c>
    82ec:	dc402415 	stw	r17,144(sp)
    82f0:	dc002515 	stw	r16,148(sp)
    82f4:	9823883a 	mov	r17,r19
    82f8:	9021883a 	mov	r16,r18
    82fc:	dd401a04 	addi	r21,sp,104
    8300:	4825883a 	mov	r18,r9
    8304:	4027883a 	mov	r19,r8
    8308:	8009883a 	mov	r4,r16
    830c:	880b883a 	mov	r5,r17
    8310:	01800284 	movi	r6,10
    8314:	000f883a 	mov	r7,zero
    8318:	0009ec00 	call	9ec0 <__umoddi3>
    831c:	10800c04 	addi	r2,r2,48
    8320:	ad7fffc4 	addi	r21,r21,-1
    8324:	8009883a 	mov	r4,r16
    8328:	880b883a 	mov	r5,r17
    832c:	a8800005 	stb	r2,0(r21)
    8330:	01800284 	movi	r6,10
    8334:	000f883a 	mov	r7,zero
    8338:	00099480 	call	9948 <__udivdi3>
    833c:	1021883a 	mov	r16,r2
    8340:	10c4b03a 	or	r2,r2,r3
    8344:	1823883a 	mov	r17,r3
    8348:	103fef1e 	bne	r2,zero,8308 <__alt_data_end+0xf8008308>
    834c:	dc402417 	ldw	r17,144(sp)
    8350:	dc002517 	ldw	r16,148(sp)
    8354:	9013883a 	mov	r9,r18
    8358:	9811883a 	mov	r8,r19
    835c:	da801e17 	ldw	r10,120(sp)
    8360:	5567c83a 	sub	r19,r10,r21
    8364:	003ede06 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8368:	38803fcc 	andi	r2,r7,255
    836c:	1080201c 	xori	r2,r2,128
    8370:	10bfe004 	addi	r2,r2,-128
    8374:	1002371e 	bne	r2,zero,8c54 <___vfiprintf_internal_r+0x1174>
    8378:	01000044 	movi	r4,1
    837c:	01c00804 	movi	r7,32
    8380:	80c00007 	ldb	r3,0(r16)
    8384:	003e3506 	br	7c5c <__alt_data_end+0xf8007c5c>
    8388:	a5000054 	ori	r20,r20,1
    838c:	80c00007 	ldb	r3,0(r16)
    8390:	003e3206 	br	7c5c <__alt_data_end+0xf8007c5c>
    8394:	a5002014 	ori	r20,r20,128
    8398:	80c00007 	ldb	r3,0(r16)
    839c:	003e2f06 	br	7c5c <__alt_data_end+0xf8007c5c>
    83a0:	8015883a 	mov	r10,r16
    83a4:	0023883a 	mov	r17,zero
    83a8:	18bff404 	addi	r2,r3,-48
    83ac:	50c00007 	ldb	r3,0(r10)
    83b0:	8c4002a4 	muli	r17,r17,10
    83b4:	84000044 	addi	r16,r16,1
    83b8:	8015883a 	mov	r10,r16
    83bc:	1463883a 	add	r17,r2,r17
    83c0:	18bff404 	addi	r2,r3,-48
    83c4:	30bff92e 	bgeu	r6,r2,83ac <__alt_data_end+0xf80083ac>
    83c8:	003e2506 	br	7c60 <__alt_data_end+0xf8007c60>
    83cc:	21003fcc 	andi	r4,r4,255
    83d0:	2002d41e 	bne	r4,zero,8f24 <___vfiprintf_internal_r+0x1444>
    83d4:	a5000414 	ori	r20,r20,16
    83d8:	a080080c 	andi	r2,r20,32
    83dc:	103fb51e 	bne	r2,zero,82b4 <__alt_data_end+0xf80082b4>
    83e0:	a080040c 	andi	r2,r20,16
    83e4:	1001f826 	beq	r2,zero,8bc8 <___vfiprintf_internal_r+0x10e8>
    83e8:	da802217 	ldw	r10,136(sp)
    83ec:	54800017 	ldw	r18,0(r10)
    83f0:	52800104 	addi	r10,r10,4
    83f4:	da802215 	stw	r10,136(sp)
    83f8:	9027d7fa 	srai	r19,r18,31
    83fc:	9805883a 	mov	r2,r19
    8400:	003fb206 	br	82cc <__alt_data_end+0xf80082cc>
    8404:	21003fcc 	andi	r4,r4,255
    8408:	2002c41e 	bne	r4,zero,8f1c <___vfiprintf_internal_r+0x143c>
    840c:	a5000414 	ori	r20,r20,16
    8410:	a080080c 	andi	r2,r20,32
    8414:	103f5f1e 	bne	r2,zero,8194 <__alt_data_end+0xf8008194>
    8418:	a080040c 	andi	r2,r20,16
    841c:	10020f26 	beq	r2,zero,8c5c <___vfiprintf_internal_r+0x117c>
    8420:	da802217 	ldw	r10,136(sp)
    8424:	d8001d85 	stb	zero,118(sp)
    8428:	0027883a 	mov	r19,zero
    842c:	50800104 	addi	r2,r10,4
    8430:	54800017 	ldw	r18,0(r10)
    8434:	48021116 	blt	r9,zero,8c7c <___vfiprintf_internal_r+0x119c>
    8438:	00ffdfc4 	movi	r3,-129
    843c:	d8802215 	stw	r2,136(sp)
    8440:	a0e8703a 	and	r20,r20,r3
    8444:	903f5e1e 	bne	r18,zero,81c0 <__alt_data_end+0xf80081c0>
    8448:	0039883a 	mov	fp,zero
    844c:	4802a626 	beq	r9,zero,8ee8 <___vfiprintf_internal_r+0x1408>
    8450:	0025883a 	mov	r18,zero
    8454:	0027883a 	mov	r19,zero
    8458:	003f5a06 	br	81c4 <__alt_data_end+0xf80081c4>
    845c:	21003fcc 	andi	r4,r4,255
    8460:	20029f1e 	bne	r4,zero,8ee0 <___vfiprintf_internal_r+0x1400>
    8464:	a5000414 	ori	r20,r20,16
    8468:	a080080c 	andi	r2,r20,32
    846c:	10005e1e 	bne	r2,zero,85e8 <___vfiprintf_internal_r+0xb08>
    8470:	a080040c 	andi	r2,r20,16
    8474:	1001a21e 	bne	r2,zero,8b00 <___vfiprintf_internal_r+0x1020>
    8478:	a080100c 	andi	r2,r20,64
    847c:	d8001d85 	stb	zero,118(sp)
    8480:	da802217 	ldw	r10,136(sp)
    8484:	1002231e 	bne	r2,zero,8d14 <___vfiprintf_internal_r+0x1234>
    8488:	50800104 	addi	r2,r10,4
    848c:	54800017 	ldw	r18,0(r10)
    8490:	0027883a 	mov	r19,zero
    8494:	4801a00e 	bge	r9,zero,8b18 <___vfiprintf_internal_r+0x1038>
    8498:	d8802215 	stw	r2,136(sp)
    849c:	0039883a 	mov	fp,zero
    84a0:	94c4b03a 	or	r2,r18,r19
    84a4:	103f901e 	bne	r2,zero,82e8 <__alt_data_end+0xf80082e8>
    84a8:	00800044 	movi	r2,1
    84ac:	10803fcc 	andi	r2,r2,255
    84b0:	00c00044 	movi	r3,1
    84b4:	10c05926 	beq	r2,r3,861c <___vfiprintf_internal_r+0xb3c>
    84b8:	00c00084 	movi	r3,2
    84bc:	10ffe41e 	bne	r2,r3,8450 <__alt_data_end+0xf8008450>
    84c0:	0025883a 	mov	r18,zero
    84c4:	0027883a 	mov	r19,zero
    84c8:	00013d06 	br	89c0 <___vfiprintf_internal_r+0xee0>
    84cc:	21003fcc 	andi	r4,r4,255
    84d0:	2002811e 	bne	r4,zero,8ed8 <___vfiprintf_internal_r+0x13f8>
    84d4:	00800074 	movhi	r2,1
    84d8:	10bdf404 	addi	r2,r2,-2096
    84dc:	d8802615 	stw	r2,152(sp)
    84e0:	a080080c 	andi	r2,r20,32
    84e4:	103f561e 	bne	r2,zero,8240 <__alt_data_end+0xf8008240>
    84e8:	a080040c 	andi	r2,r20,16
    84ec:	1001d126 	beq	r2,zero,8c34 <___vfiprintf_internal_r+0x1154>
    84f0:	da802217 	ldw	r10,136(sp)
    84f4:	0027883a 	mov	r19,zero
    84f8:	54800017 	ldw	r18,0(r10)
    84fc:	52800104 	addi	r10,r10,4
    8500:	da802215 	stw	r10,136(sp)
    8504:	003f5306 	br	8254 <__alt_data_end+0xf8008254>
    8508:	da802217 	ldw	r10,136(sp)
    850c:	d8001d85 	stb	zero,118(sp)
    8510:	55400017 	ldw	r21,0(r10)
    8514:	50c00104 	addi	r3,r10,4
    8518:	a8024226 	beq	r21,zero,8e24 <___vfiprintf_internal_r+0x1344>
    851c:	48021816 	blt	r9,zero,8d80 <___vfiprintf_internal_r+0x12a0>
    8520:	480d883a 	mov	r6,r9
    8524:	000b883a 	mov	r5,zero
    8528:	a809883a 	mov	r4,r21
    852c:	d8c02a15 	stw	r3,168(sp)
    8530:	da002b15 	stw	r8,172(sp)
    8534:	da402c15 	stw	r9,176(sp)
    8538:	0005cdc0 	call	5cdc <memchr>
    853c:	d8c02a17 	ldw	r3,168(sp)
    8540:	da002b17 	ldw	r8,172(sp)
    8544:	da402c17 	ldw	r9,176(sp)
    8548:	10024826 	beq	r2,zero,8e6c <___vfiprintf_internal_r+0x138c>
    854c:	1567c83a 	sub	r19,r2,r21
    8550:	df001d83 	ldbu	fp,118(sp)
    8554:	d8c02215 	stw	r3,136(sp)
    8558:	0013883a 	mov	r9,zero
    855c:	003e6006 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8560:	21003fcc 	andi	r4,r4,255
    8564:	203fc026 	beq	r4,zero,8468 <__alt_data_end+0xf8008468>
    8568:	d9c01d85 	stb	r7,118(sp)
    856c:	003fbe06 	br	8468 <__alt_data_end+0xf8008468>
    8570:	da802217 	ldw	r10,136(sp)
    8574:	54400017 	ldw	r17,0(r10)
    8578:	50800104 	addi	r2,r10,4
    857c:	883e3b16 	blt	r17,zero,7e6c <__alt_data_end+0xf8007e6c>
    8580:	d8802215 	stw	r2,136(sp)
    8584:	80c00007 	ldb	r3,0(r16)
    8588:	003db406 	br	7c5c <__alt_data_end+0xf8007c5c>
    858c:	01000044 	movi	r4,1
    8590:	01c00ac4 	movi	r7,43
    8594:	80c00007 	ldb	r3,0(r16)
    8598:	003db006 	br	7c5c <__alt_data_end+0xf8007c5c>
    859c:	80c00007 	ldb	r3,0(r16)
    85a0:	82800044 	addi	r10,r16,1
    85a4:	1b423c26 	beq	r3,r13,8e98 <___vfiprintf_internal_r+0x13b8>
    85a8:	18bff404 	addi	r2,r3,-48
    85ac:	0013883a 	mov	r9,zero
    85b0:	30822b36 	bltu	r6,r2,8e60 <___vfiprintf_internal_r+0x1380>
    85b4:	50c00007 	ldb	r3,0(r10)
    85b8:	4a4002a4 	muli	r9,r9,10
    85bc:	54000044 	addi	r16,r10,1
    85c0:	8015883a 	mov	r10,r16
    85c4:	4893883a 	add	r9,r9,r2
    85c8:	18bff404 	addi	r2,r3,-48
    85cc:	30bff92e 	bgeu	r6,r2,85b4 <__alt_data_end+0xf80085b4>
    85d0:	483da30e 	bge	r9,zero,7c60 <__alt_data_end+0xf8007c60>
    85d4:	027fffc4 	movi	r9,-1
    85d8:	003da106 	br	7c60 <__alt_data_end+0xf8007c60>
    85dc:	a5001014 	ori	r20,r20,64
    85e0:	80c00007 	ldb	r3,0(r16)
    85e4:	003d9d06 	br	7c5c <__alt_data_end+0xf8007c5c>
    85e8:	da802217 	ldw	r10,136(sp)
    85ec:	d8001d85 	stb	zero,118(sp)
    85f0:	50c00204 	addi	r3,r10,8
    85f4:	54800017 	ldw	r18,0(r10)
    85f8:	54c00117 	ldw	r19,4(r10)
    85fc:	4801ca16 	blt	r9,zero,8d28 <___vfiprintf_internal_r+0x1248>
    8600:	013fdfc4 	movi	r4,-129
    8604:	94c4b03a 	or	r2,r18,r19
    8608:	d8c02215 	stw	r3,136(sp)
    860c:	a128703a 	and	r20,r20,r4
    8610:	0039883a 	mov	fp,zero
    8614:	103f341e 	bne	r2,zero,82e8 <__alt_data_end+0xf80082e8>
    8618:	483e2e26 	beq	r9,zero,7ed4 <__alt_data_end+0xf8007ed4>
    861c:	0025883a 	mov	r18,zero
    8620:	94800c04 	addi	r18,r18,48
    8624:	dc8019c5 	stb	r18,103(sp)
    8628:	dcc02717 	ldw	r19,156(sp)
    862c:	dd4019c4 	addi	r21,sp,103
    8630:	003e2b06 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8634:	21003fcc 	andi	r4,r4,255
    8638:	2002361e 	bne	r4,zero,8f14 <___vfiprintf_internal_r+0x1434>
    863c:	1801c126 	beq	r3,zero,8d44 <___vfiprintf_internal_r+0x1264>
    8640:	04800044 	movi	r18,1
    8644:	d8c01005 	stb	r3,64(sp)
    8648:	d8001d85 	stb	zero,118(sp)
    864c:	9027883a 	mov	r19,r18
    8650:	dd401004 	addi	r21,sp,64
    8654:	003f1106 	br	829c <__alt_data_end+0xf800829c>
    8658:	d9402117 	ldw	r5,132(sp)
    865c:	d9002017 	ldw	r4,128(sp)
    8660:	d9801a04 	addi	r6,sp,104
    8664:	d9c02b15 	stw	r7,172(sp)
    8668:	dbc02a15 	stw	r15,168(sp)
    866c:	00079cc0 	call	79cc <__sprint_r.part.0>
    8670:	d9c02b17 	ldw	r7,172(sp)
    8674:	dbc02a17 	ldw	r15,168(sp)
    8678:	10006d1e 	bne	r2,zero,8830 <___vfiprintf_internal_r+0xd50>
    867c:	d9801b17 	ldw	r6,108(sp)
    8680:	d8801c17 	ldw	r2,112(sp)
    8684:	d811883a 	mov	r8,sp
    8688:	31400044 	addi	r5,r6,1
    868c:	003e3306 	br	7f5c <__alt_data_end+0xf8007f5c>
    8690:	d9401b17 	ldw	r5,108(sp)
    8694:	d8801c17 	ldw	r2,112(sp)
    8698:	29000044 	addi	r4,r5,1
    869c:	d8c01d87 	ldb	r3,118(sp)
    86a0:	183e4d26 	beq	r3,zero,7fd8 <__alt_data_end+0xf8007fd8>
    86a4:	00c00044 	movi	r3,1
    86a8:	d9401d84 	addi	r5,sp,118
    86ac:	10c5883a 	add	r2,r2,r3
    86b0:	41400015 	stw	r5,0(r8)
    86b4:	40c00115 	stw	r3,4(r8)
    86b8:	d8801c15 	stw	r2,112(sp)
    86bc:	d9001b15 	stw	r4,108(sp)
    86c0:	014001c4 	movi	r5,7
    86c4:	2900a90e 	bge	r5,r4,896c <___vfiprintf_internal_r+0xe8c>
    86c8:	1000da1e 	bne	r2,zero,8a34 <___vfiprintf_internal_r+0xf54>
    86cc:	7000ab1e 	bne	r14,zero,897c <___vfiprintf_internal_r+0xe9c>
    86d0:	000b883a 	mov	r5,zero
    86d4:	1809883a 	mov	r4,r3
    86d8:	d811883a 	mov	r8,sp
    86dc:	00c02004 	movi	r3,128
    86e0:	e0fe4d26 	beq	fp,r3,8018 <__alt_data_end+0xf8008018>
    86e4:	4cf9c83a 	sub	fp,r9,r19
    86e8:	073e7b0e 	bge	zero,fp,80d8 <__alt_data_end+0xf80080d8>
    86ec:	01c00404 	movi	r7,16
    86f0:	3f01900e 	bge	r7,fp,8d34 <___vfiprintf_internal_r+0x1254>
    86f4:	00c00074 	movhi	r3,1
    86f8:	18fe5a04 	addi	r3,r3,-1688
    86fc:	d8c02415 	stw	r3,144(sp)
    8700:	034001c4 	movi	r13,7
    8704:	00000506 	br	871c <___vfiprintf_internal_r+0xc3c>
    8708:	29000084 	addi	r4,r5,2
    870c:	42000204 	addi	r8,r8,8
    8710:	180b883a 	mov	r5,r3
    8714:	e73ffc04 	addi	fp,fp,-16
    8718:	3f000d0e 	bge	r7,fp,8750 <___vfiprintf_internal_r+0xc70>
    871c:	10800404 	addi	r2,r2,16
    8720:	28c00044 	addi	r3,r5,1
    8724:	45c00015 	stw	r23,0(r8)
    8728:	41c00115 	stw	r7,4(r8)
    872c:	d8801c15 	stw	r2,112(sp)
    8730:	d8c01b15 	stw	r3,108(sp)
    8734:	68fff40e 	bge	r13,r3,8708 <__alt_data_end+0xf8008708>
    8738:	1000101e 	bne	r2,zero,877c <___vfiprintf_internal_r+0xc9c>
    873c:	e73ffc04 	addi	fp,fp,-16
    8740:	01000044 	movi	r4,1
    8744:	000b883a 	mov	r5,zero
    8748:	d811883a 	mov	r8,sp
    874c:	3f3ff316 	blt	r7,fp,871c <__alt_data_end+0xf800871c>
    8750:	da802417 	ldw	r10,144(sp)
    8754:	1705883a 	add	r2,r2,fp
    8758:	47000115 	stw	fp,4(r8)
    875c:	42800015 	stw	r10,0(r8)
    8760:	d8801c15 	stw	r2,112(sp)
    8764:	d9001b15 	stw	r4,108(sp)
    8768:	00c001c4 	movi	r3,7
    876c:	19003616 	blt	r3,r4,8848 <___vfiprintf_internal_r+0xd68>
    8770:	42000204 	addi	r8,r8,8
    8774:	21000044 	addi	r4,r4,1
    8778:	003e5706 	br	80d8 <__alt_data_end+0xf80080d8>
    877c:	d9402117 	ldw	r5,132(sp)
    8780:	d9002017 	ldw	r4,128(sp)
    8784:	d9801a04 	addi	r6,sp,104
    8788:	d9c02b15 	stw	r7,172(sp)
    878c:	db402a15 	stw	r13,168(sp)
    8790:	00079cc0 	call	79cc <__sprint_r.part.0>
    8794:	d9c02b17 	ldw	r7,172(sp)
    8798:	db402a17 	ldw	r13,168(sp)
    879c:	1000241e 	bne	r2,zero,8830 <___vfiprintf_internal_r+0xd50>
    87a0:	d9401b17 	ldw	r5,108(sp)
    87a4:	d8801c17 	ldw	r2,112(sp)
    87a8:	d811883a 	mov	r8,sp
    87ac:	29000044 	addi	r4,r5,1
    87b0:	003fd806 	br	8714 <__alt_data_end+0xf8008714>
    87b4:	d9401b17 	ldw	r5,108(sp)
    87b8:	00c00074 	movhi	r3,1
    87bc:	18fe5e04 	addi	r3,r3,-1672
    87c0:	d8c02415 	stw	r3,144(sp)
    87c4:	29400044 	addi	r5,r5,1
    87c8:	d8c02417 	ldw	r3,144(sp)
    87cc:	14c5883a 	add	r2,r2,r19
    87d0:	44c00115 	stw	r19,4(r8)
    87d4:	40c00015 	stw	r3,0(r8)
    87d8:	d8801c15 	stw	r2,112(sp)
    87dc:	d9401b15 	stw	r5,108(sp)
    87e0:	00c001c4 	movi	r3,7
    87e4:	1940070e 	bge	r3,r5,8804 <___vfiprintf_internal_r+0xd24>
    87e8:	103e4826 	beq	r2,zero,810c <__alt_data_end+0xf800810c>
    87ec:	d9402117 	ldw	r5,132(sp)
    87f0:	d9002017 	ldw	r4,128(sp)
    87f4:	d9801a04 	addi	r6,sp,104
    87f8:	00079cc0 	call	79cc <__sprint_r.part.0>
    87fc:	10000c1e 	bne	r2,zero,8830 <___vfiprintf_internal_r+0xd50>
    8800:	d8801c17 	ldw	r2,112(sp)
    8804:	8c80010e 	bge	r17,r18,880c <___vfiprintf_internal_r+0xd2c>
    8808:	9023883a 	mov	r17,r18
    880c:	da802317 	ldw	r10,140(sp)
    8810:	5455883a 	add	r10,r10,r17
    8814:	da802315 	stw	r10,140(sp)
    8818:	103e4126 	beq	r2,zero,8120 <__alt_data_end+0xf8008120>
    881c:	d9402117 	ldw	r5,132(sp)
    8820:	d9002017 	ldw	r4,128(sp)
    8824:	d9801a04 	addi	r6,sp,104
    8828:	00079cc0 	call	79cc <__sprint_r.part.0>
    882c:	103e3c26 	beq	r2,zero,8120 <__alt_data_end+0xf8008120>
    8830:	dd002117 	ldw	r20,132(sp)
    8834:	a080030b 	ldhu	r2,12(r20)
    8838:	1080100c 	andi	r2,r2,64
    883c:	1001231e 	bne	r2,zero,8ccc <___vfiprintf_internal_r+0x11ec>
    8840:	d8802317 	ldw	r2,140(sp)
    8844:	003d7b06 	br	7e34 <__alt_data_end+0xf8007e34>
    8848:	1000991e 	bne	r2,zero,8ab0 <___vfiprintf_internal_r+0xfd0>
    884c:	00c00044 	movi	r3,1
    8850:	9805883a 	mov	r2,r19
    8854:	dd400015 	stw	r21,0(sp)
    8858:	dcc00115 	stw	r19,4(sp)
    885c:	dcc01c15 	stw	r19,112(sp)
    8860:	d8c01b15 	stw	r3,108(sp)
    8864:	d811883a 	mov	r8,sp
    8868:	42000204 	addi	r8,r8,8
    886c:	a2c0010c 	andi	r11,r20,4
    8870:	583fe426 	beq	r11,zero,8804 <__alt_data_end+0xf8008804>
    8874:	8ca7c83a 	sub	r19,r17,r18
    8878:	04ffe20e 	bge	zero,r19,8804 <__alt_data_end+0xf8008804>
    887c:	01c00404 	movi	r7,16
    8880:	3cffcc0e 	bge	r7,r19,87b4 <__alt_data_end+0xf80087b4>
    8884:	02800074 	movhi	r10,1
    8888:	52be5e04 	addi	r10,r10,-1672
    888c:	d9001b17 	ldw	r4,108(sp)
    8890:	da802415 	stw	r10,144(sp)
    8894:	382b883a 	mov	r21,r7
    8898:	050001c4 	movi	r20,7
    889c:	df002017 	ldw	fp,128(sp)
    88a0:	00000506 	br	88b8 <___vfiprintf_internal_r+0xdd8>
    88a4:	21400084 	addi	r5,r4,2
    88a8:	42000204 	addi	r8,r8,8
    88ac:	1809883a 	mov	r4,r3
    88b0:	9cfffc04 	addi	r19,r19,-16
    88b4:	acffc40e 	bge	r21,r19,87c8 <__alt_data_end+0xf80087c8>
    88b8:	10800404 	addi	r2,r2,16
    88bc:	20c00044 	addi	r3,r4,1
    88c0:	45800015 	stw	r22,0(r8)
    88c4:	45400115 	stw	r21,4(r8)
    88c8:	d8801c15 	stw	r2,112(sp)
    88cc:	d8c01b15 	stw	r3,108(sp)
    88d0:	a0fff40e 	bge	r20,r3,88a4 <__alt_data_end+0xf80088a4>
    88d4:	1000041e 	bne	r2,zero,88e8 <___vfiprintf_internal_r+0xe08>
    88d8:	01400044 	movi	r5,1
    88dc:	0009883a 	mov	r4,zero
    88e0:	d811883a 	mov	r8,sp
    88e4:	003ff206 	br	88b0 <__alt_data_end+0xf80088b0>
    88e8:	d9402117 	ldw	r5,132(sp)
    88ec:	d9801a04 	addi	r6,sp,104
    88f0:	e009883a 	mov	r4,fp
    88f4:	00079cc0 	call	79cc <__sprint_r.part.0>
    88f8:	103fcd1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    88fc:	d9001b17 	ldw	r4,108(sp)
    8900:	d8801c17 	ldw	r2,112(sp)
    8904:	d811883a 	mov	r8,sp
    8908:	21400044 	addi	r5,r4,1
    890c:	003fe806 	br	88b0 <__alt_data_end+0xf80088b0>
    8910:	d9402117 	ldw	r5,132(sp)
    8914:	d9002017 	ldw	r4,128(sp)
    8918:	d9801a04 	addi	r6,sp,104
    891c:	d9c02b15 	stw	r7,172(sp)
    8920:	db402a15 	stw	r13,168(sp)
    8924:	00079cc0 	call	79cc <__sprint_r.part.0>
    8928:	d9c02b17 	ldw	r7,172(sp)
    892c:	db402a17 	ldw	r13,168(sp)
    8930:	103fbf1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8934:	d9401b17 	ldw	r5,108(sp)
    8938:	d8801c17 	ldw	r2,112(sp)
    893c:	d811883a 	mov	r8,sp
    8940:	29800044 	addi	r6,r5,1
    8944:	003dc406 	br	8058 <__alt_data_end+0xf8008058>
    8948:	1000d21e 	bne	r2,zero,8c94 <___vfiprintf_internal_r+0x11b4>
    894c:	d8c01d87 	ldb	r3,118(sp)
    8950:	18009526 	beq	r3,zero,8ba8 <___vfiprintf_internal_r+0x10c8>
    8954:	00800044 	movi	r2,1
    8958:	d8c01d84 	addi	r3,sp,118
    895c:	1009883a 	mov	r4,r2
    8960:	d8c00015 	stw	r3,0(sp)
    8964:	d8800115 	stw	r2,4(sp)
    8968:	d811883a 	mov	r8,sp
    896c:	200b883a 	mov	r5,r4
    8970:	42000204 	addi	r8,r8,8
    8974:	21000044 	addi	r4,r4,1
    8978:	003d9706 	br	7fd8 <__alt_data_end+0xf8007fd8>
    897c:	d9001d04 	addi	r4,sp,116
    8980:	00800084 	movi	r2,2
    8984:	d9000015 	stw	r4,0(sp)
    8988:	d8800115 	stw	r2,4(sp)
    898c:	1809883a 	mov	r4,r3
    8990:	d811883a 	mov	r8,sp
    8994:	200b883a 	mov	r5,r4
    8998:	42000204 	addi	r8,r8,8
    899c:	21000044 	addi	r4,r4,1
    89a0:	003f4e06 	br	86dc <__alt_data_end+0xf80086dc>
    89a4:	d8001d85 	stb	zero,118(sp)
    89a8:	48005016 	blt	r9,zero,8aec <___vfiprintf_internal_r+0x100c>
    89ac:	00ffdfc4 	movi	r3,-129
    89b0:	94c4b03a 	or	r2,r18,r19
    89b4:	a0e8703a 	and	r20,r20,r3
    89b8:	103d4426 	beq	r2,zero,7ecc <__alt_data_end+0xf8007ecc>
    89bc:	0039883a 	mov	fp,zero
    89c0:	d9002617 	ldw	r4,152(sp)
    89c4:	dd401a04 	addi	r21,sp,104
    89c8:	908003cc 	andi	r2,r18,15
    89cc:	9806973a 	slli	r3,r19,28
    89d0:	2085883a 	add	r2,r4,r2
    89d4:	9024d13a 	srli	r18,r18,4
    89d8:	10800003 	ldbu	r2,0(r2)
    89dc:	9826d13a 	srli	r19,r19,4
    89e0:	ad7fffc4 	addi	r21,r21,-1
    89e4:	1ca4b03a 	or	r18,r3,r18
    89e8:	a8800005 	stb	r2,0(r21)
    89ec:	94c4b03a 	or	r2,r18,r19
    89f0:	103ff51e 	bne	r2,zero,89c8 <__alt_data_end+0xf80089c8>
    89f4:	003e5906 	br	835c <__alt_data_end+0xf800835c>
    89f8:	d9402117 	ldw	r5,132(sp)
    89fc:	d9002017 	ldw	r4,128(sp)
    8a00:	d9801a04 	addi	r6,sp,104
    8a04:	00079cc0 	call	79cc <__sprint_r.part.0>
    8a08:	103f891e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8a0c:	d8801c17 	ldw	r2,112(sp)
    8a10:	d811883a 	mov	r8,sp
    8a14:	003f9506 	br	886c <__alt_data_end+0xf800886c>
    8a18:	d9402117 	ldw	r5,132(sp)
    8a1c:	d9002017 	ldw	r4,128(sp)
    8a20:	d9801a04 	addi	r6,sp,104
    8a24:	00079cc0 	call	79cc <__sprint_r.part.0>
    8a28:	103f811e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8a2c:	d811883a 	mov	r8,sp
    8a30:	003ced06 	br	7de8 <__alt_data_end+0xf8007de8>
    8a34:	d9402117 	ldw	r5,132(sp)
    8a38:	d9002017 	ldw	r4,128(sp)
    8a3c:	d9801a04 	addi	r6,sp,104
    8a40:	da402c15 	stw	r9,176(sp)
    8a44:	db802a15 	stw	r14,168(sp)
    8a48:	00079cc0 	call	79cc <__sprint_r.part.0>
    8a4c:	da402c17 	ldw	r9,176(sp)
    8a50:	db802a17 	ldw	r14,168(sp)
    8a54:	103f761e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8a58:	d9401b17 	ldw	r5,108(sp)
    8a5c:	d8801c17 	ldw	r2,112(sp)
    8a60:	d811883a 	mov	r8,sp
    8a64:	29000044 	addi	r4,r5,1
    8a68:	003d5b06 	br	7fd8 <__alt_data_end+0xf8007fd8>
    8a6c:	d9402117 	ldw	r5,132(sp)
    8a70:	d9002017 	ldw	r4,128(sp)
    8a74:	d9801a04 	addi	r6,sp,104
    8a78:	da402c15 	stw	r9,176(sp)
    8a7c:	00079cc0 	call	79cc <__sprint_r.part.0>
    8a80:	da402c17 	ldw	r9,176(sp)
    8a84:	103f6a1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8a88:	d9401b17 	ldw	r5,108(sp)
    8a8c:	d8801c17 	ldw	r2,112(sp)
    8a90:	d811883a 	mov	r8,sp
    8a94:	29000044 	addi	r4,r5,1
    8a98:	003f1006 	br	86dc <__alt_data_end+0xf80086dc>
    8a9c:	1000c31e 	bne	r2,zero,8dac <___vfiprintf_internal_r+0x12cc>
    8aa0:	01000044 	movi	r4,1
    8aa4:	000b883a 	mov	r5,zero
    8aa8:	d811883a 	mov	r8,sp
    8aac:	003f0d06 	br	86e4 <__alt_data_end+0xf80086e4>
    8ab0:	d9402117 	ldw	r5,132(sp)
    8ab4:	d9002017 	ldw	r4,128(sp)
    8ab8:	d9801a04 	addi	r6,sp,104
    8abc:	00079cc0 	call	79cc <__sprint_r.part.0>
    8ac0:	103f5b1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8ac4:	d9001b17 	ldw	r4,108(sp)
    8ac8:	d8801c17 	ldw	r2,112(sp)
    8acc:	d811883a 	mov	r8,sp
    8ad0:	21000044 	addi	r4,r4,1
    8ad4:	003d8006 	br	80d8 <__alt_data_end+0xf80080d8>
    8ad8:	01000074 	movhi	r4,1
    8adc:	213df904 	addi	r4,r4,-2076
    8ae0:	d9002615 	stw	r4,152(sp)
    8ae4:	d8c02215 	stw	r3,136(sp)
    8ae8:	1029883a 	mov	r20,r2
    8aec:	94c4b03a 	or	r2,r18,r19
    8af0:	103fb21e 	bne	r2,zero,89bc <__alt_data_end+0xf80089bc>
    8af4:	0039883a 	mov	fp,zero
    8af8:	00800084 	movi	r2,2
    8afc:	003e6b06 	br	84ac <__alt_data_end+0xf80084ac>
    8b00:	da802217 	ldw	r10,136(sp)
    8b04:	d8001d85 	stb	zero,118(sp)
    8b08:	0027883a 	mov	r19,zero
    8b0c:	50800104 	addi	r2,r10,4
    8b10:	54800017 	ldw	r18,0(r10)
    8b14:	483e6016 	blt	r9,zero,8498 <__alt_data_end+0xf8008498>
    8b18:	00ffdfc4 	movi	r3,-129
    8b1c:	d8802215 	stw	r2,136(sp)
    8b20:	a0e8703a 	and	r20,r20,r3
    8b24:	0039883a 	mov	fp,zero
    8b28:	903ebb26 	beq	r18,zero,8618 <__alt_data_end+0xf8008618>
    8b2c:	00800244 	movi	r2,9
    8b30:	14bdee36 	bltu	r2,r18,82ec <__alt_data_end+0xf80082ec>
    8b34:	003eba06 	br	8620 <__alt_data_end+0xf8008620>
    8b38:	00800c04 	movi	r2,48
    8b3c:	d8c01d45 	stb	r3,117(sp)
    8b40:	d8801d05 	stb	r2,116(sp)
    8b44:	d8001d85 	stb	zero,118(sp)
    8b48:	a0c00094 	ori	r3,r20,2
    8b4c:	4800a916 	blt	r9,zero,8df4 <___vfiprintf_internal_r+0x1314>
    8b50:	00bfdfc4 	movi	r2,-129
    8b54:	a096703a 	and	r11,r20,r2
    8b58:	5d000094 	ori	r20,r11,2
    8b5c:	0039883a 	mov	fp,zero
    8b60:	003f9706 	br	89c0 <__alt_data_end+0xf80089c0>
    8b64:	8025883a 	mov	r18,r16
    8b68:	003c2e06 	br	7c24 <__alt_data_end+0xf8007c24>
    8b6c:	00800074 	movhi	r2,1
    8b70:	10bdf904 	addi	r2,r2,-2076
    8b74:	0039883a 	mov	fp,zero
    8b78:	d8802615 	stw	r2,152(sp)
    8b7c:	003f9006 	br	89c0 <__alt_data_end+0xf80089c0>
    8b80:	04a5c83a 	sub	r18,zero,r18
    8b84:	07000b44 	movi	fp,45
    8b88:	9004c03a 	cmpne	r2,r18,zero
    8b8c:	04e7c83a 	sub	r19,zero,r19
    8b90:	df001d85 	stb	fp,118(sp)
    8b94:	98a7c83a 	sub	r19,r19,r2
    8b98:	48009f16 	blt	r9,zero,8e18 <___vfiprintf_internal_r+0x1338>
    8b9c:	00bfdfc4 	movi	r2,-129
    8ba0:	a0a8703a 	and	r20,r20,r2
    8ba4:	003dd006 	br	82e8 <__alt_data_end+0xf80082e8>
    8ba8:	70004c26 	beq	r14,zero,8cdc <___vfiprintf_internal_r+0x11fc>
    8bac:	00800084 	movi	r2,2
    8bb0:	d8c01d04 	addi	r3,sp,116
    8bb4:	d8c00015 	stw	r3,0(sp)
    8bb8:	d8800115 	stw	r2,4(sp)
    8bbc:	01000044 	movi	r4,1
    8bc0:	d811883a 	mov	r8,sp
    8bc4:	003f7306 	br	8994 <__alt_data_end+0xf8008994>
    8bc8:	a080100c 	andi	r2,r20,64
    8bcc:	da802217 	ldw	r10,136(sp)
    8bd0:	103e0626 	beq	r2,zero,83ec <__alt_data_end+0xf80083ec>
    8bd4:	5480000f 	ldh	r18,0(r10)
    8bd8:	52800104 	addi	r10,r10,4
    8bdc:	da802215 	stw	r10,136(sp)
    8be0:	9027d7fa 	srai	r19,r18,31
    8be4:	9805883a 	mov	r2,r19
    8be8:	003db806 	br	82cc <__alt_data_end+0xf80082cc>
    8bec:	a080040c 	andi	r2,r20,16
    8bf0:	1000091e 	bne	r2,zero,8c18 <___vfiprintf_internal_r+0x1138>
    8bf4:	a2c0100c 	andi	r11,r20,64
    8bf8:	58000726 	beq	r11,zero,8c18 <___vfiprintf_internal_r+0x1138>
    8bfc:	da802217 	ldw	r10,136(sp)
    8c00:	50800017 	ldw	r2,0(r10)
    8c04:	52800104 	addi	r10,r10,4
    8c08:	da802215 	stw	r10,136(sp)
    8c0c:	da802317 	ldw	r10,140(sp)
    8c10:	1280000d 	sth	r10,0(r2)
    8c14:	003be706 	br	7bb4 <__alt_data_end+0xf8007bb4>
    8c18:	da802217 	ldw	r10,136(sp)
    8c1c:	50800017 	ldw	r2,0(r10)
    8c20:	52800104 	addi	r10,r10,4
    8c24:	da802215 	stw	r10,136(sp)
    8c28:	da802317 	ldw	r10,140(sp)
    8c2c:	12800015 	stw	r10,0(r2)
    8c30:	003be006 	br	7bb4 <__alt_data_end+0xf8007bb4>
    8c34:	a080100c 	andi	r2,r20,64
    8c38:	da802217 	ldw	r10,136(sp)
    8c3c:	10003026 	beq	r2,zero,8d00 <___vfiprintf_internal_r+0x1220>
    8c40:	5480000b 	ldhu	r18,0(r10)
    8c44:	52800104 	addi	r10,r10,4
    8c48:	0027883a 	mov	r19,zero
    8c4c:	da802215 	stw	r10,136(sp)
    8c50:	003d8006 	br	8254 <__alt_data_end+0xf8008254>
    8c54:	80c00007 	ldb	r3,0(r16)
    8c58:	003c0006 	br	7c5c <__alt_data_end+0xf8007c5c>
    8c5c:	a080100c 	andi	r2,r20,64
    8c60:	d8001d85 	stb	zero,118(sp)
    8c64:	da802217 	ldw	r10,136(sp)
    8c68:	1000201e 	bne	r2,zero,8cec <___vfiprintf_internal_r+0x120c>
    8c6c:	50800104 	addi	r2,r10,4
    8c70:	54800017 	ldw	r18,0(r10)
    8c74:	0027883a 	mov	r19,zero
    8c78:	483def0e 	bge	r9,zero,8438 <__alt_data_end+0xf8008438>
    8c7c:	94c6b03a 	or	r3,r18,r19
    8c80:	d8802215 	stw	r2,136(sp)
    8c84:	183d4e1e 	bne	r3,zero,81c0 <__alt_data_end+0xf80081c0>
    8c88:	0039883a 	mov	fp,zero
    8c8c:	0005883a 	mov	r2,zero
    8c90:	003e0606 	br	84ac <__alt_data_end+0xf80084ac>
    8c94:	d9402117 	ldw	r5,132(sp)
    8c98:	d9002017 	ldw	r4,128(sp)
    8c9c:	d9801a04 	addi	r6,sp,104
    8ca0:	da402c15 	stw	r9,176(sp)
    8ca4:	db802a15 	stw	r14,168(sp)
    8ca8:	00079cc0 	call	79cc <__sprint_r.part.0>
    8cac:	da402c17 	ldw	r9,176(sp)
    8cb0:	db802a17 	ldw	r14,168(sp)
    8cb4:	103ede1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8cb8:	d9401b17 	ldw	r5,108(sp)
    8cbc:	d8801c17 	ldw	r2,112(sp)
    8cc0:	d811883a 	mov	r8,sp
    8cc4:	29000044 	addi	r4,r5,1
    8cc8:	003e7406 	br	869c <__alt_data_end+0xf800869c>
    8ccc:	00bfffc4 	movi	r2,-1
    8cd0:	003c5806 	br	7e34 <__alt_data_end+0xf8007e34>
    8cd4:	d811883a 	mov	r8,sp
    8cd8:	003ee806 	br	887c <__alt_data_end+0xf800887c>
    8cdc:	000b883a 	mov	r5,zero
    8ce0:	01000044 	movi	r4,1
    8ce4:	d811883a 	mov	r8,sp
    8ce8:	003e7c06 	br	86dc <__alt_data_end+0xf80086dc>
    8cec:	50800104 	addi	r2,r10,4
    8cf0:	5480000b 	ldhu	r18,0(r10)
    8cf4:	0027883a 	mov	r19,zero
    8cf8:	483dcf0e 	bge	r9,zero,8438 <__alt_data_end+0xf8008438>
    8cfc:	003fdf06 	br	8c7c <__alt_data_end+0xf8008c7c>
    8d00:	54800017 	ldw	r18,0(r10)
    8d04:	52800104 	addi	r10,r10,4
    8d08:	0027883a 	mov	r19,zero
    8d0c:	da802215 	stw	r10,136(sp)
    8d10:	003d5006 	br	8254 <__alt_data_end+0xf8008254>
    8d14:	50800104 	addi	r2,r10,4
    8d18:	5480000b 	ldhu	r18,0(r10)
    8d1c:	0027883a 	mov	r19,zero
    8d20:	483f7d0e 	bge	r9,zero,8b18 <__alt_data_end+0xf8008b18>
    8d24:	003ddc06 	br	8498 <__alt_data_end+0xf8008498>
    8d28:	d8c02215 	stw	r3,136(sp)
    8d2c:	0039883a 	mov	fp,zero
    8d30:	003ddb06 	br	84a0 <__alt_data_end+0xf80084a0>
    8d34:	02800074 	movhi	r10,1
    8d38:	52be5a04 	addi	r10,r10,-1688
    8d3c:	da802415 	stw	r10,144(sp)
    8d40:	003e8306 	br	8750 <__alt_data_end+0xf8008750>
    8d44:	d8801c17 	ldw	r2,112(sp)
    8d48:	dd002117 	ldw	r20,132(sp)
    8d4c:	103eb926 	beq	r2,zero,8834 <__alt_data_end+0xf8008834>
    8d50:	d9002017 	ldw	r4,128(sp)
    8d54:	d9801a04 	addi	r6,sp,104
    8d58:	a00b883a 	mov	r5,r20
    8d5c:	00079cc0 	call	79cc <__sprint_r.part.0>
    8d60:	003eb406 	br	8834 <__alt_data_end+0xf8008834>
    8d64:	80c00043 	ldbu	r3,1(r16)
    8d68:	a5000814 	ori	r20,r20,32
    8d6c:	84000044 	addi	r16,r16,1
    8d70:	18c03fcc 	andi	r3,r3,255
    8d74:	18c0201c 	xori	r3,r3,128
    8d78:	18ffe004 	addi	r3,r3,-128
    8d7c:	003bb706 	br	7c5c <__alt_data_end+0xf8007c5c>
    8d80:	a809883a 	mov	r4,r21
    8d84:	d8c02a15 	stw	r3,168(sp)
    8d88:	da002b15 	stw	r8,172(sp)
    8d8c:	00004340 	call	434 <strlen>
    8d90:	d8c02a17 	ldw	r3,168(sp)
    8d94:	1027883a 	mov	r19,r2
    8d98:	df001d83 	ldbu	fp,118(sp)
    8d9c:	d8c02215 	stw	r3,136(sp)
    8da0:	0013883a 	mov	r9,zero
    8da4:	da002b17 	ldw	r8,172(sp)
    8da8:	003c4d06 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8dac:	d9402117 	ldw	r5,132(sp)
    8db0:	d9002017 	ldw	r4,128(sp)
    8db4:	d9801a04 	addi	r6,sp,104
    8db8:	da402c15 	stw	r9,176(sp)
    8dbc:	00079cc0 	call	79cc <__sprint_r.part.0>
    8dc0:	da402c17 	ldw	r9,176(sp)
    8dc4:	103e9a1e 	bne	r2,zero,8830 <__alt_data_end+0xf8008830>
    8dc8:	d9401b17 	ldw	r5,108(sp)
    8dcc:	d8801c17 	ldw	r2,112(sp)
    8dd0:	d811883a 	mov	r8,sp
    8dd4:	29000044 	addi	r4,r5,1
    8dd8:	003e4206 	br	86e4 <__alt_data_end+0xf80086e4>
    8ddc:	d9401b17 	ldw	r5,108(sp)
    8de0:	01000074 	movhi	r4,1
    8de4:	213e5e04 	addi	r4,r4,-1672
    8de8:	d9002415 	stw	r4,144(sp)
    8dec:	29400044 	addi	r5,r5,1
    8df0:	003c6d06 	br	7fa8 <__alt_data_end+0xf8007fa8>
    8df4:	0039883a 	mov	fp,zero
    8df8:	00800084 	movi	r2,2
    8dfc:	10803fcc 	andi	r2,r2,255
    8e00:	01000044 	movi	r4,1
    8e04:	11001e26 	beq	r2,r4,8e80 <___vfiprintf_internal_r+0x13a0>
    8e08:	01000084 	movi	r4,2
    8e0c:	11001e1e 	bne	r2,r4,8e88 <___vfiprintf_internal_r+0x13a8>
    8e10:	1829883a 	mov	r20,r3
    8e14:	003eea06 	br	89c0 <__alt_data_end+0xf80089c0>
    8e18:	a007883a 	mov	r3,r20
    8e1c:	00800044 	movi	r2,1
    8e20:	003ff606 	br	8dfc <__alt_data_end+0xf8008dfc>
    8e24:	00800184 	movi	r2,6
    8e28:	1240012e 	bgeu	r2,r9,8e30 <___vfiprintf_internal_r+0x1350>
    8e2c:	1013883a 	mov	r9,r2
    8e30:	4827883a 	mov	r19,r9
    8e34:	4825883a 	mov	r18,r9
    8e38:	48001516 	blt	r9,zero,8e90 <___vfiprintf_internal_r+0x13b0>
    8e3c:	05400074 	movhi	r21,1
    8e40:	d8c02215 	stw	r3,136(sp)
    8e44:	ad7dfe04 	addi	r21,r21,-2056
    8e48:	003d1406 	br	829c <__alt_data_end+0xf800829c>
    8e4c:	02800074 	movhi	r10,1
    8e50:	52be5a04 	addi	r10,r10,-1688
    8e54:	da802415 	stw	r10,144(sp)
    8e58:	200d883a 	mov	r6,r4
    8e5c:	003c9106 	br	80a4 <__alt_data_end+0xf80080a4>
    8e60:	5021883a 	mov	r16,r10
    8e64:	0013883a 	mov	r9,zero
    8e68:	003b7d06 	br	7c60 <__alt_data_end+0xf8007c60>
    8e6c:	4827883a 	mov	r19,r9
    8e70:	df001d83 	ldbu	fp,118(sp)
    8e74:	d8c02215 	stw	r3,136(sp)
    8e78:	0013883a 	mov	r9,zero
    8e7c:	003c1806 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8e80:	1829883a 	mov	r20,r3
    8e84:	003d1806 	br	82e8 <__alt_data_end+0xf80082e8>
    8e88:	1829883a 	mov	r20,r3
    8e8c:	003ccd06 	br	81c4 <__alt_data_end+0xf80081c4>
    8e90:	0025883a 	mov	r18,zero
    8e94:	003fe906 	br	8e3c <__alt_data_end+0xf8008e3c>
    8e98:	d8802217 	ldw	r2,136(sp)
    8e9c:	80c00043 	ldbu	r3,1(r16)
    8ea0:	5021883a 	mov	r16,r10
    8ea4:	12400017 	ldw	r9,0(r2)
    8ea8:	10800104 	addi	r2,r2,4
    8eac:	d8802215 	stw	r2,136(sp)
    8eb0:	483faf0e 	bge	r9,zero,8d70 <__alt_data_end+0xf8008d70>
    8eb4:	18c03fcc 	andi	r3,r3,255
    8eb8:	18c0201c 	xori	r3,r3,128
    8ebc:	027fffc4 	movi	r9,-1
    8ec0:	18ffe004 	addi	r3,r3,-128
    8ec4:	003b6506 	br	7c5c <__alt_data_end+0xf8007c5c>
    8ec8:	d9c01d85 	stb	r7,118(sp)
    8ecc:	003ca006 	br	8150 <__alt_data_end+0xf8008150>
    8ed0:	d9c01d85 	stb	r7,118(sp)
    8ed4:	003cad06 	br	818c <__alt_data_end+0xf800818c>
    8ed8:	d9c01d85 	stb	r7,118(sp)
    8edc:	003d7d06 	br	84d4 <__alt_data_end+0xf80084d4>
    8ee0:	d9c01d85 	stb	r7,118(sp)
    8ee4:	003d5f06 	br	8464 <__alt_data_end+0xf8008464>
    8ee8:	a080004c 	andi	r2,r20,1
    8eec:	0039883a 	mov	fp,zero
    8ef0:	10000526 	beq	r2,zero,8f08 <___vfiprintf_internal_r+0x1428>
    8ef4:	00800c04 	movi	r2,48
    8ef8:	d88019c5 	stb	r2,103(sp)
    8efc:	dcc02717 	ldw	r19,156(sp)
    8f00:	dd4019c4 	addi	r21,sp,103
    8f04:	003bf606 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8f08:	0027883a 	mov	r19,zero
    8f0c:	dd401a04 	addi	r21,sp,104
    8f10:	003bf306 	br	7ee0 <__alt_data_end+0xf8007ee0>
    8f14:	d9c01d85 	stb	r7,118(sp)
    8f18:	003dc806 	br	863c <__alt_data_end+0xf800863c>
    8f1c:	d9c01d85 	stb	r7,118(sp)
    8f20:	003d3a06 	br	840c <__alt_data_end+0xf800840c>
    8f24:	d9c01d85 	stb	r7,118(sp)
    8f28:	003d2a06 	br	83d4 <__alt_data_end+0xf80083d4>
    8f2c:	d9c01d85 	stb	r7,118(sp)
    8f30:	003cde06 	br	82ac <__alt_data_end+0xf80082ac>
    8f34:	d9c01d85 	stb	r7,118(sp)
    8f38:	003cbc06 	br	822c <__alt_data_end+0xf800822c>

00008f3c <__vfiprintf_internal>:
    8f3c:	00800074 	movhi	r2,1
    8f40:	10859b04 	addi	r2,r2,5740
    8f44:	300f883a 	mov	r7,r6
    8f48:	280d883a 	mov	r6,r5
    8f4c:	200b883a 	mov	r5,r4
    8f50:	11000017 	ldw	r4,0(r2)
    8f54:	0007ae01 	jmpi	7ae0 <___vfiprintf_internal_r>

00008f58 <__sbprintf>:
    8f58:	2880030b 	ldhu	r2,12(r5)
    8f5c:	2ac01917 	ldw	r11,100(r5)
    8f60:	2a80038b 	ldhu	r10,14(r5)
    8f64:	2a400717 	ldw	r9,28(r5)
    8f68:	2a000917 	ldw	r8,36(r5)
    8f6c:	defee204 	addi	sp,sp,-1144
    8f70:	00c10004 	movi	r3,1024
    8f74:	dc011a15 	stw	r16,1128(sp)
    8f78:	10bfff4c 	andi	r2,r2,65533
    8f7c:	2821883a 	mov	r16,r5
    8f80:	d8cb883a 	add	r5,sp,r3
    8f84:	dc811c15 	stw	r18,1136(sp)
    8f88:	dc411b15 	stw	r17,1132(sp)
    8f8c:	dfc11d15 	stw	ra,1140(sp)
    8f90:	2025883a 	mov	r18,r4
    8f94:	d881030d 	sth	r2,1036(sp)
    8f98:	dac11915 	stw	r11,1124(sp)
    8f9c:	da81038d 	sth	r10,1038(sp)
    8fa0:	da410715 	stw	r9,1052(sp)
    8fa4:	da010915 	stw	r8,1060(sp)
    8fa8:	dec10015 	stw	sp,1024(sp)
    8fac:	dec10415 	stw	sp,1040(sp)
    8fb0:	d8c10215 	stw	r3,1032(sp)
    8fb4:	d8c10515 	stw	r3,1044(sp)
    8fb8:	d8010615 	stw	zero,1048(sp)
    8fbc:	0007ae00 	call	7ae0 <___vfiprintf_internal_r>
    8fc0:	1023883a 	mov	r17,r2
    8fc4:	10000416 	blt	r2,zero,8fd8 <__sbprintf+0x80>
    8fc8:	d9410004 	addi	r5,sp,1024
    8fcc:	9009883a 	mov	r4,r18
    8fd0:	00043940 	call	4394 <_fflush_r>
    8fd4:	10000d1e 	bne	r2,zero,900c <__sbprintf+0xb4>
    8fd8:	d881030b 	ldhu	r2,1036(sp)
    8fdc:	1080100c 	andi	r2,r2,64
    8fe0:	10000326 	beq	r2,zero,8ff0 <__sbprintf+0x98>
    8fe4:	8080030b 	ldhu	r2,12(r16)
    8fe8:	10801014 	ori	r2,r2,64
    8fec:	8080030d 	sth	r2,12(r16)
    8ff0:	8805883a 	mov	r2,r17
    8ff4:	dfc11d17 	ldw	ra,1140(sp)
    8ff8:	dc811c17 	ldw	r18,1136(sp)
    8ffc:	dc411b17 	ldw	r17,1132(sp)
    9000:	dc011a17 	ldw	r16,1128(sp)
    9004:	dec11e04 	addi	sp,sp,1144
    9008:	f800283a 	ret
    900c:	047fffc4 	movi	r17,-1
    9010:	003ff106 	br	8fd8 <__alt_data_end+0xf8008fd8>

00009014 <_write_r>:
    9014:	defffd04 	addi	sp,sp,-12
    9018:	2805883a 	mov	r2,r5
    901c:	dc000015 	stw	r16,0(sp)
    9020:	04000074 	movhi	r16,1
    9024:	dc400115 	stw	r17,4(sp)
    9028:	300b883a 	mov	r5,r6
    902c:	840c9904 	addi	r16,r16,12900
    9030:	2023883a 	mov	r17,r4
    9034:	380d883a 	mov	r6,r7
    9038:	1009883a 	mov	r4,r2
    903c:	dfc00215 	stw	ra,8(sp)
    9040:	80000015 	stw	zero,0(r16)
    9044:	000d4600 	call	d460 <write>
    9048:	00ffffc4 	movi	r3,-1
    904c:	10c00526 	beq	r2,r3,9064 <_write_r+0x50>
    9050:	dfc00217 	ldw	ra,8(sp)
    9054:	dc400117 	ldw	r17,4(sp)
    9058:	dc000017 	ldw	r16,0(sp)
    905c:	dec00304 	addi	sp,sp,12
    9060:	f800283a 	ret
    9064:	80c00017 	ldw	r3,0(r16)
    9068:	183ff926 	beq	r3,zero,9050 <__alt_data_end+0xf8009050>
    906c:	88c00015 	stw	r3,0(r17)
    9070:	003ff706 	br	9050 <__alt_data_end+0xf8009050>

00009074 <_close_r>:
    9074:	defffd04 	addi	sp,sp,-12
    9078:	dc000015 	stw	r16,0(sp)
    907c:	04000074 	movhi	r16,1
    9080:	dc400115 	stw	r17,4(sp)
    9084:	840c9904 	addi	r16,r16,12900
    9088:	2023883a 	mov	r17,r4
    908c:	2809883a 	mov	r4,r5
    9090:	dfc00215 	stw	ra,8(sp)
    9094:	80000015 	stw	zero,0(r16)
    9098:	000cc500 	call	cc50 <close>
    909c:	00ffffc4 	movi	r3,-1
    90a0:	10c00526 	beq	r2,r3,90b8 <_close_r+0x44>
    90a4:	dfc00217 	ldw	ra,8(sp)
    90a8:	dc400117 	ldw	r17,4(sp)
    90ac:	dc000017 	ldw	r16,0(sp)
    90b0:	dec00304 	addi	sp,sp,12
    90b4:	f800283a 	ret
    90b8:	80c00017 	ldw	r3,0(r16)
    90bc:	183ff926 	beq	r3,zero,90a4 <__alt_data_end+0xf80090a4>
    90c0:	88c00015 	stw	r3,0(r17)
    90c4:	003ff706 	br	90a4 <__alt_data_end+0xf80090a4>

000090c8 <_calloc_r>:
    90c8:	298b383a 	mul	r5,r5,r6
    90cc:	defffe04 	addi	sp,sp,-8
    90d0:	dfc00115 	stw	ra,4(sp)
    90d4:	dc000015 	stw	r16,0(sp)
    90d8:	00054d00 	call	54d0 <_malloc_r>
    90dc:	10002926 	beq	r2,zero,9184 <_calloc_r+0xbc>
    90e0:	11bfff17 	ldw	r6,-4(r2)
    90e4:	1021883a 	mov	r16,r2
    90e8:	00bfff04 	movi	r2,-4
    90ec:	308c703a 	and	r6,r6,r2
    90f0:	00c00904 	movi	r3,36
    90f4:	308d883a 	add	r6,r6,r2
    90f8:	19801636 	bltu	r3,r6,9154 <_calloc_r+0x8c>
    90fc:	008004c4 	movi	r2,19
    9100:	11800b2e 	bgeu	r2,r6,9130 <_calloc_r+0x68>
    9104:	80000015 	stw	zero,0(r16)
    9108:	80000115 	stw	zero,4(r16)
    910c:	008006c4 	movi	r2,27
    9110:	11801a2e 	bgeu	r2,r6,917c <_calloc_r+0xb4>
    9114:	80000215 	stw	zero,8(r16)
    9118:	80000315 	stw	zero,12(r16)
    911c:	30c0151e 	bne	r6,r3,9174 <_calloc_r+0xac>
    9120:	80000415 	stw	zero,16(r16)
    9124:	80800604 	addi	r2,r16,24
    9128:	80000515 	stw	zero,20(r16)
    912c:	00000106 	br	9134 <_calloc_r+0x6c>
    9130:	8005883a 	mov	r2,r16
    9134:	10000015 	stw	zero,0(r2)
    9138:	10000115 	stw	zero,4(r2)
    913c:	10000215 	stw	zero,8(r2)
    9140:	8005883a 	mov	r2,r16
    9144:	dfc00117 	ldw	ra,4(sp)
    9148:	dc000017 	ldw	r16,0(sp)
    914c:	dec00204 	addi	sp,sp,8
    9150:	f800283a 	ret
    9154:	000b883a 	mov	r5,zero
    9158:	8009883a 	mov	r4,r16
    915c:	00060640 	call	6064 <memset>
    9160:	8005883a 	mov	r2,r16
    9164:	dfc00117 	ldw	ra,4(sp)
    9168:	dc000017 	ldw	r16,0(sp)
    916c:	dec00204 	addi	sp,sp,8
    9170:	f800283a 	ret
    9174:	80800404 	addi	r2,r16,16
    9178:	003fee06 	br	9134 <__alt_data_end+0xf8009134>
    917c:	80800204 	addi	r2,r16,8
    9180:	003fec06 	br	9134 <__alt_data_end+0xf8009134>
    9184:	0005883a 	mov	r2,zero
    9188:	003fee06 	br	9144 <__alt_data_end+0xf8009144>

0000918c <_fclose_r>:
    918c:	28003926 	beq	r5,zero,9274 <_fclose_r+0xe8>
    9190:	defffc04 	addi	sp,sp,-16
    9194:	dc400115 	stw	r17,4(sp)
    9198:	dc000015 	stw	r16,0(sp)
    919c:	dfc00315 	stw	ra,12(sp)
    91a0:	dc800215 	stw	r18,8(sp)
    91a4:	2023883a 	mov	r17,r4
    91a8:	2821883a 	mov	r16,r5
    91ac:	20000226 	beq	r4,zero,91b8 <_fclose_r+0x2c>
    91b0:	20800e17 	ldw	r2,56(r4)
    91b4:	10002726 	beq	r2,zero,9254 <_fclose_r+0xc8>
    91b8:	8080030f 	ldh	r2,12(r16)
    91bc:	1000071e 	bne	r2,zero,91dc <_fclose_r+0x50>
    91c0:	0005883a 	mov	r2,zero
    91c4:	dfc00317 	ldw	ra,12(sp)
    91c8:	dc800217 	ldw	r18,8(sp)
    91cc:	dc400117 	ldw	r17,4(sp)
    91d0:	dc000017 	ldw	r16,0(sp)
    91d4:	dec00404 	addi	sp,sp,16
    91d8:	f800283a 	ret
    91dc:	800b883a 	mov	r5,r16
    91e0:	8809883a 	mov	r4,r17
    91e4:	00041780 	call	4178 <__sflush_r>
    91e8:	1025883a 	mov	r18,r2
    91ec:	80800b17 	ldw	r2,44(r16)
    91f0:	10000426 	beq	r2,zero,9204 <_fclose_r+0x78>
    91f4:	81400717 	ldw	r5,28(r16)
    91f8:	8809883a 	mov	r4,r17
    91fc:	103ee83a 	callr	r2
    9200:	10001616 	blt	r2,zero,925c <_fclose_r+0xd0>
    9204:	8080030b 	ldhu	r2,12(r16)
    9208:	1080200c 	andi	r2,r2,128
    920c:	1000151e 	bne	r2,zero,9264 <_fclose_r+0xd8>
    9210:	81400c17 	ldw	r5,48(r16)
    9214:	28000526 	beq	r5,zero,922c <_fclose_r+0xa0>
    9218:	80801004 	addi	r2,r16,64
    921c:	28800226 	beq	r5,r2,9228 <_fclose_r+0x9c>
    9220:	8809883a 	mov	r4,r17
    9224:	00048e40 	call	48e4 <_free_r>
    9228:	80000c15 	stw	zero,48(r16)
    922c:	81401117 	ldw	r5,68(r16)
    9230:	28000326 	beq	r5,zero,9240 <_fclose_r+0xb4>
    9234:	8809883a 	mov	r4,r17
    9238:	00048e40 	call	48e4 <_free_r>
    923c:	80001115 	stw	zero,68(r16)
    9240:	00047800 	call	4780 <__sfp_lock_acquire>
    9244:	8000030d 	sth	zero,12(r16)
    9248:	00047840 	call	4784 <__sfp_lock_release>
    924c:	9005883a 	mov	r2,r18
    9250:	003fdc06 	br	91c4 <__alt_data_end+0xf80091c4>
    9254:	00047700 	call	4770 <__sinit>
    9258:	003fd706 	br	91b8 <__alt_data_end+0xf80091b8>
    925c:	04bfffc4 	movi	r18,-1
    9260:	003fe806 	br	9204 <__alt_data_end+0xf8009204>
    9264:	81400417 	ldw	r5,16(r16)
    9268:	8809883a 	mov	r4,r17
    926c:	00048e40 	call	48e4 <_free_r>
    9270:	003fe706 	br	9210 <__alt_data_end+0xf8009210>
    9274:	0005883a 	mov	r2,zero
    9278:	f800283a 	ret

0000927c <fclose>:
    927c:	00800074 	movhi	r2,1
    9280:	10859b04 	addi	r2,r2,5740
    9284:	200b883a 	mov	r5,r4
    9288:	11000017 	ldw	r4,0(r2)
    928c:	000918c1 	jmpi	918c <_fclose_r>

00009290 <__fputwc>:
    9290:	defff804 	addi	sp,sp,-32
    9294:	dcc00415 	stw	r19,16(sp)
    9298:	dc800315 	stw	r18,12(sp)
    929c:	dc000115 	stw	r16,4(sp)
    92a0:	dfc00715 	stw	ra,28(sp)
    92a4:	dd400615 	stw	r21,24(sp)
    92a8:	dd000515 	stw	r20,20(sp)
    92ac:	dc400215 	stw	r17,8(sp)
    92b0:	2027883a 	mov	r19,r4
    92b4:	2825883a 	mov	r18,r5
    92b8:	3021883a 	mov	r16,r6
    92bc:	00052c00 	call	52c0 <__locale_mb_cur_max>
    92c0:	00c00044 	movi	r3,1
    92c4:	10c03e26 	beq	r2,r3,93c0 <__fputwc+0x130>
    92c8:	81c01704 	addi	r7,r16,92
    92cc:	900d883a 	mov	r6,r18
    92d0:	d80b883a 	mov	r5,sp
    92d4:	9809883a 	mov	r4,r19
    92d8:	00097600 	call	9760 <_wcrtomb_r>
    92dc:	1029883a 	mov	r20,r2
    92e0:	00bfffc4 	movi	r2,-1
    92e4:	a0802026 	beq	r20,r2,9368 <__fputwc+0xd8>
    92e8:	d9400003 	ldbu	r5,0(sp)
    92ec:	a0001c26 	beq	r20,zero,9360 <__fputwc+0xd0>
    92f0:	0023883a 	mov	r17,zero
    92f4:	05400284 	movi	r21,10
    92f8:	00000906 	br	9320 <__fputwc+0x90>
    92fc:	80800017 	ldw	r2,0(r16)
    9300:	11400005 	stb	r5,0(r2)
    9304:	80c00017 	ldw	r3,0(r16)
    9308:	18c00044 	addi	r3,r3,1
    930c:	80c00015 	stw	r3,0(r16)
    9310:	8c400044 	addi	r17,r17,1
    9314:	dc45883a 	add	r2,sp,r17
    9318:	8d00112e 	bgeu	r17,r20,9360 <__fputwc+0xd0>
    931c:	11400003 	ldbu	r5,0(r2)
    9320:	80c00217 	ldw	r3,8(r16)
    9324:	18ffffc4 	addi	r3,r3,-1
    9328:	80c00215 	stw	r3,8(r16)
    932c:	183ff30e 	bge	r3,zero,92fc <__alt_data_end+0xf80092fc>
    9330:	80800617 	ldw	r2,24(r16)
    9334:	18801916 	blt	r3,r2,939c <__fputwc+0x10c>
    9338:	80800017 	ldw	r2,0(r16)
    933c:	11400005 	stb	r5,0(r2)
    9340:	80800017 	ldw	r2,0(r16)
    9344:	10c00003 	ldbu	r3,0(r2)
    9348:	10800044 	addi	r2,r2,1
    934c:	1d402326 	beq	r3,r21,93dc <__fputwc+0x14c>
    9350:	80800015 	stw	r2,0(r16)
    9354:	8c400044 	addi	r17,r17,1
    9358:	dc45883a 	add	r2,sp,r17
    935c:	8d3fef36 	bltu	r17,r20,931c <__alt_data_end+0xf800931c>
    9360:	9005883a 	mov	r2,r18
    9364:	00000406 	br	9378 <__fputwc+0xe8>
    9368:	80c0030b 	ldhu	r3,12(r16)
    936c:	a005883a 	mov	r2,r20
    9370:	18c01014 	ori	r3,r3,64
    9374:	80c0030d 	sth	r3,12(r16)
    9378:	dfc00717 	ldw	ra,28(sp)
    937c:	dd400617 	ldw	r21,24(sp)
    9380:	dd000517 	ldw	r20,20(sp)
    9384:	dcc00417 	ldw	r19,16(sp)
    9388:	dc800317 	ldw	r18,12(sp)
    938c:	dc400217 	ldw	r17,8(sp)
    9390:	dc000117 	ldw	r16,4(sp)
    9394:	dec00804 	addi	sp,sp,32
    9398:	f800283a 	ret
    939c:	800d883a 	mov	r6,r16
    93a0:	29403fcc 	andi	r5,r5,255
    93a4:	9809883a 	mov	r4,r19
    93a8:	00096080 	call	9608 <__swbuf_r>
    93ac:	10bfffe0 	cmpeqi	r2,r2,-1
    93b0:	10803fcc 	andi	r2,r2,255
    93b4:	103fd626 	beq	r2,zero,9310 <__alt_data_end+0xf8009310>
    93b8:	00bfffc4 	movi	r2,-1
    93bc:	003fee06 	br	9378 <__alt_data_end+0xf8009378>
    93c0:	90ffffc4 	addi	r3,r18,-1
    93c4:	01003f84 	movi	r4,254
    93c8:	20ffbf36 	bltu	r4,r3,92c8 <__alt_data_end+0xf80092c8>
    93cc:	900b883a 	mov	r5,r18
    93d0:	dc800005 	stb	r18,0(sp)
    93d4:	1029883a 	mov	r20,r2
    93d8:	003fc506 	br	92f0 <__alt_data_end+0xf80092f0>
    93dc:	800d883a 	mov	r6,r16
    93e0:	a80b883a 	mov	r5,r21
    93e4:	9809883a 	mov	r4,r19
    93e8:	00096080 	call	9608 <__swbuf_r>
    93ec:	10bfffe0 	cmpeqi	r2,r2,-1
    93f0:	003fef06 	br	93b0 <__alt_data_end+0xf80093b0>

000093f4 <_fputwc_r>:
    93f4:	3080030b 	ldhu	r2,12(r6)
    93f8:	10c8000c 	andi	r3,r2,8192
    93fc:	1800051e 	bne	r3,zero,9414 <_fputwc_r+0x20>
    9400:	30c01917 	ldw	r3,100(r6)
    9404:	10880014 	ori	r2,r2,8192
    9408:	3080030d 	sth	r2,12(r6)
    940c:	18880014 	ori	r2,r3,8192
    9410:	30801915 	stw	r2,100(r6)
    9414:	00092901 	jmpi	9290 <__fputwc>

00009418 <fputwc>:
    9418:	00800074 	movhi	r2,1
    941c:	defffc04 	addi	sp,sp,-16
    9420:	10859b04 	addi	r2,r2,5740
    9424:	dc000115 	stw	r16,4(sp)
    9428:	14000017 	ldw	r16,0(r2)
    942c:	dc400215 	stw	r17,8(sp)
    9430:	dfc00315 	stw	ra,12(sp)
    9434:	2023883a 	mov	r17,r4
    9438:	80000226 	beq	r16,zero,9444 <fputwc+0x2c>
    943c:	80800e17 	ldw	r2,56(r16)
    9440:	10001026 	beq	r2,zero,9484 <fputwc+0x6c>
    9444:	2880030b 	ldhu	r2,12(r5)
    9448:	10c8000c 	andi	r3,r2,8192
    944c:	1800051e 	bne	r3,zero,9464 <fputwc+0x4c>
    9450:	28c01917 	ldw	r3,100(r5)
    9454:	10880014 	ori	r2,r2,8192
    9458:	2880030d 	sth	r2,12(r5)
    945c:	18880014 	ori	r2,r3,8192
    9460:	28801915 	stw	r2,100(r5)
    9464:	280d883a 	mov	r6,r5
    9468:	8009883a 	mov	r4,r16
    946c:	880b883a 	mov	r5,r17
    9470:	dfc00317 	ldw	ra,12(sp)
    9474:	dc400217 	ldw	r17,8(sp)
    9478:	dc000117 	ldw	r16,4(sp)
    947c:	dec00404 	addi	sp,sp,16
    9480:	00092901 	jmpi	9290 <__fputwc>
    9484:	8009883a 	mov	r4,r16
    9488:	d9400015 	stw	r5,0(sp)
    948c:	00047700 	call	4770 <__sinit>
    9490:	d9400017 	ldw	r5,0(sp)
    9494:	003feb06 	br	9444 <__alt_data_end+0xf8009444>

00009498 <_fstat_r>:
    9498:	defffd04 	addi	sp,sp,-12
    949c:	2805883a 	mov	r2,r5
    94a0:	dc000015 	stw	r16,0(sp)
    94a4:	04000074 	movhi	r16,1
    94a8:	dc400115 	stw	r17,4(sp)
    94ac:	840c9904 	addi	r16,r16,12900
    94b0:	2023883a 	mov	r17,r4
    94b4:	300b883a 	mov	r5,r6
    94b8:	1009883a 	mov	r4,r2
    94bc:	dfc00215 	stw	ra,8(sp)
    94c0:	80000015 	stw	zero,0(r16)
    94c4:	000cd880 	call	cd88 <fstat>
    94c8:	00ffffc4 	movi	r3,-1
    94cc:	10c00526 	beq	r2,r3,94e4 <_fstat_r+0x4c>
    94d0:	dfc00217 	ldw	ra,8(sp)
    94d4:	dc400117 	ldw	r17,4(sp)
    94d8:	dc000017 	ldw	r16,0(sp)
    94dc:	dec00304 	addi	sp,sp,12
    94e0:	f800283a 	ret
    94e4:	80c00017 	ldw	r3,0(r16)
    94e8:	183ff926 	beq	r3,zero,94d0 <__alt_data_end+0xf80094d0>
    94ec:	88c00015 	stw	r3,0(r17)
    94f0:	003ff706 	br	94d0 <__alt_data_end+0xf80094d0>

000094f4 <_isatty_r>:
    94f4:	defffd04 	addi	sp,sp,-12
    94f8:	dc000015 	stw	r16,0(sp)
    94fc:	04000074 	movhi	r16,1
    9500:	dc400115 	stw	r17,4(sp)
    9504:	840c9904 	addi	r16,r16,12900
    9508:	2023883a 	mov	r17,r4
    950c:	2809883a 	mov	r4,r5
    9510:	dfc00215 	stw	ra,8(sp)
    9514:	80000015 	stw	zero,0(r16)
    9518:	000ce740 	call	ce74 <isatty>
    951c:	00ffffc4 	movi	r3,-1
    9520:	10c00526 	beq	r2,r3,9538 <_isatty_r+0x44>
    9524:	dfc00217 	ldw	ra,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00304 	addi	sp,sp,12
    9534:	f800283a 	ret
    9538:	80c00017 	ldw	r3,0(r16)
    953c:	183ff926 	beq	r3,zero,9524 <__alt_data_end+0xf8009524>
    9540:	88c00015 	stw	r3,0(r17)
    9544:	003ff706 	br	9524 <__alt_data_end+0xf8009524>

00009548 <_lseek_r>:
    9548:	defffd04 	addi	sp,sp,-12
    954c:	2805883a 	mov	r2,r5
    9550:	dc000015 	stw	r16,0(sp)
    9554:	04000074 	movhi	r16,1
    9558:	dc400115 	stw	r17,4(sp)
    955c:	300b883a 	mov	r5,r6
    9560:	840c9904 	addi	r16,r16,12900
    9564:	2023883a 	mov	r17,r4
    9568:	380d883a 	mov	r6,r7
    956c:	1009883a 	mov	r4,r2
    9570:	dfc00215 	stw	ra,8(sp)
    9574:	80000015 	stw	zero,0(r16)
    9578:	000d0400 	call	d040 <lseek>
    957c:	00ffffc4 	movi	r3,-1
    9580:	10c00526 	beq	r2,r3,9598 <_lseek_r+0x50>
    9584:	dfc00217 	ldw	ra,8(sp)
    9588:	dc400117 	ldw	r17,4(sp)
    958c:	dc000017 	ldw	r16,0(sp)
    9590:	dec00304 	addi	sp,sp,12
    9594:	f800283a 	ret
    9598:	80c00017 	ldw	r3,0(r16)
    959c:	183ff926 	beq	r3,zero,9584 <__alt_data_end+0xf8009584>
    95a0:	88c00015 	stw	r3,0(r17)
    95a4:	003ff706 	br	9584 <__alt_data_end+0xf8009584>

000095a8 <_read_r>:
    95a8:	defffd04 	addi	sp,sp,-12
    95ac:	2805883a 	mov	r2,r5
    95b0:	dc000015 	stw	r16,0(sp)
    95b4:	04000074 	movhi	r16,1
    95b8:	dc400115 	stw	r17,4(sp)
    95bc:	300b883a 	mov	r5,r6
    95c0:	840c9904 	addi	r16,r16,12900
    95c4:	2023883a 	mov	r17,r4
    95c8:	380d883a 	mov	r6,r7
    95cc:	1009883a 	mov	r4,r2
    95d0:	dfc00215 	stw	ra,8(sp)
    95d4:	80000015 	stw	zero,0(r16)
    95d8:	000d2140 	call	d214 <read>
    95dc:	00ffffc4 	movi	r3,-1
    95e0:	10c00526 	beq	r2,r3,95f8 <_read_r+0x50>
    95e4:	dfc00217 	ldw	ra,8(sp)
    95e8:	dc400117 	ldw	r17,4(sp)
    95ec:	dc000017 	ldw	r16,0(sp)
    95f0:	dec00304 	addi	sp,sp,12
    95f4:	f800283a 	ret
    95f8:	80c00017 	ldw	r3,0(r16)
    95fc:	183ff926 	beq	r3,zero,95e4 <__alt_data_end+0xf80095e4>
    9600:	88c00015 	stw	r3,0(r17)
    9604:	003ff706 	br	95e4 <__alt_data_end+0xf80095e4>

00009608 <__swbuf_r>:
    9608:	defffb04 	addi	sp,sp,-20
    960c:	dcc00315 	stw	r19,12(sp)
    9610:	dc800215 	stw	r18,8(sp)
    9614:	dc000015 	stw	r16,0(sp)
    9618:	dfc00415 	stw	ra,16(sp)
    961c:	dc400115 	stw	r17,4(sp)
    9620:	2025883a 	mov	r18,r4
    9624:	2827883a 	mov	r19,r5
    9628:	3021883a 	mov	r16,r6
    962c:	20000226 	beq	r4,zero,9638 <__swbuf_r+0x30>
    9630:	20800e17 	ldw	r2,56(r4)
    9634:	10004226 	beq	r2,zero,9740 <__swbuf_r+0x138>
    9638:	80800617 	ldw	r2,24(r16)
    963c:	8100030b 	ldhu	r4,12(r16)
    9640:	80800215 	stw	r2,8(r16)
    9644:	2080020c 	andi	r2,r4,8
    9648:	10003626 	beq	r2,zero,9724 <__swbuf_r+0x11c>
    964c:	80c00417 	ldw	r3,16(r16)
    9650:	18003426 	beq	r3,zero,9724 <__swbuf_r+0x11c>
    9654:	2088000c 	andi	r2,r4,8192
    9658:	9c403fcc 	andi	r17,r19,255
    965c:	10001a26 	beq	r2,zero,96c8 <__swbuf_r+0xc0>
    9660:	80800017 	ldw	r2,0(r16)
    9664:	81000517 	ldw	r4,20(r16)
    9668:	10c7c83a 	sub	r3,r2,r3
    966c:	1900200e 	bge	r3,r4,96f0 <__swbuf_r+0xe8>
    9670:	18c00044 	addi	r3,r3,1
    9674:	81000217 	ldw	r4,8(r16)
    9678:	11400044 	addi	r5,r2,1
    967c:	81400015 	stw	r5,0(r16)
    9680:	213fffc4 	addi	r4,r4,-1
    9684:	81000215 	stw	r4,8(r16)
    9688:	14c00005 	stb	r19,0(r2)
    968c:	80800517 	ldw	r2,20(r16)
    9690:	10c01e26 	beq	r2,r3,970c <__swbuf_r+0x104>
    9694:	8080030b 	ldhu	r2,12(r16)
    9698:	1080004c 	andi	r2,r2,1
    969c:	10000226 	beq	r2,zero,96a8 <__swbuf_r+0xa0>
    96a0:	00800284 	movi	r2,10
    96a4:	88801926 	beq	r17,r2,970c <__swbuf_r+0x104>
    96a8:	8805883a 	mov	r2,r17
    96ac:	dfc00417 	ldw	ra,16(sp)
    96b0:	dcc00317 	ldw	r19,12(sp)
    96b4:	dc800217 	ldw	r18,8(sp)
    96b8:	dc400117 	ldw	r17,4(sp)
    96bc:	dc000017 	ldw	r16,0(sp)
    96c0:	dec00504 	addi	sp,sp,20
    96c4:	f800283a 	ret
    96c8:	81401917 	ldw	r5,100(r16)
    96cc:	00b7ffc4 	movi	r2,-8193
    96d0:	21080014 	ori	r4,r4,8192
    96d4:	2884703a 	and	r2,r5,r2
    96d8:	80801915 	stw	r2,100(r16)
    96dc:	80800017 	ldw	r2,0(r16)
    96e0:	8100030d 	sth	r4,12(r16)
    96e4:	81000517 	ldw	r4,20(r16)
    96e8:	10c7c83a 	sub	r3,r2,r3
    96ec:	193fe016 	blt	r3,r4,9670 <__alt_data_end+0xf8009670>
    96f0:	800b883a 	mov	r5,r16
    96f4:	9009883a 	mov	r4,r18
    96f8:	00043940 	call	4394 <_fflush_r>
    96fc:	1000071e 	bne	r2,zero,971c <__swbuf_r+0x114>
    9700:	80800017 	ldw	r2,0(r16)
    9704:	00c00044 	movi	r3,1
    9708:	003fda06 	br	9674 <__alt_data_end+0xf8009674>
    970c:	800b883a 	mov	r5,r16
    9710:	9009883a 	mov	r4,r18
    9714:	00043940 	call	4394 <_fflush_r>
    9718:	103fe326 	beq	r2,zero,96a8 <__alt_data_end+0xf80096a8>
    971c:	00bfffc4 	movi	r2,-1
    9720:	003fe206 	br	96ac <__alt_data_end+0xf80096ac>
    9724:	800b883a 	mov	r5,r16
    9728:	9009883a 	mov	r4,r18
    972c:	000279c0 	call	279c <__swsetup_r>
    9730:	103ffa1e 	bne	r2,zero,971c <__alt_data_end+0xf800971c>
    9734:	8100030b 	ldhu	r4,12(r16)
    9738:	80c00417 	ldw	r3,16(r16)
    973c:	003fc506 	br	9654 <__alt_data_end+0xf8009654>
    9740:	00047700 	call	4770 <__sinit>
    9744:	003fbc06 	br	9638 <__alt_data_end+0xf8009638>

00009748 <__swbuf>:
    9748:	00800074 	movhi	r2,1
    974c:	10859b04 	addi	r2,r2,5740
    9750:	280d883a 	mov	r6,r5
    9754:	200b883a 	mov	r5,r4
    9758:	11000017 	ldw	r4,0(r2)
    975c:	00096081 	jmpi	9608 <__swbuf_r>

00009760 <_wcrtomb_r>:
    9760:	defff604 	addi	sp,sp,-40
    9764:	00800074 	movhi	r2,1
    9768:	dc800815 	stw	r18,32(sp)
    976c:	dc400715 	stw	r17,28(sp)
    9770:	dc000615 	stw	r16,24(sp)
    9774:	10859f04 	addi	r2,r2,5756
    9778:	dfc00915 	stw	ra,36(sp)
    977c:	2021883a 	mov	r16,r4
    9780:	3823883a 	mov	r17,r7
    9784:	14800017 	ldw	r18,0(r2)
    9788:	28001426 	beq	r5,zero,97dc <_wcrtomb_r+0x7c>
    978c:	d9400415 	stw	r5,16(sp)
    9790:	d9800515 	stw	r6,20(sp)
    9794:	00052b40 	call	52b4 <__locale_charset>
    9798:	d9800517 	ldw	r6,20(sp)
    979c:	d9400417 	ldw	r5,16(sp)
    97a0:	100f883a 	mov	r7,r2
    97a4:	dc400015 	stw	r17,0(sp)
    97a8:	8009883a 	mov	r4,r16
    97ac:	903ee83a 	callr	r18
    97b0:	00ffffc4 	movi	r3,-1
    97b4:	10c0031e 	bne	r2,r3,97c4 <_wcrtomb_r+0x64>
    97b8:	88000015 	stw	zero,0(r17)
    97bc:	00c02284 	movi	r3,138
    97c0:	80c00015 	stw	r3,0(r16)
    97c4:	dfc00917 	ldw	ra,36(sp)
    97c8:	dc800817 	ldw	r18,32(sp)
    97cc:	dc400717 	ldw	r17,28(sp)
    97d0:	dc000617 	ldw	r16,24(sp)
    97d4:	dec00a04 	addi	sp,sp,40
    97d8:	f800283a 	ret
    97dc:	00052b40 	call	52b4 <__locale_charset>
    97e0:	100f883a 	mov	r7,r2
    97e4:	dc400015 	stw	r17,0(sp)
    97e8:	000d883a 	mov	r6,zero
    97ec:	d9400104 	addi	r5,sp,4
    97f0:	8009883a 	mov	r4,r16
    97f4:	903ee83a 	callr	r18
    97f8:	003fed06 	br	97b0 <__alt_data_end+0xf80097b0>

000097fc <wcrtomb>:
    97fc:	defff604 	addi	sp,sp,-40
    9800:	00800074 	movhi	r2,1
    9804:	dc800615 	stw	r18,24(sp)
    9808:	dc400515 	stw	r17,20(sp)
    980c:	10859b04 	addi	r2,r2,5740
    9810:	dfc00915 	stw	ra,36(sp)
    9814:	dd000815 	stw	r20,32(sp)
    9818:	dcc00715 	stw	r19,28(sp)
    981c:	dc000415 	stw	r16,16(sp)
    9820:	3025883a 	mov	r18,r6
    9824:	14400017 	ldw	r17,0(r2)
    9828:	20001926 	beq	r4,zero,9890 <wcrtomb+0x94>
    982c:	00800074 	movhi	r2,1
    9830:	10859f04 	addi	r2,r2,5756
    9834:	15000017 	ldw	r20,0(r2)
    9838:	2021883a 	mov	r16,r4
    983c:	2827883a 	mov	r19,r5
    9840:	00052b40 	call	52b4 <__locale_charset>
    9844:	100f883a 	mov	r7,r2
    9848:	dc800015 	stw	r18,0(sp)
    984c:	980d883a 	mov	r6,r19
    9850:	800b883a 	mov	r5,r16
    9854:	8809883a 	mov	r4,r17
    9858:	a03ee83a 	callr	r20
    985c:	00ffffc4 	movi	r3,-1
    9860:	10c0031e 	bne	r2,r3,9870 <wcrtomb+0x74>
    9864:	90000015 	stw	zero,0(r18)
    9868:	00c02284 	movi	r3,138
    986c:	88c00015 	stw	r3,0(r17)
    9870:	dfc00917 	ldw	ra,36(sp)
    9874:	dd000817 	ldw	r20,32(sp)
    9878:	dcc00717 	ldw	r19,28(sp)
    987c:	dc800617 	ldw	r18,24(sp)
    9880:	dc400517 	ldw	r17,20(sp)
    9884:	dc000417 	ldw	r16,16(sp)
    9888:	dec00a04 	addi	sp,sp,40
    988c:	f800283a 	ret
    9890:	00800074 	movhi	r2,1
    9894:	10859f04 	addi	r2,r2,5756
    9898:	14000017 	ldw	r16,0(r2)
    989c:	00052b40 	call	52b4 <__locale_charset>
    98a0:	100f883a 	mov	r7,r2
    98a4:	dc800015 	stw	r18,0(sp)
    98a8:	000d883a 	mov	r6,zero
    98ac:	d9400104 	addi	r5,sp,4
    98b0:	8809883a 	mov	r4,r17
    98b4:	803ee83a 	callr	r16
    98b8:	003fe806 	br	985c <__alt_data_end+0xf800985c>

000098bc <__ascii_wctomb>:
    98bc:	28000526 	beq	r5,zero,98d4 <__ascii_wctomb+0x18>
    98c0:	00803fc4 	movi	r2,255
    98c4:	11800536 	bltu	r2,r6,98dc <__ascii_wctomb+0x20>
    98c8:	29800005 	stb	r6,0(r5)
    98cc:	00800044 	movi	r2,1
    98d0:	f800283a 	ret
    98d4:	0005883a 	mov	r2,zero
    98d8:	f800283a 	ret
    98dc:	00802284 	movi	r2,138
    98e0:	20800015 	stw	r2,0(r4)
    98e4:	00bfffc4 	movi	r2,-1
    98e8:	f800283a 	ret

000098ec <_wctomb_r>:
    98ec:	00800074 	movhi	r2,1
    98f0:	defff904 	addi	sp,sp,-28
    98f4:	10859f04 	addi	r2,r2,5756
    98f8:	dfc00615 	stw	ra,24(sp)
    98fc:	dc400515 	stw	r17,20(sp)
    9900:	dc000415 	stw	r16,16(sp)
    9904:	3823883a 	mov	r17,r7
    9908:	14000017 	ldw	r16,0(r2)
    990c:	d9000115 	stw	r4,4(sp)
    9910:	d9400215 	stw	r5,8(sp)
    9914:	d9800315 	stw	r6,12(sp)
    9918:	00052b40 	call	52b4 <__locale_charset>
    991c:	d9800317 	ldw	r6,12(sp)
    9920:	d9400217 	ldw	r5,8(sp)
    9924:	d9000117 	ldw	r4,4(sp)
    9928:	100f883a 	mov	r7,r2
    992c:	dc400015 	stw	r17,0(sp)
    9930:	803ee83a 	callr	r16
    9934:	dfc00617 	ldw	ra,24(sp)
    9938:	dc400517 	ldw	r17,20(sp)
    993c:	dc000417 	ldw	r16,16(sp)
    9940:	dec00704 	addi	sp,sp,28
    9944:	f800283a 	ret

00009948 <__udivdi3>:
    9948:	defff504 	addi	sp,sp,-44
    994c:	dcc00415 	stw	r19,16(sp)
    9950:	dc000115 	stw	r16,4(sp)
    9954:	dfc00a15 	stw	ra,40(sp)
    9958:	df000915 	stw	fp,36(sp)
    995c:	ddc00815 	stw	r23,32(sp)
    9960:	dd800715 	stw	r22,28(sp)
    9964:	dd400615 	stw	r21,24(sp)
    9968:	dd000515 	stw	r20,20(sp)
    996c:	dc800315 	stw	r18,12(sp)
    9970:	dc400215 	stw	r17,8(sp)
    9974:	2027883a 	mov	r19,r4
    9978:	2821883a 	mov	r16,r5
    997c:	3800411e 	bne	r7,zero,9a84 <__udivdi3+0x13c>
    9980:	3023883a 	mov	r17,r6
    9984:	2025883a 	mov	r18,r4
    9988:	2980522e 	bgeu	r5,r6,9ad4 <__udivdi3+0x18c>
    998c:	00bfffd4 	movui	r2,65535
    9990:	282d883a 	mov	r22,r5
    9994:	1180a836 	bltu	r2,r6,9c38 <__udivdi3+0x2f0>
    9998:	00803fc4 	movi	r2,255
    999c:	1185803a 	cmpltu	r2,r2,r6
    99a0:	100490fa 	slli	r2,r2,3
    99a4:	3086d83a 	srl	r3,r6,r2
    99a8:	01000074 	movhi	r4,1
    99ac:	213e6204 	addi	r4,r4,-1656
    99b0:	20c7883a 	add	r3,r4,r3
    99b4:	18c00003 	ldbu	r3,0(r3)
    99b8:	1885883a 	add	r2,r3,r2
    99bc:	00c00804 	movi	r3,32
    99c0:	1887c83a 	sub	r3,r3,r2
    99c4:	18000526 	beq	r3,zero,99dc <__udivdi3+0x94>
    99c8:	80e0983a 	sll	r16,r16,r3
    99cc:	9884d83a 	srl	r2,r19,r2
    99d0:	30e2983a 	sll	r17,r6,r3
    99d4:	98e4983a 	sll	r18,r19,r3
    99d8:	142cb03a 	or	r22,r2,r16
    99dc:	882ad43a 	srli	r21,r17,16
    99e0:	b009883a 	mov	r4,r22
    99e4:	8d3fffcc 	andi	r20,r17,65535
    99e8:	a80b883a 	mov	r5,r21
    99ec:	000a5540 	call	a554 <__umodsi3>
    99f0:	b009883a 	mov	r4,r22
    99f4:	a80b883a 	mov	r5,r21
    99f8:	1027883a 	mov	r19,r2
    99fc:	000a4f00 	call	a4f0 <__udivsi3>
    9a00:	102d883a 	mov	r22,r2
    9a04:	9826943a 	slli	r19,r19,16
    9a08:	9004d43a 	srli	r2,r18,16
    9a0c:	a5a1383a 	mul	r16,r20,r22
    9a10:	14c4b03a 	or	r2,r2,r19
    9a14:	1400052e 	bgeu	r2,r16,9a2c <__udivdi3+0xe4>
    9a18:	1445883a 	add	r2,r2,r17
    9a1c:	b0ffffc4 	addi	r3,r22,-1
    9a20:	14400136 	bltu	r2,r17,9a28 <__udivdi3+0xe0>
    9a24:	14012336 	bltu	r2,r16,9eb4 <__udivdi3+0x56c>
    9a28:	182d883a 	mov	r22,r3
    9a2c:	1421c83a 	sub	r16,r2,r16
    9a30:	a80b883a 	mov	r5,r21
    9a34:	8009883a 	mov	r4,r16
    9a38:	000a5540 	call	a554 <__umodsi3>
    9a3c:	1027883a 	mov	r19,r2
    9a40:	a80b883a 	mov	r5,r21
    9a44:	8009883a 	mov	r4,r16
    9a48:	000a4f00 	call	a4f0 <__udivsi3>
    9a4c:	9826943a 	slli	r19,r19,16
    9a50:	a0a9383a 	mul	r20,r20,r2
    9a54:	94bfffcc 	andi	r18,r18,65535
    9a58:	94e4b03a 	or	r18,r18,r19
    9a5c:	9500052e 	bgeu	r18,r20,9a74 <__udivdi3+0x12c>
    9a60:	8ca5883a 	add	r18,r17,r18
    9a64:	10ffffc4 	addi	r3,r2,-1
    9a68:	9440f136 	bltu	r18,r17,9e30 <__udivdi3+0x4e8>
    9a6c:	9500f02e 	bgeu	r18,r20,9e30 <__udivdi3+0x4e8>
    9a70:	10bfff84 	addi	r2,r2,-2
    9a74:	b00c943a 	slli	r6,r22,16
    9a78:	0007883a 	mov	r3,zero
    9a7c:	3084b03a 	or	r2,r6,r2
    9a80:	00005906 	br	9be8 <__udivdi3+0x2a0>
    9a84:	29c05636 	bltu	r5,r7,9be0 <__udivdi3+0x298>
    9a88:	00bfffd4 	movui	r2,65535
    9a8c:	11c0622e 	bgeu	r2,r7,9c18 <__udivdi3+0x2d0>
    9a90:	00804034 	movhi	r2,256
    9a94:	10bfffc4 	addi	r2,r2,-1
    9a98:	11c0ee36 	bltu	r2,r7,9e54 <__udivdi3+0x50c>
    9a9c:	00800404 	movi	r2,16
    9aa0:	3886d83a 	srl	r3,r7,r2
    9aa4:	01000074 	movhi	r4,1
    9aa8:	213e6204 	addi	r4,r4,-1656
    9aac:	20c7883a 	add	r3,r4,r3
    9ab0:	18c00003 	ldbu	r3,0(r3)
    9ab4:	05400804 	movi	r21,32
    9ab8:	1885883a 	add	r2,r3,r2
    9abc:	a8abc83a 	sub	r21,r21,r2
    9ac0:	a800621e 	bne	r21,zero,9c4c <__udivdi3+0x304>
    9ac4:	3c00e936 	bltu	r7,r16,9e6c <__udivdi3+0x524>
    9ac8:	9985403a 	cmpgeu	r2,r19,r6
    9acc:	0007883a 	mov	r3,zero
    9ad0:	00004506 	br	9be8 <__udivdi3+0x2a0>
    9ad4:	3000041e 	bne	r6,zero,9ae8 <__udivdi3+0x1a0>
    9ad8:	000b883a 	mov	r5,zero
    9adc:	01000044 	movi	r4,1
    9ae0:	000a4f00 	call	a4f0 <__udivsi3>
    9ae4:	1023883a 	mov	r17,r2
    9ae8:	00bfffd4 	movui	r2,65535
    9aec:	14404e2e 	bgeu	r2,r17,9c28 <__udivdi3+0x2e0>
    9af0:	00804034 	movhi	r2,256
    9af4:	10bfffc4 	addi	r2,r2,-1
    9af8:	1440d836 	bltu	r2,r17,9e5c <__udivdi3+0x514>
    9afc:	00800404 	movi	r2,16
    9b00:	8886d83a 	srl	r3,r17,r2
    9b04:	01000074 	movhi	r4,1
    9b08:	213e6204 	addi	r4,r4,-1656
    9b0c:	20c7883a 	add	r3,r4,r3
    9b10:	18c00003 	ldbu	r3,0(r3)
    9b14:	1885883a 	add	r2,r3,r2
    9b18:	00c00804 	movi	r3,32
    9b1c:	1887c83a 	sub	r3,r3,r2
    9b20:	18008f1e 	bne	r3,zero,9d60 <__udivdi3+0x418>
    9b24:	882ad43a 	srli	r21,r17,16
    9b28:	8461c83a 	sub	r16,r16,r17
    9b2c:	8d3fffcc 	andi	r20,r17,65535
    9b30:	00c00044 	movi	r3,1
    9b34:	8009883a 	mov	r4,r16
    9b38:	a80b883a 	mov	r5,r21
    9b3c:	d8c00015 	stw	r3,0(sp)
    9b40:	000a5540 	call	a554 <__umodsi3>
    9b44:	8009883a 	mov	r4,r16
    9b48:	a80b883a 	mov	r5,r21
    9b4c:	1027883a 	mov	r19,r2
    9b50:	000a4f00 	call	a4f0 <__udivsi3>
    9b54:	9826943a 	slli	r19,r19,16
    9b58:	9008d43a 	srli	r4,r18,16
    9b5c:	1521383a 	mul	r16,r2,r20
    9b60:	102d883a 	mov	r22,r2
    9b64:	24c8b03a 	or	r4,r4,r19
    9b68:	d8c00017 	ldw	r3,0(sp)
    9b6c:	2400052e 	bgeu	r4,r16,9b84 <__udivdi3+0x23c>
    9b70:	2449883a 	add	r4,r4,r17
    9b74:	b0bfffc4 	addi	r2,r22,-1
    9b78:	24400136 	bltu	r4,r17,9b80 <__udivdi3+0x238>
    9b7c:	2400ca36 	bltu	r4,r16,9ea8 <__udivdi3+0x560>
    9b80:	102d883a 	mov	r22,r2
    9b84:	2421c83a 	sub	r16,r4,r16
    9b88:	a80b883a 	mov	r5,r21
    9b8c:	8009883a 	mov	r4,r16
    9b90:	d8c00015 	stw	r3,0(sp)
    9b94:	000a5540 	call	a554 <__umodsi3>
    9b98:	1027883a 	mov	r19,r2
    9b9c:	a80b883a 	mov	r5,r21
    9ba0:	8009883a 	mov	r4,r16
    9ba4:	000a4f00 	call	a4f0 <__udivsi3>
    9ba8:	9826943a 	slli	r19,r19,16
    9bac:	1529383a 	mul	r20,r2,r20
    9bb0:	94bfffcc 	andi	r18,r18,65535
    9bb4:	94e4b03a 	or	r18,r18,r19
    9bb8:	d8c00017 	ldw	r3,0(sp)
    9bbc:	9500052e 	bgeu	r18,r20,9bd4 <__udivdi3+0x28c>
    9bc0:	8ca5883a 	add	r18,r17,r18
    9bc4:	113fffc4 	addi	r4,r2,-1
    9bc8:	94409736 	bltu	r18,r17,9e28 <__udivdi3+0x4e0>
    9bcc:	9500962e 	bgeu	r18,r20,9e28 <__udivdi3+0x4e0>
    9bd0:	10bfff84 	addi	r2,r2,-2
    9bd4:	b00c943a 	slli	r6,r22,16
    9bd8:	3084b03a 	or	r2,r6,r2
    9bdc:	00000206 	br	9be8 <__udivdi3+0x2a0>
    9be0:	0007883a 	mov	r3,zero
    9be4:	0005883a 	mov	r2,zero
    9be8:	dfc00a17 	ldw	ra,40(sp)
    9bec:	df000917 	ldw	fp,36(sp)
    9bf0:	ddc00817 	ldw	r23,32(sp)
    9bf4:	dd800717 	ldw	r22,28(sp)
    9bf8:	dd400617 	ldw	r21,24(sp)
    9bfc:	dd000517 	ldw	r20,20(sp)
    9c00:	dcc00417 	ldw	r19,16(sp)
    9c04:	dc800317 	ldw	r18,12(sp)
    9c08:	dc400217 	ldw	r17,8(sp)
    9c0c:	dc000117 	ldw	r16,4(sp)
    9c10:	dec00b04 	addi	sp,sp,44
    9c14:	f800283a 	ret
    9c18:	00803fc4 	movi	r2,255
    9c1c:	11c5803a 	cmpltu	r2,r2,r7
    9c20:	100490fa 	slli	r2,r2,3
    9c24:	003f9e06 	br	9aa0 <__alt_data_end+0xf8009aa0>
    9c28:	00803fc4 	movi	r2,255
    9c2c:	1445803a 	cmpltu	r2,r2,r17
    9c30:	100490fa 	slli	r2,r2,3
    9c34:	003fb206 	br	9b00 <__alt_data_end+0xf8009b00>
    9c38:	00804034 	movhi	r2,256
    9c3c:	10bfffc4 	addi	r2,r2,-1
    9c40:	11808836 	bltu	r2,r6,9e64 <__udivdi3+0x51c>
    9c44:	00800404 	movi	r2,16
    9c48:	003f5606 	br	99a4 <__alt_data_end+0xf80099a4>
    9c4c:	30aed83a 	srl	r23,r6,r2
    9c50:	3d4e983a 	sll	r7,r7,r21
    9c54:	80acd83a 	srl	r22,r16,r2
    9c58:	9884d83a 	srl	r2,r19,r2
    9c5c:	3deeb03a 	or	r23,r7,r23
    9c60:	b824d43a 	srli	r18,r23,16
    9c64:	8560983a 	sll	r16,r16,r21
    9c68:	b009883a 	mov	r4,r22
    9c6c:	900b883a 	mov	r5,r18
    9c70:	3568983a 	sll	r20,r6,r21
    9c74:	1420b03a 	or	r16,r2,r16
    9c78:	000a5540 	call	a554 <__umodsi3>
    9c7c:	b009883a 	mov	r4,r22
    9c80:	900b883a 	mov	r5,r18
    9c84:	1023883a 	mov	r17,r2
    9c88:	000a4f00 	call	a4f0 <__udivsi3>
    9c8c:	8808943a 	slli	r4,r17,16
    9c90:	bf3fffcc 	andi	fp,r23,65535
    9c94:	8006d43a 	srli	r3,r16,16
    9c98:	e0a3383a 	mul	r17,fp,r2
    9c9c:	100d883a 	mov	r6,r2
    9ca0:	1906b03a 	or	r3,r3,r4
    9ca4:	1c40042e 	bgeu	r3,r17,9cb8 <__udivdi3+0x370>
    9ca8:	1dc7883a 	add	r3,r3,r23
    9cac:	10bfffc4 	addi	r2,r2,-1
    9cb0:	1dc0752e 	bgeu	r3,r23,9e88 <__udivdi3+0x540>
    9cb4:	100d883a 	mov	r6,r2
    9cb8:	1c63c83a 	sub	r17,r3,r17
    9cbc:	900b883a 	mov	r5,r18
    9cc0:	8809883a 	mov	r4,r17
    9cc4:	d9800015 	stw	r6,0(sp)
    9cc8:	000a5540 	call	a554 <__umodsi3>
    9ccc:	102d883a 	mov	r22,r2
    9cd0:	8809883a 	mov	r4,r17
    9cd4:	900b883a 	mov	r5,r18
    9cd8:	000a4f00 	call	a4f0 <__udivsi3>
    9cdc:	b02c943a 	slli	r22,r22,16
    9ce0:	e089383a 	mul	r4,fp,r2
    9ce4:	843fffcc 	andi	r16,r16,65535
    9ce8:	85a0b03a 	or	r16,r16,r22
    9cec:	d9800017 	ldw	r6,0(sp)
    9cf0:	8100042e 	bgeu	r16,r4,9d04 <__udivdi3+0x3bc>
    9cf4:	85e1883a 	add	r16,r16,r23
    9cf8:	10ffffc4 	addi	r3,r2,-1
    9cfc:	85c05e2e 	bgeu	r16,r23,9e78 <__udivdi3+0x530>
    9d00:	1805883a 	mov	r2,r3
    9d04:	300c943a 	slli	r6,r6,16
    9d08:	a17fffcc 	andi	r5,r20,65535
    9d0c:	a028d43a 	srli	r20,r20,16
    9d10:	3084b03a 	or	r2,r6,r2
    9d14:	10ffffcc 	andi	r3,r2,65535
    9d18:	100cd43a 	srli	r6,r2,16
    9d1c:	194f383a 	mul	r7,r3,r5
    9d20:	1d07383a 	mul	r3,r3,r20
    9d24:	314b383a 	mul	r5,r6,r5
    9d28:	3810d43a 	srli	r8,r7,16
    9d2c:	8121c83a 	sub	r16,r16,r4
    9d30:	1947883a 	add	r3,r3,r5
    9d34:	40c7883a 	add	r3,r8,r3
    9d38:	350d383a 	mul	r6,r6,r20
    9d3c:	1940022e 	bgeu	r3,r5,9d48 <__udivdi3+0x400>
    9d40:	01000074 	movhi	r4,1
    9d44:	310d883a 	add	r6,r6,r4
    9d48:	1828d43a 	srli	r20,r3,16
    9d4c:	a18d883a 	add	r6,r20,r6
    9d50:	81803e36 	bltu	r16,r6,9e4c <__udivdi3+0x504>
    9d54:	81803826 	beq	r16,r6,9e38 <__udivdi3+0x4f0>
    9d58:	0007883a 	mov	r3,zero
    9d5c:	003fa206 	br	9be8 <__alt_data_end+0xf8009be8>
    9d60:	88e2983a 	sll	r17,r17,r3
    9d64:	80a8d83a 	srl	r20,r16,r2
    9d68:	80e0983a 	sll	r16,r16,r3
    9d6c:	882ad43a 	srli	r21,r17,16
    9d70:	9884d83a 	srl	r2,r19,r2
    9d74:	a009883a 	mov	r4,r20
    9d78:	a80b883a 	mov	r5,r21
    9d7c:	142eb03a 	or	r23,r2,r16
    9d80:	98e4983a 	sll	r18,r19,r3
    9d84:	000a5540 	call	a554 <__umodsi3>
    9d88:	a009883a 	mov	r4,r20
    9d8c:	a80b883a 	mov	r5,r21
    9d90:	1021883a 	mov	r16,r2
    9d94:	000a4f00 	call	a4f0 <__udivsi3>
    9d98:	1039883a 	mov	fp,r2
    9d9c:	8d3fffcc 	andi	r20,r17,65535
    9da0:	8020943a 	slli	r16,r16,16
    9da4:	b804d43a 	srli	r2,r23,16
    9da8:	a72d383a 	mul	r22,r20,fp
    9dac:	1404b03a 	or	r2,r2,r16
    9db0:	1580062e 	bgeu	r2,r22,9dcc <__udivdi3+0x484>
    9db4:	1445883a 	add	r2,r2,r17
    9db8:	e0ffffc4 	addi	r3,fp,-1
    9dbc:	14403836 	bltu	r2,r17,9ea0 <__udivdi3+0x558>
    9dc0:	1580372e 	bgeu	r2,r22,9ea0 <__udivdi3+0x558>
    9dc4:	e73fff84 	addi	fp,fp,-2
    9dc8:	1445883a 	add	r2,r2,r17
    9dcc:	15adc83a 	sub	r22,r2,r22
    9dd0:	a80b883a 	mov	r5,r21
    9dd4:	b009883a 	mov	r4,r22
    9dd8:	000a5540 	call	a554 <__umodsi3>
    9ddc:	1027883a 	mov	r19,r2
    9de0:	b009883a 	mov	r4,r22
    9de4:	a80b883a 	mov	r5,r21
    9de8:	000a4f00 	call	a4f0 <__udivsi3>
    9dec:	9826943a 	slli	r19,r19,16
    9df0:	a0a1383a 	mul	r16,r20,r2
    9df4:	b93fffcc 	andi	r4,r23,65535
    9df8:	24c8b03a 	or	r4,r4,r19
    9dfc:	2400062e 	bgeu	r4,r16,9e18 <__udivdi3+0x4d0>
    9e00:	2449883a 	add	r4,r4,r17
    9e04:	10ffffc4 	addi	r3,r2,-1
    9e08:	24402336 	bltu	r4,r17,9e98 <__udivdi3+0x550>
    9e0c:	2400222e 	bgeu	r4,r16,9e98 <__udivdi3+0x550>
    9e10:	10bfff84 	addi	r2,r2,-2
    9e14:	2449883a 	add	r4,r4,r17
    9e18:	e038943a 	slli	fp,fp,16
    9e1c:	2421c83a 	sub	r16,r4,r16
    9e20:	e086b03a 	or	r3,fp,r2
    9e24:	003f4306 	br	9b34 <__alt_data_end+0xf8009b34>
    9e28:	2005883a 	mov	r2,r4
    9e2c:	003f6906 	br	9bd4 <__alt_data_end+0xf8009bd4>
    9e30:	1805883a 	mov	r2,r3
    9e34:	003f0f06 	br	9a74 <__alt_data_end+0xf8009a74>
    9e38:	1806943a 	slli	r3,r3,16
    9e3c:	9d66983a 	sll	r19,r19,r21
    9e40:	39ffffcc 	andi	r7,r7,65535
    9e44:	19c7883a 	add	r3,r3,r7
    9e48:	98ffc32e 	bgeu	r19,r3,9d58 <__alt_data_end+0xf8009d58>
    9e4c:	10bfffc4 	addi	r2,r2,-1
    9e50:	003fc106 	br	9d58 <__alt_data_end+0xf8009d58>
    9e54:	00800604 	movi	r2,24
    9e58:	003f1106 	br	9aa0 <__alt_data_end+0xf8009aa0>
    9e5c:	00800604 	movi	r2,24
    9e60:	003f2706 	br	9b00 <__alt_data_end+0xf8009b00>
    9e64:	00800604 	movi	r2,24
    9e68:	003ece06 	br	99a4 <__alt_data_end+0xf80099a4>
    9e6c:	0007883a 	mov	r3,zero
    9e70:	00800044 	movi	r2,1
    9e74:	003f5c06 	br	9be8 <__alt_data_end+0xf8009be8>
    9e78:	813fa12e 	bgeu	r16,r4,9d00 <__alt_data_end+0xf8009d00>
    9e7c:	10bfff84 	addi	r2,r2,-2
    9e80:	85e1883a 	add	r16,r16,r23
    9e84:	003f9f06 	br	9d04 <__alt_data_end+0xf8009d04>
    9e88:	1c7f8a2e 	bgeu	r3,r17,9cb4 <__alt_data_end+0xf8009cb4>
    9e8c:	31bfff84 	addi	r6,r6,-2
    9e90:	1dc7883a 	add	r3,r3,r23
    9e94:	003f8806 	br	9cb8 <__alt_data_end+0xf8009cb8>
    9e98:	1805883a 	mov	r2,r3
    9e9c:	003fde06 	br	9e18 <__alt_data_end+0xf8009e18>
    9ea0:	1839883a 	mov	fp,r3
    9ea4:	003fc906 	br	9dcc <__alt_data_end+0xf8009dcc>
    9ea8:	b5bfff84 	addi	r22,r22,-2
    9eac:	2449883a 	add	r4,r4,r17
    9eb0:	003f3406 	br	9b84 <__alt_data_end+0xf8009b84>
    9eb4:	b5bfff84 	addi	r22,r22,-2
    9eb8:	1445883a 	add	r2,r2,r17
    9ebc:	003edb06 	br	9a2c <__alt_data_end+0xf8009a2c>

00009ec0 <__umoddi3>:
    9ec0:	defff404 	addi	sp,sp,-48
    9ec4:	df000a15 	stw	fp,40(sp)
    9ec8:	dc400315 	stw	r17,12(sp)
    9ecc:	dc000215 	stw	r16,8(sp)
    9ed0:	dfc00b15 	stw	ra,44(sp)
    9ed4:	ddc00915 	stw	r23,36(sp)
    9ed8:	dd800815 	stw	r22,32(sp)
    9edc:	dd400715 	stw	r21,28(sp)
    9ee0:	dd000615 	stw	r20,24(sp)
    9ee4:	dcc00515 	stw	r19,20(sp)
    9ee8:	dc800415 	stw	r18,16(sp)
    9eec:	2021883a 	mov	r16,r4
    9ef0:	2823883a 	mov	r17,r5
    9ef4:	2839883a 	mov	fp,r5
    9ef8:	38003c1e 	bne	r7,zero,9fec <__umoddi3+0x12c>
    9efc:	3027883a 	mov	r19,r6
    9f00:	2029883a 	mov	r20,r4
    9f04:	2980512e 	bgeu	r5,r6,a04c <__umoddi3+0x18c>
    9f08:	00bfffd4 	movui	r2,65535
    9f0c:	11809a36 	bltu	r2,r6,a178 <__umoddi3+0x2b8>
    9f10:	01003fc4 	movi	r4,255
    9f14:	2189803a 	cmpltu	r4,r4,r6
    9f18:	200890fa 	slli	r4,r4,3
    9f1c:	3104d83a 	srl	r2,r6,r4
    9f20:	00c00074 	movhi	r3,1
    9f24:	18fe6204 	addi	r3,r3,-1656
    9f28:	1885883a 	add	r2,r3,r2
    9f2c:	10c00003 	ldbu	r3,0(r2)
    9f30:	00800804 	movi	r2,32
    9f34:	1909883a 	add	r4,r3,r4
    9f38:	1125c83a 	sub	r18,r2,r4
    9f3c:	90000526 	beq	r18,zero,9f54 <__umoddi3+0x94>
    9f40:	8ca2983a 	sll	r17,r17,r18
    9f44:	8108d83a 	srl	r4,r16,r4
    9f48:	34a6983a 	sll	r19,r6,r18
    9f4c:	84a8983a 	sll	r20,r16,r18
    9f50:	2478b03a 	or	fp,r4,r17
    9f54:	982ed43a 	srli	r23,r19,16
    9f58:	e009883a 	mov	r4,fp
    9f5c:	9dbfffcc 	andi	r22,r19,65535
    9f60:	b80b883a 	mov	r5,r23
    9f64:	000a5540 	call	a554 <__umodsi3>
    9f68:	e009883a 	mov	r4,fp
    9f6c:	b80b883a 	mov	r5,r23
    9f70:	102b883a 	mov	r21,r2
    9f74:	000a4f00 	call	a4f0 <__udivsi3>
    9f78:	a806943a 	slli	r3,r21,16
    9f7c:	a008d43a 	srli	r4,r20,16
    9f80:	b085383a 	mul	r2,r22,r2
    9f84:	20c8b03a 	or	r4,r4,r3
    9f88:	2080032e 	bgeu	r4,r2,9f98 <__umoddi3+0xd8>
    9f8c:	24c9883a 	add	r4,r4,r19
    9f90:	24c00136 	bltu	r4,r19,9f98 <__umoddi3+0xd8>
    9f94:	20811036 	bltu	r4,r2,a3d8 <__umoddi3+0x518>
    9f98:	20abc83a 	sub	r21,r4,r2
    9f9c:	b80b883a 	mov	r5,r23
    9fa0:	a809883a 	mov	r4,r21
    9fa4:	000a5540 	call	a554 <__umodsi3>
    9fa8:	1023883a 	mov	r17,r2
    9fac:	b80b883a 	mov	r5,r23
    9fb0:	a809883a 	mov	r4,r21
    9fb4:	000a4f00 	call	a4f0 <__udivsi3>
    9fb8:	8822943a 	slli	r17,r17,16
    9fbc:	b085383a 	mul	r2,r22,r2
    9fc0:	a0ffffcc 	andi	r3,r20,65535
    9fc4:	1c46b03a 	or	r3,r3,r17
    9fc8:	1880042e 	bgeu	r3,r2,9fdc <__umoddi3+0x11c>
    9fcc:	1cc7883a 	add	r3,r3,r19
    9fd0:	1cc00236 	bltu	r3,r19,9fdc <__umoddi3+0x11c>
    9fd4:	1880012e 	bgeu	r3,r2,9fdc <__umoddi3+0x11c>
    9fd8:	1cc7883a 	add	r3,r3,r19
    9fdc:	1885c83a 	sub	r2,r3,r2
    9fe0:	1484d83a 	srl	r2,r2,r18
    9fe4:	0007883a 	mov	r3,zero
    9fe8:	00004f06 	br	a128 <__umoddi3+0x268>
    9fec:	29c04c36 	bltu	r5,r7,a120 <__umoddi3+0x260>
    9ff0:	00bfffd4 	movui	r2,65535
    9ff4:	11c0582e 	bgeu	r2,r7,a158 <__umoddi3+0x298>
    9ff8:	00804034 	movhi	r2,256
    9ffc:	10bfffc4 	addi	r2,r2,-1
    a000:	11c0e736 	bltu	r2,r7,a3a0 <__umoddi3+0x4e0>
    a004:	01000404 	movi	r4,16
    a008:	3904d83a 	srl	r2,r7,r4
    a00c:	00c00074 	movhi	r3,1
    a010:	18fe6204 	addi	r3,r3,-1656
    a014:	1885883a 	add	r2,r3,r2
    a018:	14c00003 	ldbu	r19,0(r2)
    a01c:	00c00804 	movi	r3,32
    a020:	9927883a 	add	r19,r19,r4
    a024:	1ce9c83a 	sub	r20,r3,r19
    a028:	a000581e 	bne	r20,zero,a18c <__umoddi3+0x2cc>
    a02c:	3c400136 	bltu	r7,r17,a034 <__umoddi3+0x174>
    a030:	8180eb36 	bltu	r16,r6,a3e0 <__umoddi3+0x520>
    a034:	8185c83a 	sub	r2,r16,r6
    a038:	89e3c83a 	sub	r17,r17,r7
    a03c:	8089803a 	cmpltu	r4,r16,r2
    a040:	8939c83a 	sub	fp,r17,r4
    a044:	e007883a 	mov	r3,fp
    a048:	00003706 	br	a128 <__umoddi3+0x268>
    a04c:	3000041e 	bne	r6,zero,a060 <__umoddi3+0x1a0>
    a050:	000b883a 	mov	r5,zero
    a054:	01000044 	movi	r4,1
    a058:	000a4f00 	call	a4f0 <__udivsi3>
    a05c:	1027883a 	mov	r19,r2
    a060:	00bfffd4 	movui	r2,65535
    a064:	14c0402e 	bgeu	r2,r19,a168 <__umoddi3+0x2a8>
    a068:	00804034 	movhi	r2,256
    a06c:	10bfffc4 	addi	r2,r2,-1
    a070:	14c0cd36 	bltu	r2,r19,a3a8 <__umoddi3+0x4e8>
    a074:	00800404 	movi	r2,16
    a078:	9886d83a 	srl	r3,r19,r2
    a07c:	01000074 	movhi	r4,1
    a080:	213e6204 	addi	r4,r4,-1656
    a084:	20c7883a 	add	r3,r4,r3
    a088:	18c00003 	ldbu	r3,0(r3)
    a08c:	1887883a 	add	r3,r3,r2
    a090:	00800804 	movi	r2,32
    a094:	10e5c83a 	sub	r18,r2,r3
    a098:	9000901e 	bne	r18,zero,a2dc <__umoddi3+0x41c>
    a09c:	982cd43a 	srli	r22,r19,16
    a0a0:	8ce3c83a 	sub	r17,r17,r19
    a0a4:	9d7fffcc 	andi	r21,r19,65535
    a0a8:	b00b883a 	mov	r5,r22
    a0ac:	8809883a 	mov	r4,r17
    a0b0:	000a5540 	call	a554 <__umodsi3>
    a0b4:	8809883a 	mov	r4,r17
    a0b8:	b00b883a 	mov	r5,r22
    a0bc:	1021883a 	mov	r16,r2
    a0c0:	000a4f00 	call	a4f0 <__udivsi3>
    a0c4:	8006943a 	slli	r3,r16,16
    a0c8:	a008d43a 	srli	r4,r20,16
    a0cc:	1545383a 	mul	r2,r2,r21
    a0d0:	20c8b03a 	or	r4,r4,r3
    a0d4:	2080042e 	bgeu	r4,r2,a0e8 <__umoddi3+0x228>
    a0d8:	24c9883a 	add	r4,r4,r19
    a0dc:	24c00236 	bltu	r4,r19,a0e8 <__umoddi3+0x228>
    a0e0:	2080012e 	bgeu	r4,r2,a0e8 <__umoddi3+0x228>
    a0e4:	24c9883a 	add	r4,r4,r19
    a0e8:	20a1c83a 	sub	r16,r4,r2
    a0ec:	b00b883a 	mov	r5,r22
    a0f0:	8009883a 	mov	r4,r16
    a0f4:	000a5540 	call	a554 <__umodsi3>
    a0f8:	1023883a 	mov	r17,r2
    a0fc:	b00b883a 	mov	r5,r22
    a100:	8009883a 	mov	r4,r16
    a104:	000a4f00 	call	a4f0 <__udivsi3>
    a108:	8822943a 	slli	r17,r17,16
    a10c:	1545383a 	mul	r2,r2,r21
    a110:	a53fffcc 	andi	r20,r20,65535
    a114:	a446b03a 	or	r3,r20,r17
    a118:	18bfb02e 	bgeu	r3,r2,9fdc <__alt_data_end+0xf8009fdc>
    a11c:	003fab06 	br	9fcc <__alt_data_end+0xf8009fcc>
    a120:	2005883a 	mov	r2,r4
    a124:	2807883a 	mov	r3,r5
    a128:	dfc00b17 	ldw	ra,44(sp)
    a12c:	df000a17 	ldw	fp,40(sp)
    a130:	ddc00917 	ldw	r23,36(sp)
    a134:	dd800817 	ldw	r22,32(sp)
    a138:	dd400717 	ldw	r21,28(sp)
    a13c:	dd000617 	ldw	r20,24(sp)
    a140:	dcc00517 	ldw	r19,20(sp)
    a144:	dc800417 	ldw	r18,16(sp)
    a148:	dc400317 	ldw	r17,12(sp)
    a14c:	dc000217 	ldw	r16,8(sp)
    a150:	dec00c04 	addi	sp,sp,48
    a154:	f800283a 	ret
    a158:	04c03fc4 	movi	r19,255
    a15c:	99c9803a 	cmpltu	r4,r19,r7
    a160:	200890fa 	slli	r4,r4,3
    a164:	003fa806 	br	a008 <__alt_data_end+0xf800a008>
    a168:	00803fc4 	movi	r2,255
    a16c:	14c5803a 	cmpltu	r2,r2,r19
    a170:	100490fa 	slli	r2,r2,3
    a174:	003fc006 	br	a078 <__alt_data_end+0xf800a078>
    a178:	00804034 	movhi	r2,256
    a17c:	10bfffc4 	addi	r2,r2,-1
    a180:	11808b36 	bltu	r2,r6,a3b0 <__umoddi3+0x4f0>
    a184:	01000404 	movi	r4,16
    a188:	003f6406 	br	9f1c <__alt_data_end+0xf8009f1c>
    a18c:	34c4d83a 	srl	r2,r6,r19
    a190:	3d0e983a 	sll	r7,r7,r20
    a194:	8cf8d83a 	srl	fp,r17,r19
    a198:	8d10983a 	sll	r8,r17,r20
    a19c:	38aab03a 	or	r21,r7,r2
    a1a0:	a82cd43a 	srli	r22,r21,16
    a1a4:	84e2d83a 	srl	r17,r16,r19
    a1a8:	e009883a 	mov	r4,fp
    a1ac:	b00b883a 	mov	r5,r22
    a1b0:	8a22b03a 	or	r17,r17,r8
    a1b4:	3524983a 	sll	r18,r6,r20
    a1b8:	000a5540 	call	a554 <__umodsi3>
    a1bc:	e009883a 	mov	r4,fp
    a1c0:	b00b883a 	mov	r5,r22
    a1c4:	102f883a 	mov	r23,r2
    a1c8:	000a4f00 	call	a4f0 <__udivsi3>
    a1cc:	100d883a 	mov	r6,r2
    a1d0:	b808943a 	slli	r4,r23,16
    a1d4:	aa3fffcc 	andi	r8,r21,65535
    a1d8:	8804d43a 	srli	r2,r17,16
    a1dc:	41af383a 	mul	r23,r8,r6
    a1e0:	8520983a 	sll	r16,r16,r20
    a1e4:	1104b03a 	or	r2,r2,r4
    a1e8:	15c0042e 	bgeu	r2,r23,a1fc <__umoddi3+0x33c>
    a1ec:	1545883a 	add	r2,r2,r21
    a1f0:	30ffffc4 	addi	r3,r6,-1
    a1f4:	1540742e 	bgeu	r2,r21,a3c8 <__umoddi3+0x508>
    a1f8:	180d883a 	mov	r6,r3
    a1fc:	15efc83a 	sub	r23,r2,r23
    a200:	b00b883a 	mov	r5,r22
    a204:	b809883a 	mov	r4,r23
    a208:	d9800115 	stw	r6,4(sp)
    a20c:	da000015 	stw	r8,0(sp)
    a210:	000a5540 	call	a554 <__umodsi3>
    a214:	b00b883a 	mov	r5,r22
    a218:	b809883a 	mov	r4,r23
    a21c:	1039883a 	mov	fp,r2
    a220:	000a4f00 	call	a4f0 <__udivsi3>
    a224:	da000017 	ldw	r8,0(sp)
    a228:	e038943a 	slli	fp,fp,16
    a22c:	100b883a 	mov	r5,r2
    a230:	4089383a 	mul	r4,r8,r2
    a234:	8a3fffcc 	andi	r8,r17,65535
    a238:	4710b03a 	or	r8,r8,fp
    a23c:	d9800117 	ldw	r6,4(sp)
    a240:	4100042e 	bgeu	r8,r4,a254 <__umoddi3+0x394>
    a244:	4551883a 	add	r8,r8,r21
    a248:	10bfffc4 	addi	r2,r2,-1
    a24c:	45405a2e 	bgeu	r8,r21,a3b8 <__umoddi3+0x4f8>
    a250:	100b883a 	mov	r5,r2
    a254:	300c943a 	slli	r6,r6,16
    a258:	91ffffcc 	andi	r7,r18,65535
    a25c:	9004d43a 	srli	r2,r18,16
    a260:	314cb03a 	or	r6,r6,r5
    a264:	317fffcc 	andi	r5,r6,65535
    a268:	300cd43a 	srli	r6,r6,16
    a26c:	29d3383a 	mul	r9,r5,r7
    a270:	288b383a 	mul	r5,r5,r2
    a274:	31cf383a 	mul	r7,r6,r7
    a278:	4806d43a 	srli	r3,r9,16
    a27c:	4111c83a 	sub	r8,r8,r4
    a280:	29cb883a 	add	r5,r5,r7
    a284:	194b883a 	add	r5,r3,r5
    a288:	3085383a 	mul	r2,r6,r2
    a28c:	29c0022e 	bgeu	r5,r7,a298 <__umoddi3+0x3d8>
    a290:	00c00074 	movhi	r3,1
    a294:	10c5883a 	add	r2,r2,r3
    a298:	2808d43a 	srli	r4,r5,16
    a29c:	280a943a 	slli	r5,r5,16
    a2a0:	4a7fffcc 	andi	r9,r9,65535
    a2a4:	2085883a 	add	r2,r4,r2
    a2a8:	2a4b883a 	add	r5,r5,r9
    a2ac:	40803636 	bltu	r8,r2,a388 <__umoddi3+0x4c8>
    a2b0:	40804d26 	beq	r8,r2,a3e8 <__umoddi3+0x528>
    a2b4:	4089c83a 	sub	r4,r8,r2
    a2b8:	280f883a 	mov	r7,r5
    a2bc:	81cfc83a 	sub	r7,r16,r7
    a2c0:	81c7803a 	cmpltu	r3,r16,r7
    a2c4:	20c7c83a 	sub	r3,r4,r3
    a2c8:	1cc4983a 	sll	r2,r3,r19
    a2cc:	3d0ed83a 	srl	r7,r7,r20
    a2d0:	1d06d83a 	srl	r3,r3,r20
    a2d4:	11c4b03a 	or	r2,r2,r7
    a2d8:	003f9306 	br	a128 <__alt_data_end+0xf800a128>
    a2dc:	9ca6983a 	sll	r19,r19,r18
    a2e0:	88e8d83a 	srl	r20,r17,r3
    a2e4:	80c4d83a 	srl	r2,r16,r3
    a2e8:	982cd43a 	srli	r22,r19,16
    a2ec:	8ca2983a 	sll	r17,r17,r18
    a2f0:	a009883a 	mov	r4,r20
    a2f4:	b00b883a 	mov	r5,r22
    a2f8:	1478b03a 	or	fp,r2,r17
    a2fc:	000a5540 	call	a554 <__umodsi3>
    a300:	a009883a 	mov	r4,r20
    a304:	b00b883a 	mov	r5,r22
    a308:	1023883a 	mov	r17,r2
    a30c:	000a4f00 	call	a4f0 <__udivsi3>
    a310:	9d7fffcc 	andi	r21,r19,65535
    a314:	880a943a 	slli	r5,r17,16
    a318:	e008d43a 	srli	r4,fp,16
    a31c:	a885383a 	mul	r2,r21,r2
    a320:	84a8983a 	sll	r20,r16,r18
    a324:	2148b03a 	or	r4,r4,r5
    a328:	2080042e 	bgeu	r4,r2,a33c <__umoddi3+0x47c>
    a32c:	24c9883a 	add	r4,r4,r19
    a330:	24c00236 	bltu	r4,r19,a33c <__umoddi3+0x47c>
    a334:	2080012e 	bgeu	r4,r2,a33c <__umoddi3+0x47c>
    a338:	24c9883a 	add	r4,r4,r19
    a33c:	20a3c83a 	sub	r17,r4,r2
    a340:	b00b883a 	mov	r5,r22
    a344:	8809883a 	mov	r4,r17
    a348:	000a5540 	call	a554 <__umodsi3>
    a34c:	102f883a 	mov	r23,r2
    a350:	8809883a 	mov	r4,r17
    a354:	b00b883a 	mov	r5,r22
    a358:	000a4f00 	call	a4f0 <__udivsi3>
    a35c:	b82e943a 	slli	r23,r23,16
    a360:	a885383a 	mul	r2,r21,r2
    a364:	e13fffcc 	andi	r4,fp,65535
    a368:	25c8b03a 	or	r4,r4,r23
    a36c:	2080042e 	bgeu	r4,r2,a380 <__umoddi3+0x4c0>
    a370:	24c9883a 	add	r4,r4,r19
    a374:	24c00236 	bltu	r4,r19,a380 <__umoddi3+0x4c0>
    a378:	2080012e 	bgeu	r4,r2,a380 <__umoddi3+0x4c0>
    a37c:	24c9883a 	add	r4,r4,r19
    a380:	20a3c83a 	sub	r17,r4,r2
    a384:	003f4806 	br	a0a8 <__alt_data_end+0xf800a0a8>
    a388:	2c8fc83a 	sub	r7,r5,r18
    a38c:	1545c83a 	sub	r2,r2,r21
    a390:	29cb803a 	cmpltu	r5,r5,r7
    a394:	1145c83a 	sub	r2,r2,r5
    a398:	4089c83a 	sub	r4,r8,r2
    a39c:	003fc706 	br	a2bc <__alt_data_end+0xf800a2bc>
    a3a0:	01000604 	movi	r4,24
    a3a4:	003f1806 	br	a008 <__alt_data_end+0xf800a008>
    a3a8:	00800604 	movi	r2,24
    a3ac:	003f3206 	br	a078 <__alt_data_end+0xf800a078>
    a3b0:	01000604 	movi	r4,24
    a3b4:	003ed906 	br	9f1c <__alt_data_end+0xf8009f1c>
    a3b8:	413fa52e 	bgeu	r8,r4,a250 <__alt_data_end+0xf800a250>
    a3bc:	297fff84 	addi	r5,r5,-2
    a3c0:	4551883a 	add	r8,r8,r21
    a3c4:	003fa306 	br	a254 <__alt_data_end+0xf800a254>
    a3c8:	15ff8b2e 	bgeu	r2,r23,a1f8 <__alt_data_end+0xf800a1f8>
    a3cc:	31bfff84 	addi	r6,r6,-2
    a3d0:	1545883a 	add	r2,r2,r21
    a3d4:	003f8906 	br	a1fc <__alt_data_end+0xf800a1fc>
    a3d8:	24c9883a 	add	r4,r4,r19
    a3dc:	003eee06 	br	9f98 <__alt_data_end+0xf8009f98>
    a3e0:	8005883a 	mov	r2,r16
    a3e4:	003f1706 	br	a044 <__alt_data_end+0xf800a044>
    a3e8:	817fe736 	bltu	r16,r5,a388 <__alt_data_end+0xf800a388>
    a3ec:	280f883a 	mov	r7,r5
    a3f0:	0009883a 	mov	r4,zero
    a3f4:	003fb106 	br	a2bc <__alt_data_end+0xf800a2bc>

0000a3f8 <__divsi3>:
    a3f8:	20001b16 	blt	r4,zero,a468 <__divsi3+0x70>
    a3fc:	000f883a 	mov	r7,zero
    a400:	28001616 	blt	r5,zero,a45c <__divsi3+0x64>
    a404:	200d883a 	mov	r6,r4
    a408:	29001a2e 	bgeu	r5,r4,a474 <__divsi3+0x7c>
    a40c:	00800804 	movi	r2,32
    a410:	00c00044 	movi	r3,1
    a414:	00000106 	br	a41c <__divsi3+0x24>
    a418:	10000d26 	beq	r2,zero,a450 <__divsi3+0x58>
    a41c:	294b883a 	add	r5,r5,r5
    a420:	10bfffc4 	addi	r2,r2,-1
    a424:	18c7883a 	add	r3,r3,r3
    a428:	293ffb36 	bltu	r5,r4,a418 <__alt_data_end+0xf800a418>
    a42c:	0005883a 	mov	r2,zero
    a430:	18000726 	beq	r3,zero,a450 <__divsi3+0x58>
    a434:	0005883a 	mov	r2,zero
    a438:	31400236 	bltu	r6,r5,a444 <__divsi3+0x4c>
    a43c:	314dc83a 	sub	r6,r6,r5
    a440:	10c4b03a 	or	r2,r2,r3
    a444:	1806d07a 	srli	r3,r3,1
    a448:	280ad07a 	srli	r5,r5,1
    a44c:	183ffa1e 	bne	r3,zero,a438 <__alt_data_end+0xf800a438>
    a450:	38000126 	beq	r7,zero,a458 <__divsi3+0x60>
    a454:	0085c83a 	sub	r2,zero,r2
    a458:	f800283a 	ret
    a45c:	014bc83a 	sub	r5,zero,r5
    a460:	39c0005c 	xori	r7,r7,1
    a464:	003fe706 	br	a404 <__alt_data_end+0xf800a404>
    a468:	0109c83a 	sub	r4,zero,r4
    a46c:	01c00044 	movi	r7,1
    a470:	003fe306 	br	a400 <__alt_data_end+0xf800a400>
    a474:	00c00044 	movi	r3,1
    a478:	003fee06 	br	a434 <__alt_data_end+0xf800a434>

0000a47c <__modsi3>:
    a47c:	20001716 	blt	r4,zero,a4dc <__modsi3+0x60>
    a480:	000f883a 	mov	r7,zero
    a484:	2005883a 	mov	r2,r4
    a488:	28001216 	blt	r5,zero,a4d4 <__modsi3+0x58>
    a48c:	2900162e 	bgeu	r5,r4,a4e8 <__modsi3+0x6c>
    a490:	01800804 	movi	r6,32
    a494:	00c00044 	movi	r3,1
    a498:	00000106 	br	a4a0 <__modsi3+0x24>
    a49c:	30000a26 	beq	r6,zero,a4c8 <__modsi3+0x4c>
    a4a0:	294b883a 	add	r5,r5,r5
    a4a4:	31bfffc4 	addi	r6,r6,-1
    a4a8:	18c7883a 	add	r3,r3,r3
    a4ac:	293ffb36 	bltu	r5,r4,a49c <__alt_data_end+0xf800a49c>
    a4b0:	18000526 	beq	r3,zero,a4c8 <__modsi3+0x4c>
    a4b4:	1806d07a 	srli	r3,r3,1
    a4b8:	11400136 	bltu	r2,r5,a4c0 <__modsi3+0x44>
    a4bc:	1145c83a 	sub	r2,r2,r5
    a4c0:	280ad07a 	srli	r5,r5,1
    a4c4:	183ffb1e 	bne	r3,zero,a4b4 <__alt_data_end+0xf800a4b4>
    a4c8:	38000126 	beq	r7,zero,a4d0 <__modsi3+0x54>
    a4cc:	0085c83a 	sub	r2,zero,r2
    a4d0:	f800283a 	ret
    a4d4:	014bc83a 	sub	r5,zero,r5
    a4d8:	003fec06 	br	a48c <__alt_data_end+0xf800a48c>
    a4dc:	0109c83a 	sub	r4,zero,r4
    a4e0:	01c00044 	movi	r7,1
    a4e4:	003fe706 	br	a484 <__alt_data_end+0xf800a484>
    a4e8:	00c00044 	movi	r3,1
    a4ec:	003ff106 	br	a4b4 <__alt_data_end+0xf800a4b4>

0000a4f0 <__udivsi3>:
    a4f0:	200d883a 	mov	r6,r4
    a4f4:	2900152e 	bgeu	r5,r4,a54c <__udivsi3+0x5c>
    a4f8:	28001416 	blt	r5,zero,a54c <__udivsi3+0x5c>
    a4fc:	00800804 	movi	r2,32
    a500:	00c00044 	movi	r3,1
    a504:	00000206 	br	a510 <__udivsi3+0x20>
    a508:	10000e26 	beq	r2,zero,a544 <__udivsi3+0x54>
    a50c:	28000516 	blt	r5,zero,a524 <__udivsi3+0x34>
    a510:	294b883a 	add	r5,r5,r5
    a514:	10bfffc4 	addi	r2,r2,-1
    a518:	18c7883a 	add	r3,r3,r3
    a51c:	293ffa36 	bltu	r5,r4,a508 <__alt_data_end+0xf800a508>
    a520:	18000826 	beq	r3,zero,a544 <__udivsi3+0x54>
    a524:	0005883a 	mov	r2,zero
    a528:	31400236 	bltu	r6,r5,a534 <__udivsi3+0x44>
    a52c:	314dc83a 	sub	r6,r6,r5
    a530:	10c4b03a 	or	r2,r2,r3
    a534:	1806d07a 	srli	r3,r3,1
    a538:	280ad07a 	srli	r5,r5,1
    a53c:	183ffa1e 	bne	r3,zero,a528 <__alt_data_end+0xf800a528>
    a540:	f800283a 	ret
    a544:	0005883a 	mov	r2,zero
    a548:	f800283a 	ret
    a54c:	00c00044 	movi	r3,1
    a550:	003ff406 	br	a524 <__alt_data_end+0xf800a524>

0000a554 <__umodsi3>:
    a554:	2005883a 	mov	r2,r4
    a558:	2900122e 	bgeu	r5,r4,a5a4 <__umodsi3+0x50>
    a55c:	28001116 	blt	r5,zero,a5a4 <__umodsi3+0x50>
    a560:	01800804 	movi	r6,32
    a564:	00c00044 	movi	r3,1
    a568:	00000206 	br	a574 <__umodsi3+0x20>
    a56c:	30000c26 	beq	r6,zero,a5a0 <__umodsi3+0x4c>
    a570:	28000516 	blt	r5,zero,a588 <__umodsi3+0x34>
    a574:	294b883a 	add	r5,r5,r5
    a578:	31bfffc4 	addi	r6,r6,-1
    a57c:	18c7883a 	add	r3,r3,r3
    a580:	293ffa36 	bltu	r5,r4,a56c <__alt_data_end+0xf800a56c>
    a584:	18000626 	beq	r3,zero,a5a0 <__umodsi3+0x4c>
    a588:	1806d07a 	srli	r3,r3,1
    a58c:	11400136 	bltu	r2,r5,a594 <__umodsi3+0x40>
    a590:	1145c83a 	sub	r2,r2,r5
    a594:	280ad07a 	srli	r5,r5,1
    a598:	183ffb1e 	bne	r3,zero,a588 <__alt_data_end+0xf800a588>
    a59c:	f800283a 	ret
    a5a0:	f800283a 	ret
    a5a4:	00c00044 	movi	r3,1
    a5a8:	003ff706 	br	a588 <__alt_data_end+0xf800a588>

0000a5ac <__adddf3>:
    a5ac:	02c00434 	movhi	r11,16
    a5b0:	5affffc4 	addi	r11,r11,-1
    a5b4:	2806d7fa 	srli	r3,r5,31
    a5b8:	2ad4703a 	and	r10,r5,r11
    a5bc:	3ad2703a 	and	r9,r7,r11
    a5c0:	3804d53a 	srli	r2,r7,20
    a5c4:	3018d77a 	srli	r12,r6,29
    a5c8:	280ad53a 	srli	r5,r5,20
    a5cc:	501490fa 	slli	r10,r10,3
    a5d0:	2010d77a 	srli	r8,r4,29
    a5d4:	481290fa 	slli	r9,r9,3
    a5d8:	380ed7fa 	srli	r7,r7,31
    a5dc:	defffb04 	addi	sp,sp,-20
    a5e0:	dc800215 	stw	r18,8(sp)
    a5e4:	dc400115 	stw	r17,4(sp)
    a5e8:	dc000015 	stw	r16,0(sp)
    a5ec:	dfc00415 	stw	ra,16(sp)
    a5f0:	dcc00315 	stw	r19,12(sp)
    a5f4:	1c803fcc 	andi	r18,r3,255
    a5f8:	2c01ffcc 	andi	r16,r5,2047
    a5fc:	5210b03a 	or	r8,r10,r8
    a600:	202290fa 	slli	r17,r4,3
    a604:	1081ffcc 	andi	r2,r2,2047
    a608:	4b12b03a 	or	r9,r9,r12
    a60c:	300c90fa 	slli	r6,r6,3
    a610:	91c07526 	beq	r18,r7,a7e8 <__adddf3+0x23c>
    a614:	8087c83a 	sub	r3,r16,r2
    a618:	00c0ab0e 	bge	zero,r3,a8c8 <__adddf3+0x31c>
    a61c:	10002a1e 	bne	r2,zero,a6c8 <__adddf3+0x11c>
    a620:	4984b03a 	or	r2,r9,r6
    a624:	1000961e 	bne	r2,zero,a880 <__adddf3+0x2d4>
    a628:	888001cc 	andi	r2,r17,7
    a62c:	10000726 	beq	r2,zero,a64c <__adddf3+0xa0>
    a630:	888003cc 	andi	r2,r17,15
    a634:	00c00104 	movi	r3,4
    a638:	10c00426 	beq	r2,r3,a64c <__adddf3+0xa0>
    a63c:	88c7883a 	add	r3,r17,r3
    a640:	1c63803a 	cmpltu	r17,r3,r17
    a644:	4451883a 	add	r8,r8,r17
    a648:	1823883a 	mov	r17,r3
    a64c:	4080202c 	andhi	r2,r8,128
    a650:	10005926 	beq	r2,zero,a7b8 <__adddf3+0x20c>
    a654:	84000044 	addi	r16,r16,1
    a658:	0081ffc4 	movi	r2,2047
    a65c:	8080ba26 	beq	r16,r2,a948 <__adddf3+0x39c>
    a660:	00bfe034 	movhi	r2,65408
    a664:	10bfffc4 	addi	r2,r2,-1
    a668:	4090703a 	and	r8,r8,r2
    a66c:	4004977a 	slli	r2,r8,29
    a670:	4010927a 	slli	r8,r8,9
    a674:	8822d0fa 	srli	r17,r17,3
    a678:	8401ffcc 	andi	r16,r16,2047
    a67c:	4010d33a 	srli	r8,r8,12
    a680:	9007883a 	mov	r3,r18
    a684:	1444b03a 	or	r2,r2,r17
    a688:	8401ffcc 	andi	r16,r16,2047
    a68c:	8020953a 	slli	r16,r16,20
    a690:	18c03fcc 	andi	r3,r3,255
    a694:	01000434 	movhi	r4,16
    a698:	213fffc4 	addi	r4,r4,-1
    a69c:	180697fa 	slli	r3,r3,31
    a6a0:	4110703a 	and	r8,r8,r4
    a6a4:	4410b03a 	or	r8,r8,r16
    a6a8:	40c6b03a 	or	r3,r8,r3
    a6ac:	dfc00417 	ldw	ra,16(sp)
    a6b0:	dcc00317 	ldw	r19,12(sp)
    a6b4:	dc800217 	ldw	r18,8(sp)
    a6b8:	dc400117 	ldw	r17,4(sp)
    a6bc:	dc000017 	ldw	r16,0(sp)
    a6c0:	dec00504 	addi	sp,sp,20
    a6c4:	f800283a 	ret
    a6c8:	0081ffc4 	movi	r2,2047
    a6cc:	80bfd626 	beq	r16,r2,a628 <__alt_data_end+0xf800a628>
    a6d0:	4a402034 	orhi	r9,r9,128
    a6d4:	00800e04 	movi	r2,56
    a6d8:	10c09f16 	blt	r2,r3,a958 <__adddf3+0x3ac>
    a6dc:	008007c4 	movi	r2,31
    a6e0:	10c0c216 	blt	r2,r3,a9ec <__adddf3+0x440>
    a6e4:	00800804 	movi	r2,32
    a6e8:	10c5c83a 	sub	r2,r2,r3
    a6ec:	488a983a 	sll	r5,r9,r2
    a6f0:	30c8d83a 	srl	r4,r6,r3
    a6f4:	3084983a 	sll	r2,r6,r2
    a6f8:	48c6d83a 	srl	r3,r9,r3
    a6fc:	290cb03a 	or	r6,r5,r4
    a700:	1004c03a 	cmpne	r2,r2,zero
    a704:	308cb03a 	or	r6,r6,r2
    a708:	898dc83a 	sub	r6,r17,r6
    a70c:	89a3803a 	cmpltu	r17,r17,r6
    a710:	40d1c83a 	sub	r8,r8,r3
    a714:	4451c83a 	sub	r8,r8,r17
    a718:	3023883a 	mov	r17,r6
    a71c:	4080202c 	andhi	r2,r8,128
    a720:	10002326 	beq	r2,zero,a7b0 <__adddf3+0x204>
    a724:	04c02034 	movhi	r19,128
    a728:	9cffffc4 	addi	r19,r19,-1
    a72c:	44e6703a 	and	r19,r8,r19
    a730:	98007626 	beq	r19,zero,a90c <__adddf3+0x360>
    a734:	9809883a 	mov	r4,r19
    a738:	000cbb00 	call	cbb0 <__clzsi2>
    a73c:	10fffe04 	addi	r3,r2,-8
    a740:	010007c4 	movi	r4,31
    a744:	20c07716 	blt	r4,r3,a924 <__adddf3+0x378>
    a748:	00800804 	movi	r2,32
    a74c:	10c5c83a 	sub	r2,r2,r3
    a750:	8884d83a 	srl	r2,r17,r2
    a754:	98d0983a 	sll	r8,r19,r3
    a758:	88e2983a 	sll	r17,r17,r3
    a75c:	1204b03a 	or	r2,r2,r8
    a760:	1c007416 	blt	r3,r16,a934 <__adddf3+0x388>
    a764:	1c21c83a 	sub	r16,r3,r16
    a768:	82000044 	addi	r8,r16,1
    a76c:	00c007c4 	movi	r3,31
    a770:	1a009116 	blt	r3,r8,a9b8 <__adddf3+0x40c>
    a774:	00c00804 	movi	r3,32
    a778:	1a07c83a 	sub	r3,r3,r8
    a77c:	8a08d83a 	srl	r4,r17,r8
    a780:	88e2983a 	sll	r17,r17,r3
    a784:	10c6983a 	sll	r3,r2,r3
    a788:	1210d83a 	srl	r8,r2,r8
    a78c:	8804c03a 	cmpne	r2,r17,zero
    a790:	1906b03a 	or	r3,r3,r4
    a794:	18a2b03a 	or	r17,r3,r2
    a798:	0021883a 	mov	r16,zero
    a79c:	003fa206 	br	a628 <__alt_data_end+0xf800a628>
    a7a0:	1890b03a 	or	r8,r3,r2
    a7a4:	40017d26 	beq	r8,zero,ad9c <__adddf3+0x7f0>
    a7a8:	1011883a 	mov	r8,r2
    a7ac:	1823883a 	mov	r17,r3
    a7b0:	888001cc 	andi	r2,r17,7
    a7b4:	103f9e1e 	bne	r2,zero,a630 <__alt_data_end+0xf800a630>
    a7b8:	4004977a 	slli	r2,r8,29
    a7bc:	8822d0fa 	srli	r17,r17,3
    a7c0:	4010d0fa 	srli	r8,r8,3
    a7c4:	9007883a 	mov	r3,r18
    a7c8:	1444b03a 	or	r2,r2,r17
    a7cc:	0101ffc4 	movi	r4,2047
    a7d0:	81002426 	beq	r16,r4,a864 <__adddf3+0x2b8>
    a7d4:	8120703a 	and	r16,r16,r4
    a7d8:	01000434 	movhi	r4,16
    a7dc:	213fffc4 	addi	r4,r4,-1
    a7e0:	4110703a 	and	r8,r8,r4
    a7e4:	003fa806 	br	a688 <__alt_data_end+0xf800a688>
    a7e8:	8089c83a 	sub	r4,r16,r2
    a7ec:	01005e0e 	bge	zero,r4,a968 <__adddf3+0x3bc>
    a7f0:	10002b26 	beq	r2,zero,a8a0 <__adddf3+0x2f4>
    a7f4:	0081ffc4 	movi	r2,2047
    a7f8:	80bf8b26 	beq	r16,r2,a628 <__alt_data_end+0xf800a628>
    a7fc:	4a402034 	orhi	r9,r9,128
    a800:	00800e04 	movi	r2,56
    a804:	1100a40e 	bge	r2,r4,aa98 <__adddf3+0x4ec>
    a808:	498cb03a 	or	r6,r9,r6
    a80c:	300ac03a 	cmpne	r5,r6,zero
    a810:	0013883a 	mov	r9,zero
    a814:	2c4b883a 	add	r5,r5,r17
    a818:	2c63803a 	cmpltu	r17,r5,r17
    a81c:	4a11883a 	add	r8,r9,r8
    a820:	8a11883a 	add	r8,r17,r8
    a824:	2823883a 	mov	r17,r5
    a828:	4080202c 	andhi	r2,r8,128
    a82c:	103fe026 	beq	r2,zero,a7b0 <__alt_data_end+0xf800a7b0>
    a830:	84000044 	addi	r16,r16,1
    a834:	0081ffc4 	movi	r2,2047
    a838:	8080d226 	beq	r16,r2,ab84 <__adddf3+0x5d8>
    a83c:	00bfe034 	movhi	r2,65408
    a840:	10bfffc4 	addi	r2,r2,-1
    a844:	4090703a 	and	r8,r8,r2
    a848:	880ad07a 	srli	r5,r17,1
    a84c:	400897fa 	slli	r4,r8,31
    a850:	88c0004c 	andi	r3,r17,1
    a854:	28e2b03a 	or	r17,r5,r3
    a858:	4010d07a 	srli	r8,r8,1
    a85c:	2462b03a 	or	r17,r4,r17
    a860:	003f7106 	br	a628 <__alt_data_end+0xf800a628>
    a864:	4088b03a 	or	r4,r8,r2
    a868:	20014526 	beq	r4,zero,ad80 <__adddf3+0x7d4>
    a86c:	01000434 	movhi	r4,16
    a870:	42000234 	orhi	r8,r8,8
    a874:	213fffc4 	addi	r4,r4,-1
    a878:	4110703a 	and	r8,r8,r4
    a87c:	003f8206 	br	a688 <__alt_data_end+0xf800a688>
    a880:	18ffffc4 	addi	r3,r3,-1
    a884:	1800491e 	bne	r3,zero,a9ac <__adddf3+0x400>
    a888:	898bc83a 	sub	r5,r17,r6
    a88c:	8963803a 	cmpltu	r17,r17,r5
    a890:	4251c83a 	sub	r8,r8,r9
    a894:	4451c83a 	sub	r8,r8,r17
    a898:	2823883a 	mov	r17,r5
    a89c:	003f9f06 	br	a71c <__alt_data_end+0xf800a71c>
    a8a0:	4984b03a 	or	r2,r9,r6
    a8a4:	103f6026 	beq	r2,zero,a628 <__alt_data_end+0xf800a628>
    a8a8:	213fffc4 	addi	r4,r4,-1
    a8ac:	2000931e 	bne	r4,zero,aafc <__adddf3+0x550>
    a8b0:	898d883a 	add	r6,r17,r6
    a8b4:	3463803a 	cmpltu	r17,r6,r17
    a8b8:	4251883a 	add	r8,r8,r9
    a8bc:	8a11883a 	add	r8,r17,r8
    a8c0:	3023883a 	mov	r17,r6
    a8c4:	003fd806 	br	a828 <__alt_data_end+0xf800a828>
    a8c8:	1800541e 	bne	r3,zero,aa1c <__adddf3+0x470>
    a8cc:	80800044 	addi	r2,r16,1
    a8d0:	1081ffcc 	andi	r2,r2,2047
    a8d4:	00c00044 	movi	r3,1
    a8d8:	1880a00e 	bge	r3,r2,ab5c <__adddf3+0x5b0>
    a8dc:	8989c83a 	sub	r4,r17,r6
    a8e0:	8905803a 	cmpltu	r2,r17,r4
    a8e4:	4267c83a 	sub	r19,r8,r9
    a8e8:	98a7c83a 	sub	r19,r19,r2
    a8ec:	9880202c 	andhi	r2,r19,128
    a8f0:	10006326 	beq	r2,zero,aa80 <__adddf3+0x4d4>
    a8f4:	3463c83a 	sub	r17,r6,r17
    a8f8:	4a07c83a 	sub	r3,r9,r8
    a8fc:	344d803a 	cmpltu	r6,r6,r17
    a900:	19a7c83a 	sub	r19,r3,r6
    a904:	3825883a 	mov	r18,r7
    a908:	983f8a1e 	bne	r19,zero,a734 <__alt_data_end+0xf800a734>
    a90c:	8809883a 	mov	r4,r17
    a910:	000cbb00 	call	cbb0 <__clzsi2>
    a914:	10800804 	addi	r2,r2,32
    a918:	10fffe04 	addi	r3,r2,-8
    a91c:	010007c4 	movi	r4,31
    a920:	20ff890e 	bge	r4,r3,a748 <__alt_data_end+0xf800a748>
    a924:	10bff604 	addi	r2,r2,-40
    a928:	8884983a 	sll	r2,r17,r2
    a92c:	0023883a 	mov	r17,zero
    a930:	1c3f8c0e 	bge	r3,r16,a764 <__alt_data_end+0xf800a764>
    a934:	023fe034 	movhi	r8,65408
    a938:	423fffc4 	addi	r8,r8,-1
    a93c:	80e1c83a 	sub	r16,r16,r3
    a940:	1210703a 	and	r8,r2,r8
    a944:	003f3806 	br	a628 <__alt_data_end+0xf800a628>
    a948:	9007883a 	mov	r3,r18
    a94c:	0011883a 	mov	r8,zero
    a950:	0005883a 	mov	r2,zero
    a954:	003f4c06 	br	a688 <__alt_data_end+0xf800a688>
    a958:	498cb03a 	or	r6,r9,r6
    a95c:	300cc03a 	cmpne	r6,r6,zero
    a960:	0007883a 	mov	r3,zero
    a964:	003f6806 	br	a708 <__alt_data_end+0xf800a708>
    a968:	20009c1e 	bne	r4,zero,abdc <__adddf3+0x630>
    a96c:	80800044 	addi	r2,r16,1
    a970:	1141ffcc 	andi	r5,r2,2047
    a974:	01000044 	movi	r4,1
    a978:	2140670e 	bge	r4,r5,ab18 <__adddf3+0x56c>
    a97c:	0101ffc4 	movi	r4,2047
    a980:	11007f26 	beq	r2,r4,ab80 <__adddf3+0x5d4>
    a984:	898d883a 	add	r6,r17,r6
    a988:	4247883a 	add	r3,r8,r9
    a98c:	3451803a 	cmpltu	r8,r6,r17
    a990:	40d1883a 	add	r8,r8,r3
    a994:	402297fa 	slli	r17,r8,31
    a998:	300cd07a 	srli	r6,r6,1
    a99c:	4010d07a 	srli	r8,r8,1
    a9a0:	1021883a 	mov	r16,r2
    a9a4:	89a2b03a 	or	r17,r17,r6
    a9a8:	003f1f06 	br	a628 <__alt_data_end+0xf800a628>
    a9ac:	0081ffc4 	movi	r2,2047
    a9b0:	80bf481e 	bne	r16,r2,a6d4 <__alt_data_end+0xf800a6d4>
    a9b4:	003f1c06 	br	a628 <__alt_data_end+0xf800a628>
    a9b8:	843ff844 	addi	r16,r16,-31
    a9bc:	01000804 	movi	r4,32
    a9c0:	1406d83a 	srl	r3,r2,r16
    a9c4:	41005026 	beq	r8,r4,ab08 <__adddf3+0x55c>
    a9c8:	01001004 	movi	r4,64
    a9cc:	2211c83a 	sub	r8,r4,r8
    a9d0:	1204983a 	sll	r2,r2,r8
    a9d4:	88a2b03a 	or	r17,r17,r2
    a9d8:	8822c03a 	cmpne	r17,r17,zero
    a9dc:	1c62b03a 	or	r17,r3,r17
    a9e0:	0011883a 	mov	r8,zero
    a9e4:	0021883a 	mov	r16,zero
    a9e8:	003f7106 	br	a7b0 <__alt_data_end+0xf800a7b0>
    a9ec:	193ff804 	addi	r4,r3,-32
    a9f0:	00800804 	movi	r2,32
    a9f4:	4908d83a 	srl	r4,r9,r4
    a9f8:	18804526 	beq	r3,r2,ab10 <__adddf3+0x564>
    a9fc:	00801004 	movi	r2,64
    aa00:	10c5c83a 	sub	r2,r2,r3
    aa04:	4886983a 	sll	r3,r9,r2
    aa08:	198cb03a 	or	r6,r3,r6
    aa0c:	300cc03a 	cmpne	r6,r6,zero
    aa10:	218cb03a 	or	r6,r4,r6
    aa14:	0007883a 	mov	r3,zero
    aa18:	003f3b06 	br	a708 <__alt_data_end+0xf800a708>
    aa1c:	80002a26 	beq	r16,zero,aac8 <__adddf3+0x51c>
    aa20:	0101ffc4 	movi	r4,2047
    aa24:	11006826 	beq	r2,r4,abc8 <__adddf3+0x61c>
    aa28:	00c7c83a 	sub	r3,zero,r3
    aa2c:	42002034 	orhi	r8,r8,128
    aa30:	01000e04 	movi	r4,56
    aa34:	20c07c16 	blt	r4,r3,ac28 <__adddf3+0x67c>
    aa38:	010007c4 	movi	r4,31
    aa3c:	20c0da16 	blt	r4,r3,ada8 <__adddf3+0x7fc>
    aa40:	01000804 	movi	r4,32
    aa44:	20c9c83a 	sub	r4,r4,r3
    aa48:	4114983a 	sll	r10,r8,r4
    aa4c:	88cad83a 	srl	r5,r17,r3
    aa50:	8908983a 	sll	r4,r17,r4
    aa54:	40c6d83a 	srl	r3,r8,r3
    aa58:	5162b03a 	or	r17,r10,r5
    aa5c:	2008c03a 	cmpne	r4,r4,zero
    aa60:	8922b03a 	or	r17,r17,r4
    aa64:	3463c83a 	sub	r17,r6,r17
    aa68:	48c7c83a 	sub	r3,r9,r3
    aa6c:	344d803a 	cmpltu	r6,r6,r17
    aa70:	1991c83a 	sub	r8,r3,r6
    aa74:	1021883a 	mov	r16,r2
    aa78:	3825883a 	mov	r18,r7
    aa7c:	003f2706 	br	a71c <__alt_data_end+0xf800a71c>
    aa80:	24d0b03a 	or	r8,r4,r19
    aa84:	40001b1e 	bne	r8,zero,aaf4 <__adddf3+0x548>
    aa88:	0005883a 	mov	r2,zero
    aa8c:	0007883a 	mov	r3,zero
    aa90:	0021883a 	mov	r16,zero
    aa94:	003f4d06 	br	a7cc <__alt_data_end+0xf800a7cc>
    aa98:	008007c4 	movi	r2,31
    aa9c:	11003c16 	blt	r2,r4,ab90 <__adddf3+0x5e4>
    aaa0:	00800804 	movi	r2,32
    aaa4:	1105c83a 	sub	r2,r2,r4
    aaa8:	488e983a 	sll	r7,r9,r2
    aaac:	310ad83a 	srl	r5,r6,r4
    aab0:	3084983a 	sll	r2,r6,r2
    aab4:	4912d83a 	srl	r9,r9,r4
    aab8:	394ab03a 	or	r5,r7,r5
    aabc:	1004c03a 	cmpne	r2,r2,zero
    aac0:	288ab03a 	or	r5,r5,r2
    aac4:	003f5306 	br	a814 <__alt_data_end+0xf800a814>
    aac8:	4448b03a 	or	r4,r8,r17
    aacc:	20003e26 	beq	r4,zero,abc8 <__adddf3+0x61c>
    aad0:	00c6303a 	nor	r3,zero,r3
    aad4:	18003a1e 	bne	r3,zero,abc0 <__adddf3+0x614>
    aad8:	3463c83a 	sub	r17,r6,r17
    aadc:	4a07c83a 	sub	r3,r9,r8
    aae0:	344d803a 	cmpltu	r6,r6,r17
    aae4:	1991c83a 	sub	r8,r3,r6
    aae8:	1021883a 	mov	r16,r2
    aaec:	3825883a 	mov	r18,r7
    aaf0:	003f0a06 	br	a71c <__alt_data_end+0xf800a71c>
    aaf4:	2023883a 	mov	r17,r4
    aaf8:	003f0d06 	br	a730 <__alt_data_end+0xf800a730>
    aafc:	0081ffc4 	movi	r2,2047
    ab00:	80bf3f1e 	bne	r16,r2,a800 <__alt_data_end+0xf800a800>
    ab04:	003ec806 	br	a628 <__alt_data_end+0xf800a628>
    ab08:	0005883a 	mov	r2,zero
    ab0c:	003fb106 	br	a9d4 <__alt_data_end+0xf800a9d4>
    ab10:	0007883a 	mov	r3,zero
    ab14:	003fbc06 	br	aa08 <__alt_data_end+0xf800aa08>
    ab18:	4444b03a 	or	r2,r8,r17
    ab1c:	8000871e 	bne	r16,zero,ad3c <__adddf3+0x790>
    ab20:	1000ba26 	beq	r2,zero,ae0c <__adddf3+0x860>
    ab24:	4984b03a 	or	r2,r9,r6
    ab28:	103ebf26 	beq	r2,zero,a628 <__alt_data_end+0xf800a628>
    ab2c:	8985883a 	add	r2,r17,r6
    ab30:	4247883a 	add	r3,r8,r9
    ab34:	1451803a 	cmpltu	r8,r2,r17
    ab38:	40d1883a 	add	r8,r8,r3
    ab3c:	40c0202c 	andhi	r3,r8,128
    ab40:	1023883a 	mov	r17,r2
    ab44:	183f1a26 	beq	r3,zero,a7b0 <__alt_data_end+0xf800a7b0>
    ab48:	00bfe034 	movhi	r2,65408
    ab4c:	10bfffc4 	addi	r2,r2,-1
    ab50:	2021883a 	mov	r16,r4
    ab54:	4090703a 	and	r8,r8,r2
    ab58:	003eb306 	br	a628 <__alt_data_end+0xf800a628>
    ab5c:	4444b03a 	or	r2,r8,r17
    ab60:	8000291e 	bne	r16,zero,ac08 <__adddf3+0x65c>
    ab64:	10004b1e 	bne	r2,zero,ac94 <__adddf3+0x6e8>
    ab68:	4990b03a 	or	r8,r9,r6
    ab6c:	40008b26 	beq	r8,zero,ad9c <__adddf3+0x7f0>
    ab70:	4811883a 	mov	r8,r9
    ab74:	3023883a 	mov	r17,r6
    ab78:	3825883a 	mov	r18,r7
    ab7c:	003eaa06 	br	a628 <__alt_data_end+0xf800a628>
    ab80:	1021883a 	mov	r16,r2
    ab84:	0011883a 	mov	r8,zero
    ab88:	0005883a 	mov	r2,zero
    ab8c:	003f0f06 	br	a7cc <__alt_data_end+0xf800a7cc>
    ab90:	217ff804 	addi	r5,r4,-32
    ab94:	00800804 	movi	r2,32
    ab98:	494ad83a 	srl	r5,r9,r5
    ab9c:	20807d26 	beq	r4,r2,ad94 <__adddf3+0x7e8>
    aba0:	00801004 	movi	r2,64
    aba4:	1109c83a 	sub	r4,r2,r4
    aba8:	4912983a 	sll	r9,r9,r4
    abac:	498cb03a 	or	r6,r9,r6
    abb0:	300cc03a 	cmpne	r6,r6,zero
    abb4:	298ab03a 	or	r5,r5,r6
    abb8:	0013883a 	mov	r9,zero
    abbc:	003f1506 	br	a814 <__alt_data_end+0xf800a814>
    abc0:	0101ffc4 	movi	r4,2047
    abc4:	113f9a1e 	bne	r2,r4,aa30 <__alt_data_end+0xf800aa30>
    abc8:	4811883a 	mov	r8,r9
    abcc:	3023883a 	mov	r17,r6
    abd0:	1021883a 	mov	r16,r2
    abd4:	3825883a 	mov	r18,r7
    abd8:	003e9306 	br	a628 <__alt_data_end+0xf800a628>
    abdc:	8000161e 	bne	r16,zero,ac38 <__adddf3+0x68c>
    abe0:	444ab03a 	or	r5,r8,r17
    abe4:	28005126 	beq	r5,zero,ad2c <__adddf3+0x780>
    abe8:	0108303a 	nor	r4,zero,r4
    abec:	20004d1e 	bne	r4,zero,ad24 <__adddf3+0x778>
    abf0:	89a3883a 	add	r17,r17,r6
    abf4:	4253883a 	add	r9,r8,r9
    abf8:	898d803a 	cmpltu	r6,r17,r6
    abfc:	3251883a 	add	r8,r6,r9
    ac00:	1021883a 	mov	r16,r2
    ac04:	003f0806 	br	a828 <__alt_data_end+0xf800a828>
    ac08:	1000301e 	bne	r2,zero,accc <__adddf3+0x720>
    ac0c:	4984b03a 	or	r2,r9,r6
    ac10:	10007126 	beq	r2,zero,add8 <__adddf3+0x82c>
    ac14:	4811883a 	mov	r8,r9
    ac18:	3023883a 	mov	r17,r6
    ac1c:	3825883a 	mov	r18,r7
    ac20:	0401ffc4 	movi	r16,2047
    ac24:	003e8006 	br	a628 <__alt_data_end+0xf800a628>
    ac28:	4462b03a 	or	r17,r8,r17
    ac2c:	8822c03a 	cmpne	r17,r17,zero
    ac30:	0007883a 	mov	r3,zero
    ac34:	003f8b06 	br	aa64 <__alt_data_end+0xf800aa64>
    ac38:	0141ffc4 	movi	r5,2047
    ac3c:	11403b26 	beq	r2,r5,ad2c <__adddf3+0x780>
    ac40:	0109c83a 	sub	r4,zero,r4
    ac44:	42002034 	orhi	r8,r8,128
    ac48:	01400e04 	movi	r5,56
    ac4c:	29006716 	blt	r5,r4,adec <__adddf3+0x840>
    ac50:	014007c4 	movi	r5,31
    ac54:	29007016 	blt	r5,r4,ae18 <__adddf3+0x86c>
    ac58:	01400804 	movi	r5,32
    ac5c:	290bc83a 	sub	r5,r5,r4
    ac60:	4154983a 	sll	r10,r8,r5
    ac64:	890ed83a 	srl	r7,r17,r4
    ac68:	894a983a 	sll	r5,r17,r5
    ac6c:	4108d83a 	srl	r4,r8,r4
    ac70:	51e2b03a 	or	r17,r10,r7
    ac74:	280ac03a 	cmpne	r5,r5,zero
    ac78:	8962b03a 	or	r17,r17,r5
    ac7c:	89a3883a 	add	r17,r17,r6
    ac80:	2253883a 	add	r9,r4,r9
    ac84:	898d803a 	cmpltu	r6,r17,r6
    ac88:	3251883a 	add	r8,r6,r9
    ac8c:	1021883a 	mov	r16,r2
    ac90:	003ee506 	br	a828 <__alt_data_end+0xf800a828>
    ac94:	4984b03a 	or	r2,r9,r6
    ac98:	103e6326 	beq	r2,zero,a628 <__alt_data_end+0xf800a628>
    ac9c:	8987c83a 	sub	r3,r17,r6
    aca0:	88c9803a 	cmpltu	r4,r17,r3
    aca4:	4245c83a 	sub	r2,r8,r9
    aca8:	1105c83a 	sub	r2,r2,r4
    acac:	1100202c 	andhi	r4,r2,128
    acb0:	203ebb26 	beq	r4,zero,a7a0 <__alt_data_end+0xf800a7a0>
    acb4:	3463c83a 	sub	r17,r6,r17
    acb8:	4a07c83a 	sub	r3,r9,r8
    acbc:	344d803a 	cmpltu	r6,r6,r17
    acc0:	1991c83a 	sub	r8,r3,r6
    acc4:	3825883a 	mov	r18,r7
    acc8:	003e5706 	br	a628 <__alt_data_end+0xf800a628>
    accc:	4984b03a 	or	r2,r9,r6
    acd0:	10002e26 	beq	r2,zero,ad8c <__adddf3+0x7e0>
    acd4:	4004d0fa 	srli	r2,r8,3
    acd8:	8822d0fa 	srli	r17,r17,3
    acdc:	4010977a 	slli	r8,r8,29
    ace0:	10c0022c 	andhi	r3,r2,8
    ace4:	4462b03a 	or	r17,r8,r17
    ace8:	18000826 	beq	r3,zero,ad0c <__adddf3+0x760>
    acec:	4808d0fa 	srli	r4,r9,3
    acf0:	20c0022c 	andhi	r3,r4,8
    acf4:	1800051e 	bne	r3,zero,ad0c <__adddf3+0x760>
    acf8:	300cd0fa 	srli	r6,r6,3
    acfc:	4806977a 	slli	r3,r9,29
    ad00:	2005883a 	mov	r2,r4
    ad04:	3825883a 	mov	r18,r7
    ad08:	19a2b03a 	or	r17,r3,r6
    ad0c:	8810d77a 	srli	r8,r17,29
    ad10:	100490fa 	slli	r2,r2,3
    ad14:	882290fa 	slli	r17,r17,3
    ad18:	0401ffc4 	movi	r16,2047
    ad1c:	4090b03a 	or	r8,r8,r2
    ad20:	003e4106 	br	a628 <__alt_data_end+0xf800a628>
    ad24:	0141ffc4 	movi	r5,2047
    ad28:	117fc71e 	bne	r2,r5,ac48 <__alt_data_end+0xf800ac48>
    ad2c:	4811883a 	mov	r8,r9
    ad30:	3023883a 	mov	r17,r6
    ad34:	1021883a 	mov	r16,r2
    ad38:	003e3b06 	br	a628 <__alt_data_end+0xf800a628>
    ad3c:	10002f26 	beq	r2,zero,adfc <__adddf3+0x850>
    ad40:	4984b03a 	or	r2,r9,r6
    ad44:	10001126 	beq	r2,zero,ad8c <__adddf3+0x7e0>
    ad48:	4004d0fa 	srli	r2,r8,3
    ad4c:	8822d0fa 	srli	r17,r17,3
    ad50:	4010977a 	slli	r8,r8,29
    ad54:	10c0022c 	andhi	r3,r2,8
    ad58:	4462b03a 	or	r17,r8,r17
    ad5c:	183feb26 	beq	r3,zero,ad0c <__alt_data_end+0xf800ad0c>
    ad60:	4808d0fa 	srli	r4,r9,3
    ad64:	20c0022c 	andhi	r3,r4,8
    ad68:	183fe81e 	bne	r3,zero,ad0c <__alt_data_end+0xf800ad0c>
    ad6c:	300cd0fa 	srli	r6,r6,3
    ad70:	4806977a 	slli	r3,r9,29
    ad74:	2005883a 	mov	r2,r4
    ad78:	19a2b03a 	or	r17,r3,r6
    ad7c:	003fe306 	br	ad0c <__alt_data_end+0xf800ad0c>
    ad80:	0011883a 	mov	r8,zero
    ad84:	0005883a 	mov	r2,zero
    ad88:	003e3f06 	br	a688 <__alt_data_end+0xf800a688>
    ad8c:	0401ffc4 	movi	r16,2047
    ad90:	003e2506 	br	a628 <__alt_data_end+0xf800a628>
    ad94:	0013883a 	mov	r9,zero
    ad98:	003f8406 	br	abac <__alt_data_end+0xf800abac>
    ad9c:	0005883a 	mov	r2,zero
    ada0:	0007883a 	mov	r3,zero
    ada4:	003e8906 	br	a7cc <__alt_data_end+0xf800a7cc>
    ada8:	197ff804 	addi	r5,r3,-32
    adac:	01000804 	movi	r4,32
    adb0:	414ad83a 	srl	r5,r8,r5
    adb4:	19002426 	beq	r3,r4,ae48 <__adddf3+0x89c>
    adb8:	01001004 	movi	r4,64
    adbc:	20c7c83a 	sub	r3,r4,r3
    adc0:	40c6983a 	sll	r3,r8,r3
    adc4:	1c46b03a 	or	r3,r3,r17
    adc8:	1806c03a 	cmpne	r3,r3,zero
    adcc:	28e2b03a 	or	r17,r5,r3
    add0:	0007883a 	mov	r3,zero
    add4:	003f2306 	br	aa64 <__alt_data_end+0xf800aa64>
    add8:	0007883a 	mov	r3,zero
    addc:	5811883a 	mov	r8,r11
    ade0:	00bfffc4 	movi	r2,-1
    ade4:	0401ffc4 	movi	r16,2047
    ade8:	003e7806 	br	a7cc <__alt_data_end+0xf800a7cc>
    adec:	4462b03a 	or	r17,r8,r17
    adf0:	8822c03a 	cmpne	r17,r17,zero
    adf4:	0009883a 	mov	r4,zero
    adf8:	003fa006 	br	ac7c <__alt_data_end+0xf800ac7c>
    adfc:	4811883a 	mov	r8,r9
    ae00:	3023883a 	mov	r17,r6
    ae04:	0401ffc4 	movi	r16,2047
    ae08:	003e0706 	br	a628 <__alt_data_end+0xf800a628>
    ae0c:	4811883a 	mov	r8,r9
    ae10:	3023883a 	mov	r17,r6
    ae14:	003e0406 	br	a628 <__alt_data_end+0xf800a628>
    ae18:	21fff804 	addi	r7,r4,-32
    ae1c:	01400804 	movi	r5,32
    ae20:	41ced83a 	srl	r7,r8,r7
    ae24:	21400a26 	beq	r4,r5,ae50 <__adddf3+0x8a4>
    ae28:	01401004 	movi	r5,64
    ae2c:	2909c83a 	sub	r4,r5,r4
    ae30:	4108983a 	sll	r4,r8,r4
    ae34:	2448b03a 	or	r4,r4,r17
    ae38:	2008c03a 	cmpne	r4,r4,zero
    ae3c:	3922b03a 	or	r17,r7,r4
    ae40:	0009883a 	mov	r4,zero
    ae44:	003f8d06 	br	ac7c <__alt_data_end+0xf800ac7c>
    ae48:	0007883a 	mov	r3,zero
    ae4c:	003fdd06 	br	adc4 <__alt_data_end+0xf800adc4>
    ae50:	0009883a 	mov	r4,zero
    ae54:	003ff706 	br	ae34 <__alt_data_end+0xf800ae34>

0000ae58 <__divdf3>:
    ae58:	defff204 	addi	sp,sp,-56
    ae5c:	dd400915 	stw	r21,36(sp)
    ae60:	282ad53a 	srli	r21,r5,20
    ae64:	dd000815 	stw	r20,32(sp)
    ae68:	2828d7fa 	srli	r20,r5,31
    ae6c:	dc000415 	stw	r16,16(sp)
    ae70:	04000434 	movhi	r16,16
    ae74:	df000c15 	stw	fp,48(sp)
    ae78:	843fffc4 	addi	r16,r16,-1
    ae7c:	dfc00d15 	stw	ra,52(sp)
    ae80:	ddc00b15 	stw	r23,44(sp)
    ae84:	dd800a15 	stw	r22,40(sp)
    ae88:	dcc00715 	stw	r19,28(sp)
    ae8c:	dc800615 	stw	r18,24(sp)
    ae90:	dc400515 	stw	r17,20(sp)
    ae94:	ad41ffcc 	andi	r21,r21,2047
    ae98:	2c20703a 	and	r16,r5,r16
    ae9c:	a7003fcc 	andi	fp,r20,255
    aea0:	a8006126 	beq	r21,zero,b028 <__divdf3+0x1d0>
    aea4:	0081ffc4 	movi	r2,2047
    aea8:	2025883a 	mov	r18,r4
    aeac:	a8803726 	beq	r21,r2,af8c <__divdf3+0x134>
    aeb0:	80800434 	orhi	r2,r16,16
    aeb4:	100490fa 	slli	r2,r2,3
    aeb8:	2020d77a 	srli	r16,r4,29
    aebc:	202490fa 	slli	r18,r4,3
    aec0:	ad7f0044 	addi	r21,r21,-1023
    aec4:	80a0b03a 	or	r16,r16,r2
    aec8:	0027883a 	mov	r19,zero
    aecc:	0013883a 	mov	r9,zero
    aed0:	3804d53a 	srli	r2,r7,20
    aed4:	382cd7fa 	srli	r22,r7,31
    aed8:	04400434 	movhi	r17,16
    aedc:	8c7fffc4 	addi	r17,r17,-1
    aee0:	1081ffcc 	andi	r2,r2,2047
    aee4:	3011883a 	mov	r8,r6
    aee8:	3c62703a 	and	r17,r7,r17
    aeec:	b5c03fcc 	andi	r23,r22,255
    aef0:	10006c26 	beq	r2,zero,b0a4 <__divdf3+0x24c>
    aef4:	00c1ffc4 	movi	r3,2047
    aef8:	10c06426 	beq	r2,r3,b08c <__divdf3+0x234>
    aefc:	88c00434 	orhi	r3,r17,16
    af00:	180690fa 	slli	r3,r3,3
    af04:	3022d77a 	srli	r17,r6,29
    af08:	301090fa 	slli	r8,r6,3
    af0c:	10bf0044 	addi	r2,r2,-1023
    af10:	88e2b03a 	or	r17,r17,r3
    af14:	000f883a 	mov	r7,zero
    af18:	a58cf03a 	xor	r6,r20,r22
    af1c:	3cc8b03a 	or	r4,r7,r19
    af20:	a8abc83a 	sub	r21,r21,r2
    af24:	008003c4 	movi	r2,15
    af28:	3007883a 	mov	r3,r6
    af2c:	34c03fcc 	andi	r19,r6,255
    af30:	11009036 	bltu	r2,r4,b174 <__divdf3+0x31c>
    af34:	200890ba 	slli	r4,r4,2
    af38:	00800074 	movhi	r2,1
    af3c:	10abd304 	addi	r2,r2,-20660
    af40:	2089883a 	add	r4,r4,r2
    af44:	20800017 	ldw	r2,0(r4)
    af48:	1000683a 	jmp	r2
    af4c:	0000b174 	movhi	zero,709
    af50:	0000afc4 	movi	zero,703
    af54:	0000b164 	muli	zero,zero,709
    af58:	0000afb8 	rdprs	zero,zero,702
    af5c:	0000b164 	muli	zero,zero,709
    af60:	0000b138 	rdprs	zero,zero,708
    af64:	0000b164 	muli	zero,zero,709
    af68:	0000afb8 	rdprs	zero,zero,702
    af6c:	0000afc4 	movi	zero,703
    af70:	0000afc4 	movi	zero,703
    af74:	0000b138 	rdprs	zero,zero,708
    af78:	0000afb8 	rdprs	zero,zero,702
    af7c:	0000afa8 	cmpgeui	zero,zero,702
    af80:	0000afa8 	cmpgeui	zero,zero,702
    af84:	0000afa8 	cmpgeui	zero,zero,702
    af88:	0000b458 	cmpnei	zero,zero,721
    af8c:	2404b03a 	or	r2,r4,r16
    af90:	1000661e 	bne	r2,zero,b12c <__divdf3+0x2d4>
    af94:	04c00204 	movi	r19,8
    af98:	0021883a 	mov	r16,zero
    af9c:	0025883a 	mov	r18,zero
    afa0:	02400084 	movi	r9,2
    afa4:	003fca06 	br	aed0 <__alt_data_end+0xf800aed0>
    afa8:	8023883a 	mov	r17,r16
    afac:	9011883a 	mov	r8,r18
    afb0:	e02f883a 	mov	r23,fp
    afb4:	480f883a 	mov	r7,r9
    afb8:	00800084 	movi	r2,2
    afbc:	3881311e 	bne	r7,r2,b484 <__divdf3+0x62c>
    afc0:	b827883a 	mov	r19,r23
    afc4:	98c0004c 	andi	r3,r19,1
    afc8:	0081ffc4 	movi	r2,2047
    afcc:	000b883a 	mov	r5,zero
    afd0:	0025883a 	mov	r18,zero
    afd4:	1004953a 	slli	r2,r2,20
    afd8:	18c03fcc 	andi	r3,r3,255
    afdc:	04400434 	movhi	r17,16
    afe0:	8c7fffc4 	addi	r17,r17,-1
    afe4:	180697fa 	slli	r3,r3,31
    afe8:	2c4a703a 	and	r5,r5,r17
    afec:	288ab03a 	or	r5,r5,r2
    aff0:	28c6b03a 	or	r3,r5,r3
    aff4:	9005883a 	mov	r2,r18
    aff8:	dfc00d17 	ldw	ra,52(sp)
    affc:	df000c17 	ldw	fp,48(sp)
    b000:	ddc00b17 	ldw	r23,44(sp)
    b004:	dd800a17 	ldw	r22,40(sp)
    b008:	dd400917 	ldw	r21,36(sp)
    b00c:	dd000817 	ldw	r20,32(sp)
    b010:	dcc00717 	ldw	r19,28(sp)
    b014:	dc800617 	ldw	r18,24(sp)
    b018:	dc400517 	ldw	r17,20(sp)
    b01c:	dc000417 	ldw	r16,16(sp)
    b020:	dec00e04 	addi	sp,sp,56
    b024:	f800283a 	ret
    b028:	2404b03a 	or	r2,r4,r16
    b02c:	2027883a 	mov	r19,r4
    b030:	10003926 	beq	r2,zero,b118 <__divdf3+0x2c0>
    b034:	80012e26 	beq	r16,zero,b4f0 <__divdf3+0x698>
    b038:	8009883a 	mov	r4,r16
    b03c:	d9800315 	stw	r6,12(sp)
    b040:	d9c00215 	stw	r7,8(sp)
    b044:	000cbb00 	call	cbb0 <__clzsi2>
    b048:	d9800317 	ldw	r6,12(sp)
    b04c:	d9c00217 	ldw	r7,8(sp)
    b050:	113ffd44 	addi	r4,r2,-11
    b054:	00c00704 	movi	r3,28
    b058:	19012116 	blt	r3,r4,b4e0 <__divdf3+0x688>
    b05c:	00c00744 	movi	r3,29
    b060:	147ffe04 	addi	r17,r2,-8
    b064:	1907c83a 	sub	r3,r3,r4
    b068:	8460983a 	sll	r16,r16,r17
    b06c:	98c6d83a 	srl	r3,r19,r3
    b070:	9c64983a 	sll	r18,r19,r17
    b074:	1c20b03a 	or	r16,r3,r16
    b078:	1080fcc4 	addi	r2,r2,1011
    b07c:	00abc83a 	sub	r21,zero,r2
    b080:	0027883a 	mov	r19,zero
    b084:	0013883a 	mov	r9,zero
    b088:	003f9106 	br	aed0 <__alt_data_end+0xf800aed0>
    b08c:	3446b03a 	or	r3,r6,r17
    b090:	18001f1e 	bne	r3,zero,b110 <__divdf3+0x2b8>
    b094:	0023883a 	mov	r17,zero
    b098:	0011883a 	mov	r8,zero
    b09c:	01c00084 	movi	r7,2
    b0a0:	003f9d06 	br	af18 <__alt_data_end+0xf800af18>
    b0a4:	3446b03a 	or	r3,r6,r17
    b0a8:	18001526 	beq	r3,zero,b100 <__divdf3+0x2a8>
    b0ac:	88011b26 	beq	r17,zero,b51c <__divdf3+0x6c4>
    b0b0:	8809883a 	mov	r4,r17
    b0b4:	d9800315 	stw	r6,12(sp)
    b0b8:	da400115 	stw	r9,4(sp)
    b0bc:	000cbb00 	call	cbb0 <__clzsi2>
    b0c0:	d9800317 	ldw	r6,12(sp)
    b0c4:	da400117 	ldw	r9,4(sp)
    b0c8:	113ffd44 	addi	r4,r2,-11
    b0cc:	00c00704 	movi	r3,28
    b0d0:	19010e16 	blt	r3,r4,b50c <__divdf3+0x6b4>
    b0d4:	00c00744 	movi	r3,29
    b0d8:	123ffe04 	addi	r8,r2,-8
    b0dc:	1907c83a 	sub	r3,r3,r4
    b0e0:	8a22983a 	sll	r17,r17,r8
    b0e4:	30c6d83a 	srl	r3,r6,r3
    b0e8:	3210983a 	sll	r8,r6,r8
    b0ec:	1c62b03a 	or	r17,r3,r17
    b0f0:	1080fcc4 	addi	r2,r2,1011
    b0f4:	0085c83a 	sub	r2,zero,r2
    b0f8:	000f883a 	mov	r7,zero
    b0fc:	003f8606 	br	af18 <__alt_data_end+0xf800af18>
    b100:	0023883a 	mov	r17,zero
    b104:	0011883a 	mov	r8,zero
    b108:	01c00044 	movi	r7,1
    b10c:	003f8206 	br	af18 <__alt_data_end+0xf800af18>
    b110:	01c000c4 	movi	r7,3
    b114:	003f8006 	br	af18 <__alt_data_end+0xf800af18>
    b118:	04c00104 	movi	r19,4
    b11c:	0021883a 	mov	r16,zero
    b120:	0025883a 	mov	r18,zero
    b124:	02400044 	movi	r9,1
    b128:	003f6906 	br	aed0 <__alt_data_end+0xf800aed0>
    b12c:	04c00304 	movi	r19,12
    b130:	024000c4 	movi	r9,3
    b134:	003f6606 	br	aed0 <__alt_data_end+0xf800aed0>
    b138:	01400434 	movhi	r5,16
    b13c:	0007883a 	mov	r3,zero
    b140:	297fffc4 	addi	r5,r5,-1
    b144:	04bfffc4 	movi	r18,-1
    b148:	0081ffc4 	movi	r2,2047
    b14c:	003fa106 	br	afd4 <__alt_data_end+0xf800afd4>
    b150:	00c00044 	movi	r3,1
    b154:	1887c83a 	sub	r3,r3,r2
    b158:	01000e04 	movi	r4,56
    b15c:	20c1210e 	bge	r4,r3,b5e4 <__divdf3+0x78c>
    b160:	98c0004c 	andi	r3,r19,1
    b164:	0005883a 	mov	r2,zero
    b168:	000b883a 	mov	r5,zero
    b16c:	0025883a 	mov	r18,zero
    b170:	003f9806 	br	afd4 <__alt_data_end+0xf800afd4>
    b174:	8c00fd36 	bltu	r17,r16,b56c <__divdf3+0x714>
    b178:	8440fb26 	beq	r16,r17,b568 <__divdf3+0x710>
    b17c:	8007883a 	mov	r3,r16
    b180:	ad7fffc4 	addi	r21,r21,-1
    b184:	0021883a 	mov	r16,zero
    b188:	4004d63a 	srli	r2,r8,24
    b18c:	8822923a 	slli	r17,r17,8
    b190:	1809883a 	mov	r4,r3
    b194:	402c923a 	slli	r22,r8,8
    b198:	88b8b03a 	or	fp,r17,r2
    b19c:	e028d43a 	srli	r20,fp,16
    b1a0:	d8c00015 	stw	r3,0(sp)
    b1a4:	e5ffffcc 	andi	r23,fp,65535
    b1a8:	a00b883a 	mov	r5,r20
    b1ac:	000a4f00 	call	a4f0 <__udivsi3>
    b1b0:	d8c00017 	ldw	r3,0(sp)
    b1b4:	a00b883a 	mov	r5,r20
    b1b8:	d8800315 	stw	r2,12(sp)
    b1bc:	1809883a 	mov	r4,r3
    b1c0:	000a5540 	call	a554 <__umodsi3>
    b1c4:	d9800317 	ldw	r6,12(sp)
    b1c8:	1006943a 	slli	r3,r2,16
    b1cc:	9004d43a 	srli	r2,r18,16
    b1d0:	b9a3383a 	mul	r17,r23,r6
    b1d4:	10c4b03a 	or	r2,r2,r3
    b1d8:	1440062e 	bgeu	r2,r17,b1f4 <__divdf3+0x39c>
    b1dc:	1705883a 	add	r2,r2,fp
    b1e0:	30ffffc4 	addi	r3,r6,-1
    b1e4:	1700ee36 	bltu	r2,fp,b5a0 <__divdf3+0x748>
    b1e8:	1440ed2e 	bgeu	r2,r17,b5a0 <__divdf3+0x748>
    b1ec:	31bfff84 	addi	r6,r6,-2
    b1f0:	1705883a 	add	r2,r2,fp
    b1f4:	1463c83a 	sub	r17,r2,r17
    b1f8:	a00b883a 	mov	r5,r20
    b1fc:	8809883a 	mov	r4,r17
    b200:	d9800315 	stw	r6,12(sp)
    b204:	000a4f00 	call	a4f0 <__udivsi3>
    b208:	a00b883a 	mov	r5,r20
    b20c:	8809883a 	mov	r4,r17
    b210:	d8800215 	stw	r2,8(sp)
    b214:	000a5540 	call	a554 <__umodsi3>
    b218:	d9c00217 	ldw	r7,8(sp)
    b21c:	1004943a 	slli	r2,r2,16
    b220:	94bfffcc 	andi	r18,r18,65535
    b224:	b9d1383a 	mul	r8,r23,r7
    b228:	90a4b03a 	or	r18,r18,r2
    b22c:	d9800317 	ldw	r6,12(sp)
    b230:	9200062e 	bgeu	r18,r8,b24c <__divdf3+0x3f4>
    b234:	9725883a 	add	r18,r18,fp
    b238:	38bfffc4 	addi	r2,r7,-1
    b23c:	9700d636 	bltu	r18,fp,b598 <__divdf3+0x740>
    b240:	9200d52e 	bgeu	r18,r8,b598 <__divdf3+0x740>
    b244:	39ffff84 	addi	r7,r7,-2
    b248:	9725883a 	add	r18,r18,fp
    b24c:	3004943a 	slli	r2,r6,16
    b250:	b012d43a 	srli	r9,r22,16
    b254:	b1bfffcc 	andi	r6,r22,65535
    b258:	11e2b03a 	or	r17,r2,r7
    b25c:	8806d43a 	srli	r3,r17,16
    b260:	893fffcc 	andi	r4,r17,65535
    b264:	218b383a 	mul	r5,r4,r6
    b268:	30c5383a 	mul	r2,r6,r3
    b26c:	2249383a 	mul	r4,r4,r9
    b270:	280ed43a 	srli	r7,r5,16
    b274:	9225c83a 	sub	r18,r18,r8
    b278:	2089883a 	add	r4,r4,r2
    b27c:	3909883a 	add	r4,r7,r4
    b280:	1a47383a 	mul	r3,r3,r9
    b284:	2080022e 	bgeu	r4,r2,b290 <__divdf3+0x438>
    b288:	00800074 	movhi	r2,1
    b28c:	1887883a 	add	r3,r3,r2
    b290:	2004d43a 	srli	r2,r4,16
    b294:	2008943a 	slli	r4,r4,16
    b298:	297fffcc 	andi	r5,r5,65535
    b29c:	10c7883a 	add	r3,r2,r3
    b2a0:	2149883a 	add	r4,r4,r5
    b2a4:	90c0a536 	bltu	r18,r3,b53c <__divdf3+0x6e4>
    b2a8:	90c0bf26 	beq	r18,r3,b5a8 <__divdf3+0x750>
    b2ac:	90c7c83a 	sub	r3,r18,r3
    b2b0:	810fc83a 	sub	r7,r16,r4
    b2b4:	81e5803a 	cmpltu	r18,r16,r7
    b2b8:	1ca5c83a 	sub	r18,r3,r18
    b2bc:	e480c126 	beq	fp,r18,b5c4 <__divdf3+0x76c>
    b2c0:	a00b883a 	mov	r5,r20
    b2c4:	9009883a 	mov	r4,r18
    b2c8:	d9800315 	stw	r6,12(sp)
    b2cc:	d9c00215 	stw	r7,8(sp)
    b2d0:	da400115 	stw	r9,4(sp)
    b2d4:	000a4f00 	call	a4f0 <__udivsi3>
    b2d8:	a00b883a 	mov	r5,r20
    b2dc:	9009883a 	mov	r4,r18
    b2e0:	d8800015 	stw	r2,0(sp)
    b2e4:	000a5540 	call	a554 <__umodsi3>
    b2e8:	d9c00217 	ldw	r7,8(sp)
    b2ec:	da000017 	ldw	r8,0(sp)
    b2f0:	1006943a 	slli	r3,r2,16
    b2f4:	3804d43a 	srli	r2,r7,16
    b2f8:	ba21383a 	mul	r16,r23,r8
    b2fc:	d9800317 	ldw	r6,12(sp)
    b300:	10c4b03a 	or	r2,r2,r3
    b304:	da400117 	ldw	r9,4(sp)
    b308:	1400062e 	bgeu	r2,r16,b324 <__divdf3+0x4cc>
    b30c:	1705883a 	add	r2,r2,fp
    b310:	40ffffc4 	addi	r3,r8,-1
    b314:	1700ad36 	bltu	r2,fp,b5cc <__divdf3+0x774>
    b318:	1400ac2e 	bgeu	r2,r16,b5cc <__divdf3+0x774>
    b31c:	423fff84 	addi	r8,r8,-2
    b320:	1705883a 	add	r2,r2,fp
    b324:	1421c83a 	sub	r16,r2,r16
    b328:	a00b883a 	mov	r5,r20
    b32c:	8009883a 	mov	r4,r16
    b330:	d9800315 	stw	r6,12(sp)
    b334:	d9c00215 	stw	r7,8(sp)
    b338:	da000015 	stw	r8,0(sp)
    b33c:	da400115 	stw	r9,4(sp)
    b340:	000a4f00 	call	a4f0 <__udivsi3>
    b344:	8009883a 	mov	r4,r16
    b348:	a00b883a 	mov	r5,r20
    b34c:	1025883a 	mov	r18,r2
    b350:	000a5540 	call	a554 <__umodsi3>
    b354:	d9c00217 	ldw	r7,8(sp)
    b358:	1004943a 	slli	r2,r2,16
    b35c:	bcaf383a 	mul	r23,r23,r18
    b360:	393fffcc 	andi	r4,r7,65535
    b364:	2088b03a 	or	r4,r4,r2
    b368:	d9800317 	ldw	r6,12(sp)
    b36c:	da000017 	ldw	r8,0(sp)
    b370:	da400117 	ldw	r9,4(sp)
    b374:	25c0062e 	bgeu	r4,r23,b390 <__divdf3+0x538>
    b378:	2709883a 	add	r4,r4,fp
    b37c:	90bfffc4 	addi	r2,r18,-1
    b380:	27009436 	bltu	r4,fp,b5d4 <__divdf3+0x77c>
    b384:	25c0932e 	bgeu	r4,r23,b5d4 <__divdf3+0x77c>
    b388:	94bfff84 	addi	r18,r18,-2
    b38c:	2709883a 	add	r4,r4,fp
    b390:	4004943a 	slli	r2,r8,16
    b394:	25efc83a 	sub	r23,r4,r23
    b398:	1490b03a 	or	r8,r2,r18
    b39c:	4008d43a 	srli	r4,r8,16
    b3a0:	40ffffcc 	andi	r3,r8,65535
    b3a4:	30c5383a 	mul	r2,r6,r3
    b3a8:	1a47383a 	mul	r3,r3,r9
    b3ac:	310d383a 	mul	r6,r6,r4
    b3b0:	100ad43a 	srli	r5,r2,16
    b3b4:	4913383a 	mul	r9,r9,r4
    b3b8:	1987883a 	add	r3,r3,r6
    b3bc:	28c7883a 	add	r3,r5,r3
    b3c0:	1980022e 	bgeu	r3,r6,b3cc <__divdf3+0x574>
    b3c4:	01000074 	movhi	r4,1
    b3c8:	4913883a 	add	r9,r9,r4
    b3cc:	1808d43a 	srli	r4,r3,16
    b3d0:	1806943a 	slli	r3,r3,16
    b3d4:	10bfffcc 	andi	r2,r2,65535
    b3d8:	2253883a 	add	r9,r4,r9
    b3dc:	1887883a 	add	r3,r3,r2
    b3e0:	ba403836 	bltu	r23,r9,b4c4 <__divdf3+0x66c>
    b3e4:	ba403626 	beq	r23,r9,b4c0 <__divdf3+0x668>
    b3e8:	42000054 	ori	r8,r8,1
    b3ec:	a880ffc4 	addi	r2,r21,1023
    b3f0:	00bf570e 	bge	zero,r2,b150 <__alt_data_end+0xf800b150>
    b3f4:	40c001cc 	andi	r3,r8,7
    b3f8:	18000726 	beq	r3,zero,b418 <__divdf3+0x5c0>
    b3fc:	40c003cc 	andi	r3,r8,15
    b400:	01000104 	movi	r4,4
    b404:	19000426 	beq	r3,r4,b418 <__divdf3+0x5c0>
    b408:	4107883a 	add	r3,r8,r4
    b40c:	1a11803a 	cmpltu	r8,r3,r8
    b410:	8a23883a 	add	r17,r17,r8
    b414:	1811883a 	mov	r8,r3
    b418:	88c0402c 	andhi	r3,r17,256
    b41c:	18000426 	beq	r3,zero,b430 <__divdf3+0x5d8>
    b420:	00ffc034 	movhi	r3,65280
    b424:	18ffffc4 	addi	r3,r3,-1
    b428:	a8810004 	addi	r2,r21,1024
    b42c:	88e2703a 	and	r17,r17,r3
    b430:	00c1ff84 	movi	r3,2046
    b434:	18bee316 	blt	r3,r2,afc4 <__alt_data_end+0xf800afc4>
    b438:	8824977a 	slli	r18,r17,29
    b43c:	4010d0fa 	srli	r8,r8,3
    b440:	8822927a 	slli	r17,r17,9
    b444:	1081ffcc 	andi	r2,r2,2047
    b448:	9224b03a 	or	r18,r18,r8
    b44c:	880ad33a 	srli	r5,r17,12
    b450:	98c0004c 	andi	r3,r19,1
    b454:	003edf06 	br	afd4 <__alt_data_end+0xf800afd4>
    b458:	8080022c 	andhi	r2,r16,8
    b45c:	10001226 	beq	r2,zero,b4a8 <__divdf3+0x650>
    b460:	8880022c 	andhi	r2,r17,8
    b464:	1000101e 	bne	r2,zero,b4a8 <__divdf3+0x650>
    b468:	00800434 	movhi	r2,16
    b46c:	89400234 	orhi	r5,r17,8
    b470:	10bfffc4 	addi	r2,r2,-1
    b474:	b007883a 	mov	r3,r22
    b478:	288a703a 	and	r5,r5,r2
    b47c:	4025883a 	mov	r18,r8
    b480:	003f3106 	br	b148 <__alt_data_end+0xf800b148>
    b484:	008000c4 	movi	r2,3
    b488:	3880a626 	beq	r7,r2,b724 <__divdf3+0x8cc>
    b48c:	00800044 	movi	r2,1
    b490:	3880521e 	bne	r7,r2,b5dc <__divdf3+0x784>
    b494:	b807883a 	mov	r3,r23
    b498:	0005883a 	mov	r2,zero
    b49c:	000b883a 	mov	r5,zero
    b4a0:	0025883a 	mov	r18,zero
    b4a4:	003ecb06 	br	afd4 <__alt_data_end+0xf800afd4>
    b4a8:	00800434 	movhi	r2,16
    b4ac:	81400234 	orhi	r5,r16,8
    b4b0:	10bfffc4 	addi	r2,r2,-1
    b4b4:	a007883a 	mov	r3,r20
    b4b8:	288a703a 	and	r5,r5,r2
    b4bc:	003f2206 	br	b148 <__alt_data_end+0xf800b148>
    b4c0:	183fca26 	beq	r3,zero,b3ec <__alt_data_end+0xf800b3ec>
    b4c4:	e5ef883a 	add	r23,fp,r23
    b4c8:	40bfffc4 	addi	r2,r8,-1
    b4cc:	bf00392e 	bgeu	r23,fp,b5b4 <__divdf3+0x75c>
    b4d0:	1011883a 	mov	r8,r2
    b4d4:	ba7fc41e 	bne	r23,r9,b3e8 <__alt_data_end+0xf800b3e8>
    b4d8:	b0ffc31e 	bne	r22,r3,b3e8 <__alt_data_end+0xf800b3e8>
    b4dc:	003fc306 	br	b3ec <__alt_data_end+0xf800b3ec>
    b4e0:	143ff604 	addi	r16,r2,-40
    b4e4:	9c20983a 	sll	r16,r19,r16
    b4e8:	0025883a 	mov	r18,zero
    b4ec:	003ee206 	br	b078 <__alt_data_end+0xf800b078>
    b4f0:	d9800315 	stw	r6,12(sp)
    b4f4:	d9c00215 	stw	r7,8(sp)
    b4f8:	000cbb00 	call	cbb0 <__clzsi2>
    b4fc:	10800804 	addi	r2,r2,32
    b500:	d9c00217 	ldw	r7,8(sp)
    b504:	d9800317 	ldw	r6,12(sp)
    b508:	003ed106 	br	b050 <__alt_data_end+0xf800b050>
    b50c:	147ff604 	addi	r17,r2,-40
    b510:	3462983a 	sll	r17,r6,r17
    b514:	0011883a 	mov	r8,zero
    b518:	003ef506 	br	b0f0 <__alt_data_end+0xf800b0f0>
    b51c:	3009883a 	mov	r4,r6
    b520:	d9800315 	stw	r6,12(sp)
    b524:	da400115 	stw	r9,4(sp)
    b528:	000cbb00 	call	cbb0 <__clzsi2>
    b52c:	10800804 	addi	r2,r2,32
    b530:	da400117 	ldw	r9,4(sp)
    b534:	d9800317 	ldw	r6,12(sp)
    b538:	003ee306 	br	b0c8 <__alt_data_end+0xf800b0c8>
    b53c:	85a1883a 	add	r16,r16,r22
    b540:	8585803a 	cmpltu	r2,r16,r22
    b544:	1705883a 	add	r2,r2,fp
    b548:	14a5883a 	add	r18,r2,r18
    b54c:	88bfffc4 	addi	r2,r17,-1
    b550:	e4800c2e 	bgeu	fp,r18,b584 <__divdf3+0x72c>
    b554:	90c03e36 	bltu	r18,r3,b650 <__divdf3+0x7f8>
    b558:	1c806926 	beq	r3,r18,b700 <__divdf3+0x8a8>
    b55c:	90c7c83a 	sub	r3,r18,r3
    b560:	1023883a 	mov	r17,r2
    b564:	003f5206 	br	b2b0 <__alt_data_end+0xf800b2b0>
    b568:	923f0436 	bltu	r18,r8,b17c <__alt_data_end+0xf800b17c>
    b56c:	800897fa 	slli	r4,r16,31
    b570:	9004d07a 	srli	r2,r18,1
    b574:	8006d07a 	srli	r3,r16,1
    b578:	902097fa 	slli	r16,r18,31
    b57c:	20a4b03a 	or	r18,r4,r2
    b580:	003f0106 	br	b188 <__alt_data_end+0xf800b188>
    b584:	e4bff51e 	bne	fp,r18,b55c <__alt_data_end+0xf800b55c>
    b588:	85bff22e 	bgeu	r16,r22,b554 <__alt_data_end+0xf800b554>
    b58c:	e0c7c83a 	sub	r3,fp,r3
    b590:	1023883a 	mov	r17,r2
    b594:	003f4606 	br	b2b0 <__alt_data_end+0xf800b2b0>
    b598:	100f883a 	mov	r7,r2
    b59c:	003f2b06 	br	b24c <__alt_data_end+0xf800b24c>
    b5a0:	180d883a 	mov	r6,r3
    b5a4:	003f1306 	br	b1f4 <__alt_data_end+0xf800b1f4>
    b5a8:	813fe436 	bltu	r16,r4,b53c <__alt_data_end+0xf800b53c>
    b5ac:	0007883a 	mov	r3,zero
    b5b0:	003f3f06 	br	b2b0 <__alt_data_end+0xf800b2b0>
    b5b4:	ba402c36 	bltu	r23,r9,b668 <__divdf3+0x810>
    b5b8:	4dc05426 	beq	r9,r23,b70c <__divdf3+0x8b4>
    b5bc:	1011883a 	mov	r8,r2
    b5c0:	003f8906 	br	b3e8 <__alt_data_end+0xf800b3e8>
    b5c4:	023fffc4 	movi	r8,-1
    b5c8:	003f8806 	br	b3ec <__alt_data_end+0xf800b3ec>
    b5cc:	1811883a 	mov	r8,r3
    b5d0:	003f5406 	br	b324 <__alt_data_end+0xf800b324>
    b5d4:	1025883a 	mov	r18,r2
    b5d8:	003f6d06 	br	b390 <__alt_data_end+0xf800b390>
    b5dc:	b827883a 	mov	r19,r23
    b5e0:	003f8206 	br	b3ec <__alt_data_end+0xf800b3ec>
    b5e4:	010007c4 	movi	r4,31
    b5e8:	20c02616 	blt	r4,r3,b684 <__divdf3+0x82c>
    b5ec:	00800804 	movi	r2,32
    b5f0:	10c5c83a 	sub	r2,r2,r3
    b5f4:	888a983a 	sll	r5,r17,r2
    b5f8:	40c8d83a 	srl	r4,r8,r3
    b5fc:	4084983a 	sll	r2,r8,r2
    b600:	88e2d83a 	srl	r17,r17,r3
    b604:	2906b03a 	or	r3,r5,r4
    b608:	1004c03a 	cmpne	r2,r2,zero
    b60c:	1886b03a 	or	r3,r3,r2
    b610:	188001cc 	andi	r2,r3,7
    b614:	10000726 	beq	r2,zero,b634 <__divdf3+0x7dc>
    b618:	188003cc 	andi	r2,r3,15
    b61c:	01000104 	movi	r4,4
    b620:	11000426 	beq	r2,r4,b634 <__divdf3+0x7dc>
    b624:	1805883a 	mov	r2,r3
    b628:	10c00104 	addi	r3,r2,4
    b62c:	1885803a 	cmpltu	r2,r3,r2
    b630:	88a3883a 	add	r17,r17,r2
    b634:	8880202c 	andhi	r2,r17,128
    b638:	10002726 	beq	r2,zero,b6d8 <__divdf3+0x880>
    b63c:	98c0004c 	andi	r3,r19,1
    b640:	00800044 	movi	r2,1
    b644:	000b883a 	mov	r5,zero
    b648:	0025883a 	mov	r18,zero
    b64c:	003e6106 	br	afd4 <__alt_data_end+0xf800afd4>
    b650:	85a1883a 	add	r16,r16,r22
    b654:	8585803a 	cmpltu	r2,r16,r22
    b658:	1705883a 	add	r2,r2,fp
    b65c:	14a5883a 	add	r18,r2,r18
    b660:	8c7fff84 	addi	r17,r17,-2
    b664:	003f1106 	br	b2ac <__alt_data_end+0xf800b2ac>
    b668:	b589883a 	add	r4,r22,r22
    b66c:	25ad803a 	cmpltu	r22,r4,r22
    b670:	b739883a 	add	fp,r22,fp
    b674:	40bfff84 	addi	r2,r8,-2
    b678:	bf2f883a 	add	r23,r23,fp
    b67c:	202d883a 	mov	r22,r4
    b680:	003f9306 	br	b4d0 <__alt_data_end+0xf800b4d0>
    b684:	013ff844 	movi	r4,-31
    b688:	2085c83a 	sub	r2,r4,r2
    b68c:	8888d83a 	srl	r4,r17,r2
    b690:	00800804 	movi	r2,32
    b694:	18802126 	beq	r3,r2,b71c <__divdf3+0x8c4>
    b698:	00801004 	movi	r2,64
    b69c:	10c5c83a 	sub	r2,r2,r3
    b6a0:	8884983a 	sll	r2,r17,r2
    b6a4:	1204b03a 	or	r2,r2,r8
    b6a8:	1004c03a 	cmpne	r2,r2,zero
    b6ac:	2084b03a 	or	r2,r4,r2
    b6b0:	144001cc 	andi	r17,r2,7
    b6b4:	88000d1e 	bne	r17,zero,b6ec <__divdf3+0x894>
    b6b8:	000b883a 	mov	r5,zero
    b6bc:	1024d0fa 	srli	r18,r2,3
    b6c0:	98c0004c 	andi	r3,r19,1
    b6c4:	0005883a 	mov	r2,zero
    b6c8:	9464b03a 	or	r18,r18,r17
    b6cc:	003e4106 	br	afd4 <__alt_data_end+0xf800afd4>
    b6d0:	1007883a 	mov	r3,r2
    b6d4:	0023883a 	mov	r17,zero
    b6d8:	880a927a 	slli	r5,r17,9
    b6dc:	1805883a 	mov	r2,r3
    b6e0:	8822977a 	slli	r17,r17,29
    b6e4:	280ad33a 	srli	r5,r5,12
    b6e8:	003ff406 	br	b6bc <__alt_data_end+0xf800b6bc>
    b6ec:	10c003cc 	andi	r3,r2,15
    b6f0:	01000104 	movi	r4,4
    b6f4:	193ff626 	beq	r3,r4,b6d0 <__alt_data_end+0xf800b6d0>
    b6f8:	0023883a 	mov	r17,zero
    b6fc:	003fca06 	br	b628 <__alt_data_end+0xf800b628>
    b700:	813fd336 	bltu	r16,r4,b650 <__alt_data_end+0xf800b650>
    b704:	1023883a 	mov	r17,r2
    b708:	003fa806 	br	b5ac <__alt_data_end+0xf800b5ac>
    b70c:	b0ffd636 	bltu	r22,r3,b668 <__alt_data_end+0xf800b668>
    b710:	1011883a 	mov	r8,r2
    b714:	b0ff341e 	bne	r22,r3,b3e8 <__alt_data_end+0xf800b3e8>
    b718:	003f3406 	br	b3ec <__alt_data_end+0xf800b3ec>
    b71c:	0005883a 	mov	r2,zero
    b720:	003fe006 	br	b6a4 <__alt_data_end+0xf800b6a4>
    b724:	00800434 	movhi	r2,16
    b728:	89400234 	orhi	r5,r17,8
    b72c:	10bfffc4 	addi	r2,r2,-1
    b730:	b807883a 	mov	r3,r23
    b734:	288a703a 	and	r5,r5,r2
    b738:	4025883a 	mov	r18,r8
    b73c:	003e8206 	br	b148 <__alt_data_end+0xf800b148>

0000b740 <__eqdf2>:
    b740:	2804d53a 	srli	r2,r5,20
    b744:	3806d53a 	srli	r3,r7,20
    b748:	02000434 	movhi	r8,16
    b74c:	423fffc4 	addi	r8,r8,-1
    b750:	1081ffcc 	andi	r2,r2,2047
    b754:	0281ffc4 	movi	r10,2047
    b758:	2a12703a 	and	r9,r5,r8
    b75c:	18c1ffcc 	andi	r3,r3,2047
    b760:	3a10703a 	and	r8,r7,r8
    b764:	280ad7fa 	srli	r5,r5,31
    b768:	380ed7fa 	srli	r7,r7,31
    b76c:	12801026 	beq	r2,r10,b7b0 <__eqdf2+0x70>
    b770:	0281ffc4 	movi	r10,2047
    b774:	1a800a26 	beq	r3,r10,b7a0 <__eqdf2+0x60>
    b778:	10c00226 	beq	r2,r3,b784 <__eqdf2+0x44>
    b77c:	00800044 	movi	r2,1
    b780:	f800283a 	ret
    b784:	4a3ffd1e 	bne	r9,r8,b77c <__alt_data_end+0xf800b77c>
    b788:	21bffc1e 	bne	r4,r6,b77c <__alt_data_end+0xf800b77c>
    b78c:	29c00c26 	beq	r5,r7,b7c0 <__eqdf2+0x80>
    b790:	103ffa1e 	bne	r2,zero,b77c <__alt_data_end+0xf800b77c>
    b794:	2244b03a 	or	r2,r4,r9
    b798:	1004c03a 	cmpne	r2,r2,zero
    b79c:	f800283a 	ret
    b7a0:	3214b03a 	or	r10,r6,r8
    b7a4:	503ff426 	beq	r10,zero,b778 <__alt_data_end+0xf800b778>
    b7a8:	00800044 	movi	r2,1
    b7ac:	f800283a 	ret
    b7b0:	2254b03a 	or	r10,r4,r9
    b7b4:	503fee26 	beq	r10,zero,b770 <__alt_data_end+0xf800b770>
    b7b8:	00800044 	movi	r2,1
    b7bc:	f800283a 	ret
    b7c0:	0005883a 	mov	r2,zero
    b7c4:	f800283a 	ret

0000b7c8 <__gedf2>:
    b7c8:	2804d53a 	srli	r2,r5,20
    b7cc:	3806d53a 	srli	r3,r7,20
    b7d0:	02000434 	movhi	r8,16
    b7d4:	423fffc4 	addi	r8,r8,-1
    b7d8:	1081ffcc 	andi	r2,r2,2047
    b7dc:	0241ffc4 	movi	r9,2047
    b7e0:	2a14703a 	and	r10,r5,r8
    b7e4:	18c1ffcc 	andi	r3,r3,2047
    b7e8:	3a10703a 	and	r8,r7,r8
    b7ec:	280ad7fa 	srli	r5,r5,31
    b7f0:	380ed7fa 	srli	r7,r7,31
    b7f4:	12401d26 	beq	r2,r9,b86c <__gedf2+0xa4>
    b7f8:	0241ffc4 	movi	r9,2047
    b7fc:	1a401226 	beq	r3,r9,b848 <__gedf2+0x80>
    b800:	1000081e 	bne	r2,zero,b824 <__gedf2+0x5c>
    b804:	2296b03a 	or	r11,r4,r10
    b808:	5813003a 	cmpeq	r9,r11,zero
    b80c:	1800091e 	bne	r3,zero,b834 <__gedf2+0x6c>
    b810:	3218b03a 	or	r12,r6,r8
    b814:	6000071e 	bne	r12,zero,b834 <__gedf2+0x6c>
    b818:	0005883a 	mov	r2,zero
    b81c:	5800101e 	bne	r11,zero,b860 <__gedf2+0x98>
    b820:	f800283a 	ret
    b824:	18000c1e 	bne	r3,zero,b858 <__gedf2+0x90>
    b828:	3212b03a 	or	r9,r6,r8
    b82c:	48000c26 	beq	r9,zero,b860 <__gedf2+0x98>
    b830:	0013883a 	mov	r9,zero
    b834:	39c03fcc 	andi	r7,r7,255
    b838:	48000826 	beq	r9,zero,b85c <__gedf2+0x94>
    b83c:	38000926 	beq	r7,zero,b864 <__gedf2+0x9c>
    b840:	00800044 	movi	r2,1
    b844:	f800283a 	ret
    b848:	3212b03a 	or	r9,r6,r8
    b84c:	483fec26 	beq	r9,zero,b800 <__alt_data_end+0xf800b800>
    b850:	00bfff84 	movi	r2,-2
    b854:	f800283a 	ret
    b858:	39c03fcc 	andi	r7,r7,255
    b85c:	29c00626 	beq	r5,r7,b878 <__gedf2+0xb0>
    b860:	283ff726 	beq	r5,zero,b840 <__alt_data_end+0xf800b840>
    b864:	00bfffc4 	movi	r2,-1
    b868:	f800283a 	ret
    b86c:	2292b03a 	or	r9,r4,r10
    b870:	483fe126 	beq	r9,zero,b7f8 <__alt_data_end+0xf800b7f8>
    b874:	003ff606 	br	b850 <__alt_data_end+0xf800b850>
    b878:	18bff916 	blt	r3,r2,b860 <__alt_data_end+0xf800b860>
    b87c:	10c00316 	blt	r2,r3,b88c <__gedf2+0xc4>
    b880:	42bff736 	bltu	r8,r10,b860 <__alt_data_end+0xf800b860>
    b884:	52000326 	beq	r10,r8,b894 <__gedf2+0xcc>
    b888:	5200042e 	bgeu	r10,r8,b89c <__gedf2+0xd4>
    b88c:	283fec1e 	bne	r5,zero,b840 <__alt_data_end+0xf800b840>
    b890:	003ff406 	br	b864 <__alt_data_end+0xf800b864>
    b894:	313ff236 	bltu	r6,r4,b860 <__alt_data_end+0xf800b860>
    b898:	21bffc36 	bltu	r4,r6,b88c <__alt_data_end+0xf800b88c>
    b89c:	0005883a 	mov	r2,zero
    b8a0:	f800283a 	ret

0000b8a4 <__ledf2>:
    b8a4:	2804d53a 	srli	r2,r5,20
    b8a8:	3810d53a 	srli	r8,r7,20
    b8ac:	00c00434 	movhi	r3,16
    b8b0:	18ffffc4 	addi	r3,r3,-1
    b8b4:	1081ffcc 	andi	r2,r2,2047
    b8b8:	0241ffc4 	movi	r9,2047
    b8bc:	28d4703a 	and	r10,r5,r3
    b8c0:	4201ffcc 	andi	r8,r8,2047
    b8c4:	38c6703a 	and	r3,r7,r3
    b8c8:	280ad7fa 	srli	r5,r5,31
    b8cc:	380ed7fa 	srli	r7,r7,31
    b8d0:	12401f26 	beq	r2,r9,b950 <__ledf2+0xac>
    b8d4:	0241ffc4 	movi	r9,2047
    b8d8:	42401426 	beq	r8,r9,b92c <__ledf2+0x88>
    b8dc:	1000091e 	bne	r2,zero,b904 <__ledf2+0x60>
    b8e0:	2296b03a 	or	r11,r4,r10
    b8e4:	5813003a 	cmpeq	r9,r11,zero
    b8e8:	29403fcc 	andi	r5,r5,255
    b8ec:	40000a1e 	bne	r8,zero,b918 <__ledf2+0x74>
    b8f0:	30d8b03a 	or	r12,r6,r3
    b8f4:	6000081e 	bne	r12,zero,b918 <__ledf2+0x74>
    b8f8:	0005883a 	mov	r2,zero
    b8fc:	5800111e 	bne	r11,zero,b944 <__ledf2+0xa0>
    b900:	f800283a 	ret
    b904:	29403fcc 	andi	r5,r5,255
    b908:	40000c1e 	bne	r8,zero,b93c <__ledf2+0x98>
    b90c:	30d2b03a 	or	r9,r6,r3
    b910:	48000c26 	beq	r9,zero,b944 <__ledf2+0xa0>
    b914:	0013883a 	mov	r9,zero
    b918:	39c03fcc 	andi	r7,r7,255
    b91c:	48000826 	beq	r9,zero,b940 <__ledf2+0x9c>
    b920:	38001126 	beq	r7,zero,b968 <__ledf2+0xc4>
    b924:	00800044 	movi	r2,1
    b928:	f800283a 	ret
    b92c:	30d2b03a 	or	r9,r6,r3
    b930:	483fea26 	beq	r9,zero,b8dc <__alt_data_end+0xf800b8dc>
    b934:	00800084 	movi	r2,2
    b938:	f800283a 	ret
    b93c:	39c03fcc 	andi	r7,r7,255
    b940:	39400726 	beq	r7,r5,b960 <__ledf2+0xbc>
    b944:	2800081e 	bne	r5,zero,b968 <__ledf2+0xc4>
    b948:	00800044 	movi	r2,1
    b94c:	f800283a 	ret
    b950:	2292b03a 	or	r9,r4,r10
    b954:	483fdf26 	beq	r9,zero,b8d4 <__alt_data_end+0xf800b8d4>
    b958:	00800084 	movi	r2,2
    b95c:	f800283a 	ret
    b960:	4080030e 	bge	r8,r2,b970 <__ledf2+0xcc>
    b964:	383fef26 	beq	r7,zero,b924 <__alt_data_end+0xf800b924>
    b968:	00bfffc4 	movi	r2,-1
    b96c:	f800283a 	ret
    b970:	123feb16 	blt	r2,r8,b920 <__alt_data_end+0xf800b920>
    b974:	1abff336 	bltu	r3,r10,b944 <__alt_data_end+0xf800b944>
    b978:	50c00326 	beq	r10,r3,b988 <__ledf2+0xe4>
    b97c:	50c0042e 	bgeu	r10,r3,b990 <__ledf2+0xec>
    b980:	283fe81e 	bne	r5,zero,b924 <__alt_data_end+0xf800b924>
    b984:	003ff806 	br	b968 <__alt_data_end+0xf800b968>
    b988:	313fee36 	bltu	r6,r4,b944 <__alt_data_end+0xf800b944>
    b98c:	21bffc36 	bltu	r4,r6,b980 <__alt_data_end+0xf800b980>
    b990:	0005883a 	mov	r2,zero
    b994:	f800283a 	ret

0000b998 <__muldf3>:
    b998:	defff304 	addi	sp,sp,-52
    b99c:	2804d53a 	srli	r2,r5,20
    b9a0:	dd800915 	stw	r22,36(sp)
    b9a4:	282cd7fa 	srli	r22,r5,31
    b9a8:	dc000315 	stw	r16,12(sp)
    b9ac:	04000434 	movhi	r16,16
    b9b0:	dd400815 	stw	r21,32(sp)
    b9b4:	dc800515 	stw	r18,20(sp)
    b9b8:	843fffc4 	addi	r16,r16,-1
    b9bc:	dfc00c15 	stw	ra,48(sp)
    b9c0:	df000b15 	stw	fp,44(sp)
    b9c4:	ddc00a15 	stw	r23,40(sp)
    b9c8:	dd000715 	stw	r20,28(sp)
    b9cc:	dcc00615 	stw	r19,24(sp)
    b9d0:	dc400415 	stw	r17,16(sp)
    b9d4:	1481ffcc 	andi	r18,r2,2047
    b9d8:	2c20703a 	and	r16,r5,r16
    b9dc:	b02b883a 	mov	r21,r22
    b9e0:	b2403fcc 	andi	r9,r22,255
    b9e4:	90006026 	beq	r18,zero,bb68 <__muldf3+0x1d0>
    b9e8:	0081ffc4 	movi	r2,2047
    b9ec:	2029883a 	mov	r20,r4
    b9f0:	90803626 	beq	r18,r2,bacc <__muldf3+0x134>
    b9f4:	80800434 	orhi	r2,r16,16
    b9f8:	100490fa 	slli	r2,r2,3
    b9fc:	2020d77a 	srli	r16,r4,29
    ba00:	202890fa 	slli	r20,r4,3
    ba04:	94bf0044 	addi	r18,r18,-1023
    ba08:	80a0b03a 	or	r16,r16,r2
    ba0c:	0027883a 	mov	r19,zero
    ba10:	0039883a 	mov	fp,zero
    ba14:	3804d53a 	srli	r2,r7,20
    ba18:	382ed7fa 	srli	r23,r7,31
    ba1c:	04400434 	movhi	r17,16
    ba20:	8c7fffc4 	addi	r17,r17,-1
    ba24:	1081ffcc 	andi	r2,r2,2047
    ba28:	3011883a 	mov	r8,r6
    ba2c:	3c62703a 	and	r17,r7,r17
    ba30:	ba803fcc 	andi	r10,r23,255
    ba34:	10006d26 	beq	r2,zero,bbec <__muldf3+0x254>
    ba38:	00c1ffc4 	movi	r3,2047
    ba3c:	10c06526 	beq	r2,r3,bbd4 <__muldf3+0x23c>
    ba40:	88c00434 	orhi	r3,r17,16
    ba44:	180690fa 	slli	r3,r3,3
    ba48:	3022d77a 	srli	r17,r6,29
    ba4c:	301090fa 	slli	r8,r6,3
    ba50:	10bf0044 	addi	r2,r2,-1023
    ba54:	88e2b03a 	or	r17,r17,r3
    ba58:	000b883a 	mov	r5,zero
    ba5c:	9085883a 	add	r2,r18,r2
    ba60:	2cc8b03a 	or	r4,r5,r19
    ba64:	00c003c4 	movi	r3,15
    ba68:	bdacf03a 	xor	r22,r23,r22
    ba6c:	12c00044 	addi	r11,r2,1
    ba70:	19009936 	bltu	r3,r4,bcd8 <__muldf3+0x340>
    ba74:	200890ba 	slli	r4,r4,2
    ba78:	00c00074 	movhi	r3,1
    ba7c:	18eea304 	addi	r3,r3,-17780
    ba80:	20c9883a 	add	r4,r4,r3
    ba84:	20c00017 	ldw	r3,0(r4)
    ba88:	1800683a 	jmp	r3
    ba8c:	0000bcd8 	cmpnei	zero,zero,755
    ba90:	0000baec 	andhi	zero,zero,747
    ba94:	0000baec 	andhi	zero,zero,747
    ba98:	0000bae8 	cmpgeui	zero,zero,747
    ba9c:	0000bcb4 	movhi	zero,754
    baa0:	0000bcb4 	movhi	zero,754
    baa4:	0000bc9c 	xori	zero,zero,754
    baa8:	0000bae8 	cmpgeui	zero,zero,747
    baac:	0000bcb4 	movhi	zero,754
    bab0:	0000bc9c 	xori	zero,zero,754
    bab4:	0000bcb4 	movhi	zero,754
    bab8:	0000bae8 	cmpgeui	zero,zero,747
    babc:	0000bcc4 	movi	zero,755
    bac0:	0000bcc4 	movi	zero,755
    bac4:	0000bcc4 	movi	zero,755
    bac8:	0000bee0 	cmpeqi	zero,zero,763
    bacc:	2404b03a 	or	r2,r4,r16
    bad0:	10006f1e 	bne	r2,zero,bc90 <__muldf3+0x2f8>
    bad4:	04c00204 	movi	r19,8
    bad8:	0021883a 	mov	r16,zero
    badc:	0029883a 	mov	r20,zero
    bae0:	07000084 	movi	fp,2
    bae4:	003fcb06 	br	ba14 <__alt_data_end+0xf800ba14>
    bae8:	502d883a 	mov	r22,r10
    baec:	00800084 	movi	r2,2
    baf0:	28805726 	beq	r5,r2,bc50 <__muldf3+0x2b8>
    baf4:	008000c4 	movi	r2,3
    baf8:	28816626 	beq	r5,r2,c094 <__muldf3+0x6fc>
    bafc:	00800044 	movi	r2,1
    bb00:	2881411e 	bne	r5,r2,c008 <__muldf3+0x670>
    bb04:	b02b883a 	mov	r21,r22
    bb08:	0005883a 	mov	r2,zero
    bb0c:	000b883a 	mov	r5,zero
    bb10:	0029883a 	mov	r20,zero
    bb14:	1004953a 	slli	r2,r2,20
    bb18:	a8c03fcc 	andi	r3,r21,255
    bb1c:	04400434 	movhi	r17,16
    bb20:	8c7fffc4 	addi	r17,r17,-1
    bb24:	180697fa 	slli	r3,r3,31
    bb28:	2c4a703a 	and	r5,r5,r17
    bb2c:	288ab03a 	or	r5,r5,r2
    bb30:	28c6b03a 	or	r3,r5,r3
    bb34:	a005883a 	mov	r2,r20
    bb38:	dfc00c17 	ldw	ra,48(sp)
    bb3c:	df000b17 	ldw	fp,44(sp)
    bb40:	ddc00a17 	ldw	r23,40(sp)
    bb44:	dd800917 	ldw	r22,36(sp)
    bb48:	dd400817 	ldw	r21,32(sp)
    bb4c:	dd000717 	ldw	r20,28(sp)
    bb50:	dcc00617 	ldw	r19,24(sp)
    bb54:	dc800517 	ldw	r18,20(sp)
    bb58:	dc400417 	ldw	r17,16(sp)
    bb5c:	dc000317 	ldw	r16,12(sp)
    bb60:	dec00d04 	addi	sp,sp,52
    bb64:	f800283a 	ret
    bb68:	2404b03a 	or	r2,r4,r16
    bb6c:	2027883a 	mov	r19,r4
    bb70:	10004226 	beq	r2,zero,bc7c <__muldf3+0x2e4>
    bb74:	8000fc26 	beq	r16,zero,bf68 <__muldf3+0x5d0>
    bb78:	8009883a 	mov	r4,r16
    bb7c:	d9800215 	stw	r6,8(sp)
    bb80:	d9c00015 	stw	r7,0(sp)
    bb84:	da400115 	stw	r9,4(sp)
    bb88:	000cbb00 	call	cbb0 <__clzsi2>
    bb8c:	d9800217 	ldw	r6,8(sp)
    bb90:	d9c00017 	ldw	r7,0(sp)
    bb94:	da400117 	ldw	r9,4(sp)
    bb98:	113ffd44 	addi	r4,r2,-11
    bb9c:	00c00704 	movi	r3,28
    bba0:	1900ed16 	blt	r3,r4,bf58 <__muldf3+0x5c0>
    bba4:	00c00744 	movi	r3,29
    bba8:	147ffe04 	addi	r17,r2,-8
    bbac:	1907c83a 	sub	r3,r3,r4
    bbb0:	8460983a 	sll	r16,r16,r17
    bbb4:	98c6d83a 	srl	r3,r19,r3
    bbb8:	9c68983a 	sll	r20,r19,r17
    bbbc:	1c20b03a 	or	r16,r3,r16
    bbc0:	1080fcc4 	addi	r2,r2,1011
    bbc4:	00a5c83a 	sub	r18,zero,r2
    bbc8:	0027883a 	mov	r19,zero
    bbcc:	0039883a 	mov	fp,zero
    bbd0:	003f9006 	br	ba14 <__alt_data_end+0xf800ba14>
    bbd4:	3446b03a 	or	r3,r6,r17
    bbd8:	1800261e 	bne	r3,zero,bc74 <__muldf3+0x2dc>
    bbdc:	0023883a 	mov	r17,zero
    bbe0:	0011883a 	mov	r8,zero
    bbe4:	01400084 	movi	r5,2
    bbe8:	003f9c06 	br	ba5c <__alt_data_end+0xf800ba5c>
    bbec:	3446b03a 	or	r3,r6,r17
    bbf0:	18001c26 	beq	r3,zero,bc64 <__muldf3+0x2cc>
    bbf4:	8800ce26 	beq	r17,zero,bf30 <__muldf3+0x598>
    bbf8:	8809883a 	mov	r4,r17
    bbfc:	d9800215 	stw	r6,8(sp)
    bc00:	da400115 	stw	r9,4(sp)
    bc04:	da800015 	stw	r10,0(sp)
    bc08:	000cbb00 	call	cbb0 <__clzsi2>
    bc0c:	d9800217 	ldw	r6,8(sp)
    bc10:	da400117 	ldw	r9,4(sp)
    bc14:	da800017 	ldw	r10,0(sp)
    bc18:	113ffd44 	addi	r4,r2,-11
    bc1c:	00c00704 	movi	r3,28
    bc20:	1900bf16 	blt	r3,r4,bf20 <__muldf3+0x588>
    bc24:	00c00744 	movi	r3,29
    bc28:	123ffe04 	addi	r8,r2,-8
    bc2c:	1907c83a 	sub	r3,r3,r4
    bc30:	8a22983a 	sll	r17,r17,r8
    bc34:	30c6d83a 	srl	r3,r6,r3
    bc38:	3210983a 	sll	r8,r6,r8
    bc3c:	1c62b03a 	or	r17,r3,r17
    bc40:	1080fcc4 	addi	r2,r2,1011
    bc44:	0085c83a 	sub	r2,zero,r2
    bc48:	000b883a 	mov	r5,zero
    bc4c:	003f8306 	br	ba5c <__alt_data_end+0xf800ba5c>
    bc50:	b02b883a 	mov	r21,r22
    bc54:	0081ffc4 	movi	r2,2047
    bc58:	000b883a 	mov	r5,zero
    bc5c:	0029883a 	mov	r20,zero
    bc60:	003fac06 	br	bb14 <__alt_data_end+0xf800bb14>
    bc64:	0023883a 	mov	r17,zero
    bc68:	0011883a 	mov	r8,zero
    bc6c:	01400044 	movi	r5,1
    bc70:	003f7a06 	br	ba5c <__alt_data_end+0xf800ba5c>
    bc74:	014000c4 	movi	r5,3
    bc78:	003f7806 	br	ba5c <__alt_data_end+0xf800ba5c>
    bc7c:	04c00104 	movi	r19,4
    bc80:	0021883a 	mov	r16,zero
    bc84:	0029883a 	mov	r20,zero
    bc88:	07000044 	movi	fp,1
    bc8c:	003f6106 	br	ba14 <__alt_data_end+0xf800ba14>
    bc90:	04c00304 	movi	r19,12
    bc94:	070000c4 	movi	fp,3
    bc98:	003f5e06 	br	ba14 <__alt_data_end+0xf800ba14>
    bc9c:	01400434 	movhi	r5,16
    bca0:	002b883a 	mov	r21,zero
    bca4:	297fffc4 	addi	r5,r5,-1
    bca8:	053fffc4 	movi	r20,-1
    bcac:	0081ffc4 	movi	r2,2047
    bcb0:	003f9806 	br	bb14 <__alt_data_end+0xf800bb14>
    bcb4:	8023883a 	mov	r17,r16
    bcb8:	a011883a 	mov	r8,r20
    bcbc:	e00b883a 	mov	r5,fp
    bcc0:	003f8a06 	br	baec <__alt_data_end+0xf800baec>
    bcc4:	8023883a 	mov	r17,r16
    bcc8:	a011883a 	mov	r8,r20
    bccc:	482d883a 	mov	r22,r9
    bcd0:	e00b883a 	mov	r5,fp
    bcd4:	003f8506 	br	baec <__alt_data_end+0xf800baec>
    bcd8:	a00ad43a 	srli	r5,r20,16
    bcdc:	401ad43a 	srli	r13,r8,16
    bce0:	a53fffcc 	andi	r20,r20,65535
    bce4:	423fffcc 	andi	r8,r8,65535
    bce8:	4519383a 	mul	r12,r8,r20
    bcec:	4147383a 	mul	r3,r8,r5
    bcf0:	6d09383a 	mul	r4,r13,r20
    bcf4:	600cd43a 	srli	r6,r12,16
    bcf8:	2b5d383a 	mul	r14,r5,r13
    bcfc:	20c9883a 	add	r4,r4,r3
    bd00:	310d883a 	add	r6,r6,r4
    bd04:	30c0022e 	bgeu	r6,r3,bd10 <__muldf3+0x378>
    bd08:	00c00074 	movhi	r3,1
    bd0c:	70dd883a 	add	r14,r14,r3
    bd10:	8826d43a 	srli	r19,r17,16
    bd14:	8bffffcc 	andi	r15,r17,65535
    bd18:	7d23383a 	mul	r17,r15,r20
    bd1c:	7949383a 	mul	r4,r15,r5
    bd20:	9d29383a 	mul	r20,r19,r20
    bd24:	8814d43a 	srli	r10,r17,16
    bd28:	3012943a 	slli	r9,r6,16
    bd2c:	a129883a 	add	r20,r20,r4
    bd30:	633fffcc 	andi	r12,r12,65535
    bd34:	5515883a 	add	r10,r10,r20
    bd38:	3006d43a 	srli	r3,r6,16
    bd3c:	4b13883a 	add	r9,r9,r12
    bd40:	2ccb383a 	mul	r5,r5,r19
    bd44:	5100022e 	bgeu	r10,r4,bd50 <__muldf3+0x3b8>
    bd48:	01000074 	movhi	r4,1
    bd4c:	290b883a 	add	r5,r5,r4
    bd50:	802ad43a 	srli	r21,r16,16
    bd54:	843fffcc 	andi	r16,r16,65535
    bd58:	440d383a 	mul	r6,r8,r16
    bd5c:	4565383a 	mul	r18,r8,r21
    bd60:	8349383a 	mul	r4,r16,r13
    bd64:	500e943a 	slli	r7,r10,16
    bd68:	3010d43a 	srli	r8,r6,16
    bd6c:	5028d43a 	srli	r20,r10,16
    bd70:	2489883a 	add	r4,r4,r18
    bd74:	8abfffcc 	andi	r10,r17,65535
    bd78:	3a95883a 	add	r10,r7,r10
    bd7c:	4119883a 	add	r12,r8,r4
    bd80:	a169883a 	add	r20,r20,r5
    bd84:	1a87883a 	add	r3,r3,r10
    bd88:	6d5b383a 	mul	r13,r13,r21
    bd8c:	6480022e 	bgeu	r12,r18,bd98 <__muldf3+0x400>
    bd90:	01000074 	movhi	r4,1
    bd94:	691b883a 	add	r13,r13,r4
    bd98:	7c25383a 	mul	r18,r15,r16
    bd9c:	7d4b383a 	mul	r5,r15,r21
    bda0:	84cf383a 	mul	r7,r16,r19
    bda4:	901ed43a 	srli	r15,r18,16
    bda8:	6008d43a 	srli	r4,r12,16
    bdac:	6010943a 	slli	r8,r12,16
    bdb0:	394f883a 	add	r7,r7,r5
    bdb4:	333fffcc 	andi	r12,r6,65535
    bdb8:	79df883a 	add	r15,r15,r7
    bdbc:	235b883a 	add	r13,r4,r13
    bdc0:	9d63383a 	mul	r17,r19,r21
    bdc4:	4309883a 	add	r4,r8,r12
    bdc8:	7940022e 	bgeu	r15,r5,bdd4 <__muldf3+0x43c>
    bdcc:	01400074 	movhi	r5,1
    bdd0:	8963883a 	add	r17,r17,r5
    bdd4:	780a943a 	slli	r5,r15,16
    bdd8:	91bfffcc 	andi	r6,r18,65535
    bddc:	70c7883a 	add	r3,r14,r3
    bde0:	298d883a 	add	r6,r5,r6
    bde4:	1a8f803a 	cmpltu	r7,r3,r10
    bde8:	350b883a 	add	r5,r6,r20
    bdec:	20c7883a 	add	r3,r4,r3
    bdf0:	3955883a 	add	r10,r7,r5
    bdf4:	1909803a 	cmpltu	r4,r3,r4
    bdf8:	6a91883a 	add	r8,r13,r10
    bdfc:	780cd43a 	srli	r6,r15,16
    be00:	2219883a 	add	r12,r4,r8
    be04:	2d0b803a 	cmpltu	r5,r5,r20
    be08:	51cf803a 	cmpltu	r7,r10,r7
    be0c:	29ceb03a 	or	r7,r5,r7
    be10:	4351803a 	cmpltu	r8,r8,r13
    be14:	610b803a 	cmpltu	r5,r12,r4
    be18:	4148b03a 	or	r4,r8,r5
    be1c:	398f883a 	add	r7,r7,r6
    be20:	3909883a 	add	r4,r7,r4
    be24:	1810927a 	slli	r8,r3,9
    be28:	2449883a 	add	r4,r4,r17
    be2c:	2008927a 	slli	r4,r4,9
    be30:	6022d5fa 	srli	r17,r12,23
    be34:	1806d5fa 	srli	r3,r3,23
    be38:	4252b03a 	or	r9,r8,r9
    be3c:	600a927a 	slli	r5,r12,9
    be40:	4810c03a 	cmpne	r8,r9,zero
    be44:	2462b03a 	or	r17,r4,r17
    be48:	40c6b03a 	or	r3,r8,r3
    be4c:	8900402c 	andhi	r4,r17,256
    be50:	1950b03a 	or	r8,r3,r5
    be54:	20000726 	beq	r4,zero,be74 <__muldf3+0x4dc>
    be58:	4006d07a 	srli	r3,r8,1
    be5c:	880497fa 	slli	r2,r17,31
    be60:	4200004c 	andi	r8,r8,1
    be64:	8822d07a 	srli	r17,r17,1
    be68:	1a10b03a 	or	r8,r3,r8
    be6c:	1210b03a 	or	r8,r2,r8
    be70:	5805883a 	mov	r2,r11
    be74:	1140ffc4 	addi	r5,r2,1023
    be78:	0140440e 	bge	zero,r5,bf8c <__muldf3+0x5f4>
    be7c:	40c001cc 	andi	r3,r8,7
    be80:	18000726 	beq	r3,zero,bea0 <__muldf3+0x508>
    be84:	40c003cc 	andi	r3,r8,15
    be88:	01000104 	movi	r4,4
    be8c:	19000426 	beq	r3,r4,bea0 <__muldf3+0x508>
    be90:	4107883a 	add	r3,r8,r4
    be94:	1a11803a 	cmpltu	r8,r3,r8
    be98:	8a23883a 	add	r17,r17,r8
    be9c:	1811883a 	mov	r8,r3
    bea0:	88c0402c 	andhi	r3,r17,256
    bea4:	18000426 	beq	r3,zero,beb8 <__muldf3+0x520>
    bea8:	11410004 	addi	r5,r2,1024
    beac:	00bfc034 	movhi	r2,65280
    beb0:	10bfffc4 	addi	r2,r2,-1
    beb4:	88a2703a 	and	r17,r17,r2
    beb8:	0081ff84 	movi	r2,2046
    bebc:	117f6416 	blt	r2,r5,bc50 <__alt_data_end+0xf800bc50>
    bec0:	8828977a 	slli	r20,r17,29
    bec4:	4010d0fa 	srli	r8,r8,3
    bec8:	8822927a 	slli	r17,r17,9
    becc:	2881ffcc 	andi	r2,r5,2047
    bed0:	a228b03a 	or	r20,r20,r8
    bed4:	880ad33a 	srli	r5,r17,12
    bed8:	b02b883a 	mov	r21,r22
    bedc:	003f0d06 	br	bb14 <__alt_data_end+0xf800bb14>
    bee0:	8080022c 	andhi	r2,r16,8
    bee4:	10000926 	beq	r2,zero,bf0c <__muldf3+0x574>
    bee8:	8880022c 	andhi	r2,r17,8
    beec:	1000071e 	bne	r2,zero,bf0c <__muldf3+0x574>
    bef0:	00800434 	movhi	r2,16
    bef4:	89400234 	orhi	r5,r17,8
    bef8:	10bfffc4 	addi	r2,r2,-1
    befc:	b82b883a 	mov	r21,r23
    bf00:	288a703a 	and	r5,r5,r2
    bf04:	4029883a 	mov	r20,r8
    bf08:	003f6806 	br	bcac <__alt_data_end+0xf800bcac>
    bf0c:	00800434 	movhi	r2,16
    bf10:	81400234 	orhi	r5,r16,8
    bf14:	10bfffc4 	addi	r2,r2,-1
    bf18:	288a703a 	and	r5,r5,r2
    bf1c:	003f6306 	br	bcac <__alt_data_end+0xf800bcac>
    bf20:	147ff604 	addi	r17,r2,-40
    bf24:	3462983a 	sll	r17,r6,r17
    bf28:	0011883a 	mov	r8,zero
    bf2c:	003f4406 	br	bc40 <__alt_data_end+0xf800bc40>
    bf30:	3009883a 	mov	r4,r6
    bf34:	d9800215 	stw	r6,8(sp)
    bf38:	da400115 	stw	r9,4(sp)
    bf3c:	da800015 	stw	r10,0(sp)
    bf40:	000cbb00 	call	cbb0 <__clzsi2>
    bf44:	10800804 	addi	r2,r2,32
    bf48:	da800017 	ldw	r10,0(sp)
    bf4c:	da400117 	ldw	r9,4(sp)
    bf50:	d9800217 	ldw	r6,8(sp)
    bf54:	003f3006 	br	bc18 <__alt_data_end+0xf800bc18>
    bf58:	143ff604 	addi	r16,r2,-40
    bf5c:	9c20983a 	sll	r16,r19,r16
    bf60:	0029883a 	mov	r20,zero
    bf64:	003f1606 	br	bbc0 <__alt_data_end+0xf800bbc0>
    bf68:	d9800215 	stw	r6,8(sp)
    bf6c:	d9c00015 	stw	r7,0(sp)
    bf70:	da400115 	stw	r9,4(sp)
    bf74:	000cbb00 	call	cbb0 <__clzsi2>
    bf78:	10800804 	addi	r2,r2,32
    bf7c:	da400117 	ldw	r9,4(sp)
    bf80:	d9c00017 	ldw	r7,0(sp)
    bf84:	d9800217 	ldw	r6,8(sp)
    bf88:	003f0306 	br	bb98 <__alt_data_end+0xf800bb98>
    bf8c:	00c00044 	movi	r3,1
    bf90:	1947c83a 	sub	r3,r3,r5
    bf94:	00800e04 	movi	r2,56
    bf98:	10feda16 	blt	r2,r3,bb04 <__alt_data_end+0xf800bb04>
    bf9c:	008007c4 	movi	r2,31
    bfa0:	10c01b16 	blt	r2,r3,c010 <__muldf3+0x678>
    bfa4:	00800804 	movi	r2,32
    bfa8:	10c5c83a 	sub	r2,r2,r3
    bfac:	888a983a 	sll	r5,r17,r2
    bfb0:	40c8d83a 	srl	r4,r8,r3
    bfb4:	4084983a 	sll	r2,r8,r2
    bfb8:	88e2d83a 	srl	r17,r17,r3
    bfbc:	2906b03a 	or	r3,r5,r4
    bfc0:	1004c03a 	cmpne	r2,r2,zero
    bfc4:	1886b03a 	or	r3,r3,r2
    bfc8:	188001cc 	andi	r2,r3,7
    bfcc:	10000726 	beq	r2,zero,bfec <__muldf3+0x654>
    bfd0:	188003cc 	andi	r2,r3,15
    bfd4:	01000104 	movi	r4,4
    bfd8:	11000426 	beq	r2,r4,bfec <__muldf3+0x654>
    bfdc:	1805883a 	mov	r2,r3
    bfe0:	10c00104 	addi	r3,r2,4
    bfe4:	1885803a 	cmpltu	r2,r3,r2
    bfe8:	88a3883a 	add	r17,r17,r2
    bfec:	8880202c 	andhi	r2,r17,128
    bff0:	10001c26 	beq	r2,zero,c064 <__muldf3+0x6cc>
    bff4:	b02b883a 	mov	r21,r22
    bff8:	00800044 	movi	r2,1
    bffc:	000b883a 	mov	r5,zero
    c000:	0029883a 	mov	r20,zero
    c004:	003ec306 	br	bb14 <__alt_data_end+0xf800bb14>
    c008:	5805883a 	mov	r2,r11
    c00c:	003f9906 	br	be74 <__alt_data_end+0xf800be74>
    c010:	00bff844 	movi	r2,-31
    c014:	1145c83a 	sub	r2,r2,r5
    c018:	8888d83a 	srl	r4,r17,r2
    c01c:	00800804 	movi	r2,32
    c020:	18801a26 	beq	r3,r2,c08c <__muldf3+0x6f4>
    c024:	00801004 	movi	r2,64
    c028:	10c5c83a 	sub	r2,r2,r3
    c02c:	8884983a 	sll	r2,r17,r2
    c030:	1204b03a 	or	r2,r2,r8
    c034:	1004c03a 	cmpne	r2,r2,zero
    c038:	2084b03a 	or	r2,r4,r2
    c03c:	144001cc 	andi	r17,r2,7
    c040:	88000d1e 	bne	r17,zero,c078 <__muldf3+0x6e0>
    c044:	000b883a 	mov	r5,zero
    c048:	1028d0fa 	srli	r20,r2,3
    c04c:	b02b883a 	mov	r21,r22
    c050:	0005883a 	mov	r2,zero
    c054:	a468b03a 	or	r20,r20,r17
    c058:	003eae06 	br	bb14 <__alt_data_end+0xf800bb14>
    c05c:	1007883a 	mov	r3,r2
    c060:	0023883a 	mov	r17,zero
    c064:	880a927a 	slli	r5,r17,9
    c068:	1805883a 	mov	r2,r3
    c06c:	8822977a 	slli	r17,r17,29
    c070:	280ad33a 	srli	r5,r5,12
    c074:	003ff406 	br	c048 <__alt_data_end+0xf800c048>
    c078:	10c003cc 	andi	r3,r2,15
    c07c:	01000104 	movi	r4,4
    c080:	193ff626 	beq	r3,r4,c05c <__alt_data_end+0xf800c05c>
    c084:	0023883a 	mov	r17,zero
    c088:	003fd506 	br	bfe0 <__alt_data_end+0xf800bfe0>
    c08c:	0005883a 	mov	r2,zero
    c090:	003fe706 	br	c030 <__alt_data_end+0xf800c030>
    c094:	00800434 	movhi	r2,16
    c098:	89400234 	orhi	r5,r17,8
    c09c:	10bfffc4 	addi	r2,r2,-1
    c0a0:	b02b883a 	mov	r21,r22
    c0a4:	288a703a 	and	r5,r5,r2
    c0a8:	4029883a 	mov	r20,r8
    c0ac:	003eff06 	br	bcac <__alt_data_end+0xf800bcac>

0000c0b0 <__subdf3>:
    c0b0:	02000434 	movhi	r8,16
    c0b4:	423fffc4 	addi	r8,r8,-1
    c0b8:	defffb04 	addi	sp,sp,-20
    c0bc:	2a14703a 	and	r10,r5,r8
    c0c0:	3812d53a 	srli	r9,r7,20
    c0c4:	3a10703a 	and	r8,r7,r8
    c0c8:	2006d77a 	srli	r3,r4,29
    c0cc:	3004d77a 	srli	r2,r6,29
    c0d0:	dc000015 	stw	r16,0(sp)
    c0d4:	501490fa 	slli	r10,r10,3
    c0d8:	2820d53a 	srli	r16,r5,20
    c0dc:	401090fa 	slli	r8,r8,3
    c0e0:	dc800215 	stw	r18,8(sp)
    c0e4:	dc400115 	stw	r17,4(sp)
    c0e8:	dfc00415 	stw	ra,16(sp)
    c0ec:	202290fa 	slli	r17,r4,3
    c0f0:	dcc00315 	stw	r19,12(sp)
    c0f4:	4a41ffcc 	andi	r9,r9,2047
    c0f8:	0101ffc4 	movi	r4,2047
    c0fc:	2824d7fa 	srli	r18,r5,31
    c100:	8401ffcc 	andi	r16,r16,2047
    c104:	50c6b03a 	or	r3,r10,r3
    c108:	380ed7fa 	srli	r7,r7,31
    c10c:	408ab03a 	or	r5,r8,r2
    c110:	300c90fa 	slli	r6,r6,3
    c114:	49009626 	beq	r9,r4,c370 <__subdf3+0x2c0>
    c118:	39c0005c 	xori	r7,r7,1
    c11c:	8245c83a 	sub	r2,r16,r9
    c120:	3c807426 	beq	r7,r18,c2f4 <__subdf3+0x244>
    c124:	0080af0e 	bge	zero,r2,c3e4 <__subdf3+0x334>
    c128:	48002a1e 	bne	r9,zero,c1d4 <__subdf3+0x124>
    c12c:	2988b03a 	or	r4,r5,r6
    c130:	20009a1e 	bne	r4,zero,c39c <__subdf3+0x2ec>
    c134:	888001cc 	andi	r2,r17,7
    c138:	10000726 	beq	r2,zero,c158 <__subdf3+0xa8>
    c13c:	888003cc 	andi	r2,r17,15
    c140:	01000104 	movi	r4,4
    c144:	11000426 	beq	r2,r4,c158 <__subdf3+0xa8>
    c148:	890b883a 	add	r5,r17,r4
    c14c:	2c63803a 	cmpltu	r17,r5,r17
    c150:	1c47883a 	add	r3,r3,r17
    c154:	2823883a 	mov	r17,r5
    c158:	1880202c 	andhi	r2,r3,128
    c15c:	10005926 	beq	r2,zero,c2c4 <__subdf3+0x214>
    c160:	84000044 	addi	r16,r16,1
    c164:	0081ffc4 	movi	r2,2047
    c168:	8080be26 	beq	r16,r2,c464 <__subdf3+0x3b4>
    c16c:	017fe034 	movhi	r5,65408
    c170:	297fffc4 	addi	r5,r5,-1
    c174:	1946703a 	and	r3,r3,r5
    c178:	1804977a 	slli	r2,r3,29
    c17c:	1806927a 	slli	r3,r3,9
    c180:	8822d0fa 	srli	r17,r17,3
    c184:	8401ffcc 	andi	r16,r16,2047
    c188:	180ad33a 	srli	r5,r3,12
    c18c:	9100004c 	andi	r4,r18,1
    c190:	1444b03a 	or	r2,r2,r17
    c194:	80c1ffcc 	andi	r3,r16,2047
    c198:	1820953a 	slli	r16,r3,20
    c19c:	20c03fcc 	andi	r3,r4,255
    c1a0:	180897fa 	slli	r4,r3,31
    c1a4:	00c00434 	movhi	r3,16
    c1a8:	18ffffc4 	addi	r3,r3,-1
    c1ac:	28c6703a 	and	r3,r5,r3
    c1b0:	1c06b03a 	or	r3,r3,r16
    c1b4:	1906b03a 	or	r3,r3,r4
    c1b8:	dfc00417 	ldw	ra,16(sp)
    c1bc:	dcc00317 	ldw	r19,12(sp)
    c1c0:	dc800217 	ldw	r18,8(sp)
    c1c4:	dc400117 	ldw	r17,4(sp)
    c1c8:	dc000017 	ldw	r16,0(sp)
    c1cc:	dec00504 	addi	sp,sp,20
    c1d0:	f800283a 	ret
    c1d4:	0101ffc4 	movi	r4,2047
    c1d8:	813fd626 	beq	r16,r4,c134 <__alt_data_end+0xf800c134>
    c1dc:	29402034 	orhi	r5,r5,128
    c1e0:	01000e04 	movi	r4,56
    c1e4:	2080a316 	blt	r4,r2,c474 <__subdf3+0x3c4>
    c1e8:	010007c4 	movi	r4,31
    c1ec:	2080c616 	blt	r4,r2,c508 <__subdf3+0x458>
    c1f0:	01000804 	movi	r4,32
    c1f4:	2089c83a 	sub	r4,r4,r2
    c1f8:	2910983a 	sll	r8,r5,r4
    c1fc:	308ed83a 	srl	r7,r6,r2
    c200:	3108983a 	sll	r4,r6,r4
    c204:	2884d83a 	srl	r2,r5,r2
    c208:	41ccb03a 	or	r6,r8,r7
    c20c:	2008c03a 	cmpne	r4,r4,zero
    c210:	310cb03a 	or	r6,r6,r4
    c214:	898dc83a 	sub	r6,r17,r6
    c218:	89a3803a 	cmpltu	r17,r17,r6
    c21c:	1887c83a 	sub	r3,r3,r2
    c220:	1c47c83a 	sub	r3,r3,r17
    c224:	3023883a 	mov	r17,r6
    c228:	1880202c 	andhi	r2,r3,128
    c22c:	10002326 	beq	r2,zero,c2bc <__subdf3+0x20c>
    c230:	04c02034 	movhi	r19,128
    c234:	9cffffc4 	addi	r19,r19,-1
    c238:	1ce6703a 	and	r19,r3,r19
    c23c:	98007a26 	beq	r19,zero,c428 <__subdf3+0x378>
    c240:	9809883a 	mov	r4,r19
    c244:	000cbb00 	call	cbb0 <__clzsi2>
    c248:	113ffe04 	addi	r4,r2,-8
    c24c:	00c007c4 	movi	r3,31
    c250:	19007b16 	blt	r3,r4,c440 <__subdf3+0x390>
    c254:	00800804 	movi	r2,32
    c258:	1105c83a 	sub	r2,r2,r4
    c25c:	8884d83a 	srl	r2,r17,r2
    c260:	9906983a 	sll	r3,r19,r4
    c264:	8922983a 	sll	r17,r17,r4
    c268:	10c4b03a 	or	r2,r2,r3
    c26c:	24007816 	blt	r4,r16,c450 <__subdf3+0x3a0>
    c270:	2421c83a 	sub	r16,r4,r16
    c274:	80c00044 	addi	r3,r16,1
    c278:	010007c4 	movi	r4,31
    c27c:	20c09516 	blt	r4,r3,c4d4 <__subdf3+0x424>
    c280:	01400804 	movi	r5,32
    c284:	28cbc83a 	sub	r5,r5,r3
    c288:	88c8d83a 	srl	r4,r17,r3
    c28c:	8962983a 	sll	r17,r17,r5
    c290:	114a983a 	sll	r5,r2,r5
    c294:	10c6d83a 	srl	r3,r2,r3
    c298:	8804c03a 	cmpne	r2,r17,zero
    c29c:	290ab03a 	or	r5,r5,r4
    c2a0:	28a2b03a 	or	r17,r5,r2
    c2a4:	0021883a 	mov	r16,zero
    c2a8:	003fa206 	br	c134 <__alt_data_end+0xf800c134>
    c2ac:	2090b03a 	or	r8,r4,r2
    c2b0:	40018e26 	beq	r8,zero,c8ec <__subdf3+0x83c>
    c2b4:	1007883a 	mov	r3,r2
    c2b8:	2023883a 	mov	r17,r4
    c2bc:	888001cc 	andi	r2,r17,7
    c2c0:	103f9e1e 	bne	r2,zero,c13c <__alt_data_end+0xf800c13c>
    c2c4:	1804977a 	slli	r2,r3,29
    c2c8:	8822d0fa 	srli	r17,r17,3
    c2cc:	1810d0fa 	srli	r8,r3,3
    c2d0:	9100004c 	andi	r4,r18,1
    c2d4:	1444b03a 	or	r2,r2,r17
    c2d8:	00c1ffc4 	movi	r3,2047
    c2dc:	80c02826 	beq	r16,r3,c380 <__subdf3+0x2d0>
    c2e0:	01400434 	movhi	r5,16
    c2e4:	297fffc4 	addi	r5,r5,-1
    c2e8:	80e0703a 	and	r16,r16,r3
    c2ec:	414a703a 	and	r5,r8,r5
    c2f0:	003fa806 	br	c194 <__alt_data_end+0xf800c194>
    c2f4:	0080630e 	bge	zero,r2,c484 <__subdf3+0x3d4>
    c2f8:	48003026 	beq	r9,zero,c3bc <__subdf3+0x30c>
    c2fc:	0101ffc4 	movi	r4,2047
    c300:	813f8c26 	beq	r16,r4,c134 <__alt_data_end+0xf800c134>
    c304:	29402034 	orhi	r5,r5,128
    c308:	01000e04 	movi	r4,56
    c30c:	2080a90e 	bge	r4,r2,c5b4 <__subdf3+0x504>
    c310:	298cb03a 	or	r6,r5,r6
    c314:	3012c03a 	cmpne	r9,r6,zero
    c318:	0005883a 	mov	r2,zero
    c31c:	4c53883a 	add	r9,r9,r17
    c320:	4c63803a 	cmpltu	r17,r9,r17
    c324:	10c7883a 	add	r3,r2,r3
    c328:	88c7883a 	add	r3,r17,r3
    c32c:	4823883a 	mov	r17,r9
    c330:	1880202c 	andhi	r2,r3,128
    c334:	1000d026 	beq	r2,zero,c678 <__subdf3+0x5c8>
    c338:	84000044 	addi	r16,r16,1
    c33c:	0081ffc4 	movi	r2,2047
    c340:	8080fe26 	beq	r16,r2,c73c <__subdf3+0x68c>
    c344:	00bfe034 	movhi	r2,65408
    c348:	10bfffc4 	addi	r2,r2,-1
    c34c:	1886703a 	and	r3,r3,r2
    c350:	880ad07a 	srli	r5,r17,1
    c354:	180497fa 	slli	r2,r3,31
    c358:	8900004c 	andi	r4,r17,1
    c35c:	2922b03a 	or	r17,r5,r4
    c360:	1806d07a 	srli	r3,r3,1
    c364:	1462b03a 	or	r17,r2,r17
    c368:	3825883a 	mov	r18,r7
    c36c:	003f7106 	br	c134 <__alt_data_end+0xf800c134>
    c370:	2984b03a 	or	r2,r5,r6
    c374:	103f6826 	beq	r2,zero,c118 <__alt_data_end+0xf800c118>
    c378:	39c03fcc 	andi	r7,r7,255
    c37c:	003f6706 	br	c11c <__alt_data_end+0xf800c11c>
    c380:	4086b03a 	or	r3,r8,r2
    c384:	18015226 	beq	r3,zero,c8d0 <__subdf3+0x820>
    c388:	00c00434 	movhi	r3,16
    c38c:	41400234 	orhi	r5,r8,8
    c390:	18ffffc4 	addi	r3,r3,-1
    c394:	28ca703a 	and	r5,r5,r3
    c398:	003f7e06 	br	c194 <__alt_data_end+0xf800c194>
    c39c:	10bfffc4 	addi	r2,r2,-1
    c3a0:	1000491e 	bne	r2,zero,c4c8 <__subdf3+0x418>
    c3a4:	898fc83a 	sub	r7,r17,r6
    c3a8:	89e3803a 	cmpltu	r17,r17,r7
    c3ac:	1947c83a 	sub	r3,r3,r5
    c3b0:	1c47c83a 	sub	r3,r3,r17
    c3b4:	3823883a 	mov	r17,r7
    c3b8:	003f9b06 	br	c228 <__alt_data_end+0xf800c228>
    c3bc:	2988b03a 	or	r4,r5,r6
    c3c0:	203f5c26 	beq	r4,zero,c134 <__alt_data_end+0xf800c134>
    c3c4:	10bfffc4 	addi	r2,r2,-1
    c3c8:	1000931e 	bne	r2,zero,c618 <__subdf3+0x568>
    c3cc:	898d883a 	add	r6,r17,r6
    c3d0:	3463803a 	cmpltu	r17,r6,r17
    c3d4:	1947883a 	add	r3,r3,r5
    c3d8:	88c7883a 	add	r3,r17,r3
    c3dc:	3023883a 	mov	r17,r6
    c3e0:	003fd306 	br	c330 <__alt_data_end+0xf800c330>
    c3e4:	1000541e 	bne	r2,zero,c538 <__subdf3+0x488>
    c3e8:	80800044 	addi	r2,r16,1
    c3ec:	1081ffcc 	andi	r2,r2,2047
    c3f0:	01000044 	movi	r4,1
    c3f4:	2080a20e 	bge	r4,r2,c680 <__subdf3+0x5d0>
    c3f8:	8989c83a 	sub	r4,r17,r6
    c3fc:	8905803a 	cmpltu	r2,r17,r4
    c400:	1967c83a 	sub	r19,r3,r5
    c404:	98a7c83a 	sub	r19,r19,r2
    c408:	9880202c 	andhi	r2,r19,128
    c40c:	10006326 	beq	r2,zero,c59c <__subdf3+0x4ec>
    c410:	3463c83a 	sub	r17,r6,r17
    c414:	28c7c83a 	sub	r3,r5,r3
    c418:	344d803a 	cmpltu	r6,r6,r17
    c41c:	19a7c83a 	sub	r19,r3,r6
    c420:	3825883a 	mov	r18,r7
    c424:	983f861e 	bne	r19,zero,c240 <__alt_data_end+0xf800c240>
    c428:	8809883a 	mov	r4,r17
    c42c:	000cbb00 	call	cbb0 <__clzsi2>
    c430:	10800804 	addi	r2,r2,32
    c434:	113ffe04 	addi	r4,r2,-8
    c438:	00c007c4 	movi	r3,31
    c43c:	193f850e 	bge	r3,r4,c254 <__alt_data_end+0xf800c254>
    c440:	10bff604 	addi	r2,r2,-40
    c444:	8884983a 	sll	r2,r17,r2
    c448:	0023883a 	mov	r17,zero
    c44c:	243f880e 	bge	r4,r16,c270 <__alt_data_end+0xf800c270>
    c450:	00ffe034 	movhi	r3,65408
    c454:	18ffffc4 	addi	r3,r3,-1
    c458:	8121c83a 	sub	r16,r16,r4
    c45c:	10c6703a 	and	r3,r2,r3
    c460:	003f3406 	br	c134 <__alt_data_end+0xf800c134>
    c464:	9100004c 	andi	r4,r18,1
    c468:	000b883a 	mov	r5,zero
    c46c:	0005883a 	mov	r2,zero
    c470:	003f4806 	br	c194 <__alt_data_end+0xf800c194>
    c474:	298cb03a 	or	r6,r5,r6
    c478:	300cc03a 	cmpne	r6,r6,zero
    c47c:	0005883a 	mov	r2,zero
    c480:	003f6406 	br	c214 <__alt_data_end+0xf800c214>
    c484:	10009a1e 	bne	r2,zero,c6f0 <__subdf3+0x640>
    c488:	82400044 	addi	r9,r16,1
    c48c:	4881ffcc 	andi	r2,r9,2047
    c490:	02800044 	movi	r10,1
    c494:	5080670e 	bge	r10,r2,c634 <__subdf3+0x584>
    c498:	0081ffc4 	movi	r2,2047
    c49c:	4880af26 	beq	r9,r2,c75c <__subdf3+0x6ac>
    c4a0:	898d883a 	add	r6,r17,r6
    c4a4:	1945883a 	add	r2,r3,r5
    c4a8:	3447803a 	cmpltu	r3,r6,r17
    c4ac:	1887883a 	add	r3,r3,r2
    c4b0:	182297fa 	slli	r17,r3,31
    c4b4:	300cd07a 	srli	r6,r6,1
    c4b8:	1806d07a 	srli	r3,r3,1
    c4bc:	4821883a 	mov	r16,r9
    c4c0:	89a2b03a 	or	r17,r17,r6
    c4c4:	003f1b06 	br	c134 <__alt_data_end+0xf800c134>
    c4c8:	0101ffc4 	movi	r4,2047
    c4cc:	813f441e 	bne	r16,r4,c1e0 <__alt_data_end+0xf800c1e0>
    c4d0:	003f1806 	br	c134 <__alt_data_end+0xf800c134>
    c4d4:	843ff844 	addi	r16,r16,-31
    c4d8:	01400804 	movi	r5,32
    c4dc:	1408d83a 	srl	r4,r2,r16
    c4e0:	19405026 	beq	r3,r5,c624 <__subdf3+0x574>
    c4e4:	01401004 	movi	r5,64
    c4e8:	28c7c83a 	sub	r3,r5,r3
    c4ec:	10c4983a 	sll	r2,r2,r3
    c4f0:	88a2b03a 	or	r17,r17,r2
    c4f4:	8822c03a 	cmpne	r17,r17,zero
    c4f8:	2462b03a 	or	r17,r4,r17
    c4fc:	0007883a 	mov	r3,zero
    c500:	0021883a 	mov	r16,zero
    c504:	003f6d06 	br	c2bc <__alt_data_end+0xf800c2bc>
    c508:	11fff804 	addi	r7,r2,-32
    c50c:	01000804 	movi	r4,32
    c510:	29ced83a 	srl	r7,r5,r7
    c514:	11004526 	beq	r2,r4,c62c <__subdf3+0x57c>
    c518:	01001004 	movi	r4,64
    c51c:	2089c83a 	sub	r4,r4,r2
    c520:	2904983a 	sll	r2,r5,r4
    c524:	118cb03a 	or	r6,r2,r6
    c528:	300cc03a 	cmpne	r6,r6,zero
    c52c:	398cb03a 	or	r6,r7,r6
    c530:	0005883a 	mov	r2,zero
    c534:	003f3706 	br	c214 <__alt_data_end+0xf800c214>
    c538:	80002a26 	beq	r16,zero,c5e4 <__subdf3+0x534>
    c53c:	0101ffc4 	movi	r4,2047
    c540:	49006626 	beq	r9,r4,c6dc <__subdf3+0x62c>
    c544:	0085c83a 	sub	r2,zero,r2
    c548:	18c02034 	orhi	r3,r3,128
    c54c:	01000e04 	movi	r4,56
    c550:	20807e16 	blt	r4,r2,c74c <__subdf3+0x69c>
    c554:	010007c4 	movi	r4,31
    c558:	2080e716 	blt	r4,r2,c8f8 <__subdf3+0x848>
    c55c:	01000804 	movi	r4,32
    c560:	2089c83a 	sub	r4,r4,r2
    c564:	1914983a 	sll	r10,r3,r4
    c568:	8890d83a 	srl	r8,r17,r2
    c56c:	8908983a 	sll	r4,r17,r4
    c570:	1884d83a 	srl	r2,r3,r2
    c574:	5222b03a 	or	r17,r10,r8
    c578:	2006c03a 	cmpne	r3,r4,zero
    c57c:	88e2b03a 	or	r17,r17,r3
    c580:	3463c83a 	sub	r17,r6,r17
    c584:	2885c83a 	sub	r2,r5,r2
    c588:	344d803a 	cmpltu	r6,r6,r17
    c58c:	1187c83a 	sub	r3,r2,r6
    c590:	4821883a 	mov	r16,r9
    c594:	3825883a 	mov	r18,r7
    c598:	003f2306 	br	c228 <__alt_data_end+0xf800c228>
    c59c:	24d0b03a 	or	r8,r4,r19
    c5a0:	40001b1e 	bne	r8,zero,c610 <__subdf3+0x560>
    c5a4:	0005883a 	mov	r2,zero
    c5a8:	0009883a 	mov	r4,zero
    c5ac:	0021883a 	mov	r16,zero
    c5b0:	003f4906 	br	c2d8 <__alt_data_end+0xf800c2d8>
    c5b4:	010007c4 	movi	r4,31
    c5b8:	20803a16 	blt	r4,r2,c6a4 <__subdf3+0x5f4>
    c5bc:	01000804 	movi	r4,32
    c5c0:	2089c83a 	sub	r4,r4,r2
    c5c4:	2912983a 	sll	r9,r5,r4
    c5c8:	3090d83a 	srl	r8,r6,r2
    c5cc:	3108983a 	sll	r4,r6,r4
    c5d0:	2884d83a 	srl	r2,r5,r2
    c5d4:	4a12b03a 	or	r9,r9,r8
    c5d8:	2008c03a 	cmpne	r4,r4,zero
    c5dc:	4912b03a 	or	r9,r9,r4
    c5e0:	003f4e06 	br	c31c <__alt_data_end+0xf800c31c>
    c5e4:	1c48b03a 	or	r4,r3,r17
    c5e8:	20003c26 	beq	r4,zero,c6dc <__subdf3+0x62c>
    c5ec:	0084303a 	nor	r2,zero,r2
    c5f0:	1000381e 	bne	r2,zero,c6d4 <__subdf3+0x624>
    c5f4:	3463c83a 	sub	r17,r6,r17
    c5f8:	28c5c83a 	sub	r2,r5,r3
    c5fc:	344d803a 	cmpltu	r6,r6,r17
    c600:	1187c83a 	sub	r3,r2,r6
    c604:	4821883a 	mov	r16,r9
    c608:	3825883a 	mov	r18,r7
    c60c:	003f0606 	br	c228 <__alt_data_end+0xf800c228>
    c610:	2023883a 	mov	r17,r4
    c614:	003f0906 	br	c23c <__alt_data_end+0xf800c23c>
    c618:	0101ffc4 	movi	r4,2047
    c61c:	813f3a1e 	bne	r16,r4,c308 <__alt_data_end+0xf800c308>
    c620:	003ec406 	br	c134 <__alt_data_end+0xf800c134>
    c624:	0005883a 	mov	r2,zero
    c628:	003fb106 	br	c4f0 <__alt_data_end+0xf800c4f0>
    c62c:	0005883a 	mov	r2,zero
    c630:	003fbc06 	br	c524 <__alt_data_end+0xf800c524>
    c634:	1c44b03a 	or	r2,r3,r17
    c638:	80008e1e 	bne	r16,zero,c874 <__subdf3+0x7c4>
    c63c:	1000c826 	beq	r2,zero,c960 <__subdf3+0x8b0>
    c640:	2984b03a 	or	r2,r5,r6
    c644:	103ebb26 	beq	r2,zero,c134 <__alt_data_end+0xf800c134>
    c648:	8989883a 	add	r4,r17,r6
    c64c:	1945883a 	add	r2,r3,r5
    c650:	2447803a 	cmpltu	r3,r4,r17
    c654:	1887883a 	add	r3,r3,r2
    c658:	1880202c 	andhi	r2,r3,128
    c65c:	2023883a 	mov	r17,r4
    c660:	103f1626 	beq	r2,zero,c2bc <__alt_data_end+0xf800c2bc>
    c664:	00bfe034 	movhi	r2,65408
    c668:	10bfffc4 	addi	r2,r2,-1
    c66c:	5021883a 	mov	r16,r10
    c670:	1886703a 	and	r3,r3,r2
    c674:	003eaf06 	br	c134 <__alt_data_end+0xf800c134>
    c678:	3825883a 	mov	r18,r7
    c67c:	003f0f06 	br	c2bc <__alt_data_end+0xf800c2bc>
    c680:	1c44b03a 	or	r2,r3,r17
    c684:	8000251e 	bne	r16,zero,c71c <__subdf3+0x66c>
    c688:	1000661e 	bne	r2,zero,c824 <__subdf3+0x774>
    c68c:	2990b03a 	or	r8,r5,r6
    c690:	40009626 	beq	r8,zero,c8ec <__subdf3+0x83c>
    c694:	2807883a 	mov	r3,r5
    c698:	3023883a 	mov	r17,r6
    c69c:	3825883a 	mov	r18,r7
    c6a0:	003ea406 	br	c134 <__alt_data_end+0xf800c134>
    c6a4:	127ff804 	addi	r9,r2,-32
    c6a8:	01000804 	movi	r4,32
    c6ac:	2a52d83a 	srl	r9,r5,r9
    c6b0:	11008c26 	beq	r2,r4,c8e4 <__subdf3+0x834>
    c6b4:	01001004 	movi	r4,64
    c6b8:	2085c83a 	sub	r2,r4,r2
    c6bc:	2884983a 	sll	r2,r5,r2
    c6c0:	118cb03a 	or	r6,r2,r6
    c6c4:	300cc03a 	cmpne	r6,r6,zero
    c6c8:	4992b03a 	or	r9,r9,r6
    c6cc:	0005883a 	mov	r2,zero
    c6d0:	003f1206 	br	c31c <__alt_data_end+0xf800c31c>
    c6d4:	0101ffc4 	movi	r4,2047
    c6d8:	493f9c1e 	bne	r9,r4,c54c <__alt_data_end+0xf800c54c>
    c6dc:	2807883a 	mov	r3,r5
    c6e0:	3023883a 	mov	r17,r6
    c6e4:	4821883a 	mov	r16,r9
    c6e8:	3825883a 	mov	r18,r7
    c6ec:	003e9106 	br	c134 <__alt_data_end+0xf800c134>
    c6f0:	80001f1e 	bne	r16,zero,c770 <__subdf3+0x6c0>
    c6f4:	1c48b03a 	or	r4,r3,r17
    c6f8:	20005a26 	beq	r4,zero,c864 <__subdf3+0x7b4>
    c6fc:	0084303a 	nor	r2,zero,r2
    c700:	1000561e 	bne	r2,zero,c85c <__subdf3+0x7ac>
    c704:	89a3883a 	add	r17,r17,r6
    c708:	1945883a 	add	r2,r3,r5
    c70c:	898d803a 	cmpltu	r6,r17,r6
    c710:	3087883a 	add	r3,r6,r2
    c714:	4821883a 	mov	r16,r9
    c718:	003f0506 	br	c330 <__alt_data_end+0xf800c330>
    c71c:	10002b1e 	bne	r2,zero,c7cc <__subdf3+0x71c>
    c720:	2984b03a 	or	r2,r5,r6
    c724:	10008026 	beq	r2,zero,c928 <__subdf3+0x878>
    c728:	2807883a 	mov	r3,r5
    c72c:	3023883a 	mov	r17,r6
    c730:	3825883a 	mov	r18,r7
    c734:	0401ffc4 	movi	r16,2047
    c738:	003e7e06 	br	c134 <__alt_data_end+0xf800c134>
    c73c:	3809883a 	mov	r4,r7
    c740:	0011883a 	mov	r8,zero
    c744:	0005883a 	mov	r2,zero
    c748:	003ee306 	br	c2d8 <__alt_data_end+0xf800c2d8>
    c74c:	1c62b03a 	or	r17,r3,r17
    c750:	8822c03a 	cmpne	r17,r17,zero
    c754:	0005883a 	mov	r2,zero
    c758:	003f8906 	br	c580 <__alt_data_end+0xf800c580>
    c75c:	3809883a 	mov	r4,r7
    c760:	4821883a 	mov	r16,r9
    c764:	0011883a 	mov	r8,zero
    c768:	0005883a 	mov	r2,zero
    c76c:	003eda06 	br	c2d8 <__alt_data_end+0xf800c2d8>
    c770:	0101ffc4 	movi	r4,2047
    c774:	49003b26 	beq	r9,r4,c864 <__subdf3+0x7b4>
    c778:	0085c83a 	sub	r2,zero,r2
    c77c:	18c02034 	orhi	r3,r3,128
    c780:	01000e04 	movi	r4,56
    c784:	20806e16 	blt	r4,r2,c940 <__subdf3+0x890>
    c788:	010007c4 	movi	r4,31
    c78c:	20807716 	blt	r4,r2,c96c <__subdf3+0x8bc>
    c790:	01000804 	movi	r4,32
    c794:	2089c83a 	sub	r4,r4,r2
    c798:	1914983a 	sll	r10,r3,r4
    c79c:	8890d83a 	srl	r8,r17,r2
    c7a0:	8908983a 	sll	r4,r17,r4
    c7a4:	1884d83a 	srl	r2,r3,r2
    c7a8:	5222b03a 	or	r17,r10,r8
    c7ac:	2006c03a 	cmpne	r3,r4,zero
    c7b0:	88e2b03a 	or	r17,r17,r3
    c7b4:	89a3883a 	add	r17,r17,r6
    c7b8:	1145883a 	add	r2,r2,r5
    c7bc:	898d803a 	cmpltu	r6,r17,r6
    c7c0:	3087883a 	add	r3,r6,r2
    c7c4:	4821883a 	mov	r16,r9
    c7c8:	003ed906 	br	c330 <__alt_data_end+0xf800c330>
    c7cc:	2984b03a 	or	r2,r5,r6
    c7d0:	10004226 	beq	r2,zero,c8dc <__subdf3+0x82c>
    c7d4:	1808d0fa 	srli	r4,r3,3
    c7d8:	8822d0fa 	srli	r17,r17,3
    c7dc:	1806977a 	slli	r3,r3,29
    c7e0:	2080022c 	andhi	r2,r4,8
    c7e4:	1c62b03a 	or	r17,r3,r17
    c7e8:	10000826 	beq	r2,zero,c80c <__subdf3+0x75c>
    c7ec:	2812d0fa 	srli	r9,r5,3
    c7f0:	4880022c 	andhi	r2,r9,8
    c7f4:	1000051e 	bne	r2,zero,c80c <__subdf3+0x75c>
    c7f8:	300cd0fa 	srli	r6,r6,3
    c7fc:	2804977a 	slli	r2,r5,29
    c800:	4809883a 	mov	r4,r9
    c804:	3825883a 	mov	r18,r7
    c808:	11a2b03a 	or	r17,r2,r6
    c80c:	8806d77a 	srli	r3,r17,29
    c810:	200890fa 	slli	r4,r4,3
    c814:	882290fa 	slli	r17,r17,3
    c818:	0401ffc4 	movi	r16,2047
    c81c:	1906b03a 	or	r3,r3,r4
    c820:	003e4406 	br	c134 <__alt_data_end+0xf800c134>
    c824:	2984b03a 	or	r2,r5,r6
    c828:	103e4226 	beq	r2,zero,c134 <__alt_data_end+0xf800c134>
    c82c:	8989c83a 	sub	r4,r17,r6
    c830:	8911803a 	cmpltu	r8,r17,r4
    c834:	1945c83a 	sub	r2,r3,r5
    c838:	1205c83a 	sub	r2,r2,r8
    c83c:	1200202c 	andhi	r8,r2,128
    c840:	403e9a26 	beq	r8,zero,c2ac <__alt_data_end+0xf800c2ac>
    c844:	3463c83a 	sub	r17,r6,r17
    c848:	28c5c83a 	sub	r2,r5,r3
    c84c:	344d803a 	cmpltu	r6,r6,r17
    c850:	1187c83a 	sub	r3,r2,r6
    c854:	3825883a 	mov	r18,r7
    c858:	003e3606 	br	c134 <__alt_data_end+0xf800c134>
    c85c:	0101ffc4 	movi	r4,2047
    c860:	493fc71e 	bne	r9,r4,c780 <__alt_data_end+0xf800c780>
    c864:	2807883a 	mov	r3,r5
    c868:	3023883a 	mov	r17,r6
    c86c:	4821883a 	mov	r16,r9
    c870:	003e3006 	br	c134 <__alt_data_end+0xf800c134>
    c874:	10003626 	beq	r2,zero,c950 <__subdf3+0x8a0>
    c878:	2984b03a 	or	r2,r5,r6
    c87c:	10001726 	beq	r2,zero,c8dc <__subdf3+0x82c>
    c880:	1808d0fa 	srli	r4,r3,3
    c884:	8822d0fa 	srli	r17,r17,3
    c888:	1806977a 	slli	r3,r3,29
    c88c:	2080022c 	andhi	r2,r4,8
    c890:	1c62b03a 	or	r17,r3,r17
    c894:	10000726 	beq	r2,zero,c8b4 <__subdf3+0x804>
    c898:	2812d0fa 	srli	r9,r5,3
    c89c:	4880022c 	andhi	r2,r9,8
    c8a0:	1000041e 	bne	r2,zero,c8b4 <__subdf3+0x804>
    c8a4:	300cd0fa 	srli	r6,r6,3
    c8a8:	2804977a 	slli	r2,r5,29
    c8ac:	4809883a 	mov	r4,r9
    c8b0:	11a2b03a 	or	r17,r2,r6
    c8b4:	8806d77a 	srli	r3,r17,29
    c8b8:	200890fa 	slli	r4,r4,3
    c8bc:	882290fa 	slli	r17,r17,3
    c8c0:	3825883a 	mov	r18,r7
    c8c4:	1906b03a 	or	r3,r3,r4
    c8c8:	0401ffc4 	movi	r16,2047
    c8cc:	003e1906 	br	c134 <__alt_data_end+0xf800c134>
    c8d0:	000b883a 	mov	r5,zero
    c8d4:	0005883a 	mov	r2,zero
    c8d8:	003e2e06 	br	c194 <__alt_data_end+0xf800c194>
    c8dc:	0401ffc4 	movi	r16,2047
    c8e0:	003e1406 	br	c134 <__alt_data_end+0xf800c134>
    c8e4:	0005883a 	mov	r2,zero
    c8e8:	003f7506 	br	c6c0 <__alt_data_end+0xf800c6c0>
    c8ec:	0005883a 	mov	r2,zero
    c8f0:	0009883a 	mov	r4,zero
    c8f4:	003e7806 	br	c2d8 <__alt_data_end+0xf800c2d8>
    c8f8:	123ff804 	addi	r8,r2,-32
    c8fc:	01000804 	movi	r4,32
    c900:	1a10d83a 	srl	r8,r3,r8
    c904:	11002526 	beq	r2,r4,c99c <__subdf3+0x8ec>
    c908:	01001004 	movi	r4,64
    c90c:	2085c83a 	sub	r2,r4,r2
    c910:	1884983a 	sll	r2,r3,r2
    c914:	1444b03a 	or	r2,r2,r17
    c918:	1004c03a 	cmpne	r2,r2,zero
    c91c:	40a2b03a 	or	r17,r8,r2
    c920:	0005883a 	mov	r2,zero
    c924:	003f1606 	br	c580 <__alt_data_end+0xf800c580>
    c928:	02000434 	movhi	r8,16
    c92c:	0009883a 	mov	r4,zero
    c930:	423fffc4 	addi	r8,r8,-1
    c934:	00bfffc4 	movi	r2,-1
    c938:	0401ffc4 	movi	r16,2047
    c93c:	003e6606 	br	c2d8 <__alt_data_end+0xf800c2d8>
    c940:	1c62b03a 	or	r17,r3,r17
    c944:	8822c03a 	cmpne	r17,r17,zero
    c948:	0005883a 	mov	r2,zero
    c94c:	003f9906 	br	c7b4 <__alt_data_end+0xf800c7b4>
    c950:	2807883a 	mov	r3,r5
    c954:	3023883a 	mov	r17,r6
    c958:	0401ffc4 	movi	r16,2047
    c95c:	003df506 	br	c134 <__alt_data_end+0xf800c134>
    c960:	2807883a 	mov	r3,r5
    c964:	3023883a 	mov	r17,r6
    c968:	003df206 	br	c134 <__alt_data_end+0xf800c134>
    c96c:	123ff804 	addi	r8,r2,-32
    c970:	01000804 	movi	r4,32
    c974:	1a10d83a 	srl	r8,r3,r8
    c978:	11000a26 	beq	r2,r4,c9a4 <__subdf3+0x8f4>
    c97c:	01001004 	movi	r4,64
    c980:	2085c83a 	sub	r2,r4,r2
    c984:	1884983a 	sll	r2,r3,r2
    c988:	1444b03a 	or	r2,r2,r17
    c98c:	1004c03a 	cmpne	r2,r2,zero
    c990:	40a2b03a 	or	r17,r8,r2
    c994:	0005883a 	mov	r2,zero
    c998:	003f8606 	br	c7b4 <__alt_data_end+0xf800c7b4>
    c99c:	0005883a 	mov	r2,zero
    c9a0:	003fdc06 	br	c914 <__alt_data_end+0xf800c914>
    c9a4:	0005883a 	mov	r2,zero
    c9a8:	003ff706 	br	c988 <__alt_data_end+0xf800c988>

0000c9ac <__fixdfsi>:
    c9ac:	280cd53a 	srli	r6,r5,20
    c9b0:	00c00434 	movhi	r3,16
    c9b4:	18ffffc4 	addi	r3,r3,-1
    c9b8:	3181ffcc 	andi	r6,r6,2047
    c9bc:	01c0ff84 	movi	r7,1022
    c9c0:	28c6703a 	and	r3,r5,r3
    c9c4:	280ad7fa 	srli	r5,r5,31
    c9c8:	3980120e 	bge	r7,r6,ca14 <__fixdfsi+0x68>
    c9cc:	00810744 	movi	r2,1053
    c9d0:	11800c16 	blt	r2,r6,ca04 <__fixdfsi+0x58>
    c9d4:	00810cc4 	movi	r2,1075
    c9d8:	1185c83a 	sub	r2,r2,r6
    c9dc:	01c007c4 	movi	r7,31
    c9e0:	18c00434 	orhi	r3,r3,16
    c9e4:	38800d16 	blt	r7,r2,ca1c <__fixdfsi+0x70>
    c9e8:	31befb44 	addi	r6,r6,-1043
    c9ec:	2084d83a 	srl	r2,r4,r2
    c9f0:	1986983a 	sll	r3,r3,r6
    c9f4:	1884b03a 	or	r2,r3,r2
    c9f8:	28000726 	beq	r5,zero,ca18 <__fixdfsi+0x6c>
    c9fc:	0085c83a 	sub	r2,zero,r2
    ca00:	f800283a 	ret
    ca04:	00a00034 	movhi	r2,32768
    ca08:	10bfffc4 	addi	r2,r2,-1
    ca0c:	2885883a 	add	r2,r5,r2
    ca10:	f800283a 	ret
    ca14:	0005883a 	mov	r2,zero
    ca18:	f800283a 	ret
    ca1c:	008104c4 	movi	r2,1043
    ca20:	1185c83a 	sub	r2,r2,r6
    ca24:	1884d83a 	srl	r2,r3,r2
    ca28:	003ff306 	br	c9f8 <__alt_data_end+0xf800c9f8>

0000ca2c <__floatsidf>:
    ca2c:	defffd04 	addi	sp,sp,-12
    ca30:	dfc00215 	stw	ra,8(sp)
    ca34:	dc400115 	stw	r17,4(sp)
    ca38:	dc000015 	stw	r16,0(sp)
    ca3c:	20002b26 	beq	r4,zero,caec <__floatsidf+0xc0>
    ca40:	2023883a 	mov	r17,r4
    ca44:	2020d7fa 	srli	r16,r4,31
    ca48:	20002d16 	blt	r4,zero,cb00 <__floatsidf+0xd4>
    ca4c:	8809883a 	mov	r4,r17
    ca50:	000cbb00 	call	cbb0 <__clzsi2>
    ca54:	01410784 	movi	r5,1054
    ca58:	288bc83a 	sub	r5,r5,r2
    ca5c:	01010cc4 	movi	r4,1075
    ca60:	2149c83a 	sub	r4,r4,r5
    ca64:	00c007c4 	movi	r3,31
    ca68:	1900160e 	bge	r3,r4,cac4 <__floatsidf+0x98>
    ca6c:	00c104c4 	movi	r3,1043
    ca70:	1947c83a 	sub	r3,r3,r5
    ca74:	88c6983a 	sll	r3,r17,r3
    ca78:	00800434 	movhi	r2,16
    ca7c:	10bfffc4 	addi	r2,r2,-1
    ca80:	1886703a 	and	r3,r3,r2
    ca84:	2941ffcc 	andi	r5,r5,2047
    ca88:	800d883a 	mov	r6,r16
    ca8c:	0005883a 	mov	r2,zero
    ca90:	280a953a 	slli	r5,r5,20
    ca94:	31803fcc 	andi	r6,r6,255
    ca98:	01000434 	movhi	r4,16
    ca9c:	300c97fa 	slli	r6,r6,31
    caa0:	213fffc4 	addi	r4,r4,-1
    caa4:	1906703a 	and	r3,r3,r4
    caa8:	1946b03a 	or	r3,r3,r5
    caac:	1986b03a 	or	r3,r3,r6
    cab0:	dfc00217 	ldw	ra,8(sp)
    cab4:	dc400117 	ldw	r17,4(sp)
    cab8:	dc000017 	ldw	r16,0(sp)
    cabc:	dec00304 	addi	sp,sp,12
    cac0:	f800283a 	ret
    cac4:	00c002c4 	movi	r3,11
    cac8:	1887c83a 	sub	r3,r3,r2
    cacc:	88c6d83a 	srl	r3,r17,r3
    cad0:	8904983a 	sll	r2,r17,r4
    cad4:	01000434 	movhi	r4,16
    cad8:	213fffc4 	addi	r4,r4,-1
    cadc:	2941ffcc 	andi	r5,r5,2047
    cae0:	1906703a 	and	r3,r3,r4
    cae4:	800d883a 	mov	r6,r16
    cae8:	003fe906 	br	ca90 <__alt_data_end+0xf800ca90>
    caec:	000d883a 	mov	r6,zero
    caf0:	000b883a 	mov	r5,zero
    caf4:	0007883a 	mov	r3,zero
    caf8:	0005883a 	mov	r2,zero
    cafc:	003fe406 	br	ca90 <__alt_data_end+0xf800ca90>
    cb00:	0123c83a 	sub	r17,zero,r4
    cb04:	003fd106 	br	ca4c <__alt_data_end+0xf800ca4c>

0000cb08 <__floatunsidf>:
    cb08:	defffe04 	addi	sp,sp,-8
    cb0c:	dc000015 	stw	r16,0(sp)
    cb10:	dfc00115 	stw	ra,4(sp)
    cb14:	2021883a 	mov	r16,r4
    cb18:	20002226 	beq	r4,zero,cba4 <__floatunsidf+0x9c>
    cb1c:	000cbb00 	call	cbb0 <__clzsi2>
    cb20:	01010784 	movi	r4,1054
    cb24:	2089c83a 	sub	r4,r4,r2
    cb28:	01810cc4 	movi	r6,1075
    cb2c:	310dc83a 	sub	r6,r6,r4
    cb30:	00c007c4 	movi	r3,31
    cb34:	1980120e 	bge	r3,r6,cb80 <__floatunsidf+0x78>
    cb38:	00c104c4 	movi	r3,1043
    cb3c:	1907c83a 	sub	r3,r3,r4
    cb40:	80ca983a 	sll	r5,r16,r3
    cb44:	00800434 	movhi	r2,16
    cb48:	10bfffc4 	addi	r2,r2,-1
    cb4c:	2101ffcc 	andi	r4,r4,2047
    cb50:	0021883a 	mov	r16,zero
    cb54:	288a703a 	and	r5,r5,r2
    cb58:	2008953a 	slli	r4,r4,20
    cb5c:	00c00434 	movhi	r3,16
    cb60:	18ffffc4 	addi	r3,r3,-1
    cb64:	28c6703a 	and	r3,r5,r3
    cb68:	8005883a 	mov	r2,r16
    cb6c:	1906b03a 	or	r3,r3,r4
    cb70:	dfc00117 	ldw	ra,4(sp)
    cb74:	dc000017 	ldw	r16,0(sp)
    cb78:	dec00204 	addi	sp,sp,8
    cb7c:	f800283a 	ret
    cb80:	00c002c4 	movi	r3,11
    cb84:	188bc83a 	sub	r5,r3,r2
    cb88:	814ad83a 	srl	r5,r16,r5
    cb8c:	00c00434 	movhi	r3,16
    cb90:	18ffffc4 	addi	r3,r3,-1
    cb94:	81a0983a 	sll	r16,r16,r6
    cb98:	2101ffcc 	andi	r4,r4,2047
    cb9c:	28ca703a 	and	r5,r5,r3
    cba0:	003fed06 	br	cb58 <__alt_data_end+0xf800cb58>
    cba4:	0009883a 	mov	r4,zero
    cba8:	000b883a 	mov	r5,zero
    cbac:	003fea06 	br	cb58 <__alt_data_end+0xf800cb58>

0000cbb0 <__clzsi2>:
    cbb0:	00bfffd4 	movui	r2,65535
    cbb4:	11000536 	bltu	r2,r4,cbcc <__clzsi2+0x1c>
    cbb8:	00803fc4 	movi	r2,255
    cbbc:	11000f36 	bltu	r2,r4,cbfc <__clzsi2+0x4c>
    cbc0:	00800804 	movi	r2,32
    cbc4:	0007883a 	mov	r3,zero
    cbc8:	00000506 	br	cbe0 <__clzsi2+0x30>
    cbcc:	00804034 	movhi	r2,256
    cbd0:	10bfffc4 	addi	r2,r2,-1
    cbd4:	11000c2e 	bgeu	r2,r4,cc08 <__clzsi2+0x58>
    cbd8:	00800204 	movi	r2,8
    cbdc:	00c00604 	movi	r3,24
    cbe0:	20c8d83a 	srl	r4,r4,r3
    cbe4:	00c00074 	movhi	r3,1
    cbe8:	18fe6204 	addi	r3,r3,-1656
    cbec:	1909883a 	add	r4,r3,r4
    cbf0:	20c00003 	ldbu	r3,0(r4)
    cbf4:	10c5c83a 	sub	r2,r2,r3
    cbf8:	f800283a 	ret
    cbfc:	00800604 	movi	r2,24
    cc00:	00c00204 	movi	r3,8
    cc04:	003ff606 	br	cbe0 <__alt_data_end+0xf800cbe0>
    cc08:	00800404 	movi	r2,16
    cc0c:	1007883a 	mov	r3,r2
    cc10:	003ff306 	br	cbe0 <__alt_data_end+0xf800cbe0>

0000cc14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cc14:	defffe04 	addi	sp,sp,-8
    cc18:	dfc00115 	stw	ra,4(sp)
    cc1c:	df000015 	stw	fp,0(sp)
    cc20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cc24:	d0a00b17 	ldw	r2,-32724(gp)
    cc28:	10000326 	beq	r2,zero,cc38 <alt_get_errno+0x24>
    cc2c:	d0a00b17 	ldw	r2,-32724(gp)
    cc30:	103ee83a 	callr	r2
    cc34:	00000106 	br	cc3c <alt_get_errno+0x28>
    cc38:	d0a6ff04 	addi	r2,gp,-25604
}
    cc3c:	e037883a 	mov	sp,fp
    cc40:	dfc00117 	ldw	ra,4(sp)
    cc44:	df000017 	ldw	fp,0(sp)
    cc48:	dec00204 	addi	sp,sp,8
    cc4c:	f800283a 	ret

0000cc50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cc50:	defffb04 	addi	sp,sp,-20
    cc54:	dfc00415 	stw	ra,16(sp)
    cc58:	df000315 	stw	fp,12(sp)
    cc5c:	df000304 	addi	fp,sp,12
    cc60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cc64:	e0bfff17 	ldw	r2,-4(fp)
    cc68:	10000616 	blt	r2,zero,cc84 <close+0x34>
    cc6c:	e0bfff17 	ldw	r2,-4(fp)
    cc70:	10c00324 	muli	r3,r2,12
    cc74:	00800074 	movhi	r2,1
    cc78:	1080f404 	addi	r2,r2,976
    cc7c:	1885883a 	add	r2,r3,r2
    cc80:	00000106 	br	cc88 <close+0x38>
    cc84:	0005883a 	mov	r2,zero
    cc88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cc8c:	e0bffd17 	ldw	r2,-12(fp)
    cc90:	10001926 	beq	r2,zero,ccf8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cc94:	e0bffd17 	ldw	r2,-12(fp)
    cc98:	10800017 	ldw	r2,0(r2)
    cc9c:	10800417 	ldw	r2,16(r2)
    cca0:	10000626 	beq	r2,zero,ccbc <close+0x6c>
    cca4:	e0bffd17 	ldw	r2,-12(fp)
    cca8:	10800017 	ldw	r2,0(r2)
    ccac:	10800417 	ldw	r2,16(r2)
    ccb0:	e13ffd17 	ldw	r4,-12(fp)
    ccb4:	103ee83a 	callr	r2
    ccb8:	00000106 	br	ccc0 <close+0x70>
    ccbc:	0005883a 	mov	r2,zero
    ccc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ccc4:	e13fff17 	ldw	r4,-4(fp)
    ccc8:	000d3100 	call	d310 <alt_release_fd>
    if (rval < 0)
    cccc:	e0bffe17 	ldw	r2,-8(fp)
    ccd0:	1000070e 	bge	r2,zero,ccf0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ccd4:	000cc140 	call	cc14 <alt_get_errno>
    ccd8:	1007883a 	mov	r3,r2
    ccdc:	e0bffe17 	ldw	r2,-8(fp)
    cce0:	0085c83a 	sub	r2,zero,r2
    cce4:	18800015 	stw	r2,0(r3)
      return -1;
    cce8:	00bfffc4 	movi	r2,-1
    ccec:	00000706 	br	cd0c <close+0xbc>
    }
    return 0;
    ccf0:	0005883a 	mov	r2,zero
    ccf4:	00000506 	br	cd0c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ccf8:	000cc140 	call	cc14 <alt_get_errno>
    ccfc:	1007883a 	mov	r3,r2
    cd00:	00801444 	movi	r2,81
    cd04:	18800015 	stw	r2,0(r3)
    return -1;
    cd08:	00bfffc4 	movi	r2,-1
  }
}
    cd0c:	e037883a 	mov	sp,fp
    cd10:	dfc00117 	ldw	ra,4(sp)
    cd14:	df000017 	ldw	fp,0(sp)
    cd18:	dec00204 	addi	sp,sp,8
    cd1c:	f800283a 	ret

0000cd20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cd20:	defffc04 	addi	sp,sp,-16
    cd24:	df000315 	stw	fp,12(sp)
    cd28:	df000304 	addi	fp,sp,12
    cd2c:	e13ffd15 	stw	r4,-12(fp)
    cd30:	e17ffe15 	stw	r5,-8(fp)
    cd34:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cd38:	e0bfff17 	ldw	r2,-4(fp)
}
    cd3c:	e037883a 	mov	sp,fp
    cd40:	df000017 	ldw	fp,0(sp)
    cd44:	dec00104 	addi	sp,sp,4
    cd48:	f800283a 	ret

0000cd4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd4c:	defffe04 	addi	sp,sp,-8
    cd50:	dfc00115 	stw	ra,4(sp)
    cd54:	df000015 	stw	fp,0(sp)
    cd58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd5c:	d0a00b17 	ldw	r2,-32724(gp)
    cd60:	10000326 	beq	r2,zero,cd70 <alt_get_errno+0x24>
    cd64:	d0a00b17 	ldw	r2,-32724(gp)
    cd68:	103ee83a 	callr	r2
    cd6c:	00000106 	br	cd74 <alt_get_errno+0x28>
    cd70:	d0a6ff04 	addi	r2,gp,-25604
}
    cd74:	e037883a 	mov	sp,fp
    cd78:	dfc00117 	ldw	ra,4(sp)
    cd7c:	df000017 	ldw	fp,0(sp)
    cd80:	dec00204 	addi	sp,sp,8
    cd84:	f800283a 	ret

0000cd88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cd88:	defffb04 	addi	sp,sp,-20
    cd8c:	dfc00415 	stw	ra,16(sp)
    cd90:	df000315 	stw	fp,12(sp)
    cd94:	df000304 	addi	fp,sp,12
    cd98:	e13ffe15 	stw	r4,-8(fp)
    cd9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cda0:	e0bffe17 	ldw	r2,-8(fp)
    cda4:	10000616 	blt	r2,zero,cdc0 <fstat+0x38>
    cda8:	e0bffe17 	ldw	r2,-8(fp)
    cdac:	10c00324 	muli	r3,r2,12
    cdb0:	00800074 	movhi	r2,1
    cdb4:	1080f404 	addi	r2,r2,976
    cdb8:	1885883a 	add	r2,r3,r2
    cdbc:	00000106 	br	cdc4 <fstat+0x3c>
    cdc0:	0005883a 	mov	r2,zero
    cdc4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cdc8:	e0bffd17 	ldw	r2,-12(fp)
    cdcc:	10001026 	beq	r2,zero,ce10 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cdd0:	e0bffd17 	ldw	r2,-12(fp)
    cdd4:	10800017 	ldw	r2,0(r2)
    cdd8:	10800817 	ldw	r2,32(r2)
    cddc:	10000726 	beq	r2,zero,cdfc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cde0:	e0bffd17 	ldw	r2,-12(fp)
    cde4:	10800017 	ldw	r2,0(r2)
    cde8:	10800817 	ldw	r2,32(r2)
    cdec:	e17fff17 	ldw	r5,-4(fp)
    cdf0:	e13ffd17 	ldw	r4,-12(fp)
    cdf4:	103ee83a 	callr	r2
    cdf8:	00000a06 	br	ce24 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cdfc:	e0bfff17 	ldw	r2,-4(fp)
    ce00:	00c80004 	movi	r3,8192
    ce04:	10c00115 	stw	r3,4(r2)
      return 0;
    ce08:	0005883a 	mov	r2,zero
    ce0c:	00000506 	br	ce24 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce10:	000cd4c0 	call	cd4c <alt_get_errno>
    ce14:	1007883a 	mov	r3,r2
    ce18:	00801444 	movi	r2,81
    ce1c:	18800015 	stw	r2,0(r3)
    return -1;
    ce20:	00bfffc4 	movi	r2,-1
  }
}
    ce24:	e037883a 	mov	sp,fp
    ce28:	dfc00117 	ldw	ra,4(sp)
    ce2c:	df000017 	ldw	fp,0(sp)
    ce30:	dec00204 	addi	sp,sp,8
    ce34:	f800283a 	ret

0000ce38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ce38:	defffe04 	addi	sp,sp,-8
    ce3c:	dfc00115 	stw	ra,4(sp)
    ce40:	df000015 	stw	fp,0(sp)
    ce44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ce48:	d0a00b17 	ldw	r2,-32724(gp)
    ce4c:	10000326 	beq	r2,zero,ce5c <alt_get_errno+0x24>
    ce50:	d0a00b17 	ldw	r2,-32724(gp)
    ce54:	103ee83a 	callr	r2
    ce58:	00000106 	br	ce60 <alt_get_errno+0x28>
    ce5c:	d0a6ff04 	addi	r2,gp,-25604
}
    ce60:	e037883a 	mov	sp,fp
    ce64:	dfc00117 	ldw	ra,4(sp)
    ce68:	df000017 	ldw	fp,0(sp)
    ce6c:	dec00204 	addi	sp,sp,8
    ce70:	f800283a 	ret

0000ce74 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ce74:	deffed04 	addi	sp,sp,-76
    ce78:	dfc01215 	stw	ra,72(sp)
    ce7c:	df001115 	stw	fp,68(sp)
    ce80:	df001104 	addi	fp,sp,68
    ce84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ce88:	e0bfff17 	ldw	r2,-4(fp)
    ce8c:	10000616 	blt	r2,zero,cea8 <isatty+0x34>
    ce90:	e0bfff17 	ldw	r2,-4(fp)
    ce94:	10c00324 	muli	r3,r2,12
    ce98:	00800074 	movhi	r2,1
    ce9c:	1080f404 	addi	r2,r2,976
    cea0:	1885883a 	add	r2,r3,r2
    cea4:	00000106 	br	ceac <isatty+0x38>
    cea8:	0005883a 	mov	r2,zero
    ceac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ceb0:	e0bfef17 	ldw	r2,-68(fp)
    ceb4:	10000e26 	beq	r2,zero,cef0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ceb8:	e0bfef17 	ldw	r2,-68(fp)
    cebc:	10800017 	ldw	r2,0(r2)
    cec0:	10800817 	ldw	r2,32(r2)
    cec4:	1000021e 	bne	r2,zero,ced0 <isatty+0x5c>
    {
      return 1;
    cec8:	00800044 	movi	r2,1
    cecc:	00000d06 	br	cf04 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ced0:	e0bff004 	addi	r2,fp,-64
    ced4:	100b883a 	mov	r5,r2
    ced8:	e13fff17 	ldw	r4,-4(fp)
    cedc:	000cd880 	call	cd88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cee0:	e0bff117 	ldw	r2,-60(fp)
    cee4:	10880020 	cmpeqi	r2,r2,8192
    cee8:	10803fcc 	andi	r2,r2,255
    ceec:	00000506 	br	cf04 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cef0:	000ce380 	call	ce38 <alt_get_errno>
    cef4:	1007883a 	mov	r3,r2
    cef8:	00801444 	movi	r2,81
    cefc:	18800015 	stw	r2,0(r3)
    return 0;
    cf00:	0005883a 	mov	r2,zero
  }
}
    cf04:	e037883a 	mov	sp,fp
    cf08:	dfc00117 	ldw	ra,4(sp)
    cf0c:	df000017 	ldw	fp,0(sp)
    cf10:	dec00204 	addi	sp,sp,8
    cf14:	f800283a 	ret

0000cf18 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cf18:	defffc04 	addi	sp,sp,-16
    cf1c:	df000315 	stw	fp,12(sp)
    cf20:	df000304 	addi	fp,sp,12
    cf24:	e13ffd15 	stw	r4,-12(fp)
    cf28:	e17ffe15 	stw	r5,-8(fp)
    cf2c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cf30:	e0fffe17 	ldw	r3,-8(fp)
    cf34:	e0bffd17 	ldw	r2,-12(fp)
    cf38:	18800c26 	beq	r3,r2,cf6c <alt_load_section+0x54>
  {
    while( to != end )
    cf3c:	00000806 	br	cf60 <alt_load_section+0x48>
    {
      *to++ = *from++;
    cf40:	e0bffe17 	ldw	r2,-8(fp)
    cf44:	10c00104 	addi	r3,r2,4
    cf48:	e0fffe15 	stw	r3,-8(fp)
    cf4c:	e0fffd17 	ldw	r3,-12(fp)
    cf50:	19000104 	addi	r4,r3,4
    cf54:	e13ffd15 	stw	r4,-12(fp)
    cf58:	18c00017 	ldw	r3,0(r3)
    cf5c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    cf60:	e0fffe17 	ldw	r3,-8(fp)
    cf64:	e0bfff17 	ldw	r2,-4(fp)
    cf68:	18bff51e 	bne	r3,r2,cf40 <__alt_data_end+0xf800cf40>
    {
      *to++ = *from++;
    }
  }
}
    cf6c:	0001883a 	nop
    cf70:	e037883a 	mov	sp,fp
    cf74:	df000017 	ldw	fp,0(sp)
    cf78:	dec00104 	addi	sp,sp,4
    cf7c:	f800283a 	ret

0000cf80 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    cf80:	defffe04 	addi	sp,sp,-8
    cf84:	dfc00115 	stw	ra,4(sp)
    cf88:	df000015 	stw	fp,0(sp)
    cf8c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    cf90:	01800074 	movhi	r6,1
    cf94:	3185aa04 	addi	r6,r6,5800
    cf98:	01400074 	movhi	r5,1
    cf9c:	297ec104 	addi	r5,r5,-1276
    cfa0:	01000074 	movhi	r4,1
    cfa4:	2105aa04 	addi	r4,r4,5800
    cfa8:	000cf180 	call	cf18 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    cfac:	01800034 	movhi	r6,0
    cfb0:	31809204 	addi	r6,r6,584
    cfb4:	01400034 	movhi	r5,0
    cfb8:	29400804 	addi	r5,r5,32
    cfbc:	01000034 	movhi	r4,0
    cfc0:	21000804 	addi	r4,r4,32
    cfc4:	000cf180 	call	cf18 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    cfc8:	01800074 	movhi	r6,1
    cfcc:	31bec104 	addi	r6,r6,-1276
    cfd0:	01400074 	movhi	r5,1
    cfd4:	297de704 	addi	r5,r5,-2148
    cfd8:	01000074 	movhi	r4,1
    cfdc:	213de704 	addi	r4,r4,-2148
    cfe0:	000cf180 	call	cf18 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    cfe4:	000e7d00 	call	e7d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    cfe8:	000ea200 	call	ea20 <alt_icache_flush_all>
}
    cfec:	0001883a 	nop
    cff0:	e037883a 	mov	sp,fp
    cff4:	dfc00117 	ldw	ra,4(sp)
    cff8:	df000017 	ldw	fp,0(sp)
    cffc:	dec00204 	addi	sp,sp,8
    d000:	f800283a 	ret

0000d004 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d004:	defffe04 	addi	sp,sp,-8
    d008:	dfc00115 	stw	ra,4(sp)
    d00c:	df000015 	stw	fp,0(sp)
    d010:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d014:	d0a00b17 	ldw	r2,-32724(gp)
    d018:	10000326 	beq	r2,zero,d028 <alt_get_errno+0x24>
    d01c:	d0a00b17 	ldw	r2,-32724(gp)
    d020:	103ee83a 	callr	r2
    d024:	00000106 	br	d02c <alt_get_errno+0x28>
    d028:	d0a6ff04 	addi	r2,gp,-25604
}
    d02c:	e037883a 	mov	sp,fp
    d030:	dfc00117 	ldw	ra,4(sp)
    d034:	df000017 	ldw	fp,0(sp)
    d038:	dec00204 	addi	sp,sp,8
    d03c:	f800283a 	ret

0000d040 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d040:	defff904 	addi	sp,sp,-28
    d044:	dfc00615 	stw	ra,24(sp)
    d048:	df000515 	stw	fp,20(sp)
    d04c:	df000504 	addi	fp,sp,20
    d050:	e13ffd15 	stw	r4,-12(fp)
    d054:	e17ffe15 	stw	r5,-8(fp)
    d058:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d05c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d060:	e0bffd17 	ldw	r2,-12(fp)
    d064:	10000616 	blt	r2,zero,d080 <lseek+0x40>
    d068:	e0bffd17 	ldw	r2,-12(fp)
    d06c:	10c00324 	muli	r3,r2,12
    d070:	00800074 	movhi	r2,1
    d074:	1080f404 	addi	r2,r2,976
    d078:	1885883a 	add	r2,r3,r2
    d07c:	00000106 	br	d084 <lseek+0x44>
    d080:	0005883a 	mov	r2,zero
    d084:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d088:	e0bffc17 	ldw	r2,-16(fp)
    d08c:	10001026 	beq	r2,zero,d0d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d090:	e0bffc17 	ldw	r2,-16(fp)
    d094:	10800017 	ldw	r2,0(r2)
    d098:	10800717 	ldw	r2,28(r2)
    d09c:	10000926 	beq	r2,zero,d0c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d0a0:	e0bffc17 	ldw	r2,-16(fp)
    d0a4:	10800017 	ldw	r2,0(r2)
    d0a8:	10800717 	ldw	r2,28(r2)
    d0ac:	e1bfff17 	ldw	r6,-4(fp)
    d0b0:	e17ffe17 	ldw	r5,-8(fp)
    d0b4:	e13ffc17 	ldw	r4,-16(fp)
    d0b8:	103ee83a 	callr	r2
    d0bc:	e0bffb15 	stw	r2,-20(fp)
    d0c0:	00000506 	br	d0d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d0c4:	00bfde84 	movi	r2,-134
    d0c8:	e0bffb15 	stw	r2,-20(fp)
    d0cc:	00000206 	br	d0d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d0d0:	00bfebc4 	movi	r2,-81
    d0d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d0d8:	e0bffb17 	ldw	r2,-20(fp)
    d0dc:	1000070e 	bge	r2,zero,d0fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d0e0:	000d0040 	call	d004 <alt_get_errno>
    d0e4:	1007883a 	mov	r3,r2
    d0e8:	e0bffb17 	ldw	r2,-20(fp)
    d0ec:	0085c83a 	sub	r2,zero,r2
    d0f0:	18800015 	stw	r2,0(r3)
    rc = -1;
    d0f4:	00bfffc4 	movi	r2,-1
    d0f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d0fc:	e0bffb17 	ldw	r2,-20(fp)
}
    d100:	e037883a 	mov	sp,fp
    d104:	dfc00117 	ldw	ra,4(sp)
    d108:	df000017 	ldw	fp,0(sp)
    d10c:	dec00204 	addi	sp,sp,8
    d110:	f800283a 	ret

0000d114 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d114:	defffd04 	addi	sp,sp,-12
    d118:	dfc00215 	stw	ra,8(sp)
    d11c:	df000115 	stw	fp,4(sp)
    d120:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d124:	0009883a 	mov	r4,zero
    d128:	000d58c0 	call	d58c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d12c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d130:	000d5c40 	call	d5c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d134:	01800074 	movhi	r6,1
    d138:	31bea504 	addi	r6,r6,-1388
    d13c:	01400074 	movhi	r5,1
    d140:	297ea504 	addi	r5,r5,-1388
    d144:	01000074 	movhi	r4,1
    d148:	213ea504 	addi	r4,r4,-1388
    d14c:	000eb180 	call	eb18 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d150:	000e8d00 	call	e8d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d154:	01000074 	movhi	r4,1
    d158:	213a4c04 	addi	r4,r4,-5840
    d15c:	000f4080 	call	f408 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d160:	d0a70017 	ldw	r2,-25600(gp)
    d164:	d0e70117 	ldw	r3,-25596(gp)
    d168:	d1270217 	ldw	r4,-25592(gp)
    d16c:	200d883a 	mov	r6,r4
    d170:	180b883a 	mov	r5,r3
    d174:	1009883a 	mov	r4,r2
    d178:	00002840 	call	284 <main>
    d17c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d180:	01000044 	movi	r4,1
    d184:	000cc500 	call	cc50 <close>
  exit (result);
    d188:	e13fff17 	ldw	r4,-4(fp)
    d18c:	000f41c0 	call	f41c <exit>

0000d190 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d190:	defffe04 	addi	sp,sp,-8
    d194:	df000115 	stw	fp,4(sp)
    d198:	df000104 	addi	fp,sp,4
    d19c:	e13fff15 	stw	r4,-4(fp)
}
    d1a0:	0001883a 	nop
    d1a4:	e037883a 	mov	sp,fp
    d1a8:	df000017 	ldw	fp,0(sp)
    d1ac:	dec00104 	addi	sp,sp,4
    d1b0:	f800283a 	ret

0000d1b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d1b4:	defffe04 	addi	sp,sp,-8
    d1b8:	df000115 	stw	fp,4(sp)
    d1bc:	df000104 	addi	fp,sp,4
    d1c0:	e13fff15 	stw	r4,-4(fp)
}
    d1c4:	0001883a 	nop
    d1c8:	e037883a 	mov	sp,fp
    d1cc:	df000017 	ldw	fp,0(sp)
    d1d0:	dec00104 	addi	sp,sp,4
    d1d4:	f800283a 	ret

0000d1d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d1d8:	defffe04 	addi	sp,sp,-8
    d1dc:	dfc00115 	stw	ra,4(sp)
    d1e0:	df000015 	stw	fp,0(sp)
    d1e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d1e8:	d0a00b17 	ldw	r2,-32724(gp)
    d1ec:	10000326 	beq	r2,zero,d1fc <alt_get_errno+0x24>
    d1f0:	d0a00b17 	ldw	r2,-32724(gp)
    d1f4:	103ee83a 	callr	r2
    d1f8:	00000106 	br	d200 <alt_get_errno+0x28>
    d1fc:	d0a6ff04 	addi	r2,gp,-25604
}
    d200:	e037883a 	mov	sp,fp
    d204:	dfc00117 	ldw	ra,4(sp)
    d208:	df000017 	ldw	fp,0(sp)
    d20c:	dec00204 	addi	sp,sp,8
    d210:	f800283a 	ret

0000d214 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d214:	defff904 	addi	sp,sp,-28
    d218:	dfc00615 	stw	ra,24(sp)
    d21c:	df000515 	stw	fp,20(sp)
    d220:	df000504 	addi	fp,sp,20
    d224:	e13ffd15 	stw	r4,-12(fp)
    d228:	e17ffe15 	stw	r5,-8(fp)
    d22c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d230:	e0bffd17 	ldw	r2,-12(fp)
    d234:	10000616 	blt	r2,zero,d250 <read+0x3c>
    d238:	e0bffd17 	ldw	r2,-12(fp)
    d23c:	10c00324 	muli	r3,r2,12
    d240:	00800074 	movhi	r2,1
    d244:	1080f404 	addi	r2,r2,976
    d248:	1885883a 	add	r2,r3,r2
    d24c:	00000106 	br	d254 <read+0x40>
    d250:	0005883a 	mov	r2,zero
    d254:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d258:	e0bffb17 	ldw	r2,-20(fp)
    d25c:	10002226 	beq	r2,zero,d2e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d260:	e0bffb17 	ldw	r2,-20(fp)
    d264:	10800217 	ldw	r2,8(r2)
    d268:	108000cc 	andi	r2,r2,3
    d26c:	10800060 	cmpeqi	r2,r2,1
    d270:	1000181e 	bne	r2,zero,d2d4 <read+0xc0>
        (fd->dev->read))
    d274:	e0bffb17 	ldw	r2,-20(fp)
    d278:	10800017 	ldw	r2,0(r2)
    d27c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d280:	10001426 	beq	r2,zero,d2d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d284:	e0bffb17 	ldw	r2,-20(fp)
    d288:	10800017 	ldw	r2,0(r2)
    d28c:	10800517 	ldw	r2,20(r2)
    d290:	e0ffff17 	ldw	r3,-4(fp)
    d294:	180d883a 	mov	r6,r3
    d298:	e17ffe17 	ldw	r5,-8(fp)
    d29c:	e13ffb17 	ldw	r4,-20(fp)
    d2a0:	103ee83a 	callr	r2
    d2a4:	e0bffc15 	stw	r2,-16(fp)
    d2a8:	e0bffc17 	ldw	r2,-16(fp)
    d2ac:	1000070e 	bge	r2,zero,d2cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d2b0:	000d1d80 	call	d1d8 <alt_get_errno>
    d2b4:	1007883a 	mov	r3,r2
    d2b8:	e0bffc17 	ldw	r2,-16(fp)
    d2bc:	0085c83a 	sub	r2,zero,r2
    d2c0:	18800015 	stw	r2,0(r3)
          return -1;
    d2c4:	00bfffc4 	movi	r2,-1
    d2c8:	00000c06 	br	d2fc <read+0xe8>
        }
        return rval;
    d2cc:	e0bffc17 	ldw	r2,-16(fp)
    d2d0:	00000a06 	br	d2fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d2d4:	000d1d80 	call	d1d8 <alt_get_errno>
    d2d8:	1007883a 	mov	r3,r2
    d2dc:	00800344 	movi	r2,13
    d2e0:	18800015 	stw	r2,0(r3)
    d2e4:	00000406 	br	d2f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d2e8:	000d1d80 	call	d1d8 <alt_get_errno>
    d2ec:	1007883a 	mov	r3,r2
    d2f0:	00801444 	movi	r2,81
    d2f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d2f8:	00bfffc4 	movi	r2,-1
}
    d2fc:	e037883a 	mov	sp,fp
    d300:	dfc00117 	ldw	ra,4(sp)
    d304:	df000017 	ldw	fp,0(sp)
    d308:	dec00204 	addi	sp,sp,8
    d30c:	f800283a 	ret

0000d310 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d310:	defffe04 	addi	sp,sp,-8
    d314:	df000115 	stw	fp,4(sp)
    d318:	df000104 	addi	fp,sp,4
    d31c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d320:	e0bfff17 	ldw	r2,-4(fp)
    d324:	108000d0 	cmplti	r2,r2,3
    d328:	10000d1e 	bne	r2,zero,d360 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d32c:	00800074 	movhi	r2,1
    d330:	1080f404 	addi	r2,r2,976
    d334:	e0ffff17 	ldw	r3,-4(fp)
    d338:	18c00324 	muli	r3,r3,12
    d33c:	10c5883a 	add	r2,r2,r3
    d340:	10800204 	addi	r2,r2,8
    d344:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d348:	00800074 	movhi	r2,1
    d34c:	1080f404 	addi	r2,r2,976
    d350:	e0ffff17 	ldw	r3,-4(fp)
    d354:	18c00324 	muli	r3,r3,12
    d358:	10c5883a 	add	r2,r2,r3
    d35c:	10000015 	stw	zero,0(r2)
  }
}
    d360:	0001883a 	nop
    d364:	e037883a 	mov	sp,fp
    d368:	df000017 	ldw	fp,0(sp)
    d36c:	dec00104 	addi	sp,sp,4
    d370:	f800283a 	ret

0000d374 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d374:	defff904 	addi	sp,sp,-28
    d378:	df000615 	stw	fp,24(sp)
    d37c:	df000604 	addi	fp,sp,24
    d380:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d384:	0005303a 	rdctl	r2,status
    d388:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d38c:	e0fffe17 	ldw	r3,-8(fp)
    d390:	00bfff84 	movi	r2,-2
    d394:	1884703a 	and	r2,r3,r2
    d398:	1001703a 	wrctl	status,r2
  
  return context;
    d39c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d3a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d3a4:	d0a00c17 	ldw	r2,-32720(gp)
    d3a8:	10c000c4 	addi	r3,r2,3
    d3ac:	00bfff04 	movi	r2,-4
    d3b0:	1884703a 	and	r2,r3,r2
    d3b4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d3b8:	d0e00c17 	ldw	r3,-32720(gp)
    d3bc:	e0bfff17 	ldw	r2,-4(fp)
    d3c0:	1887883a 	add	r3,r3,r2
    d3c4:	00820034 	movhi	r2,2048
    d3c8:	10800004 	addi	r2,r2,0
    d3cc:	10c0062e 	bgeu	r2,r3,d3e8 <sbrk+0x74>
    d3d0:	e0bffb17 	ldw	r2,-20(fp)
    d3d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d3d8:	e0bffa17 	ldw	r2,-24(fp)
    d3dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d3e0:	00bfffc4 	movi	r2,-1
    d3e4:	00000b06 	br	d414 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d3e8:	d0a00c17 	ldw	r2,-32720(gp)
    d3ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d3f0:	d0e00c17 	ldw	r3,-32720(gp)
    d3f4:	e0bfff17 	ldw	r2,-4(fp)
    d3f8:	1885883a 	add	r2,r3,r2
    d3fc:	d0a00c15 	stw	r2,-32720(gp)
    d400:	e0bffb17 	ldw	r2,-20(fp)
    d404:	e0bffc15 	stw	r2,-16(fp)
    d408:	e0bffc17 	ldw	r2,-16(fp)
    d40c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d410:	e0bffd17 	ldw	r2,-12(fp)
} 
    d414:	e037883a 	mov	sp,fp
    d418:	df000017 	ldw	fp,0(sp)
    d41c:	dec00104 	addi	sp,sp,4
    d420:	f800283a 	ret

0000d424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d424:	defffe04 	addi	sp,sp,-8
    d428:	dfc00115 	stw	ra,4(sp)
    d42c:	df000015 	stw	fp,0(sp)
    d430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d434:	d0a00b17 	ldw	r2,-32724(gp)
    d438:	10000326 	beq	r2,zero,d448 <alt_get_errno+0x24>
    d43c:	d0a00b17 	ldw	r2,-32724(gp)
    d440:	103ee83a 	callr	r2
    d444:	00000106 	br	d44c <alt_get_errno+0x28>
    d448:	d0a6ff04 	addi	r2,gp,-25604
}
    d44c:	e037883a 	mov	sp,fp
    d450:	dfc00117 	ldw	ra,4(sp)
    d454:	df000017 	ldw	fp,0(sp)
    d458:	dec00204 	addi	sp,sp,8
    d45c:	f800283a 	ret

0000d460 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d460:	defff904 	addi	sp,sp,-28
    d464:	dfc00615 	stw	ra,24(sp)
    d468:	df000515 	stw	fp,20(sp)
    d46c:	df000504 	addi	fp,sp,20
    d470:	e13ffd15 	stw	r4,-12(fp)
    d474:	e17ffe15 	stw	r5,-8(fp)
    d478:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d47c:	e0bffd17 	ldw	r2,-12(fp)
    d480:	10000616 	blt	r2,zero,d49c <write+0x3c>
    d484:	e0bffd17 	ldw	r2,-12(fp)
    d488:	10c00324 	muli	r3,r2,12
    d48c:	00800074 	movhi	r2,1
    d490:	1080f404 	addi	r2,r2,976
    d494:	1885883a 	add	r2,r3,r2
    d498:	00000106 	br	d4a0 <write+0x40>
    d49c:	0005883a 	mov	r2,zero
    d4a0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d4a4:	e0bffb17 	ldw	r2,-20(fp)
    d4a8:	10002126 	beq	r2,zero,d530 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d4ac:	e0bffb17 	ldw	r2,-20(fp)
    d4b0:	10800217 	ldw	r2,8(r2)
    d4b4:	108000cc 	andi	r2,r2,3
    d4b8:	10001826 	beq	r2,zero,d51c <write+0xbc>
    d4bc:	e0bffb17 	ldw	r2,-20(fp)
    d4c0:	10800017 	ldw	r2,0(r2)
    d4c4:	10800617 	ldw	r2,24(r2)
    d4c8:	10001426 	beq	r2,zero,d51c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d4cc:	e0bffb17 	ldw	r2,-20(fp)
    d4d0:	10800017 	ldw	r2,0(r2)
    d4d4:	10800617 	ldw	r2,24(r2)
    d4d8:	e0ffff17 	ldw	r3,-4(fp)
    d4dc:	180d883a 	mov	r6,r3
    d4e0:	e17ffe17 	ldw	r5,-8(fp)
    d4e4:	e13ffb17 	ldw	r4,-20(fp)
    d4e8:	103ee83a 	callr	r2
    d4ec:	e0bffc15 	stw	r2,-16(fp)
    d4f0:	e0bffc17 	ldw	r2,-16(fp)
    d4f4:	1000070e 	bge	r2,zero,d514 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d4f8:	000d4240 	call	d424 <alt_get_errno>
    d4fc:	1007883a 	mov	r3,r2
    d500:	e0bffc17 	ldw	r2,-16(fp)
    d504:	0085c83a 	sub	r2,zero,r2
    d508:	18800015 	stw	r2,0(r3)
        return -1;
    d50c:	00bfffc4 	movi	r2,-1
    d510:	00000c06 	br	d544 <write+0xe4>
      }
      return rval;
    d514:	e0bffc17 	ldw	r2,-16(fp)
    d518:	00000a06 	br	d544 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d51c:	000d4240 	call	d424 <alt_get_errno>
    d520:	1007883a 	mov	r3,r2
    d524:	00800344 	movi	r2,13
    d528:	18800015 	stw	r2,0(r3)
    d52c:	00000406 	br	d540 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d530:	000d4240 	call	d424 <alt_get_errno>
    d534:	1007883a 	mov	r3,r2
    d538:	00801444 	movi	r2,81
    d53c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d540:	00bfffc4 	movi	r2,-1
}
    d544:	e037883a 	mov	sp,fp
    d548:	dfc00117 	ldw	ra,4(sp)
    d54c:	df000017 	ldw	fp,0(sp)
    d550:	dec00204 	addi	sp,sp,8
    d554:	f800283a 	ret

0000d558 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d558:	defffd04 	addi	sp,sp,-12
    d55c:	dfc00215 	stw	ra,8(sp)
    d560:	df000115 	stw	fp,4(sp)
    d564:	df000104 	addi	fp,sp,4
    d568:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d56c:	d1600804 	addi	r5,gp,-32736
    d570:	e13fff17 	ldw	r4,-4(fp)
    d574:	000e82c0 	call	e82c <alt_dev_llist_insert>
}
    d578:	e037883a 	mov	sp,fp
    d57c:	dfc00117 	ldw	ra,4(sp)
    d580:	df000017 	ldw	fp,0(sp)
    d584:	dec00204 	addi	sp,sp,8
    d588:	f800283a 	ret

0000d58c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d58c:	defffd04 	addi	sp,sp,-12
    d590:	dfc00215 	stw	ra,8(sp)
    d594:	df000115 	stw	fp,4(sp)
    d598:	df000104 	addi	fp,sp,4
    d59c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    d5a0:	000f10c0 	call	f10c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d5a4:	00800044 	movi	r2,1
    d5a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d5ac:	0001883a 	nop
    d5b0:	e037883a 	mov	sp,fp
    d5b4:	dfc00117 	ldw	ra,4(sp)
    d5b8:	df000017 	ldw	fp,0(sp)
    d5bc:	dec00204 	addi	sp,sp,8
    d5c0:	f800283a 	ret

0000d5c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d5c4:	defffe04 	addi	sp,sp,-8
    d5c8:	dfc00115 	stw	ra,4(sp)
    d5cc:	df000015 	stw	fp,0(sp)
    d5d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    d5d4:	01c00204 	movi	r7,8
    d5d8:	000d883a 	mov	r6,zero
    d5dc:	000b883a 	mov	r5,zero
    d5e0:	013fc834 	movhi	r4,65312
    d5e4:	21080004 	addi	r4,r4,8192
    d5e8:	000e13c0 	call	e13c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    d5ec:	01800204 	movi	r6,8
    d5f0:	000b883a 	mov	r5,zero
    d5f4:	01000074 	movhi	r4,1
    d5f8:	21015e04 	addi	r4,r4,1400
    d5fc:	000d7c40 	call	d7c4 <altera_avalon_jtag_uart_init>
    d600:	01000074 	movhi	r4,1
    d604:	21015404 	addi	r4,r4,1360
    d608:	000d5580 	call	d558 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    d60c:	01000074 	movhi	r4,1
    d610:	21056c04 	addi	r4,r4,5552
    d614:	000d5580 	call	d558 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    d618:	01000074 	movhi	r4,1
    d61c:	21057804 	addi	r4,r4,5600
    d620:	000d5580 	call	d558 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    d624:	01000074 	movhi	r4,1
    d628:	21058404 	addi	r4,r4,5648
    d62c:	000e2640 	call	e264 <alt_up_character_lcd_init>
    d630:	01000074 	movhi	r4,1
    d634:	21058404 	addi	r4,r4,5648
    d638:	000d5580 	call	d558 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    d63c:	01000074 	movhi	r4,1
    d640:	21058f04 	addi	r4,r4,5692
    d644:	000d5580 	call	d558 <alt_dev_reg>
}
    d648:	0001883a 	nop
    d64c:	e037883a 	mov	sp,fp
    d650:	dfc00117 	ldw	ra,4(sp)
    d654:	df000017 	ldw	fp,0(sp)
    d658:	dec00204 	addi	sp,sp,8
    d65c:	f800283a 	ret

0000d660 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d660:	defffa04 	addi	sp,sp,-24
    d664:	dfc00515 	stw	ra,20(sp)
    d668:	df000415 	stw	fp,16(sp)
    d66c:	df000404 	addi	fp,sp,16
    d670:	e13ffd15 	stw	r4,-12(fp)
    d674:	e17ffe15 	stw	r5,-8(fp)
    d678:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d67c:	e0bffd17 	ldw	r2,-12(fp)
    d680:	10800017 	ldw	r2,0(r2)
    d684:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d688:	e0bffc17 	ldw	r2,-16(fp)
    d68c:	10c00a04 	addi	r3,r2,40
    d690:	e0bffd17 	ldw	r2,-12(fp)
    d694:	10800217 	ldw	r2,8(r2)
    d698:	100f883a 	mov	r7,r2
    d69c:	e1bfff17 	ldw	r6,-4(fp)
    d6a0:	e17ffe17 	ldw	r5,-8(fp)
    d6a4:	1809883a 	mov	r4,r3
    d6a8:	000dc800 	call	dc80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d6ac:	e037883a 	mov	sp,fp
    d6b0:	dfc00117 	ldw	ra,4(sp)
    d6b4:	df000017 	ldw	fp,0(sp)
    d6b8:	dec00204 	addi	sp,sp,8
    d6bc:	f800283a 	ret

0000d6c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d6c0:	defffa04 	addi	sp,sp,-24
    d6c4:	dfc00515 	stw	ra,20(sp)
    d6c8:	df000415 	stw	fp,16(sp)
    d6cc:	df000404 	addi	fp,sp,16
    d6d0:	e13ffd15 	stw	r4,-12(fp)
    d6d4:	e17ffe15 	stw	r5,-8(fp)
    d6d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d6dc:	e0bffd17 	ldw	r2,-12(fp)
    d6e0:	10800017 	ldw	r2,0(r2)
    d6e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d6e8:	e0bffc17 	ldw	r2,-16(fp)
    d6ec:	10c00a04 	addi	r3,r2,40
    d6f0:	e0bffd17 	ldw	r2,-12(fp)
    d6f4:	10800217 	ldw	r2,8(r2)
    d6f8:	100f883a 	mov	r7,r2
    d6fc:	e1bfff17 	ldw	r6,-4(fp)
    d700:	e17ffe17 	ldw	r5,-8(fp)
    d704:	1809883a 	mov	r4,r3
    d708:	000de9c0 	call	de9c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d70c:	e037883a 	mov	sp,fp
    d710:	dfc00117 	ldw	ra,4(sp)
    d714:	df000017 	ldw	fp,0(sp)
    d718:	dec00204 	addi	sp,sp,8
    d71c:	f800283a 	ret

0000d720 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d720:	defffc04 	addi	sp,sp,-16
    d724:	dfc00315 	stw	ra,12(sp)
    d728:	df000215 	stw	fp,8(sp)
    d72c:	df000204 	addi	fp,sp,8
    d730:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d734:	e0bfff17 	ldw	r2,-4(fp)
    d738:	10800017 	ldw	r2,0(r2)
    d73c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d740:	e0bffe17 	ldw	r2,-8(fp)
    d744:	10c00a04 	addi	r3,r2,40
    d748:	e0bfff17 	ldw	r2,-4(fp)
    d74c:	10800217 	ldw	r2,8(r2)
    d750:	100b883a 	mov	r5,r2
    d754:	1809883a 	mov	r4,r3
    d758:	000db280 	call	db28 <altera_avalon_jtag_uart_close>
}
    d75c:	e037883a 	mov	sp,fp
    d760:	dfc00117 	ldw	ra,4(sp)
    d764:	df000017 	ldw	fp,0(sp)
    d768:	dec00204 	addi	sp,sp,8
    d76c:	f800283a 	ret

0000d770 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d770:	defffa04 	addi	sp,sp,-24
    d774:	dfc00515 	stw	ra,20(sp)
    d778:	df000415 	stw	fp,16(sp)
    d77c:	df000404 	addi	fp,sp,16
    d780:	e13ffd15 	stw	r4,-12(fp)
    d784:	e17ffe15 	stw	r5,-8(fp)
    d788:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d78c:	e0bffd17 	ldw	r2,-12(fp)
    d790:	10800017 	ldw	r2,0(r2)
    d794:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d798:	e0bffc17 	ldw	r2,-16(fp)
    d79c:	10800a04 	addi	r2,r2,40
    d7a0:	e1bfff17 	ldw	r6,-4(fp)
    d7a4:	e17ffe17 	ldw	r5,-8(fp)
    d7a8:	1009883a 	mov	r4,r2
    d7ac:	000db900 	call	db90 <altera_avalon_jtag_uart_ioctl>
}
    d7b0:	e037883a 	mov	sp,fp
    d7b4:	dfc00117 	ldw	ra,4(sp)
    d7b8:	df000017 	ldw	fp,0(sp)
    d7bc:	dec00204 	addi	sp,sp,8
    d7c0:	f800283a 	ret

0000d7c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d7c4:	defffb04 	addi	sp,sp,-20
    d7c8:	dfc00415 	stw	ra,16(sp)
    d7cc:	df000315 	stw	fp,12(sp)
    d7d0:	df000304 	addi	fp,sp,12
    d7d4:	e13ffd15 	stw	r4,-12(fp)
    d7d8:	e17ffe15 	stw	r5,-8(fp)
    d7dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d7e0:	e0bffd17 	ldw	r2,-12(fp)
    d7e4:	00c00044 	movi	r3,1
    d7e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d7ec:	e0bffd17 	ldw	r2,-12(fp)
    d7f0:	10800017 	ldw	r2,0(r2)
    d7f4:	10800104 	addi	r2,r2,4
    d7f8:	1007883a 	mov	r3,r2
    d7fc:	e0bffd17 	ldw	r2,-12(fp)
    d800:	10800817 	ldw	r2,32(r2)
    d804:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    d808:	e0bfff17 	ldw	r2,-4(fp)
    d80c:	01800074 	movhi	r6,1
    d810:	31b61e04 	addi	r6,r6,-10120
    d814:	e17ffd17 	ldw	r5,-12(fp)
    d818:	1009883a 	mov	r4,r2
    d81c:	000eb940 	call	eb94 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d820:	e0bffd17 	ldw	r2,-12(fp)
    d824:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d828:	e0bffd17 	ldw	r2,-12(fp)
    d82c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d830:	d0e70417 	ldw	r3,-25584(gp)
    d834:	e1fffd17 	ldw	r7,-12(fp)
    d838:	01800074 	movhi	r6,1
    d83c:	31b6a204 	addi	r6,r6,-9592
    d840:	180b883a 	mov	r5,r3
    d844:	1009883a 	mov	r4,r2
    d848:	000e6a40 	call	e6a4 <alt_alarm_start>
    d84c:	1000040e 	bge	r2,zero,d860 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d850:	e0fffd17 	ldw	r3,-12(fp)
    d854:	00a00034 	movhi	r2,32768
    d858:	10bfffc4 	addi	r2,r2,-1
    d85c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d860:	0001883a 	nop
    d864:	e037883a 	mov	sp,fp
    d868:	dfc00117 	ldw	ra,4(sp)
    d86c:	df000017 	ldw	fp,0(sp)
    d870:	dec00204 	addi	sp,sp,8
    d874:	f800283a 	ret

0000d878 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d878:	defff704 	addi	sp,sp,-36
    d87c:	df000815 	stw	fp,32(sp)
    d880:	df000804 	addi	fp,sp,32
    d884:	e13ffe15 	stw	r4,-8(fp)
    d888:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d88c:	e0bffe17 	ldw	r2,-8(fp)
    d890:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
    d894:	e0bffa17 	ldw	r2,-24(fp)
    d898:	10800017 	ldw	r2,0(r2)
    d89c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d8a0:	e0bffb17 	ldw	r2,-20(fp)
    d8a4:	10800104 	addi	r2,r2,4
    d8a8:	10800037 	ldwio	r2,0(r2)
    d8ac:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d8b0:	e0bffc17 	ldw	r2,-16(fp)
    d8b4:	1080c00c 	andi	r2,r2,768
    d8b8:	10006d26 	beq	r2,zero,da70 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d8bc:	e0bffc17 	ldw	r2,-16(fp)
    d8c0:	1080400c 	andi	r2,r2,256
    d8c4:	10003526 	beq	r2,zero,d99c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d8c8:	00800074 	movhi	r2,1
    d8cc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d8d0:	e0bffa17 	ldw	r2,-24(fp)
    d8d4:	10800a17 	ldw	r2,40(r2)
    d8d8:	10800044 	addi	r2,r2,1
    d8dc:	1081ffcc 	andi	r2,r2,2047
    d8e0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
    d8e4:	e0bffa17 	ldw	r2,-24(fp)
    d8e8:	10c00b17 	ldw	r3,44(r2)
    d8ec:	e0bffd17 	ldw	r2,-12(fp)
    d8f0:	18801526 	beq	r3,r2,d948 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10800037 	ldwio	r2,0(r2)
    d8fc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d900:	e0bff817 	ldw	r2,-32(fp)
    d904:	10a0000c 	andi	r2,r2,32768
    d908:	10001126 	beq	r2,zero,d950 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d90c:	e0bffa17 	ldw	r2,-24(fp)
    d910:	10800a17 	ldw	r2,40(r2)
    d914:	e0fff817 	ldw	r3,-32(fp)
    d918:	1809883a 	mov	r4,r3
    d91c:	e0fffa17 	ldw	r3,-24(fp)
    d920:	1885883a 	add	r2,r3,r2
    d924:	10800e04 	addi	r2,r2,56
    d928:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d92c:	e0bffa17 	ldw	r2,-24(fp)
    d930:	10800a17 	ldw	r2,40(r2)
    d934:	10800044 	addi	r2,r2,1
    d938:	10c1ffcc 	andi	r3,r2,2047
    d93c:	e0bffa17 	ldw	r2,-24(fp)
    d940:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    d944:	003fe206 	br	d8d0 <__alt_data_end+0xf800d8d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    d948:	0001883a 	nop
    d94c:	00000106 	br	d954 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    d950:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d954:	e0bff817 	ldw	r2,-32(fp)
    d958:	10bfffec 	andhi	r2,r2,65535
    d95c:	10000f26 	beq	r2,zero,d99c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d960:	e0bffa17 	ldw	r2,-24(fp)
    d964:	10c00817 	ldw	r3,32(r2)
    d968:	00bfff84 	movi	r2,-2
    d96c:	1886703a 	and	r3,r3,r2
    d970:	e0bffa17 	ldw	r2,-24(fp)
    d974:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d978:	e0bffb17 	ldw	r2,-20(fp)
    d97c:	10800104 	addi	r2,r2,4
    d980:	1007883a 	mov	r3,r2
    d984:	e0bffa17 	ldw	r2,-24(fp)
    d988:	10800817 	ldw	r2,32(r2)
    d98c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d990:	e0bffb17 	ldw	r2,-20(fp)
    d994:	10800104 	addi	r2,r2,4
    d998:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d99c:	e0bffc17 	ldw	r2,-16(fp)
    d9a0:	1080800c 	andi	r2,r2,512
    d9a4:	103fbe26 	beq	r2,zero,d8a0 <__alt_data_end+0xf800d8a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d9a8:	e0bffc17 	ldw	r2,-16(fp)
    d9ac:	1004d43a 	srli	r2,r2,16
    d9b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d9b4:	00001406 	br	da08 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d9b8:	e0bffb17 	ldw	r2,-20(fp)
    d9bc:	e0fffa17 	ldw	r3,-24(fp)
    d9c0:	18c00d17 	ldw	r3,52(r3)
    d9c4:	e13ffa17 	ldw	r4,-24(fp)
    d9c8:	20c7883a 	add	r3,r4,r3
    d9cc:	18c20e04 	addi	r3,r3,2104
    d9d0:	18c00003 	ldbu	r3,0(r3)
    d9d4:	18c03fcc 	andi	r3,r3,255
    d9d8:	18c0201c 	xori	r3,r3,128
    d9dc:	18ffe004 	addi	r3,r3,-128
    d9e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d9e4:	e0bffa17 	ldw	r2,-24(fp)
    d9e8:	10800d17 	ldw	r2,52(r2)
    d9ec:	10800044 	addi	r2,r2,1
    d9f0:	10c1ffcc 	andi	r3,r2,2047
    d9f4:	e0bffa17 	ldw	r2,-24(fp)
    d9f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d9fc:	e0bff917 	ldw	r2,-28(fp)
    da00:	10bfffc4 	addi	r2,r2,-1
    da04:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    da08:	e0bff917 	ldw	r2,-28(fp)
    da0c:	10000526 	beq	r2,zero,da24 <altera_avalon_jtag_uart_irq+0x1ac>
    da10:	e0bffa17 	ldw	r2,-24(fp)
    da14:	10c00d17 	ldw	r3,52(r2)
    da18:	e0bffa17 	ldw	r2,-24(fp)
    da1c:	10800c17 	ldw	r2,48(r2)
    da20:	18bfe51e 	bne	r3,r2,d9b8 <__alt_data_end+0xf800d9b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    da24:	e0bff917 	ldw	r2,-28(fp)
    da28:	103f9d26 	beq	r2,zero,d8a0 <__alt_data_end+0xf800d8a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    da2c:	e0bffa17 	ldw	r2,-24(fp)
    da30:	10c00817 	ldw	r3,32(r2)
    da34:	00bfff44 	movi	r2,-3
    da38:	1886703a 	and	r3,r3,r2
    da3c:	e0bffa17 	ldw	r2,-24(fp)
    da40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    da44:	e0bffa17 	ldw	r2,-24(fp)
    da48:	10800017 	ldw	r2,0(r2)
    da4c:	10800104 	addi	r2,r2,4
    da50:	1007883a 	mov	r3,r2
    da54:	e0bffa17 	ldw	r2,-24(fp)
    da58:	10800817 	ldw	r2,32(r2)
    da5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    da60:	e0bffb17 	ldw	r2,-20(fp)
    da64:	10800104 	addi	r2,r2,4
    da68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    da6c:	003f8c06 	br	d8a0 <__alt_data_end+0xf800d8a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    da70:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    da74:	0001883a 	nop
    da78:	e037883a 	mov	sp,fp
    da7c:	df000017 	ldw	fp,0(sp)
    da80:	dec00104 	addi	sp,sp,4
    da84:	f800283a 	ret

0000da88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    da88:	defff804 	addi	sp,sp,-32
    da8c:	df000715 	stw	fp,28(sp)
    da90:	df000704 	addi	fp,sp,28
    da94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    da98:	e0bffb17 	ldw	r2,-20(fp)
    da9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    daa0:	e0bff917 	ldw	r2,-28(fp)
    daa4:	10800017 	ldw	r2,0(r2)
    daa8:	10800104 	addi	r2,r2,4
    daac:	10800037 	ldwio	r2,0(r2)
    dab0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    dab4:	e0bffa17 	ldw	r2,-24(fp)
    dab8:	1081000c 	andi	r2,r2,1024
    dabc:	10000b26 	beq	r2,zero,daec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    dac0:	e0bff917 	ldw	r2,-28(fp)
    dac4:	10800017 	ldw	r2,0(r2)
    dac8:	10800104 	addi	r2,r2,4
    dacc:	1007883a 	mov	r3,r2
    dad0:	e0bff917 	ldw	r2,-28(fp)
    dad4:	10800817 	ldw	r2,32(r2)
    dad8:	10810014 	ori	r2,r2,1024
    dadc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    dae0:	e0bff917 	ldw	r2,-28(fp)
    dae4:	10000915 	stw	zero,36(r2)
    dae8:	00000a06 	br	db14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    daec:	e0bff917 	ldw	r2,-28(fp)
    daf0:	10c00917 	ldw	r3,36(r2)
    daf4:	00a00034 	movhi	r2,32768
    daf8:	10bfff04 	addi	r2,r2,-4
    dafc:	10c00536 	bltu	r2,r3,db14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    db00:	e0bff917 	ldw	r2,-28(fp)
    db04:	10800917 	ldw	r2,36(r2)
    db08:	10c00044 	addi	r3,r2,1
    db0c:	e0bff917 	ldw	r2,-28(fp)
    db10:	10c00915 	stw	r3,36(r2)
    db14:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    db18:	e037883a 	mov	sp,fp
    db1c:	df000017 	ldw	fp,0(sp)
    db20:	dec00104 	addi	sp,sp,4
    db24:	f800283a 	ret

0000db28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    db28:	defffd04 	addi	sp,sp,-12
    db2c:	df000215 	stw	fp,8(sp)
    db30:	df000204 	addi	fp,sp,8
    db34:	e13ffe15 	stw	r4,-8(fp)
    db38:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    db3c:	00000506 	br	db54 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    db40:	e0bfff17 	ldw	r2,-4(fp)
    db44:	1090000c 	andi	r2,r2,16384
    db48:	10000226 	beq	r2,zero,db54 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    db4c:	00bffd44 	movi	r2,-11
    db50:	00000b06 	br	db80 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    db54:	e0bffe17 	ldw	r2,-8(fp)
    db58:	10c00d17 	ldw	r3,52(r2)
    db5c:	e0bffe17 	ldw	r2,-8(fp)
    db60:	10800c17 	ldw	r2,48(r2)
    db64:	18800526 	beq	r3,r2,db7c <altera_avalon_jtag_uart_close+0x54>
    db68:	e0bffe17 	ldw	r2,-8(fp)
    db6c:	10c00917 	ldw	r3,36(r2)
    db70:	e0bffe17 	ldw	r2,-8(fp)
    db74:	10800117 	ldw	r2,4(r2)
    db78:	18bff136 	bltu	r3,r2,db40 <__alt_data_end+0xf800db40>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    db7c:	0005883a 	mov	r2,zero
}
    db80:	e037883a 	mov	sp,fp
    db84:	df000017 	ldw	fp,0(sp)
    db88:	dec00104 	addi	sp,sp,4
    db8c:	f800283a 	ret

0000db90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    db90:	defffa04 	addi	sp,sp,-24
    db94:	df000515 	stw	fp,20(sp)
    db98:	df000504 	addi	fp,sp,20
    db9c:	e13ffd15 	stw	r4,-12(fp)
    dba0:	e17ffe15 	stw	r5,-8(fp)
    dba4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    dba8:	00bff9c4 	movi	r2,-25
    dbac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    dbb0:	e0bffe17 	ldw	r2,-8(fp)
    dbb4:	10da8060 	cmpeqi	r3,r2,27137
    dbb8:	1800031e 	bne	r3,zero,dbc8 <altera_avalon_jtag_uart_ioctl+0x38>
    dbbc:	109a80a0 	cmpeqi	r2,r2,27138
    dbc0:	1000181e 	bne	r2,zero,dc24 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    dbc4:	00002906 	br	dc6c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    dbc8:	e0bffd17 	ldw	r2,-12(fp)
    dbcc:	10c00117 	ldw	r3,4(r2)
    dbd0:	00a00034 	movhi	r2,32768
    dbd4:	10bfffc4 	addi	r2,r2,-1
    dbd8:	18802126 	beq	r3,r2,dc60 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    dbdc:	e0bfff17 	ldw	r2,-4(fp)
    dbe0:	10800017 	ldw	r2,0(r2)
    dbe4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    dbe8:	e0bffc17 	ldw	r2,-16(fp)
    dbec:	10800090 	cmplti	r2,r2,2
    dbf0:	1000061e 	bne	r2,zero,dc0c <altera_avalon_jtag_uart_ioctl+0x7c>
    dbf4:	e0fffc17 	ldw	r3,-16(fp)
    dbf8:	00a00034 	movhi	r2,32768
    dbfc:	10bfffc4 	addi	r2,r2,-1
    dc00:	18800226 	beq	r3,r2,dc0c <altera_avalon_jtag_uart_ioctl+0x7c>
    dc04:	e0bffc17 	ldw	r2,-16(fp)
    dc08:	00000206 	br	dc14 <altera_avalon_jtag_uart_ioctl+0x84>
    dc0c:	00a00034 	movhi	r2,32768
    dc10:	10bfff84 	addi	r2,r2,-2
    dc14:	e0fffd17 	ldw	r3,-12(fp)
    dc18:	18800115 	stw	r2,4(r3)
      rc = 0;
    dc1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dc20:	00000f06 	br	dc60 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dc24:	e0bffd17 	ldw	r2,-12(fp)
    dc28:	10c00117 	ldw	r3,4(r2)
    dc2c:	00a00034 	movhi	r2,32768
    dc30:	10bfffc4 	addi	r2,r2,-1
    dc34:	18800c26 	beq	r3,r2,dc68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dc38:	e0bffd17 	ldw	r2,-12(fp)
    dc3c:	10c00917 	ldw	r3,36(r2)
    dc40:	e0bffd17 	ldw	r2,-12(fp)
    dc44:	10800117 	ldw	r2,4(r2)
    dc48:	1885803a 	cmpltu	r2,r3,r2
    dc4c:	10c03fcc 	andi	r3,r2,255
    dc50:	e0bfff17 	ldw	r2,-4(fp)
    dc54:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dc58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dc5c:	00000206 	br	dc68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    dc60:	0001883a 	nop
    dc64:	00000106 	br	dc6c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    dc68:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dc6c:	e0bffb17 	ldw	r2,-20(fp)
}
    dc70:	e037883a 	mov	sp,fp
    dc74:	df000017 	ldw	fp,0(sp)
    dc78:	dec00104 	addi	sp,sp,4
    dc7c:	f800283a 	ret

0000dc80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dc80:	defff304 	addi	sp,sp,-52
    dc84:	dfc00c15 	stw	ra,48(sp)
    dc88:	df000b15 	stw	fp,44(sp)
    dc8c:	df000b04 	addi	fp,sp,44
    dc90:	e13ffc15 	stw	r4,-16(fp)
    dc94:	e17ffd15 	stw	r5,-12(fp)
    dc98:	e1bffe15 	stw	r6,-8(fp)
    dc9c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dca0:	e0bffd17 	ldw	r2,-12(fp)
    dca4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dca8:	00004706 	br	ddc8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dcac:	e0bffc17 	ldw	r2,-16(fp)
    dcb0:	10800a17 	ldw	r2,40(r2)
    dcb4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dcb8:	e0bffc17 	ldw	r2,-16(fp)
    dcbc:	10800b17 	ldw	r2,44(r2)
    dcc0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dcc4:	e0fff717 	ldw	r3,-36(fp)
    dcc8:	e0bff817 	ldw	r2,-32(fp)
    dccc:	18800536 	bltu	r3,r2,dce4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dcd0:	e0fff717 	ldw	r3,-36(fp)
    dcd4:	e0bff817 	ldw	r2,-32(fp)
    dcd8:	1885c83a 	sub	r2,r3,r2
    dcdc:	e0bff615 	stw	r2,-40(fp)
    dce0:	00000406 	br	dcf4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    dce4:	00c20004 	movi	r3,2048
    dce8:	e0bff817 	ldw	r2,-32(fp)
    dcec:	1885c83a 	sub	r2,r3,r2
    dcf0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    dcf4:	e0bff617 	ldw	r2,-40(fp)
    dcf8:	10001e26 	beq	r2,zero,dd74 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    dcfc:	e0fffe17 	ldw	r3,-8(fp)
    dd00:	e0bff617 	ldw	r2,-40(fp)
    dd04:	1880022e 	bgeu	r3,r2,dd10 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    dd08:	e0bffe17 	ldw	r2,-8(fp)
    dd0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    dd10:	e0bffc17 	ldw	r2,-16(fp)
    dd14:	10c00e04 	addi	r3,r2,56
    dd18:	e0bff817 	ldw	r2,-32(fp)
    dd1c:	1885883a 	add	r2,r3,r2
    dd20:	e1bff617 	ldw	r6,-40(fp)
    dd24:	100b883a 	mov	r5,r2
    dd28:	e13ff517 	ldw	r4,-44(fp)
    dd2c:	0005dc00 	call	5dc0 <memcpy>
      ptr   += n;
    dd30:	e0fff517 	ldw	r3,-44(fp)
    dd34:	e0bff617 	ldw	r2,-40(fp)
    dd38:	1885883a 	add	r2,r3,r2
    dd3c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    dd40:	e0fffe17 	ldw	r3,-8(fp)
    dd44:	e0bff617 	ldw	r2,-40(fp)
    dd48:	1885c83a 	sub	r2,r3,r2
    dd4c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dd50:	e0fff817 	ldw	r3,-32(fp)
    dd54:	e0bff617 	ldw	r2,-40(fp)
    dd58:	1885883a 	add	r2,r3,r2
    dd5c:	10c1ffcc 	andi	r3,r2,2047
    dd60:	e0bffc17 	ldw	r2,-16(fp)
    dd64:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    dd68:	e0bffe17 	ldw	r2,-8(fp)
    dd6c:	00bfcf16 	blt	zero,r2,dcac <__alt_data_end+0xf800dcac>
    dd70:	00000106 	br	dd78 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    dd74:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    dd78:	e0fff517 	ldw	r3,-44(fp)
    dd7c:	e0bffd17 	ldw	r2,-12(fp)
    dd80:	1880141e 	bne	r3,r2,ddd4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dd84:	e0bfff17 	ldw	r2,-4(fp)
    dd88:	1090000c 	andi	r2,r2,16384
    dd8c:	1000131e 	bne	r2,zero,dddc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dd90:	0001883a 	nop
    dd94:	e0bffc17 	ldw	r2,-16(fp)
    dd98:	10c00a17 	ldw	r3,40(r2)
    dd9c:	e0bff717 	ldw	r2,-36(fp)
    dda0:	1880051e 	bne	r3,r2,ddb8 <altera_avalon_jtag_uart_read+0x138>
    dda4:	e0bffc17 	ldw	r2,-16(fp)
    dda8:	10c00917 	ldw	r3,36(r2)
    ddac:	e0bffc17 	ldw	r2,-16(fp)
    ddb0:	10800117 	ldw	r2,4(r2)
    ddb4:	18bff736 	bltu	r3,r2,dd94 <__alt_data_end+0xf800dd94>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ddb8:	e0bffc17 	ldw	r2,-16(fp)
    ddbc:	10c00a17 	ldw	r3,40(r2)
    ddc0:	e0bff717 	ldw	r2,-36(fp)
    ddc4:	18800726 	beq	r3,r2,dde4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ddc8:	e0bffe17 	ldw	r2,-8(fp)
    ddcc:	00bfb716 	blt	zero,r2,dcac <__alt_data_end+0xf800dcac>
    ddd0:	00000506 	br	dde8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    ddd4:	0001883a 	nop
    ddd8:	00000306 	br	dde8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    dddc:	0001883a 	nop
    dde0:	00000106 	br	dde8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    dde4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    dde8:	e0fff517 	ldw	r3,-44(fp)
    ddec:	e0bffd17 	ldw	r2,-12(fp)
    ddf0:	18801826 	beq	r3,r2,de54 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ddf4:	0005303a 	rdctl	r2,status
    ddf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ddfc:	e0fffb17 	ldw	r3,-20(fp)
    de00:	00bfff84 	movi	r2,-2
    de04:	1884703a 	and	r2,r3,r2
    de08:	1001703a 	wrctl	status,r2
  
  return context;
    de0c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    de10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    de14:	e0bffc17 	ldw	r2,-16(fp)
    de18:	10800817 	ldw	r2,32(r2)
    de1c:	10c00054 	ori	r3,r2,1
    de20:	e0bffc17 	ldw	r2,-16(fp)
    de24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    de28:	e0bffc17 	ldw	r2,-16(fp)
    de2c:	10800017 	ldw	r2,0(r2)
    de30:	10800104 	addi	r2,r2,4
    de34:	1007883a 	mov	r3,r2
    de38:	e0bffc17 	ldw	r2,-16(fp)
    de3c:	10800817 	ldw	r2,32(r2)
    de40:	18800035 	stwio	r2,0(r3)
    de44:	e0bffa17 	ldw	r2,-24(fp)
    de48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de4c:	e0bff917 	ldw	r2,-28(fp)
    de50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    de54:	e0fff517 	ldw	r3,-44(fp)
    de58:	e0bffd17 	ldw	r2,-12(fp)
    de5c:	18800426 	beq	r3,r2,de70 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    de60:	e0fff517 	ldw	r3,-44(fp)
    de64:	e0bffd17 	ldw	r2,-12(fp)
    de68:	1885c83a 	sub	r2,r3,r2
    de6c:	00000606 	br	de88 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    de70:	e0bfff17 	ldw	r2,-4(fp)
    de74:	1090000c 	andi	r2,r2,16384
    de78:	10000226 	beq	r2,zero,de84 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    de7c:	00bffd44 	movi	r2,-11
    de80:	00000106 	br	de88 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    de84:	00bffec4 	movi	r2,-5
}
    de88:	e037883a 	mov	sp,fp
    de8c:	dfc00117 	ldw	ra,4(sp)
    de90:	df000017 	ldw	fp,0(sp)
    de94:	dec00204 	addi	sp,sp,8
    de98:	f800283a 	ret

0000de9c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    de9c:	defff304 	addi	sp,sp,-52
    dea0:	dfc00c15 	stw	ra,48(sp)
    dea4:	df000b15 	stw	fp,44(sp)
    dea8:	df000b04 	addi	fp,sp,44
    deac:	e13ffc15 	stw	r4,-16(fp)
    deb0:	e17ffd15 	stw	r5,-12(fp)
    deb4:	e1bffe15 	stw	r6,-8(fp)
    deb8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    debc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    dec0:	e0bffd17 	ldw	r2,-12(fp)
    dec4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    dec8:	00003706 	br	dfa8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    decc:	e0bffc17 	ldw	r2,-16(fp)
    ded0:	10800c17 	ldw	r2,48(r2)
    ded4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    ded8:	e0bffc17 	ldw	r2,-16(fp)
    dedc:	10800d17 	ldw	r2,52(r2)
    dee0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    dee4:	e0fff917 	ldw	r3,-28(fp)
    dee8:	e0bff517 	ldw	r2,-44(fp)
    deec:	1880062e 	bgeu	r3,r2,df08 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    def0:	e0fff517 	ldw	r3,-44(fp)
    def4:	e0bff917 	ldw	r2,-28(fp)
    def8:	1885c83a 	sub	r2,r3,r2
    defc:	10bfffc4 	addi	r2,r2,-1
    df00:	e0bff615 	stw	r2,-40(fp)
    df04:	00000b06 	br	df34 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    df08:	e0bff517 	ldw	r2,-44(fp)
    df0c:	10000526 	beq	r2,zero,df24 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    df10:	00c20004 	movi	r3,2048
    df14:	e0bff917 	ldw	r2,-28(fp)
    df18:	1885c83a 	sub	r2,r3,r2
    df1c:	e0bff615 	stw	r2,-40(fp)
    df20:	00000406 	br	df34 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    df24:	00c1ffc4 	movi	r3,2047
    df28:	e0bff917 	ldw	r2,-28(fp)
    df2c:	1885c83a 	sub	r2,r3,r2
    df30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    df34:	e0bff617 	ldw	r2,-40(fp)
    df38:	10001e26 	beq	r2,zero,dfb4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    df3c:	e0fffe17 	ldw	r3,-8(fp)
    df40:	e0bff617 	ldw	r2,-40(fp)
    df44:	1880022e 	bgeu	r3,r2,df50 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    df48:	e0bffe17 	ldw	r2,-8(fp)
    df4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    df50:	e0bffc17 	ldw	r2,-16(fp)
    df54:	10c20e04 	addi	r3,r2,2104
    df58:	e0bff917 	ldw	r2,-28(fp)
    df5c:	1885883a 	add	r2,r3,r2
    df60:	e1bff617 	ldw	r6,-40(fp)
    df64:	e17ffd17 	ldw	r5,-12(fp)
    df68:	1009883a 	mov	r4,r2
    df6c:	0005dc00 	call	5dc0 <memcpy>
      ptr   += n;
    df70:	e0fffd17 	ldw	r3,-12(fp)
    df74:	e0bff617 	ldw	r2,-40(fp)
    df78:	1885883a 	add	r2,r3,r2
    df7c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    df80:	e0fffe17 	ldw	r3,-8(fp)
    df84:	e0bff617 	ldw	r2,-40(fp)
    df88:	1885c83a 	sub	r2,r3,r2
    df8c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df90:	e0fff917 	ldw	r3,-28(fp)
    df94:	e0bff617 	ldw	r2,-40(fp)
    df98:	1885883a 	add	r2,r3,r2
    df9c:	10c1ffcc 	andi	r3,r2,2047
    dfa0:	e0bffc17 	ldw	r2,-16(fp)
    dfa4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    dfa8:	e0bffe17 	ldw	r2,-8(fp)
    dfac:	00bfc716 	blt	zero,r2,decc <__alt_data_end+0xf800decc>
    dfb0:	00000106 	br	dfb8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    dfb4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfb8:	0005303a 	rdctl	r2,status
    dfbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfc0:	e0fffb17 	ldw	r3,-20(fp)
    dfc4:	00bfff84 	movi	r2,-2
    dfc8:	1884703a 	and	r2,r3,r2
    dfcc:	1001703a 	wrctl	status,r2
  
  return context;
    dfd0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    dfd4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    dfd8:	e0bffc17 	ldw	r2,-16(fp)
    dfdc:	10800817 	ldw	r2,32(r2)
    dfe0:	10c00094 	ori	r3,r2,2
    dfe4:	e0bffc17 	ldw	r2,-16(fp)
    dfe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dfec:	e0bffc17 	ldw	r2,-16(fp)
    dff0:	10800017 	ldw	r2,0(r2)
    dff4:	10800104 	addi	r2,r2,4
    dff8:	1007883a 	mov	r3,r2
    dffc:	e0bffc17 	ldw	r2,-16(fp)
    e000:	10800817 	ldw	r2,32(r2)
    e004:	18800035 	stwio	r2,0(r3)
    e008:	e0bffa17 	ldw	r2,-24(fp)
    e00c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e010:	e0bff817 	ldw	r2,-32(fp)
    e014:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    e018:	e0bffe17 	ldw	r2,-8(fp)
    e01c:	0080100e 	bge	zero,r2,e060 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    e020:	e0bfff17 	ldw	r2,-4(fp)
    e024:	1090000c 	andi	r2,r2,16384
    e028:	1000101e 	bne	r2,zero,e06c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    e02c:	0001883a 	nop
    e030:	e0bffc17 	ldw	r2,-16(fp)
    e034:	10c00d17 	ldw	r3,52(r2)
    e038:	e0bff517 	ldw	r2,-44(fp)
    e03c:	1880051e 	bne	r3,r2,e054 <altera_avalon_jtag_uart_write+0x1b8>
    e040:	e0bffc17 	ldw	r2,-16(fp)
    e044:	10c00917 	ldw	r3,36(r2)
    e048:	e0bffc17 	ldw	r2,-16(fp)
    e04c:	10800117 	ldw	r2,4(r2)
    e050:	18bff736 	bltu	r3,r2,e030 <__alt_data_end+0xf800e030>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	10800917 	ldw	r2,36(r2)
    e05c:	1000051e 	bne	r2,zero,e074 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    e060:	e0bffe17 	ldw	r2,-8(fp)
    e064:	00bfd016 	blt	zero,r2,dfa8 <__alt_data_end+0xf800dfa8>
    e068:	00000306 	br	e078 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    e06c:	0001883a 	nop
    e070:	00000106 	br	e078 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    e074:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    e078:	e0fffd17 	ldw	r3,-12(fp)
    e07c:	e0bff717 	ldw	r2,-36(fp)
    e080:	18800426 	beq	r3,r2,e094 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    e084:	e0fffd17 	ldw	r3,-12(fp)
    e088:	e0bff717 	ldw	r2,-36(fp)
    e08c:	1885c83a 	sub	r2,r3,r2
    e090:	00000606 	br	e0ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    e094:	e0bfff17 	ldw	r2,-4(fp)
    e098:	1090000c 	andi	r2,r2,16384
    e09c:	10000226 	beq	r2,zero,e0a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    e0a0:	00bffd44 	movi	r2,-11
    e0a4:	00000106 	br	e0ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e0a8:	00bffec4 	movi	r2,-5
}
    e0ac:	e037883a 	mov	sp,fp
    e0b0:	dfc00117 	ldw	ra,4(sp)
    e0b4:	df000017 	ldw	fp,0(sp)
    e0b8:	dec00204 	addi	sp,sp,8
    e0bc:	f800283a 	ret

0000e0c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e0c0:	defff904 	addi	sp,sp,-28
    e0c4:	dfc00615 	stw	ra,24(sp)
    e0c8:	df000515 	stw	fp,20(sp)
    e0cc:	df000504 	addi	fp,sp,20
    e0d0:	e13ffe15 	stw	r4,-8(fp)
    e0d4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e0d8:	0007883a 	mov	r3,zero
    e0dc:	e0bffe17 	ldw	r2,-8(fp)
    e0e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e0e4:	e0bffe17 	ldw	r2,-8(fp)
    e0e8:	10800104 	addi	r2,r2,4
    e0ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e0f0:	0005303a 	rdctl	r2,status
    e0f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e0f8:	e0fffc17 	ldw	r3,-16(fp)
    e0fc:	00bfff84 	movi	r2,-2
    e100:	1884703a 	and	r2,r3,r2
    e104:	1001703a 	wrctl	status,r2
  
  return context;
    e108:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e10c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
    e110:	000f0040 	call	f004 <alt_tick>
    e114:	e0bffb17 	ldw	r2,-20(fp)
    e118:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e11c:	e0bffd17 	ldw	r2,-12(fp)
    e120:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e124:	0001883a 	nop
    e128:	e037883a 	mov	sp,fp
    e12c:	dfc00117 	ldw	ra,4(sp)
    e130:	df000017 	ldw	fp,0(sp)
    e134:	dec00204 	addi	sp,sp,8
    e138:	f800283a 	ret

0000e13c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e13c:	defff904 	addi	sp,sp,-28
    e140:	dfc00615 	stw	ra,24(sp)
    e144:	df000515 	stw	fp,20(sp)
    e148:	df000504 	addi	fp,sp,20
    e14c:	e13ffc15 	stw	r4,-16(fp)
    e150:	e17ffd15 	stw	r5,-12(fp)
    e154:	e1bffe15 	stw	r6,-8(fp)
    e158:	e1ffff15 	stw	r7,-4(fp)
    e15c:	e0bfff17 	ldw	r2,-4(fp)
    e160:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e164:	d0a70417 	ldw	r2,-25584(gp)
    e168:	1000021e 	bne	r2,zero,e174 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    e16c:	e0bffb17 	ldw	r2,-20(fp)
    e170:	d0a70415 	stw	r2,-25584(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e174:	e0bffc17 	ldw	r2,-16(fp)
    e178:	10800104 	addi	r2,r2,4
    e17c:	00c001c4 	movi	r3,7
    e180:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    e184:	01800074 	movhi	r6,1
    e188:	31b83004 	addi	r6,r6,-8000
    e18c:	e17ffc17 	ldw	r5,-16(fp)
    e190:	e13ffe17 	ldw	r4,-8(fp)
    e194:	000eb940 	call	eb94 <alt_irq_register>
#endif  
}
    e198:	0001883a 	nop
    e19c:	e037883a 	mov	sp,fp
    e1a0:	dfc00117 	ldw	ra,4(sp)
    e1a4:	df000017 	ldw	fp,0(sp)
    e1a8:	dec00204 	addi	sp,sp,8
    e1ac:	f800283a 	ret

0000e1b0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    e1b0:	defffc04 	addi	sp,sp,-16
    e1b4:	df000315 	stw	fp,12(sp)
    e1b8:	df000304 	addi	fp,sp,12
    e1bc:	e13ffe15 	stw	r4,-8(fp)
    e1c0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    e1c4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    e1c8:	e0bfff17 	ldw	r2,-4(fp)
    e1cc:	1000061e 	bne	r2,zero,e1e8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
    e1d0:	e0bffe17 	ldw	r2,-8(fp)
    e1d4:	1007883a 	mov	r3,r2
    e1d8:	e0bffd03 	ldbu	r2,-12(fp)
    e1dc:	1884b03a 	or	r2,r3,r2
    e1e0:	e0bffd05 	stb	r2,-12(fp)
    e1e4:	00000806 	br	e208 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
    e1e8:	e0bffe17 	ldw	r2,-8(fp)
    e1ec:	1007883a 	mov	r3,r2
    e1f0:	e0bffd03 	ldbu	r2,-12(fp)
    e1f4:	1884b03a 	or	r2,r3,r2
    e1f8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    e1fc:	e0bffd03 	ldbu	r2,-12(fp)
    e200:	10801014 	ori	r2,r2,64
    e204:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    e208:	e0fffd03 	ldbu	r3,-12(fp)
    e20c:	00bfe004 	movi	r2,-128
    e210:	1884b03a 	or	r2,r3,r2
}
    e214:	e037883a 	mov	sp,fp
    e218:	df000017 	ldw	fp,0(sp)
    e21c:	dec00104 	addi	sp,sp,4
    e220:	f800283a 	ret

0000e224 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    e224:	defffd04 	addi	sp,sp,-12
    e228:	df000215 	stw	fp,8(sp)
    e22c:	df000204 	addi	fp,sp,8
    e230:	e13ffe15 	stw	r4,-8(fp)
    e234:	2805883a 	mov	r2,r5
    e238:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    e23c:	e0bffe17 	ldw	r2,-8(fp)
    e240:	10800a17 	ldw	r2,40(r2)
    e244:	1007883a 	mov	r3,r2
    e248:	e0bfff03 	ldbu	r2,-4(fp)
    e24c:	18800025 	stbio	r2,0(r3)
}
    e250:	0001883a 	nop
    e254:	e037883a 	mov	sp,fp
    e258:	df000017 	ldw	fp,0(sp)
    e25c:	dec00104 	addi	sp,sp,4
    e260:	f800283a 	ret

0000e264 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    e264:	defffe04 	addi	sp,sp,-8
    e268:	df000115 	stw	fp,4(sp)
    e26c:	df000104 	addi	fp,sp,4
    e270:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    e274:	e0bfff17 	ldw	r2,-4(fp)
    e278:	10800a17 	ldw	r2,40(r2)
    e27c:	1007883a 	mov	r3,r2
    e280:	00800044 	movi	r2,1
    e284:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    e288:	0001883a 	nop
    e28c:	e037883a 	mov	sp,fp
    e290:	df000017 	ldw	fp,0(sp)
    e294:	dec00104 	addi	sp,sp,4
    e298:	f800283a 	ret

0000e29c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    e29c:	defffc04 	addi	sp,sp,-16
    e2a0:	dfc00315 	stw	ra,12(sp)
    e2a4:	df000215 	stw	fp,8(sp)
    e2a8:	df000204 	addi	fp,sp,8
    e2ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    e2b0:	d1600804 	addi	r5,gp,-32736
    e2b4:	e13fff17 	ldw	r4,-4(fp)
    e2b8:	000e9900 	call	e990 <alt_find_dev>
    e2bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    e2c0:	e0bffe17 	ldw	r2,-8(fp)
}
    e2c4:	e037883a 	mov	sp,fp
    e2c8:	dfc00117 	ldw	ra,4(sp)
    e2cc:	df000017 	ldw	fp,0(sp)
    e2d0:	dec00204 	addi	sp,sp,8
    e2d4:	f800283a 	ret

0000e2d8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    e2d8:	defffb04 	addi	sp,sp,-20
    e2dc:	df000415 	stw	fp,16(sp)
    e2e0:	df000404 	addi	fp,sp,16
    e2e4:	e13ffd15 	stw	r4,-12(fp)
    e2e8:	e17ffe15 	stw	r5,-8(fp)
    e2ec:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    e2f0:	e03ffc15 	stw	zero,-16(fp)
    e2f4:	00000f06 	br	e334 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    e2f8:	e0bffd17 	ldw	r2,-12(fp)
    e2fc:	10800a17 	ldw	r2,40(r2)
    e300:	10800044 	addi	r2,r2,1
    e304:	1009883a 	mov	r4,r2
    e308:	e0fffe17 	ldw	r3,-8(fp)
    e30c:	e0bffc17 	ldw	r2,-16(fp)
    e310:	1885883a 	add	r2,r3,r2
    e314:	10800003 	ldbu	r2,0(r2)
    e318:	10803fcc 	andi	r2,r2,255
    e31c:	1080201c 	xori	r2,r2,128
    e320:	10bfe004 	addi	r2,r2,-128
    e324:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    e328:	e0bffc17 	ldw	r2,-16(fp)
    e32c:	10800044 	addi	r2,r2,1
    e330:	e0bffc15 	stw	r2,-16(fp)
    e334:	e0fffc17 	ldw	r3,-16(fp)
    e338:	e0bfff17 	ldw	r2,-4(fp)
    e33c:	18bfee36 	bltu	r3,r2,e2f8 <__alt_data_end+0xf800e2f8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    e340:	0001883a 	nop
    e344:	e037883a 	mov	sp,fp
    e348:	df000017 	ldw	fp,0(sp)
    e34c:	dec00104 	addi	sp,sp,4
    e350:	f800283a 	ret

0000e354 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    e354:	defffd04 	addi	sp,sp,-12
    e358:	df000215 	stw	fp,8(sp)
    e35c:	df000204 	addi	fp,sp,8
    e360:	e13ffe15 	stw	r4,-8(fp)
    e364:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    e368:	00000d06 	br	e3a0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    e36c:	e0bffe17 	ldw	r2,-8(fp)
    e370:	10800a17 	ldw	r2,40(r2)
    e374:	10800044 	addi	r2,r2,1
    e378:	1007883a 	mov	r3,r2
    e37c:	e0bfff17 	ldw	r2,-4(fp)
    e380:	10800003 	ldbu	r2,0(r2)
    e384:	10803fcc 	andi	r2,r2,255
    e388:	1080201c 	xori	r2,r2,128
    e38c:	10bfe004 	addi	r2,r2,-128
    e390:	18800025 	stbio	r2,0(r3)
		++ptr;
    e394:	e0bfff17 	ldw	r2,-4(fp)
    e398:	10800044 	addi	r2,r2,1
    e39c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    e3a0:	e0bfff17 	ldw	r2,-4(fp)
    e3a4:	10800003 	ldbu	r2,0(r2)
    e3a8:	10803fcc 	andi	r2,r2,255
    e3ac:	1080201c 	xori	r2,r2,128
    e3b0:	10bfe004 	addi	r2,r2,-128
    e3b4:	103fed1e 	bne	r2,zero,e36c <__alt_data_end+0xf800e36c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    e3b8:	0001883a 	nop
    e3bc:	e037883a 	mov	sp,fp
    e3c0:	df000017 	ldw	fp,0(sp)
    e3c4:	dec00104 	addi	sp,sp,4
    e3c8:	f800283a 	ret

0000e3cc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    e3cc:	defffb04 	addi	sp,sp,-20
    e3d0:	dfc00415 	stw	ra,16(sp)
    e3d4:	df000315 	stw	fp,12(sp)
    e3d8:	df000304 	addi	fp,sp,12
    e3dc:	e13ffd15 	stw	r4,-12(fp)
    e3e0:	e17ffe15 	stw	r5,-8(fp)
    e3e4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    e3e8:	e0bffd17 	ldw	r2,-12(fp)
    e3ec:	10800017 	ldw	r2,0(r2)
    e3f0:	e0ffff17 	ldw	r3,-4(fp)
    e3f4:	180d883a 	mov	r6,r3
    e3f8:	e17ffe17 	ldw	r5,-8(fp)
    e3fc:	1009883a 	mov	r4,r2
    e400:	000e2d80 	call	e2d8 <alt_up_character_lcd_write>
	return 0;
    e404:	0005883a 	mov	r2,zero
}
    e408:	e037883a 	mov	sp,fp
    e40c:	dfc00117 	ldw	ra,4(sp)
    e410:	df000017 	ldw	fp,0(sp)
    e414:	dec00204 	addi	sp,sp,8
    e418:	f800283a 	ret

0000e41c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    e41c:	defffa04 	addi	sp,sp,-24
    e420:	dfc00515 	stw	ra,20(sp)
    e424:	df000415 	stw	fp,16(sp)
    e428:	df000404 	addi	fp,sp,16
    e42c:	e13ffd15 	stw	r4,-12(fp)
    e430:	e17ffe15 	stw	r5,-8(fp)
    e434:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    e438:	e0bffe17 	ldw	r2,-8(fp)
    e43c:	10800a28 	cmpgeui	r2,r2,40
    e440:	1000031e 	bne	r2,zero,e450 <alt_up_character_lcd_set_cursor_pos+0x34>
    e444:	e0bfff17 	ldw	r2,-4(fp)
    e448:	108000b0 	cmpltui	r2,r2,2
    e44c:	1000021e 	bne	r2,zero,e458 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
    e450:	00bfffc4 	movi	r2,-1
    e454:	00000906 	br	e47c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e458:	e17fff17 	ldw	r5,-4(fp)
    e45c:	e13ffe17 	ldw	r4,-8(fp)
    e460:	000e1b00 	call	e1b0 <get_DDRAM_addr>
    e464:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    e468:	e0bffc03 	ldbu	r2,-16(fp)
    e46c:	100b883a 	mov	r5,r2
    e470:	e13ffd17 	ldw	r4,-12(fp)
    e474:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
	return 0;
    e478:	0005883a 	mov	r2,zero
}
    e47c:	e037883a 	mov	sp,fp
    e480:	dfc00117 	ldw	ra,4(sp)
    e484:	df000017 	ldw	fp,0(sp)
    e488:	dec00204 	addi	sp,sp,8
    e48c:	f800283a 	ret

0000e490 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e490:	defffb04 	addi	sp,sp,-20
    e494:	dfc00415 	stw	ra,16(sp)
    e498:	df000315 	stw	fp,12(sp)
    e49c:	df000304 	addi	fp,sp,12
    e4a0:	e13ffe15 	stw	r4,-8(fp)
    e4a4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    e4a8:	e0bfff17 	ldw	r2,-4(fp)
    e4ac:	10001526 	beq	r2,zero,e504 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    e4b0:	e0bfff17 	ldw	r2,-4(fp)
    e4b4:	0080020e 	bge	zero,r2,e4c0 <alt_up_character_lcd_shift_cursor+0x30>
    e4b8:	00800504 	movi	r2,20
    e4bc:	00000106 	br	e4c4 <alt_up_character_lcd_shift_cursor+0x34>
    e4c0:	00800404 	movi	r2,16
    e4c4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    e4c8:	e0bfff17 	ldw	r2,-4(fp)
    e4cc:	1000010e 	bge	r2,zero,e4d4 <alt_up_character_lcd_shift_cursor+0x44>
    e4d0:	0085c83a 	sub	r2,zero,r2
    e4d4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e4d8:	00000406 	br	e4ec <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e4dc:	e0bffd43 	ldbu	r2,-11(fp)
    e4e0:	100b883a 	mov	r5,r2
    e4e4:	e13ffe17 	ldw	r4,-8(fp)
    e4e8:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e4ec:	e0bffd03 	ldbu	r2,-12(fp)
    e4f0:	10ffffc4 	addi	r3,r2,-1
    e4f4:	e0fffd05 	stb	r3,-12(fp)
    e4f8:	10803fcc 	andi	r2,r2,255
    e4fc:	103ff71e 	bne	r2,zero,e4dc <__alt_data_end+0xf800e4dc>
    e500:	00000106 	br	e508 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    e504:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e508:	e037883a 	mov	sp,fp
    e50c:	dfc00117 	ldw	ra,4(sp)
    e510:	df000017 	ldw	fp,0(sp)
    e514:	dec00204 	addi	sp,sp,8
    e518:	f800283a 	ret

0000e51c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    e51c:	defffb04 	addi	sp,sp,-20
    e520:	dfc00415 	stw	ra,16(sp)
    e524:	df000315 	stw	fp,12(sp)
    e528:	df000304 	addi	fp,sp,12
    e52c:	e13ffe15 	stw	r4,-8(fp)
    e530:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
    e534:	e0bfff17 	ldw	r2,-4(fp)
    e538:	10001526 	beq	r2,zero,e590 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    e53c:	e0bfff17 	ldw	r2,-4(fp)
    e540:	0080020e 	bge	zero,r2,e54c <alt_up_character_lcd_shift_display+0x30>
    e544:	00800704 	movi	r2,28
    e548:	00000106 	br	e550 <alt_up_character_lcd_shift_display+0x34>
    e54c:	00800604 	movi	r2,24
    e550:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    e554:	e0bfff17 	ldw	r2,-4(fp)
    e558:	1000010e 	bge	r2,zero,e560 <alt_up_character_lcd_shift_display+0x44>
    e55c:	0085c83a 	sub	r2,zero,r2
    e560:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e564:	00000406 	br	e578 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    e568:	e0bffd43 	ldbu	r2,-11(fp)
    e56c:	100b883a 	mov	r5,r2
    e570:	e13ffe17 	ldw	r4,-8(fp)
    e574:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    e578:	e0bffd03 	ldbu	r2,-12(fp)
    e57c:	10ffffc4 	addi	r3,r2,-1
    e580:	e0fffd05 	stb	r3,-12(fp)
    e584:	10803fcc 	andi	r2,r2,255
    e588:	103ff71e 	bne	r2,zero,e568 <__alt_data_end+0xf800e568>
    e58c:	00000106 	br	e594 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
    e590:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    e594:	e037883a 	mov	sp,fp
    e598:	dfc00117 	ldw	ra,4(sp)
    e59c:	df000017 	ldw	fp,0(sp)
    e5a0:	dec00204 	addi	sp,sp,8
    e5a4:	f800283a 	ret

0000e5a8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    e5a8:	defffa04 	addi	sp,sp,-24
    e5ac:	dfc00515 	stw	ra,20(sp)
    e5b0:	df000415 	stw	fp,16(sp)
    e5b4:	df000404 	addi	fp,sp,16
    e5b8:	e13ffd15 	stw	r4,-12(fp)
    e5bc:	e17ffe15 	stw	r5,-8(fp)
    e5c0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    e5c4:	e0bffe17 	ldw	r2,-8(fp)
    e5c8:	10800a28 	cmpgeui	r2,r2,40
    e5cc:	1000031e 	bne	r2,zero,e5dc <alt_up_character_lcd_erase_pos+0x34>
    e5d0:	e0bfff17 	ldw	r2,-4(fp)
    e5d4:	108000b0 	cmpltui	r2,r2,2
    e5d8:	1000021e 	bne	r2,zero,e5e4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
    e5dc:	00bfffc4 	movi	r2,-1
    e5e0:	00000f06 	br	e620 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    e5e4:	e17fff17 	ldw	r5,-4(fp)
    e5e8:	e13ffe17 	ldw	r4,-8(fp)
    e5ec:	000e1b00 	call	e1b0 <get_DDRAM_addr>
    e5f0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    e5f4:	e0bffc03 	ldbu	r2,-16(fp)
    e5f8:	100b883a 	mov	r5,r2
    e5fc:	e13ffd17 	ldw	r4,-12(fp)
    e600:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    e604:	e0bffd17 	ldw	r2,-12(fp)
    e608:	10800a17 	ldw	r2,40(r2)
    e60c:	10800044 	addi	r2,r2,1
    e610:	1007883a 	mov	r3,r2
    e614:	00800084 	movi	r2,2
    e618:	18800025 	stbio	r2,0(r3)
	return 0;
    e61c:	0005883a 	mov	r2,zero
}
    e620:	e037883a 	mov	sp,fp
    e624:	dfc00117 	ldw	ra,4(sp)
    e628:	df000017 	ldw	fp,0(sp)
    e62c:	dec00204 	addi	sp,sp,8
    e630:	f800283a 	ret

0000e634 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    e634:	defffd04 	addi	sp,sp,-12
    e638:	dfc00215 	stw	ra,8(sp)
    e63c:	df000115 	stw	fp,4(sp)
    e640:	df000104 	addi	fp,sp,4
    e644:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    e648:	01400304 	movi	r5,12
    e64c:	e13fff17 	ldw	r4,-4(fp)
    e650:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
}
    e654:	0001883a 	nop
    e658:	e037883a 	mov	sp,fp
    e65c:	dfc00117 	ldw	ra,4(sp)
    e660:	df000017 	ldw	fp,0(sp)
    e664:	dec00204 	addi	sp,sp,8
    e668:	f800283a 	ret

0000e66c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    e66c:	defffd04 	addi	sp,sp,-12
    e670:	dfc00215 	stw	ra,8(sp)
    e674:	df000115 	stw	fp,4(sp)
    e678:	df000104 	addi	fp,sp,4
    e67c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    e680:	014003c4 	movi	r5,15
    e684:	e13fff17 	ldw	r4,-4(fp)
    e688:	000e2240 	call	e224 <alt_up_character_lcd_send_cmd>
}
    e68c:	0001883a 	nop
    e690:	e037883a 	mov	sp,fp
    e694:	dfc00117 	ldw	ra,4(sp)
    e698:	df000017 	ldw	fp,0(sp)
    e69c:	dec00204 	addi	sp,sp,8
    e6a0:	f800283a 	ret

0000e6a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e6a4:	defff504 	addi	sp,sp,-44
    e6a8:	df000a15 	stw	fp,40(sp)
    e6ac:	df000a04 	addi	fp,sp,40
    e6b0:	e13ffc15 	stw	r4,-16(fp)
    e6b4:	e17ffd15 	stw	r5,-12(fp)
    e6b8:	e1bffe15 	stw	r6,-8(fp)
    e6bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e6c0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e6c4:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
    e6c8:	10003c26 	beq	r2,zero,e7bc <alt_alarm_start+0x118>
  {
    if (alarm)
    e6cc:	e0bffc17 	ldw	r2,-16(fp)
    e6d0:	10003826 	beq	r2,zero,e7b4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    e6d4:	e0bffc17 	ldw	r2,-16(fp)
    e6d8:	e0fffe17 	ldw	r3,-8(fp)
    e6dc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e6e0:	e0bffc17 	ldw	r2,-16(fp)
    e6e4:	e0ffff17 	ldw	r3,-4(fp)
    e6e8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6ec:	0005303a 	rdctl	r2,status
    e6f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6f4:	e0fff917 	ldw	r3,-28(fp)
    e6f8:	00bfff84 	movi	r2,-2
    e6fc:	1884703a 	and	r2,r3,r2
    e700:	1001703a 	wrctl	status,r2
  
  return context;
    e704:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    e708:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e70c:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
    e710:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e714:	e0fffd17 	ldw	r3,-12(fp)
    e718:	e0bff617 	ldw	r2,-40(fp)
    e71c:	1885883a 	add	r2,r3,r2
    e720:	10c00044 	addi	r3,r2,1
    e724:	e0bffc17 	ldw	r2,-16(fp)
    e728:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e72c:	e0bffc17 	ldw	r2,-16(fp)
    e730:	10c00217 	ldw	r3,8(r2)
    e734:	e0bff617 	ldw	r2,-40(fp)
    e738:	1880042e 	bgeu	r3,r2,e74c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    e73c:	e0bffc17 	ldw	r2,-16(fp)
    e740:	00c00044 	movi	r3,1
    e744:	10c00405 	stb	r3,16(r2)
    e748:	00000206 	br	e754 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    e74c:	e0bffc17 	ldw	r2,-16(fp)
    e750:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e754:	e0bffc17 	ldw	r2,-16(fp)
    e758:	d0e00e04 	addi	r3,gp,-32712
    e75c:	e0fffa15 	stw	r3,-24(fp)
    e760:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e764:	e0bffb17 	ldw	r2,-20(fp)
    e768:	e0fffa17 	ldw	r3,-24(fp)
    e76c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e770:	e0bffa17 	ldw	r2,-24(fp)
    e774:	10c00017 	ldw	r3,0(r2)
    e778:	e0bffb17 	ldw	r2,-20(fp)
    e77c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e780:	e0bffa17 	ldw	r2,-24(fp)
    e784:	10800017 	ldw	r2,0(r2)
    e788:	e0fffb17 	ldw	r3,-20(fp)
    e78c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e790:	e0bffa17 	ldw	r2,-24(fp)
    e794:	e0fffb17 	ldw	r3,-20(fp)
    e798:	10c00015 	stw	r3,0(r2)
    e79c:	e0bff817 	ldw	r2,-32(fp)
    e7a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7a4:	e0bff717 	ldw	r2,-36(fp)
    e7a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e7ac:	0005883a 	mov	r2,zero
    e7b0:	00000306 	br	e7c0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    e7b4:	00bffa84 	movi	r2,-22
    e7b8:	00000106 	br	e7c0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    e7bc:	00bfde84 	movi	r2,-134
  }
}
    e7c0:	e037883a 	mov	sp,fp
    e7c4:	df000017 	ldw	fp,0(sp)
    e7c8:	dec00104 	addi	sp,sp,4
    e7cc:	f800283a 	ret

0000e7d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e7d0:	deffff04 	addi	sp,sp,-4
    e7d4:	df000015 	stw	fp,0(sp)
    e7d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e7dc:	0001883a 	nop
    e7e0:	e037883a 	mov	sp,fp
    e7e4:	df000017 	ldw	fp,0(sp)
    e7e8:	dec00104 	addi	sp,sp,4
    e7ec:	f800283a 	ret

0000e7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7f0:	defffe04 	addi	sp,sp,-8
    e7f4:	dfc00115 	stw	ra,4(sp)
    e7f8:	df000015 	stw	fp,0(sp)
    e7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e800:	d0a00b17 	ldw	r2,-32724(gp)
    e804:	10000326 	beq	r2,zero,e814 <alt_get_errno+0x24>
    e808:	d0a00b17 	ldw	r2,-32724(gp)
    e80c:	103ee83a 	callr	r2
    e810:	00000106 	br	e818 <alt_get_errno+0x28>
    e814:	d0a6ff04 	addi	r2,gp,-25604
}
    e818:	e037883a 	mov	sp,fp
    e81c:	dfc00117 	ldw	ra,4(sp)
    e820:	df000017 	ldw	fp,0(sp)
    e824:	dec00204 	addi	sp,sp,8
    e828:	f800283a 	ret

0000e82c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e82c:	defffa04 	addi	sp,sp,-24
    e830:	dfc00515 	stw	ra,20(sp)
    e834:	df000415 	stw	fp,16(sp)
    e838:	df000404 	addi	fp,sp,16
    e83c:	e13ffe15 	stw	r4,-8(fp)
    e840:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e844:	e0bffe17 	ldw	r2,-8(fp)
    e848:	10000326 	beq	r2,zero,e858 <alt_dev_llist_insert+0x2c>
    e84c:	e0bffe17 	ldw	r2,-8(fp)
    e850:	10800217 	ldw	r2,8(r2)
    e854:	1000061e 	bne	r2,zero,e870 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e858:	000e7f00 	call	e7f0 <alt_get_errno>
    e85c:	1007883a 	mov	r3,r2
    e860:	00800584 	movi	r2,22
    e864:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e868:	00bffa84 	movi	r2,-22
    e86c:	00001306 	br	e8bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e870:	e0bffe17 	ldw	r2,-8(fp)
    e874:	e0ffff17 	ldw	r3,-4(fp)
    e878:	e0fffc15 	stw	r3,-16(fp)
    e87c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e880:	e0bffd17 	ldw	r2,-12(fp)
    e884:	e0fffc17 	ldw	r3,-16(fp)
    e888:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e88c:	e0bffc17 	ldw	r2,-16(fp)
    e890:	10c00017 	ldw	r3,0(r2)
    e894:	e0bffd17 	ldw	r2,-12(fp)
    e898:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e89c:	e0bffc17 	ldw	r2,-16(fp)
    e8a0:	10800017 	ldw	r2,0(r2)
    e8a4:	e0fffd17 	ldw	r3,-12(fp)
    e8a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e8ac:	e0bffc17 	ldw	r2,-16(fp)
    e8b0:	e0fffd17 	ldw	r3,-12(fp)
    e8b4:	10c00015 	stw	r3,0(r2)

  return 0;  
    e8b8:	0005883a 	mov	r2,zero
}
    e8bc:	e037883a 	mov	sp,fp
    e8c0:	dfc00117 	ldw	ra,4(sp)
    e8c4:	df000017 	ldw	fp,0(sp)
    e8c8:	dec00204 	addi	sp,sp,8
    e8cc:	f800283a 	ret

0000e8d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e8d0:	defffd04 	addi	sp,sp,-12
    e8d4:	dfc00215 	stw	ra,8(sp)
    e8d8:	df000115 	stw	fp,4(sp)
    e8dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e8e0:	00800074 	movhi	r2,1
    e8e4:	10bde604 	addi	r2,r2,-2152
    e8e8:	e0bfff15 	stw	r2,-4(fp)
    e8ec:	00000606 	br	e908 <_do_ctors+0x38>
        (*ctor) (); 
    e8f0:	e0bfff17 	ldw	r2,-4(fp)
    e8f4:	10800017 	ldw	r2,0(r2)
    e8f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e8fc:	e0bfff17 	ldw	r2,-4(fp)
    e900:	10bfff04 	addi	r2,r2,-4
    e904:	e0bfff15 	stw	r2,-4(fp)
    e908:	e0ffff17 	ldw	r3,-4(fp)
    e90c:	00800074 	movhi	r2,1
    e910:	10bde704 	addi	r2,r2,-2148
    e914:	18bff62e 	bgeu	r3,r2,e8f0 <__alt_data_end+0xf800e8f0>
        (*ctor) (); 
}
    e918:	0001883a 	nop
    e91c:	e037883a 	mov	sp,fp
    e920:	dfc00117 	ldw	ra,4(sp)
    e924:	df000017 	ldw	fp,0(sp)
    e928:	dec00204 	addi	sp,sp,8
    e92c:	f800283a 	ret

0000e930 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e930:	defffd04 	addi	sp,sp,-12
    e934:	dfc00215 	stw	ra,8(sp)
    e938:	df000115 	stw	fp,4(sp)
    e93c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e940:	00800074 	movhi	r2,1
    e944:	10bde604 	addi	r2,r2,-2152
    e948:	e0bfff15 	stw	r2,-4(fp)
    e94c:	00000606 	br	e968 <_do_dtors+0x38>
        (*dtor) (); 
    e950:	e0bfff17 	ldw	r2,-4(fp)
    e954:	10800017 	ldw	r2,0(r2)
    e958:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e95c:	e0bfff17 	ldw	r2,-4(fp)
    e960:	10bfff04 	addi	r2,r2,-4
    e964:	e0bfff15 	stw	r2,-4(fp)
    e968:	e0ffff17 	ldw	r3,-4(fp)
    e96c:	00800074 	movhi	r2,1
    e970:	10bde704 	addi	r2,r2,-2148
    e974:	18bff62e 	bgeu	r3,r2,e950 <__alt_data_end+0xf800e950>
        (*dtor) (); 
}
    e978:	0001883a 	nop
    e97c:	e037883a 	mov	sp,fp
    e980:	dfc00117 	ldw	ra,4(sp)
    e984:	df000017 	ldw	fp,0(sp)
    e988:	dec00204 	addi	sp,sp,8
    e98c:	f800283a 	ret

0000e990 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e990:	defffa04 	addi	sp,sp,-24
    e994:	dfc00515 	stw	ra,20(sp)
    e998:	df000415 	stw	fp,16(sp)
    e99c:	df000404 	addi	fp,sp,16
    e9a0:	e13ffe15 	stw	r4,-8(fp)
    e9a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e9a8:	e0bfff17 	ldw	r2,-4(fp)
    e9ac:	10800017 	ldw	r2,0(r2)
    e9b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e9b4:	e13ffe17 	ldw	r4,-8(fp)
    e9b8:	00004340 	call	434 <strlen>
    e9bc:	10800044 	addi	r2,r2,1
    e9c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9c4:	00000d06 	br	e9fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e9c8:	e0bffc17 	ldw	r2,-16(fp)
    e9cc:	10800217 	ldw	r2,8(r2)
    e9d0:	e0fffd17 	ldw	r3,-12(fp)
    e9d4:	180d883a 	mov	r6,r3
    e9d8:	e17ffe17 	ldw	r5,-8(fp)
    e9dc:	1009883a 	mov	r4,r2
    e9e0:	000f4540 	call	f454 <memcmp>
    e9e4:	1000021e 	bne	r2,zero,e9f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e9e8:	e0bffc17 	ldw	r2,-16(fp)
    e9ec:	00000706 	br	ea0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e9f0:	e0bffc17 	ldw	r2,-16(fp)
    e9f4:	10800017 	ldw	r2,0(r2)
    e9f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9fc:	e0fffc17 	ldw	r3,-16(fp)
    ea00:	e0bfff17 	ldw	r2,-4(fp)
    ea04:	18bff01e 	bne	r3,r2,e9c8 <__alt_data_end+0xf800e9c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ea08:	0005883a 	mov	r2,zero
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	dfc00117 	ldw	ra,4(sp)
    ea14:	df000017 	ldw	fp,0(sp)
    ea18:	dec00204 	addi	sp,sp,8
    ea1c:	f800283a 	ret

0000ea20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ea20:	defffe04 	addi	sp,sp,-8
    ea24:	dfc00115 	stw	ra,4(sp)
    ea28:	df000015 	stw	fp,0(sp)
    ea2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ea30:	01440004 	movi	r5,4096
    ea34:	0009883a 	mov	r4,zero
    ea38:	000f2dc0 	call	f2dc <alt_icache_flush>
#endif
}
    ea3c:	0001883a 	nop
    ea40:	e037883a 	mov	sp,fp
    ea44:	dfc00117 	ldw	ra,4(sp)
    ea48:	df000017 	ldw	fp,0(sp)
    ea4c:	dec00204 	addi	sp,sp,8
    ea50:	f800283a 	ret

0000ea54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ea54:	defff904 	addi	sp,sp,-28
    ea58:	dfc00615 	stw	ra,24(sp)
    ea5c:	df000515 	stw	fp,20(sp)
    ea60:	df000504 	addi	fp,sp,20
    ea64:	e13ffc15 	stw	r4,-16(fp)
    ea68:	e17ffd15 	stw	r5,-12(fp)
    ea6c:	e1bffe15 	stw	r6,-8(fp)
    ea70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ea74:	e1bfff17 	ldw	r6,-4(fp)
    ea78:	e17ffe17 	ldw	r5,-8(fp)
    ea7c:	e13ffd17 	ldw	r4,-12(fp)
    ea80:	000ee140 	call	ee14 <open>
    ea84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ea88:	e0bffb17 	ldw	r2,-20(fp)
    ea8c:	10001c16 	blt	r2,zero,eb00 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ea90:	00800074 	movhi	r2,1
    ea94:	1080f404 	addi	r2,r2,976
    ea98:	e0fffb17 	ldw	r3,-20(fp)
    ea9c:	18c00324 	muli	r3,r3,12
    eaa0:	10c5883a 	add	r2,r2,r3
    eaa4:	10c00017 	ldw	r3,0(r2)
    eaa8:	e0bffc17 	ldw	r2,-16(fp)
    eaac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    eab0:	00800074 	movhi	r2,1
    eab4:	1080f404 	addi	r2,r2,976
    eab8:	e0fffb17 	ldw	r3,-20(fp)
    eabc:	18c00324 	muli	r3,r3,12
    eac0:	10c5883a 	add	r2,r2,r3
    eac4:	10800104 	addi	r2,r2,4
    eac8:	10c00017 	ldw	r3,0(r2)
    eacc:	e0bffc17 	ldw	r2,-16(fp)
    ead0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    ead4:	00800074 	movhi	r2,1
    ead8:	1080f404 	addi	r2,r2,976
    eadc:	e0fffb17 	ldw	r3,-20(fp)
    eae0:	18c00324 	muli	r3,r3,12
    eae4:	10c5883a 	add	r2,r2,r3
    eae8:	10800204 	addi	r2,r2,8
    eaec:	10c00017 	ldw	r3,0(r2)
    eaf0:	e0bffc17 	ldw	r2,-16(fp)
    eaf4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    eaf8:	e13ffb17 	ldw	r4,-20(fp)
    eafc:	000d3100 	call	d310 <alt_release_fd>
  }
} 
    eb00:	0001883a 	nop
    eb04:	e037883a 	mov	sp,fp
    eb08:	dfc00117 	ldw	ra,4(sp)
    eb0c:	df000017 	ldw	fp,0(sp)
    eb10:	dec00204 	addi	sp,sp,8
    eb14:	f800283a 	ret

0000eb18 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    eb18:	defffb04 	addi	sp,sp,-20
    eb1c:	dfc00415 	stw	ra,16(sp)
    eb20:	df000315 	stw	fp,12(sp)
    eb24:	df000304 	addi	fp,sp,12
    eb28:	e13ffd15 	stw	r4,-12(fp)
    eb2c:	e17ffe15 	stw	r5,-8(fp)
    eb30:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    eb34:	01c07fc4 	movi	r7,511
    eb38:	01800044 	movi	r6,1
    eb3c:	e17ffd17 	ldw	r5,-12(fp)
    eb40:	01000074 	movhi	r4,1
    eb44:	2100f704 	addi	r4,r4,988
    eb48:	000ea540 	call	ea54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    eb4c:	01c07fc4 	movi	r7,511
    eb50:	000d883a 	mov	r6,zero
    eb54:	e17ffe17 	ldw	r5,-8(fp)
    eb58:	01000074 	movhi	r4,1
    eb5c:	2100f404 	addi	r4,r4,976
    eb60:	000ea540 	call	ea54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    eb64:	01c07fc4 	movi	r7,511
    eb68:	01800044 	movi	r6,1
    eb6c:	e17fff17 	ldw	r5,-4(fp)
    eb70:	01000074 	movhi	r4,1
    eb74:	2100fa04 	addi	r4,r4,1000
    eb78:	000ea540 	call	ea54 <alt_open_fd>
}  
    eb7c:	0001883a 	nop
    eb80:	e037883a 	mov	sp,fp
    eb84:	dfc00117 	ldw	ra,4(sp)
    eb88:	df000017 	ldw	fp,0(sp)
    eb8c:	dec00204 	addi	sp,sp,8
    eb90:	f800283a 	ret

0000eb94 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    eb94:	defff004 	addi	sp,sp,-64
    eb98:	df000f15 	stw	fp,60(sp)
    eb9c:	df000f04 	addi	fp,sp,60
    eba0:	e13ffd15 	stw	r4,-12(fp)
    eba4:	e17ffe15 	stw	r5,-8(fp)
    eba8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
    ebac:	00bffa84 	movi	r2,-22
    ebb0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ebb4:	e0bffd17 	ldw	r2,-12(fp)
    ebb8:	10800828 	cmpgeui	r2,r2,32
    ebbc:	1000501e 	bne	r2,zero,ed00 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebc0:	0005303a 	rdctl	r2,status
    ebc4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebc8:	e0fff617 	ldw	r3,-40(fp)
    ebcc:	00bfff84 	movi	r2,-2
    ebd0:	1884703a 	and	r2,r3,r2
    ebd4:	1001703a 	wrctl	status,r2
  
  return context;
    ebd8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    ebdc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
    ebe0:	00800074 	movhi	r2,1
    ebe4:	108cab04 	addi	r2,r2,12972
    ebe8:	e0fffd17 	ldw	r3,-12(fp)
    ebec:	180690fa 	slli	r3,r3,3
    ebf0:	10c5883a 	add	r2,r2,r3
    ebf4:	e0ffff17 	ldw	r3,-4(fp)
    ebf8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
    ebfc:	00800074 	movhi	r2,1
    ec00:	108cab04 	addi	r2,r2,12972
    ec04:	e0fffd17 	ldw	r3,-12(fp)
    ec08:	180690fa 	slli	r3,r3,3
    ec0c:	10c5883a 	add	r2,r2,r3
    ec10:	10800104 	addi	r2,r2,4
    ec14:	e0fffe17 	ldw	r3,-8(fp)
    ec18:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    ec1c:	e0bfff17 	ldw	r2,-4(fp)
    ec20:	10001926 	beq	r2,zero,ec88 <alt_irq_register+0xf4>
    ec24:	e0bffd17 	ldw	r2,-12(fp)
    ec28:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec2c:	0005303a 	rdctl	r2,status
    ec30:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec34:	e0fff717 	ldw	r3,-36(fp)
    ec38:	00bfff84 	movi	r2,-2
    ec3c:	1884703a 	and	r2,r3,r2
    ec40:	1001703a 	wrctl	status,r2
  
  return context;
    ec44:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ec48:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    ec4c:	00c00044 	movi	r3,1
    ec50:	e0bff217 	ldw	r2,-56(fp)
    ec54:	1884983a 	sll	r2,r3,r2
    ec58:	1007883a 	mov	r3,r2
    ec5c:	d0a70317 	ldw	r2,-25588(gp)
    ec60:	1884b03a 	or	r2,r3,r2
    ec64:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ec68:	d0a70317 	ldw	r2,-25588(gp)
    ec6c:	100170fa 	wrctl	ienable,r2
    ec70:	e0bff817 	ldw	r2,-32(fp)
    ec74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec78:	e0bff917 	ldw	r2,-28(fp)
    ec7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ec80:	0005883a 	mov	r2,zero
    ec84:	00001906 	br	ecec <alt_irq_register+0x158>
    ec88:	e0bffd17 	ldw	r2,-12(fp)
    ec8c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec90:	0005303a 	rdctl	r2,status
    ec94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec98:	e0fffa17 	ldw	r3,-24(fp)
    ec9c:	00bfff84 	movi	r2,-2
    eca0:	1884703a 	and	r2,r3,r2
    eca4:	1001703a 	wrctl	status,r2
  
  return context;
    eca8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    ecac:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
    ecb0:	00c00044 	movi	r3,1
    ecb4:	e0bff417 	ldw	r2,-48(fp)
    ecb8:	1884983a 	sll	r2,r3,r2
    ecbc:	0084303a 	nor	r2,zero,r2
    ecc0:	1007883a 	mov	r3,r2
    ecc4:	d0a70317 	ldw	r2,-25588(gp)
    ecc8:	1884703a 	and	r2,r3,r2
    eccc:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ecd0:	d0a70317 	ldw	r2,-25588(gp)
    ecd4:	100170fa 	wrctl	ienable,r2
    ecd8:	e0bffb17 	ldw	r2,-20(fp)
    ecdc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ece0:	e0bffc17 	ldw	r2,-16(fp)
    ece4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ece8:	0005883a 	mov	r2,zero
    ecec:	e0bff115 	stw	r2,-60(fp)
    ecf0:	e0bff317 	ldw	r2,-52(fp)
    ecf4:	e0bff515 	stw	r2,-44(fp)
    ecf8:	e0bff517 	ldw	r2,-44(fp)
    ecfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    ed00:	e0bff117 	ldw	r2,-60(fp)
}
    ed04:	e037883a 	mov	sp,fp
    ed08:	df000017 	ldw	fp,0(sp)
    ed0c:	dec00104 	addi	sp,sp,4
    ed10:	f800283a 	ret

0000ed14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ed14:	defffe04 	addi	sp,sp,-8
    ed18:	dfc00115 	stw	ra,4(sp)
    ed1c:	df000015 	stw	fp,0(sp)
    ed20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ed24:	d0a00b17 	ldw	r2,-32724(gp)
    ed28:	10000326 	beq	r2,zero,ed38 <alt_get_errno+0x24>
    ed2c:	d0a00b17 	ldw	r2,-32724(gp)
    ed30:	103ee83a 	callr	r2
    ed34:	00000106 	br	ed3c <alt_get_errno+0x28>
    ed38:	d0a6ff04 	addi	r2,gp,-25604
}
    ed3c:	e037883a 	mov	sp,fp
    ed40:	dfc00117 	ldw	ra,4(sp)
    ed44:	df000017 	ldw	fp,0(sp)
    ed48:	dec00204 	addi	sp,sp,8
    ed4c:	f800283a 	ret

0000ed50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    ed50:	defffd04 	addi	sp,sp,-12
    ed54:	df000215 	stw	fp,8(sp)
    ed58:	df000204 	addi	fp,sp,8
    ed5c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    ed60:	e0bfff17 	ldw	r2,-4(fp)
    ed64:	10800217 	ldw	r2,8(r2)
    ed68:	10d00034 	orhi	r3,r2,16384
    ed6c:	e0bfff17 	ldw	r2,-4(fp)
    ed70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ed74:	e03ffe15 	stw	zero,-8(fp)
    ed78:	00001d06 	br	edf0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ed7c:	00800074 	movhi	r2,1
    ed80:	1080f404 	addi	r2,r2,976
    ed84:	e0fffe17 	ldw	r3,-8(fp)
    ed88:	18c00324 	muli	r3,r3,12
    ed8c:	10c5883a 	add	r2,r2,r3
    ed90:	10c00017 	ldw	r3,0(r2)
    ed94:	e0bfff17 	ldw	r2,-4(fp)
    ed98:	10800017 	ldw	r2,0(r2)
    ed9c:	1880111e 	bne	r3,r2,ede4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    eda0:	00800074 	movhi	r2,1
    eda4:	1080f404 	addi	r2,r2,976
    eda8:	e0fffe17 	ldw	r3,-8(fp)
    edac:	18c00324 	muli	r3,r3,12
    edb0:	10c5883a 	add	r2,r2,r3
    edb4:	10800204 	addi	r2,r2,8
    edb8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    edbc:	1000090e 	bge	r2,zero,ede4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    edc0:	e0bffe17 	ldw	r2,-8(fp)
    edc4:	10c00324 	muli	r3,r2,12
    edc8:	00800074 	movhi	r2,1
    edcc:	1080f404 	addi	r2,r2,976
    edd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    edd4:	e0bfff17 	ldw	r2,-4(fp)
    edd8:	18800226 	beq	r3,r2,ede4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    eddc:	00bffcc4 	movi	r2,-13
    ede0:	00000806 	br	ee04 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ede4:	e0bffe17 	ldw	r2,-8(fp)
    ede8:	10800044 	addi	r2,r2,1
    edec:	e0bffe15 	stw	r2,-8(fp)
    edf0:	d0a00a17 	ldw	r2,-32728(gp)
    edf4:	1007883a 	mov	r3,r2
    edf8:	e0bffe17 	ldw	r2,-8(fp)
    edfc:	18bfdf2e 	bgeu	r3,r2,ed7c <__alt_data_end+0xf800ed7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ee00:	0005883a 	mov	r2,zero
}
    ee04:	e037883a 	mov	sp,fp
    ee08:	df000017 	ldw	fp,0(sp)
    ee0c:	dec00104 	addi	sp,sp,4
    ee10:	f800283a 	ret

0000ee14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ee14:	defff604 	addi	sp,sp,-40
    ee18:	dfc00915 	stw	ra,36(sp)
    ee1c:	df000815 	stw	fp,32(sp)
    ee20:	df000804 	addi	fp,sp,32
    ee24:	e13ffd15 	stw	r4,-12(fp)
    ee28:	e17ffe15 	stw	r5,-8(fp)
    ee2c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    ee30:	00bfffc4 	movi	r2,-1
    ee34:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    ee38:	00bffb44 	movi	r2,-19
    ee3c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    ee40:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    ee44:	d1600804 	addi	r5,gp,-32736
    ee48:	e13ffd17 	ldw	r4,-12(fp)
    ee4c:	000e9900 	call	e990 <alt_find_dev>
    ee50:	e0bff815 	stw	r2,-32(fp)
    ee54:	e0bff817 	ldw	r2,-32(fp)
    ee58:	1000051e 	bne	r2,zero,ee70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    ee5c:	e13ffd17 	ldw	r4,-12(fp)
    ee60:	000f1300 	call	f130 <alt_find_file>
    ee64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    ee68:	00800044 	movi	r2,1
    ee6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    ee70:	e0bff817 	ldw	r2,-32(fp)
    ee74:	10002926 	beq	r2,zero,ef1c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    ee78:	e13ff817 	ldw	r4,-32(fp)
    ee7c:	000f2380 	call	f238 <alt_get_fd>
    ee80:	e0bff915 	stw	r2,-28(fp)
    ee84:	e0bff917 	ldw	r2,-28(fp)
    ee88:	1000030e 	bge	r2,zero,ee98 <open+0x84>
    {
      status = index;
    ee8c:	e0bff917 	ldw	r2,-28(fp)
    ee90:	e0bffa15 	stw	r2,-24(fp)
    ee94:	00002306 	br	ef24 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    ee98:	e0bff917 	ldw	r2,-28(fp)
    ee9c:	10c00324 	muli	r3,r2,12
    eea0:	00800074 	movhi	r2,1
    eea4:	1080f404 	addi	r2,r2,976
    eea8:	1885883a 	add	r2,r3,r2
    eeac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    eeb0:	e0fffe17 	ldw	r3,-8(fp)
    eeb4:	00900034 	movhi	r2,16384
    eeb8:	10bfffc4 	addi	r2,r2,-1
    eebc:	1886703a 	and	r3,r3,r2
    eec0:	e0bffc17 	ldw	r2,-16(fp)
    eec4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    eec8:	e0bffb17 	ldw	r2,-20(fp)
    eecc:	1000051e 	bne	r2,zero,eee4 <open+0xd0>
    eed0:	e13ffc17 	ldw	r4,-16(fp)
    eed4:	000ed500 	call	ed50 <alt_file_locked>
    eed8:	e0bffa15 	stw	r2,-24(fp)
    eedc:	e0bffa17 	ldw	r2,-24(fp)
    eee0:	10001016 	blt	r2,zero,ef24 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    eee4:	e0bff817 	ldw	r2,-32(fp)
    eee8:	10800317 	ldw	r2,12(r2)
    eeec:	10000826 	beq	r2,zero,ef10 <open+0xfc>
    eef0:	e0bff817 	ldw	r2,-32(fp)
    eef4:	10800317 	ldw	r2,12(r2)
    eef8:	e1ffff17 	ldw	r7,-4(fp)
    eefc:	e1bffe17 	ldw	r6,-8(fp)
    ef00:	e17ffd17 	ldw	r5,-12(fp)
    ef04:	e13ffc17 	ldw	r4,-16(fp)
    ef08:	103ee83a 	callr	r2
    ef0c:	00000106 	br	ef14 <open+0x100>
    ef10:	0005883a 	mov	r2,zero
    ef14:	e0bffa15 	stw	r2,-24(fp)
    ef18:	00000206 	br	ef24 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ef1c:	00bffb44 	movi	r2,-19
    ef20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ef24:	e0bffa17 	ldw	r2,-24(fp)
    ef28:	1000090e 	bge	r2,zero,ef50 <open+0x13c>
  {
    alt_release_fd (index);  
    ef2c:	e13ff917 	ldw	r4,-28(fp)
    ef30:	000d3100 	call	d310 <alt_release_fd>
    ALT_ERRNO = -status;
    ef34:	000ed140 	call	ed14 <alt_get_errno>
    ef38:	1007883a 	mov	r3,r2
    ef3c:	e0bffa17 	ldw	r2,-24(fp)
    ef40:	0085c83a 	sub	r2,zero,r2
    ef44:	18800015 	stw	r2,0(r3)
    return -1;
    ef48:	00bfffc4 	movi	r2,-1
    ef4c:	00000106 	br	ef54 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    ef50:	e0bff917 	ldw	r2,-28(fp)
}
    ef54:	e037883a 	mov	sp,fp
    ef58:	dfc00117 	ldw	ra,4(sp)
    ef5c:	df000017 	ldw	fp,0(sp)
    ef60:	dec00204 	addi	sp,sp,8
    ef64:	f800283a 	ret

0000ef68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ef68:	defffa04 	addi	sp,sp,-24
    ef6c:	df000515 	stw	fp,20(sp)
    ef70:	df000504 	addi	fp,sp,20
    ef74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef78:	0005303a 	rdctl	r2,status
    ef7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef80:	e0fffc17 	ldw	r3,-16(fp)
    ef84:	00bfff84 	movi	r2,-2
    ef88:	1884703a 	and	r2,r3,r2
    ef8c:	1001703a 	wrctl	status,r2
  
  return context;
    ef90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ef94:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    ef98:	e0bfff17 	ldw	r2,-4(fp)
    ef9c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    efa0:	e0bffd17 	ldw	r2,-12(fp)
    efa4:	10800017 	ldw	r2,0(r2)
    efa8:	e0fffd17 	ldw	r3,-12(fp)
    efac:	18c00117 	ldw	r3,4(r3)
    efb0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    efb4:	e0bffd17 	ldw	r2,-12(fp)
    efb8:	10800117 	ldw	r2,4(r2)
    efbc:	e0fffd17 	ldw	r3,-12(fp)
    efc0:	18c00017 	ldw	r3,0(r3)
    efc4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    efc8:	e0bffd17 	ldw	r2,-12(fp)
    efcc:	e0fffd17 	ldw	r3,-12(fp)
    efd0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    efd4:	e0bffd17 	ldw	r2,-12(fp)
    efd8:	e0fffd17 	ldw	r3,-12(fp)
    efdc:	10c00015 	stw	r3,0(r2)
    efe0:	e0bffb17 	ldw	r2,-20(fp)
    efe4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    efe8:	e0bffe17 	ldw	r2,-8(fp)
    efec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    eff0:	0001883a 	nop
    eff4:	e037883a 	mov	sp,fp
    eff8:	df000017 	ldw	fp,0(sp)
    effc:	dec00104 	addi	sp,sp,4
    f000:	f800283a 	ret

0000f004 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f004:	defffb04 	addi	sp,sp,-20
    f008:	dfc00415 	stw	ra,16(sp)
    f00c:	df000315 	stw	fp,12(sp)
    f010:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f014:	d0a00e17 	ldw	r2,-32712(gp)
    f018:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f01c:	d0a70517 	ldw	r2,-25580(gp)
    f020:	10800044 	addi	r2,r2,1
    f024:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f028:	00002e06 	br	f0e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f02c:	e0bffd17 	ldw	r2,-12(fp)
    f030:	10800017 	ldw	r2,0(r2)
    f034:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f038:	e0bffd17 	ldw	r2,-12(fp)
    f03c:	10800403 	ldbu	r2,16(r2)
    f040:	10803fcc 	andi	r2,r2,255
    f044:	10000426 	beq	r2,zero,f058 <alt_tick+0x54>
    f048:	d0a70517 	ldw	r2,-25580(gp)
    f04c:	1000021e 	bne	r2,zero,f058 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f050:	e0bffd17 	ldw	r2,-12(fp)
    f054:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f058:	e0bffd17 	ldw	r2,-12(fp)
    f05c:	10800217 	ldw	r2,8(r2)
    f060:	d0e70517 	ldw	r3,-25580(gp)
    f064:	18801d36 	bltu	r3,r2,f0dc <alt_tick+0xd8>
    f068:	e0bffd17 	ldw	r2,-12(fp)
    f06c:	10800403 	ldbu	r2,16(r2)
    f070:	10803fcc 	andi	r2,r2,255
    f074:	1000191e 	bne	r2,zero,f0dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f078:	e0bffd17 	ldw	r2,-12(fp)
    f07c:	10800317 	ldw	r2,12(r2)
    f080:	e0fffd17 	ldw	r3,-12(fp)
    f084:	18c00517 	ldw	r3,20(r3)
    f088:	1809883a 	mov	r4,r3
    f08c:	103ee83a 	callr	r2
    f090:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f094:	e0bfff17 	ldw	r2,-4(fp)
    f098:	1000031e 	bne	r2,zero,f0a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f09c:	e13ffd17 	ldw	r4,-12(fp)
    f0a0:	000ef680 	call	ef68 <alt_alarm_stop>
    f0a4:	00000d06 	br	f0dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f0a8:	e0bffd17 	ldw	r2,-12(fp)
    f0ac:	10c00217 	ldw	r3,8(r2)
    f0b0:	e0bfff17 	ldw	r2,-4(fp)
    f0b4:	1887883a 	add	r3,r3,r2
    f0b8:	e0bffd17 	ldw	r2,-12(fp)
    f0bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f0c0:	e0bffd17 	ldw	r2,-12(fp)
    f0c4:	10c00217 	ldw	r3,8(r2)
    f0c8:	d0a70517 	ldw	r2,-25580(gp)
    f0cc:	1880032e 	bgeu	r3,r2,f0dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f0d0:	e0bffd17 	ldw	r2,-12(fp)
    f0d4:	00c00044 	movi	r3,1
    f0d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f0dc:	e0bffe17 	ldw	r2,-8(fp)
    f0e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f0e4:	e0fffd17 	ldw	r3,-12(fp)
    f0e8:	d0a00e04 	addi	r2,gp,-32712
    f0ec:	18bfcf1e 	bne	r3,r2,f02c <__alt_data_end+0xf800f02c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f0f0:	0001883a 	nop
}
    f0f4:	0001883a 	nop
    f0f8:	e037883a 	mov	sp,fp
    f0fc:	dfc00117 	ldw	ra,4(sp)
    f100:	df000017 	ldw	fp,0(sp)
    f104:	dec00204 	addi	sp,sp,8
    f108:	f800283a 	ret

0000f10c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f10c:	deffff04 	addi	sp,sp,-4
    f110:	df000015 	stw	fp,0(sp)
    f114:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f118:	000170fa 	wrctl	ienable,zero
}
    f11c:	0001883a 	nop
    f120:	e037883a 	mov	sp,fp
    f124:	df000017 	ldw	fp,0(sp)
    f128:	dec00104 	addi	sp,sp,4
    f12c:	f800283a 	ret

0000f130 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f130:	defffb04 	addi	sp,sp,-20
    f134:	dfc00415 	stw	ra,16(sp)
    f138:	df000315 	stw	fp,12(sp)
    f13c:	df000304 	addi	fp,sp,12
    f140:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f144:	d0a00617 	ldw	r2,-32744(gp)
    f148:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f14c:	00003106 	br	f214 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f150:	e0bffd17 	ldw	r2,-12(fp)
    f154:	10800217 	ldw	r2,8(r2)
    f158:	1009883a 	mov	r4,r2
    f15c:	00004340 	call	434 <strlen>
    f160:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f164:	e0bffd17 	ldw	r2,-12(fp)
    f168:	10c00217 	ldw	r3,8(r2)
    f16c:	e0bffe17 	ldw	r2,-8(fp)
    f170:	10bfffc4 	addi	r2,r2,-1
    f174:	1885883a 	add	r2,r3,r2
    f178:	10800003 	ldbu	r2,0(r2)
    f17c:	10803fcc 	andi	r2,r2,255
    f180:	1080201c 	xori	r2,r2,128
    f184:	10bfe004 	addi	r2,r2,-128
    f188:	10800bd8 	cmpnei	r2,r2,47
    f18c:	1000031e 	bne	r2,zero,f19c <alt_find_file+0x6c>
    {
      len -= 1;
    f190:	e0bffe17 	ldw	r2,-8(fp)
    f194:	10bfffc4 	addi	r2,r2,-1
    f198:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f19c:	e0bffe17 	ldw	r2,-8(fp)
    f1a0:	e0ffff17 	ldw	r3,-4(fp)
    f1a4:	1885883a 	add	r2,r3,r2
    f1a8:	10800003 	ldbu	r2,0(r2)
    f1ac:	10803fcc 	andi	r2,r2,255
    f1b0:	1080201c 	xori	r2,r2,128
    f1b4:	10bfe004 	addi	r2,r2,-128
    f1b8:	10800be0 	cmpeqi	r2,r2,47
    f1bc:	1000081e 	bne	r2,zero,f1e0 <alt_find_file+0xb0>
    f1c0:	e0bffe17 	ldw	r2,-8(fp)
    f1c4:	e0ffff17 	ldw	r3,-4(fp)
    f1c8:	1885883a 	add	r2,r3,r2
    f1cc:	10800003 	ldbu	r2,0(r2)
    f1d0:	10803fcc 	andi	r2,r2,255
    f1d4:	1080201c 	xori	r2,r2,128
    f1d8:	10bfe004 	addi	r2,r2,-128
    f1dc:	10000a1e 	bne	r2,zero,f208 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f1e0:	e0bffd17 	ldw	r2,-12(fp)
    f1e4:	10800217 	ldw	r2,8(r2)
    f1e8:	e0fffe17 	ldw	r3,-8(fp)
    f1ec:	180d883a 	mov	r6,r3
    f1f0:	e17fff17 	ldw	r5,-4(fp)
    f1f4:	1009883a 	mov	r4,r2
    f1f8:	000f4540 	call	f454 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f1fc:	1000021e 	bne	r2,zero,f208 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f200:	e0bffd17 	ldw	r2,-12(fp)
    f204:	00000706 	br	f224 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	10800017 	ldw	r2,0(r2)
    f210:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f214:	e0fffd17 	ldw	r3,-12(fp)
    f218:	d0a00604 	addi	r2,gp,-32744
    f21c:	18bfcc1e 	bne	r3,r2,f150 <__alt_data_end+0xf800f150>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f220:	0005883a 	mov	r2,zero
}
    f224:	e037883a 	mov	sp,fp
    f228:	dfc00117 	ldw	ra,4(sp)
    f22c:	df000017 	ldw	fp,0(sp)
    f230:	dec00204 	addi	sp,sp,8
    f234:	f800283a 	ret

0000f238 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f238:	defffc04 	addi	sp,sp,-16
    f23c:	df000315 	stw	fp,12(sp)
    f240:	df000304 	addi	fp,sp,12
    f244:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f248:	00bffa04 	movi	r2,-24
    f24c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f250:	e03ffd15 	stw	zero,-12(fp)
    f254:	00001906 	br	f2bc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    f258:	00800074 	movhi	r2,1
    f25c:	1080f404 	addi	r2,r2,976
    f260:	e0fffd17 	ldw	r3,-12(fp)
    f264:	18c00324 	muli	r3,r3,12
    f268:	10c5883a 	add	r2,r2,r3
    f26c:	10800017 	ldw	r2,0(r2)
    f270:	10000f1e 	bne	r2,zero,f2b0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    f274:	00800074 	movhi	r2,1
    f278:	1080f404 	addi	r2,r2,976
    f27c:	e0fffd17 	ldw	r3,-12(fp)
    f280:	18c00324 	muli	r3,r3,12
    f284:	10c5883a 	add	r2,r2,r3
    f288:	e0ffff17 	ldw	r3,-4(fp)
    f28c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f290:	d0e00a17 	ldw	r3,-32728(gp)
    f294:	e0bffd17 	ldw	r2,-12(fp)
    f298:	1880020e 	bge	r3,r2,f2a4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    f29c:	e0bffd17 	ldw	r2,-12(fp)
    f2a0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f2a4:	e0bffd17 	ldw	r2,-12(fp)
    f2a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f2ac:	00000606 	br	f2c8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f2b0:	e0bffd17 	ldw	r2,-12(fp)
    f2b4:	10800044 	addi	r2,r2,1
    f2b8:	e0bffd15 	stw	r2,-12(fp)
    f2bc:	e0bffd17 	ldw	r2,-12(fp)
    f2c0:	10800810 	cmplti	r2,r2,32
    f2c4:	103fe41e 	bne	r2,zero,f258 <__alt_data_end+0xf800f258>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f2c8:	e0bffe17 	ldw	r2,-8(fp)
}
    f2cc:	e037883a 	mov	sp,fp
    f2d0:	df000017 	ldw	fp,0(sp)
    f2d4:	dec00104 	addi	sp,sp,4
    f2d8:	f800283a 	ret

0000f2dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f2dc:	defffb04 	addi	sp,sp,-20
    f2e0:	df000415 	stw	fp,16(sp)
    f2e4:	df000404 	addi	fp,sp,16
    f2e8:	e13ffe15 	stw	r4,-8(fp)
    f2ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f2f0:	e0bfff17 	ldw	r2,-4(fp)
    f2f4:	10840070 	cmpltui	r2,r2,4097
    f2f8:	1000021e 	bne	r2,zero,f304 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f2fc:	00840004 	movi	r2,4096
    f300:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f304:	e0fffe17 	ldw	r3,-8(fp)
    f308:	e0bfff17 	ldw	r2,-4(fp)
    f30c:	1885883a 	add	r2,r3,r2
    f310:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f314:	e0bffe17 	ldw	r2,-8(fp)
    f318:	e0bffc15 	stw	r2,-16(fp)
    f31c:	00000506 	br	f334 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f320:	e0bffc17 	ldw	r2,-16(fp)
    f324:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f328:	e0bffc17 	ldw	r2,-16(fp)
    f32c:	10800804 	addi	r2,r2,32
    f330:	e0bffc15 	stw	r2,-16(fp)
    f334:	e0fffc17 	ldw	r3,-16(fp)
    f338:	e0bffd17 	ldw	r2,-12(fp)
    f33c:	18bff836 	bltu	r3,r2,f320 <__alt_data_end+0xf800f320>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f340:	e0bffe17 	ldw	r2,-8(fp)
    f344:	108007cc 	andi	r2,r2,31
    f348:	10000226 	beq	r2,zero,f354 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f34c:	e0bffc17 	ldw	r2,-16(fp)
    f350:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f354:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f358:	0001883a 	nop
    f35c:	e037883a 	mov	sp,fp
    f360:	df000017 	ldw	fp,0(sp)
    f364:	dec00104 	addi	sp,sp,4
    f368:	f800283a 	ret

0000f36c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f36c:	defffe04 	addi	sp,sp,-8
    f370:	df000115 	stw	fp,4(sp)
    f374:	df000104 	addi	fp,sp,4
    f378:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f37c:	e0bfff17 	ldw	r2,-4(fp)
    f380:	10bffe84 	addi	r2,r2,-6
    f384:	10c00428 	cmpgeui	r3,r2,16
    f388:	18001a1e 	bne	r3,zero,f3f4 <alt_exception_cause_generated_bad_addr+0x88>
    f38c:	100690ba 	slli	r3,r2,2
    f390:	00800074 	movhi	r2,1
    f394:	10bce904 	addi	r2,r2,-3164
    f398:	1885883a 	add	r2,r3,r2
    f39c:	10800017 	ldw	r2,0(r2)
    f3a0:	1000683a 	jmp	r2
    f3a4:	0000f3e4 	muli	zero,zero,975
    f3a8:	0000f3e4 	muli	zero,zero,975
    f3ac:	0000f3f4 	movhi	zero,975
    f3b0:	0000f3f4 	movhi	zero,975
    f3b4:	0000f3f4 	movhi	zero,975
    f3b8:	0000f3e4 	muli	zero,zero,975
    f3bc:	0000f3ec 	andhi	zero,zero,975
    f3c0:	0000f3f4 	movhi	zero,975
    f3c4:	0000f3e4 	muli	zero,zero,975
    f3c8:	0000f3e4 	muli	zero,zero,975
    f3cc:	0000f3f4 	movhi	zero,975
    f3d0:	0000f3e4 	muli	zero,zero,975
    f3d4:	0000f3ec 	andhi	zero,zero,975
    f3d8:	0000f3f4 	movhi	zero,975
    f3dc:	0000f3f4 	movhi	zero,975
    f3e0:	0000f3e4 	muli	zero,zero,975
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f3e4:	00800044 	movi	r2,1
    f3e8:	00000306 	br	f3f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f3ec:	0005883a 	mov	r2,zero
    f3f0:	00000106 	br	f3f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f3f4:	0005883a 	mov	r2,zero
  }
}
    f3f8:	e037883a 	mov	sp,fp
    f3fc:	df000017 	ldw	fp,0(sp)
    f400:	dec00104 	addi	sp,sp,4
    f404:	f800283a 	ret

0000f408 <atexit>:
    f408:	200b883a 	mov	r5,r4
    f40c:	000f883a 	mov	r7,zero
    f410:	000d883a 	mov	r6,zero
    f414:	0009883a 	mov	r4,zero
    f418:	000f4d01 	jmpi	f4d0 <__register_exitproc>

0000f41c <exit>:
    f41c:	defffe04 	addi	sp,sp,-8
    f420:	000b883a 	mov	r5,zero
    f424:	dc000015 	stw	r16,0(sp)
    f428:	dfc00115 	stw	ra,4(sp)
    f42c:	2021883a 	mov	r16,r4
    f430:	000f5e80 	call	f5e8 <__call_exitprocs>
    f434:	00800074 	movhi	r2,1
    f438:	10859a04 	addi	r2,r2,5736
    f43c:	11000017 	ldw	r4,0(r2)
    f440:	20800f17 	ldw	r2,60(r4)
    f444:	10000126 	beq	r2,zero,f44c <exit+0x30>
    f448:	103ee83a 	callr	r2
    f44c:	8009883a 	mov	r4,r16
    f450:	000f7680 	call	f768 <_exit>

0000f454 <memcmp>:
    f454:	01c000c4 	movi	r7,3
    f458:	3980192e 	bgeu	r7,r6,f4c0 <memcmp+0x6c>
    f45c:	2144b03a 	or	r2,r4,r5
    f460:	11c4703a 	and	r2,r2,r7
    f464:	10000f26 	beq	r2,zero,f4a4 <memcmp+0x50>
    f468:	20800003 	ldbu	r2,0(r4)
    f46c:	28c00003 	ldbu	r3,0(r5)
    f470:	10c0151e 	bne	r2,r3,f4c8 <memcmp+0x74>
    f474:	31bfff84 	addi	r6,r6,-2
    f478:	01ffffc4 	movi	r7,-1
    f47c:	00000406 	br	f490 <memcmp+0x3c>
    f480:	20800003 	ldbu	r2,0(r4)
    f484:	28c00003 	ldbu	r3,0(r5)
    f488:	31bfffc4 	addi	r6,r6,-1
    f48c:	10c00e1e 	bne	r2,r3,f4c8 <memcmp+0x74>
    f490:	21000044 	addi	r4,r4,1
    f494:	29400044 	addi	r5,r5,1
    f498:	31fff91e 	bne	r6,r7,f480 <__alt_data_end+0xf800f480>
    f49c:	0005883a 	mov	r2,zero
    f4a0:	f800283a 	ret
    f4a4:	20c00017 	ldw	r3,0(r4)
    f4a8:	28800017 	ldw	r2,0(r5)
    f4ac:	18bfee1e 	bne	r3,r2,f468 <__alt_data_end+0xf800f468>
    f4b0:	31bfff04 	addi	r6,r6,-4
    f4b4:	21000104 	addi	r4,r4,4
    f4b8:	29400104 	addi	r5,r5,4
    f4bc:	39bff936 	bltu	r7,r6,f4a4 <__alt_data_end+0xf800f4a4>
    f4c0:	303fe91e 	bne	r6,zero,f468 <__alt_data_end+0xf800f468>
    f4c4:	003ff506 	br	f49c <__alt_data_end+0xf800f49c>
    f4c8:	10c5c83a 	sub	r2,r2,r3
    f4cc:	f800283a 	ret

0000f4d0 <__register_exitproc>:
    f4d0:	defffa04 	addi	sp,sp,-24
    f4d4:	dc000315 	stw	r16,12(sp)
    f4d8:	04000074 	movhi	r16,1
    f4dc:	84059a04 	addi	r16,r16,5736
    f4e0:	80c00017 	ldw	r3,0(r16)
    f4e4:	dc400415 	stw	r17,16(sp)
    f4e8:	dfc00515 	stw	ra,20(sp)
    f4ec:	18805217 	ldw	r2,328(r3)
    f4f0:	2023883a 	mov	r17,r4
    f4f4:	10003726 	beq	r2,zero,f5d4 <__register_exitproc+0x104>
    f4f8:	10c00117 	ldw	r3,4(r2)
    f4fc:	010007c4 	movi	r4,31
    f500:	20c00e16 	blt	r4,r3,f53c <__register_exitproc+0x6c>
    f504:	1a000044 	addi	r8,r3,1
    f508:	8800221e 	bne	r17,zero,f594 <__register_exitproc+0xc4>
    f50c:	18c00084 	addi	r3,r3,2
    f510:	18c7883a 	add	r3,r3,r3
    f514:	18c7883a 	add	r3,r3,r3
    f518:	12000115 	stw	r8,4(r2)
    f51c:	10c7883a 	add	r3,r2,r3
    f520:	19400015 	stw	r5,0(r3)
    f524:	0005883a 	mov	r2,zero
    f528:	dfc00517 	ldw	ra,20(sp)
    f52c:	dc400417 	ldw	r17,16(sp)
    f530:	dc000317 	ldw	r16,12(sp)
    f534:	dec00604 	addi	sp,sp,24
    f538:	f800283a 	ret
    f53c:	00800034 	movhi	r2,0
    f540:	10800004 	addi	r2,r2,0
    f544:	10002626 	beq	r2,zero,f5e0 <__register_exitproc+0x110>
    f548:	01006404 	movi	r4,400
    f54c:	d9400015 	stw	r5,0(sp)
    f550:	d9800115 	stw	r6,4(sp)
    f554:	d9c00215 	stw	r7,8(sp)
    f558:	00000000 	call	0 <__alt_mem_SDRAM>
    f55c:	d9400017 	ldw	r5,0(sp)
    f560:	d9800117 	ldw	r6,4(sp)
    f564:	d9c00217 	ldw	r7,8(sp)
    f568:	10001d26 	beq	r2,zero,f5e0 <__register_exitproc+0x110>
    f56c:	81000017 	ldw	r4,0(r16)
    f570:	10000115 	stw	zero,4(r2)
    f574:	02000044 	movi	r8,1
    f578:	22405217 	ldw	r9,328(r4)
    f57c:	0007883a 	mov	r3,zero
    f580:	12400015 	stw	r9,0(r2)
    f584:	20805215 	stw	r2,328(r4)
    f588:	10006215 	stw	zero,392(r2)
    f58c:	10006315 	stw	zero,396(r2)
    f590:	883fde26 	beq	r17,zero,f50c <__alt_data_end+0xf800f50c>
    f594:	18c9883a 	add	r4,r3,r3
    f598:	2109883a 	add	r4,r4,r4
    f59c:	1109883a 	add	r4,r2,r4
    f5a0:	21802215 	stw	r6,136(r4)
    f5a4:	01800044 	movi	r6,1
    f5a8:	12406217 	ldw	r9,392(r2)
    f5ac:	30cc983a 	sll	r6,r6,r3
    f5b0:	4992b03a 	or	r9,r9,r6
    f5b4:	12406215 	stw	r9,392(r2)
    f5b8:	21c04215 	stw	r7,264(r4)
    f5bc:	01000084 	movi	r4,2
    f5c0:	893fd21e 	bne	r17,r4,f50c <__alt_data_end+0xf800f50c>
    f5c4:	11006317 	ldw	r4,396(r2)
    f5c8:	218cb03a 	or	r6,r4,r6
    f5cc:	11806315 	stw	r6,396(r2)
    f5d0:	003fce06 	br	f50c <__alt_data_end+0xf800f50c>
    f5d4:	18805304 	addi	r2,r3,332
    f5d8:	18805215 	stw	r2,328(r3)
    f5dc:	003fc606 	br	f4f8 <__alt_data_end+0xf800f4f8>
    f5e0:	00bfffc4 	movi	r2,-1
    f5e4:	003fd006 	br	f528 <__alt_data_end+0xf800f528>

0000f5e8 <__call_exitprocs>:
    f5e8:	defff504 	addi	sp,sp,-44
    f5ec:	df000915 	stw	fp,36(sp)
    f5f0:	dd400615 	stw	r21,24(sp)
    f5f4:	dc800315 	stw	r18,12(sp)
    f5f8:	dfc00a15 	stw	ra,40(sp)
    f5fc:	ddc00815 	stw	r23,32(sp)
    f600:	dd800715 	stw	r22,28(sp)
    f604:	dd000515 	stw	r20,20(sp)
    f608:	dcc00415 	stw	r19,16(sp)
    f60c:	dc400215 	stw	r17,8(sp)
    f610:	dc000115 	stw	r16,4(sp)
    f614:	d9000015 	stw	r4,0(sp)
    f618:	2839883a 	mov	fp,r5
    f61c:	04800044 	movi	r18,1
    f620:	057fffc4 	movi	r21,-1
    f624:	00800074 	movhi	r2,1
    f628:	10859a04 	addi	r2,r2,5736
    f62c:	12000017 	ldw	r8,0(r2)
    f630:	45005217 	ldw	r20,328(r8)
    f634:	44c05204 	addi	r19,r8,328
    f638:	a0001c26 	beq	r20,zero,f6ac <__call_exitprocs+0xc4>
    f63c:	a0800117 	ldw	r2,4(r20)
    f640:	15ffffc4 	addi	r23,r2,-1
    f644:	b8000d16 	blt	r23,zero,f67c <__call_exitprocs+0x94>
    f648:	14000044 	addi	r16,r2,1
    f64c:	8421883a 	add	r16,r16,r16
    f650:	8421883a 	add	r16,r16,r16
    f654:	84402004 	addi	r17,r16,128
    f658:	a463883a 	add	r17,r20,r17
    f65c:	a421883a 	add	r16,r20,r16
    f660:	e0001e26 	beq	fp,zero,f6dc <__call_exitprocs+0xf4>
    f664:	80804017 	ldw	r2,256(r16)
    f668:	e0801c26 	beq	fp,r2,f6dc <__call_exitprocs+0xf4>
    f66c:	bdffffc4 	addi	r23,r23,-1
    f670:	843fff04 	addi	r16,r16,-4
    f674:	8c7fff04 	addi	r17,r17,-4
    f678:	bd7ff91e 	bne	r23,r21,f660 <__alt_data_end+0xf800f660>
    f67c:	00800034 	movhi	r2,0
    f680:	10800004 	addi	r2,r2,0
    f684:	10000926 	beq	r2,zero,f6ac <__call_exitprocs+0xc4>
    f688:	a0800117 	ldw	r2,4(r20)
    f68c:	1000301e 	bne	r2,zero,f750 <__call_exitprocs+0x168>
    f690:	a0800017 	ldw	r2,0(r20)
    f694:	10003226 	beq	r2,zero,f760 <__call_exitprocs+0x178>
    f698:	a009883a 	mov	r4,r20
    f69c:	98800015 	stw	r2,0(r19)
    f6a0:	00000000 	call	0 <__alt_mem_SDRAM>
    f6a4:	9d000017 	ldw	r20,0(r19)
    f6a8:	a03fe41e 	bne	r20,zero,f63c <__alt_data_end+0xf800f63c>
    f6ac:	dfc00a17 	ldw	ra,40(sp)
    f6b0:	df000917 	ldw	fp,36(sp)
    f6b4:	ddc00817 	ldw	r23,32(sp)
    f6b8:	dd800717 	ldw	r22,28(sp)
    f6bc:	dd400617 	ldw	r21,24(sp)
    f6c0:	dd000517 	ldw	r20,20(sp)
    f6c4:	dcc00417 	ldw	r19,16(sp)
    f6c8:	dc800317 	ldw	r18,12(sp)
    f6cc:	dc400217 	ldw	r17,8(sp)
    f6d0:	dc000117 	ldw	r16,4(sp)
    f6d4:	dec00b04 	addi	sp,sp,44
    f6d8:	f800283a 	ret
    f6dc:	a0800117 	ldw	r2,4(r20)
    f6e0:	80c00017 	ldw	r3,0(r16)
    f6e4:	10bfffc4 	addi	r2,r2,-1
    f6e8:	15c01426 	beq	r2,r23,f73c <__call_exitprocs+0x154>
    f6ec:	80000015 	stw	zero,0(r16)
    f6f0:	183fde26 	beq	r3,zero,f66c <__alt_data_end+0xf800f66c>
    f6f4:	95c8983a 	sll	r4,r18,r23
    f6f8:	a0806217 	ldw	r2,392(r20)
    f6fc:	a5800117 	ldw	r22,4(r20)
    f700:	2084703a 	and	r2,r4,r2
    f704:	10000b26 	beq	r2,zero,f734 <__call_exitprocs+0x14c>
    f708:	a0806317 	ldw	r2,396(r20)
    f70c:	2088703a 	and	r4,r4,r2
    f710:	20000c1e 	bne	r4,zero,f744 <__call_exitprocs+0x15c>
    f714:	89400017 	ldw	r5,0(r17)
    f718:	d9000017 	ldw	r4,0(sp)
    f71c:	183ee83a 	callr	r3
    f720:	a0800117 	ldw	r2,4(r20)
    f724:	15bfbf1e 	bne	r2,r22,f624 <__alt_data_end+0xf800f624>
    f728:	98800017 	ldw	r2,0(r19)
    f72c:	153fcf26 	beq	r2,r20,f66c <__alt_data_end+0xf800f66c>
    f730:	003fbc06 	br	f624 <__alt_data_end+0xf800f624>
    f734:	183ee83a 	callr	r3
    f738:	003ff906 	br	f720 <__alt_data_end+0xf800f720>
    f73c:	a5c00115 	stw	r23,4(r20)
    f740:	003feb06 	br	f6f0 <__alt_data_end+0xf800f6f0>
    f744:	89000017 	ldw	r4,0(r17)
    f748:	183ee83a 	callr	r3
    f74c:	003ff406 	br	f720 <__alt_data_end+0xf800f720>
    f750:	a0800017 	ldw	r2,0(r20)
    f754:	a027883a 	mov	r19,r20
    f758:	1029883a 	mov	r20,r2
    f75c:	003fb606 	br	f638 <__alt_data_end+0xf800f638>
    f760:	0005883a 	mov	r2,zero
    f764:	003ffb06 	br	f754 <__alt_data_end+0xf800f754>

0000f768 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f768:	defffd04 	addi	sp,sp,-12
    f76c:	df000215 	stw	fp,8(sp)
    f770:	df000204 	addi	fp,sp,8
    f774:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f778:	0001883a 	nop
    f77c:	e0bfff17 	ldw	r2,-4(fp)
    f780:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f784:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f788:	10000226 	beq	r2,zero,f794 <_exit+0x2c>
    ALT_SIM_FAIL();
    f78c:	002af070 	cmpltui	zero,zero,43969
    f790:	00000106 	br	f798 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f794:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f798:	003fff06 	br	f798 <__alt_data_end+0xf800f798>
