
testing.elf:     file format elf32-littlenios2
testing.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014290 memsz 0x00014290 flags r-x
    LOAD off    0x000152b0 vaddr 0x000142b0 paddr 0x00015e54 align 2**12
         filesz 0x00001ba4 memsz 0x00001ba4 flags rw-
    LOAD off    0x000179f8 vaddr 0x000179f8 paddr 0x000179f8 align 2**12
         filesz 0x00000000 memsz 0x000006fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013c54  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000414  00013e9c  00013e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba4  000142b0  00015e54  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006fc  000179f8  000179f8  000179f8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000180f4  000180f4  00016e54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016e54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f40  00000000  00000000  00016e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026104  00000000  00000000  00017db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009645  00000000  00000000  0003debc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c6b4  00000000  00000000  00047501  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000279c  00000000  00000000  00053bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004715  00000000  00000000  00056354  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a2e  00000000  00000000  0005aa69  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00072498  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001940  00000000  00000000  000724b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000778e6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  000778e9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000778ee  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000778ef  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000778f0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000778f9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00077902  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000011  00000000  00000000  0007790b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0007791c  2**0
                  CONTENTS, READONLY
 26 .jdi          00007a74  00000000  00000000  00077950  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000bc582  00000000  00000000  0007f3c4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00013e9c l    d  .rodata	00000000 .rodata
000142b0 l    d  .rwdata	00000000 .rwdata
000179f8 l    d  .bss	00000000 .bss
000180f4 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../bsp_testing//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00013fae l     O .rodata	00000010 zeroes.4404
00003378 l     F .text	000000bc __sbprintf
00013fbe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003588 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000050b8 l     F .text	00000008 __fp_unlock
000050cc l     F .text	0000019c __sinit.part.1
00005268 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000146b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00014afc l     O .rwdata	00000020 lc_ctype_charset
00014adc l     O .rwdata	00000020 lc_message_charset
00014b1c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00013ff0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007e04 l     F .text	000000fc __sprint_r.part.0
00014124 l     O .rodata	00000010 blanks.4348
00014114 l     O .rodata	00000010 zeroes.4349
00009390 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d04c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d158 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d184 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d350 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d43c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d610 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015e44 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d85c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d990 l     F .text	00000034 alt_dev_reg
00014cfc l     O .rwdata	00001060 JTAG_UART
00015d5c l     O .rwdata	00000030 AV_Config
00015d8c l     O .rwdata	00000030 Audio_Subsystem_Audio
00015dbc l     O .rwdata	0000002c Char_LCD_16x2
00015de8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011f78 l     F .text	00000210 altera_avalon_jtag_uart_irq
00012188 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000127c0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00012ef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013154 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013414 l     F .text	0000003c alt_get_errno
00013450 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00017a60 g     O .bss	00000004 alt_instruction_exception_handler
00017a28 g     O .bss	00000004 aux_status_register
0000749c g     F .text	00000074 _mprec_log10
00007588 g     F .text	0000008c __any_on
0000992c g     F .text	00000054 _isatty_r
00013ffc g     O .rodata	00000028 __mprec_tinytens
0000d54c g     F .text	0000007c alt_main
0000103c g     F .text	00000090 strcpy
00000e90 g     F .text	000000c0 _puts_r
00017ff4 g     O .bss	00000100 alt_irq
00009980 g     F .text	00000060 _lseek_r
00015e54 g       *ABS*	00000000 __flash_rwdata_start
00012924 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000bb78 g     F .text	00000088 .hidden __eqdf2
0000de04 g     F .text	000001a4 Check_for_Master_Boot_Record
000180f4 g       *ABS*	00000000 __alt_heap_start
00011ba4 g     F .text	000001bc alt_up_sd_card_fclose
00000e54 g     F .text	0000003c printf
00009b98 g     F .text	0000009c _wcrtomb_r
00007cc4 g     F .text	0000005c __sseek
00005408 g     F .text	00000010 __sinit
00009a40 g     F .text	00000140 __swbuf_r
00005ed0 g     F .text	0000007c _setlocale_r
00005270 g     F .text	00000068 __sfmoreglue
0000d5ec g     F .text	00000024 __malloc_unlock
00017a4c g     O .bss	00000004 current_sector_modified
00006394 g     F .text	0000015c memmove
000053f0 g     F .text	00000018 _cleanup
00006618 g     F .text	000000a8 _Balloc
000107c8 g     F .text	000000c4 alt_up_sd_card_is_Present
0000db4c g     F .text	0000004c Save_Modified_Sector
0000bc00 g     F .text	000000dc .hidden __gtdf2
0001380c g     F .text	00000024 altera_nios2_gen2_irq_init
000128b0 g     F .text	00000074 get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00017a44 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
00000020 g       *ABS*	00000000 __flash_exceptions_start
000098d0 g     F .text	0000005c _fstat_r
00017a04 g     O .bss	00000004 errno
00007c40 g     F .text	00000008 __seofread
00017a18 g     O .bss	00000004 alt_argv
0001de14 g       *ABS*	00000000 _gp
00010d80 g     F .text	0000037c alt_up_sd_card_fopen
000108f8 g     F .text	000000d0 alt_up_sd_card_find_first
00017a38 g     O .bss	00000004 command_argument_register
00014b7c g     O .rwdata	00000180 alt_fd_list
00010044 g     F .text	0000012c find_first_empty_record_in_root_directory
00013090 g     F .text	00000090 alt_find_dev
0000624c g     F .text	00000148 memcpy
00012acc g     F .text	00000050 alt_up_character_lcd_write_fd
000050c0 g     F .text	0000000c _cleanup_r
0000ce64 g     F .text	000000dc .hidden __floatsidf
00013218 g     F .text	0000007c alt_io_redirect
0000bcdc g     F .text	000000f4 .hidden __ltdf2
00013e9c g       *ABS*	00000000 __DTOR_END__
00000f50 g     F .text	00000014 puts
00013a6c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000fc4c g     F .text	000001ac find_first_empty_cluster
00007b78 g     F .text	00000074 __fpclassifyd
000073f8 g     F .text	000000a4 __ratio
0001070c g     F .text	000000bc alt_up_sd_card_open_dev
00009374 g     F .text	0000001c __vfiprintf_internal
00012380 g     F .text	0000021c altera_avalon_jtag_uart_read
000005f0 g     F .text	00000014 malloc
00000e24 g     F .text	00000030 _printf_r
0000a928 g     F .text	00000064 .hidden __udivsi3
0000d2ac g     F .text	000000a4 isatty
0001404c g     O .rodata	000000c8 __mprec_tens
00005f4c g     F .text	0000000c __locale_charset
000139dc g     F .text	00000090 alt_icache_flush
00017a00 g     O .bss	00000004 __malloc_top_pad
00015e24 g     O .rwdata	00000004 __mb_cur_max
00005f7c g     F .text	0000000c _localeconv_r
00006a24 g     F .text	0000003c __i2b
0000588c g     F .text	000004bc __sfvwrite_r
0000ef4c g     F .text	000000b8 get_dir_divider_location
00000f64 g     F .text	00000054 _sbrk_r
0000ec1c g     F .text	000000c4 filename_to_upper_case
000110fc g     F .text	00000088 alt_up_sd_card_set_attributes
0000dfa8 g     F .text	0000027c Read_File_Record_At_Offset
000099e0 g     F .text	00000060 _read_r
00015e3c g     O .rwdata	00000004 alt_max_fd
0000f7d8 g     F .text	00000474 find_file_in_directory
000095c4 g     F .text	000000f0 _fclose_r
00005088 g     F .text	00000030 fflush
000179fc g     O .bss	00000004 __malloc_max_sbrked_mem
00013294 g     F .text	00000180 alt_irq_register
0001088c g     F .text	0000006c alt_up_sd_card_is_FAT16
0000a9e4 g     F .text	000008ac .hidden __adddf3
000071a0 g     F .text	0000010c __b2d
0000a2f8 g     F .text	00000538 .hidden __umoddi3
0000d478 g     F .text	000000d4 lseek
00015e1c g     O .rwdata	00000004 _global_impure_ptr
0000f2a0 g     F .text	00000538 get_home_directory_cluster_for_file
00007614 g     F .text	00000564 _realloc_r
000180f4 g       *ABS*	00000000 __bss_end
00013704 g     F .text	00000108 alt_tick
00009d80 g     F .text	00000578 .hidden __udivdi3
0000982c g     F .text	00000024 _fputwc_r
00014024 g     O .rodata	00000028 __mprec_bigtens
00006808 g     F .text	00000104 __s2b
0000cf40 g     F .text	000000a8 .hidden __floatunsidf
00006ee0 g     F .text	00000060 __mcmp
00017a50 g     O .bss	00000004 current_sector_index
00005428 g     F .text	00000018 __fp_lock_all
00013668 g     F .text	0000009c alt_alarm_stop
0000dd24 g     F .text	000000e0 mark_cluster
00017a54 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d8 alt_irq_handler
00014b54 g     O .rwdata	00000028 alt_dev_null
00010170 g     F .text	0000018c convert_filename_to_name_extension
00012d6c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00012ed0 g     F .text	00000020 alt_dcache_flush_all
0000690c g     F .text	00000068 __hi0bits
00017a24 g     O .bss	00000004 is_sd_card_formated_as_FAT16
0000cde4 g     F .text	00000080 .hidden __fixdfsi
0000fdf8 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
00015e54 g       *ABS*	00000000 __ram_rwdata_end
00015e34 g     O .rwdata	00000008 alt_dev_list
0000d898 g     F .text	000000f8 write
00017a48 g     O .bss	00000004 device_pointer
000142b0 g       *ABS*	00000000 __ram_rodata_end
0000d1c0 g     F .text	000000b0 fstat
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000bcdc g     F .text	000000f4 .hidden __ledf2
00000fb8 g     F .text	00000084 strcat
00006c58 g     F .text	00000140 __pow5mult
00007f18 g     F .text	0000145c ___vfiprintf_internal_r
00017a10 g     O .bss	00000004 __nlocale_changed
0000a98c g     F .text	00000058 .hidden __umodsi3
000180f4 g       *ABS*	00000000 end
00011ec4 g     F .text	000000b4 altera_avalon_jtag_uart_init
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00013e9c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0001283c g     F .text	00000074 alt_avalon_timer_sc_init
0000cfe8 g     F .text	00000064 .hidden __clzsi2
0001259c g     F .text	00000224 altera_avalon_jtag_uart_write
00005418 g     F .text	00000004 __sfp_lock_acquire
00006168 g     F .text	000000e4 memchr
000129d8 g     F .text	0000007c alt_up_character_lcd_write
00001164 g     F .text	000021f8 ___vfprintf_internal_r
0000557c g     F .text	00000310 _free_r
00005f58 g     F .text	00000010 __locale_mb_cur_max
00013ce8 g     F .text	00000180 __call_exitprocs
00017a0c g     O .bss	00000004 __mlocale_changed
00015e14 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00017a58 g     O .bss	00000004 _alt_tick_rate
00006d98 g     F .text	00000148 __lshift
00017a5c g     O .bss	00000004 _alt_nticks
0000d64c g     F .text	000000fc read
0000d9fc g     F .text	0000009c alt_sys_init
00012c1c g     F .text	0000008c alt_up_character_lcd_shift_display
00013bd0 g     F .text	00000118 __register_exitproc
00006a60 g     F .text	000001f8 __multiply
00012ca8 g     F .text	0000008c alt_up_character_lcd_erase_pos
00012228 g     F .text	00000068 altera_avalon_jtag_uart_close
000142b0 g       *ABS*	00000000 __ram_rwdata_start
00013e9c g       *ABS*	00000000 __ram_rodata_start
00017a64 g     O .bss	00000028 __malloc_current_mallinfo
000072ac g     F .text	0000014c __d2b
00017a20 g     O .bss	00000004 initialized
00011d60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00013938 g     F .text	000000a4 alt_get_fd
00017a8c g     O .bss	00000014 search_data
000094ac g     F .text	00000054 _close_r
00013b54 g     F .text	0000007c memcmp
00011e20 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000180f4 g       *ABS*	00000000 __alt_stack_base
00011e70 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003434 g     F .text	00000154 __swsetup_r
0000b290 g     F .text	000008e8 .hidden __divdf3
000052d8 g     F .text	00000118 __sfp
00017aa0 g     O .bss	00000054 boot_sector_data
00007510 g     F .text	00000078 __copybits
000142b0 g     O .rwdata	00000408 __malloc_av_
00005424 g     F .text	00000004 __sinit_lock_release
0000bdd0 g     F .text	00000718 .hidden __muldf3
00007bec g     F .text	00000054 __sread
00013830 g     F .text	00000108 alt_find_file
00012f2c g     F .text	000000a4 alt_dev_llist_insert
0000d5c8 g     F .text	00000024 __malloc_lock
0000d7ac g     F .text	000000b0 sbrk
0000502c g     F .text	0000005c _fflush_r
00009500 g     F .text	000000c4 _calloc_r
000179f8 g       *ABS*	00000000 __bss_start
000064f0 g     F .text	00000128 memset
00000538 g     F .text	000000b8 main
00017a1c g     O .bss	00000004 alt_envp
000179f8 g     O .bss	00000004 __malloc_max_total_mem
00011dc0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b80 g     F .text	00000018 __swbuf
00000284 g     F .text	000002b4 find_files
00011184 g     F .text	00000088 alt_up_sd_card_get_attributes
0000da98 g     F .text	000000b4 Write_Sector_Data
00011584 g     F .text	00000620 alt_up_sd_card_write
00012b90 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00007d20 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000096b4 g     F .text	00000014 fclose
00003788 g     F .text	00001688 _dtoa_r
00000618 g     F .text	0000080c _malloc_r
00009cf4 g     F .text	00000030 __ascii_wctomb
00015e40 g     O .rwdata	00000004 alt_errno
00005d48 g     F .text	000000c4 _fwalk
0000a830 g     F .text	00000084 .hidden __divsi3
0001299c g     F .text	0000003c alt_up_character_lcd_open_dev
00005458 g     F .text	00000124 _malloc_trim_r
00013e9c g       *ABS*	00000000 __CTOR_END__
00017a2c g     O .bss	00000004 status_register
00012964 g     F .text	00000038 alt_up_character_lcd_init
00007d28 g     F .text	000000dc strcmp
00017a34 g     O .bss	00000004 command_register
00013e9c g       *ABS*	00000000 __flash_rodata_start
00013e9c g       *ABS*	00000000 __DTOR_LIST__
0000bb78 g     F .text	00000088 .hidden __nedf2
0000d9c4 g     F .text	00000038 alt_irq_init
0000d748 g     F .text	00000064 alt_release_fd
0000dc70 g     F .text	000000b4 get_cluster_flag
00012d34 g     F .text	00000038 alt_up_character_lcd_cursor_off
00014134 g     O .rodata	00000100 .hidden __clz_tab
0000e224 g     F .text	0000028c Write_File_Record_At_Offset
00017a08 g     O .bss	00000004 _PathLocale
00013b08 g     F .text	00000014 atexit
0000944c g     F .text	00000060 _write_r
00005f88 g     F .text	00000018 setlocale
0000e4b0 g     F .text	00000680 Check_for_DOS_FAT
000102fc g     F .text	000002c8 create_file
00015e20 g     O .rwdata	00000004 _impure_ptr
00017a30 g     O .bss	00000004 CSD_register_w0
00017a14 g     O .bss	00000004 alt_argc
00004e10 g     F .text	0000021c __sflush_r
00013030 g     F .text	00000060 _do_dtors
00005f74 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000713c g     F .text	00000064 __ulp
00005440 g     F .text	00000018 __fp_unlock_all
00015e2c g     O .rwdata	00000008 alt_fs_list
0000ece0 g     F .text	0000026c check_file_name_for_FAT16_compliance
00017a3c g     O .bss	00000004 buffer_memory
00000020 g       *ABS*	00000000 __ram_exceptions_start
00005fa0 g     F .text	0000000c localeconv
00017a40 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
00015e54 g       *ABS*	00000000 _edata
000180f4 g       *ABS*	00000000 _end
00017af4 g     O .bss	00000500 active_files
000096c8 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
000105c4 g     F .text	00000148 copy_file_record_name_to_string
00012290 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000eb30 g     F .text	000000ec Look_for_FAT16
00007c48 g     F .text	0000007c __swrite
00015e18 g     O .rwdata	00000004 __malloc_trim_threshold
00005f68 g     F .text	0000000c __locale_msgcharset
00013b1c g     F .text	00000038 exit
000109c8 g     F .text	000003b8 alt_up_sd_card_find_next
00005e0c g     F .text	000000c4 _fwalk_reent
00006f40 g     F .text	000001fc __mdiff
0000a8b4 g     F .text	00000074 .hidden __modsi3
0000db98 g     F .text	000000d8 Read_Sector_Data
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000541c g     F .text	00000004 __sfp_lock_release
00012a54 g     F .text	00000078 alt_up_character_lcd_string
00013e68 g     F .text	00000034 _exit
00012da4 g     F .text	0000012c alt_alarm_start
0001120c g     F .text	00000378 alt_up_sd_card_read
00005fac g     F .text	000001bc __smakebuf_r
000010cc g     F .text	00000098 strlen
00013514 g     F .text	00000154 open
0000bc00 g     F .text	000000dc .hidden __gedf2
00015e28 g     O .rwdata	00000004 __wctomb
00007f00 g     F .text	00000018 __sprint_r
00013120 g     F .text	00000034 alt_icache_flush_all
00012b1c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00015e48 g     O .rwdata	00000004 alt_priority_mask
0000335c g     F .text	0000001c __vfprintf_internal
00009d24 g     F .text	0000005c _wctomb_r
0000c4e8 g     F .text	000008fc .hidden __subdf3
00006974 g     F .text	000000b0 __lo0bits
00015e4c g     O .rwdata	00000008 alt_alarm_list
00012fd0 g     F .text	00000060 _do_ctors
00009c34 g     F .text	000000c0 wcrtomb
0000d088 g     F .text	000000d0 close
0000d3b8 g     F .text	00000084 alt_load
0000f004 g     F .text	0000029c match_file_record_to_name_ext
00009850 g     F .text	00000080 fputwc
00000604 g     F .text	00000014 free
00005420 g     F .text	00000004 __sinit_lock_acquire
000066e8 g     F .text	00000120 __multadd
000066c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800074 	movhi	r2,1
 140:	109ffd04 	addi	r2,r2,32756
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109ffd04 	addi	r2,r2,32756
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	0001883a 	nop
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a71317 	ldw	r2,-25524(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a71317 	ldw	r2,-25524(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     254:	d6b78514 	ori	gp,gp,56852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     25c:	109e7e14 	ori	r2,r2,31224

    movhi r3, %hi(__bss_end)
     260:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     264:	18e03d14 	ori	r3,r3,33012

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_data_end+0xf800026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	000d3b80 	call	d3b8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	000d54c0 	call	d54c <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_data_end+0xf8000280>

00000284 <find_files>:

// find_files will print out the list of files in the current path,
// then recursively call itself on any subdirectories it finds.
// It is limited to directories containing MAX_SUBDIRECTORIES or fewer
// subdirectories and a maximium path length of 104 characters (including /'s)
void find_files (char* path){
     284:	deffb004 	addi	sp,sp,-320
     288:	dfc04f15 	stw	ra,316(sp)
     28c:	df004e15 	stw	fp,312(sp)
     290:	df004e04 	addi	fp,sp,312
     294:	e13fff15 	stw	r4,-4(fp)
	char filepath [90];
	char filename [15];
	char fullpath [104];
	char* folders [MAX_SUBDIRECTORIES];
	int num_dirs = 0;
     298:	e03fb215 	stw	zero,-312(fp)
	short int file;
	short int attributes;
	bool foundAll;

	//copy the path name to local memory
	strcpy (filepath, path);
     29c:	e0bfb604 	addi	r2,fp,-296
     2a0:	e17fff17 	ldw	r5,-4(fp)
     2a4:	1009883a 	mov	r4,r2
     2a8:	000103c0 	call	103c <strcpy>

	foundAll = (alt_up_sd_card_find_first(filepath,filename) == 0 ? false : true);
     2ac:	e0ffcc84 	addi	r3,fp,-206
     2b0:	e0bfb604 	addi	r2,fp,-296
     2b4:	180b883a 	mov	r5,r3
     2b8:	1009883a 	mov	r4,r2
     2bc:	00108f80 	call	108f8 <alt_up_sd_card_find_first>
     2c0:	10bfffcc 	andi	r2,r2,65535
     2c4:	10a0001c 	xori	r2,r2,32768
     2c8:	10a00004 	addi	r2,r2,-32768
     2cc:	1004c03a 	cmpne	r2,r2,zero
     2d0:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);
     2d4:	e0bfb604 	addi	r2,fp,-296
     2d8:	100b883a 	mov	r5,r2
     2dc:	01000074 	movhi	r4,1
     2e0:	210fa704 	addi	r4,r4,16028
     2e4:	0000e540 	call	e54 <printf>

	//loop through the directory tree
	while (!foundAll){
     2e8:	00005306 	br	438 <find_files+0x1b4>
		strcpy (fullpath,filepath);
     2ec:	e0ffb604 	addi	r3,fp,-296
     2f0:	e0bfd044 	addi	r2,fp,-191
     2f4:	180b883a 	mov	r5,r3
     2f8:	1009883a 	mov	r4,r2
     2fc:	000103c0 	call	103c <strcpy>
		//remove the '.' character from the filepath (foo/bar/. -> foo/bar/)
		fullpath [strlen(filepath)-1] = '\0';
     300:	e0bfb604 	addi	r2,fp,-296
     304:	1009883a 	mov	r4,r2
     308:	00010cc0 	call	10cc <strlen>
     30c:	10bfffc4 	addi	r2,r2,-1
     310:	e0ffd044 	addi	r3,fp,-191
     314:	1885883a 	add	r2,r3,r2
     318:	10000005 	stb	zero,0(r2)
		strcat (fullpath,filename);
     31c:	e0ffcc84 	addi	r3,fp,-206
     320:	e0bfd044 	addi	r2,fp,-191
     324:	180b883a 	mov	r5,r3
     328:	1009883a 	mov	r4,r2
     32c:	0000fb80 	call	fb8 <strcat>

		file = alt_up_sd_card_fopen (fullpath, false);
     330:	e0bfd044 	addi	r2,fp,-191
     334:	000b883a 	mov	r5,zero
     338:	1009883a 	mov	r4,r2
     33c:	0010d800 	call	10d80 <alt_up_sd_card_fopen>
     340:	e0bfb50d 	sth	r2,-300(fp)
		attributes = alt_up_sd_card_get_attributes (file);
     344:	e0bfb50f 	ldh	r2,-300(fp)
     348:	1009883a 	mov	r4,r2
     34c:	00111840 	call	11184 <alt_up_sd_card_get_attributes>
     350:	e0bfb58d 	sth	r2,-298(fp)
		if (file != -1)
     354:	e0bfb50f 	ldh	r2,-300(fp)
     358:	10bfffe0 	cmpeqi	r2,r2,-1
     35c:	1000031e 	bne	r2,zero,36c <find_files+0xe8>
			alt_up_sd_card_fclose(file);
     360:	e0bfb50f 	ldh	r2,-300(fp)
     364:	1009883a 	mov	r4,r2
     368:	0011ba40 	call	11ba4 <alt_up_sd_card_fclose>

		//print the file name, unless it's a directory or mount point
		if ( (attributes != -1) && !(attributes & 0x0018)){
     36c:	e0bfb58f 	ldh	r2,-298(fp)
     370:	10bfffe0 	cmpeqi	r2,r2,-1
     374:	1000091e 	bne	r2,zero,39c <find_files+0x118>
     378:	e0bfb58b 	ldhu	r2,-298(fp)
     37c:	10bfffcc 	andi	r2,r2,65535
     380:	1080060c 	andi	r2,r2,24
     384:	1000051e 	bne	r2,zero,39c <find_files+0x118>
			printf("/%s\n",fullpath);
     388:	e0bfd044 	addi	r2,fp,-191
     38c:	100b883a 	mov	r5,r2
     390:	01000074 	movhi	r4,1
     394:	210fa704 	addi	r4,r4,16028
     398:	0000e540 	call	e54 <printf>
		}

		//if a directory is found, allocate space and save its name for later
		if ((attributes != -1) && (attributes & 0x0010)){
     39c:	e0bfb58f 	ldh	r2,-298(fp)
     3a0:	10bfffe0 	cmpeqi	r2,r2,-1
     3a4:	10001c1e 	bne	r2,zero,418 <find_files+0x194>
     3a8:	e0bfb58b 	ldhu	r2,-298(fp)
     3ac:	10bfffcc 	andi	r2,r2,65535
     3b0:	1080040c 	andi	r2,r2,16
     3b4:	10001826 	beq	r2,zero,418 <find_files+0x194>
			folders [num_dirs] = malloc (15*sizeof(char));
     3b8:	010003c4 	movi	r4,15
     3bc:	00005f00 	call	5f0 <malloc>
     3c0:	1007883a 	mov	r3,r2
     3c4:	e0bfb217 	ldw	r2,-312(fp)
     3c8:	1085883a 	add	r2,r2,r2
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	e13fb204 	addi	r4,fp,-312
     3d4:	2085883a 	add	r2,r4,r2
     3d8:	10803904 	addi	r2,r2,228
     3dc:	10c00015 	stw	r3,0(r2)
			strcpy(folders[num_dirs],filename);
     3e0:	e0bfb217 	ldw	r2,-312(fp)
     3e4:	1085883a 	add	r2,r2,r2
     3e8:	1085883a 	add	r2,r2,r2
     3ec:	e0ffb204 	addi	r3,fp,-312
     3f0:	1885883a 	add	r2,r3,r2
     3f4:	10803904 	addi	r2,r2,228
     3f8:	10800017 	ldw	r2,0(r2)
     3fc:	e0ffcc84 	addi	r3,fp,-206
     400:	180b883a 	mov	r5,r3
     404:	1009883a 	mov	r4,r2
     408:	000103c0 	call	103c <strcpy>
			num_dirs++;
     40c:	e0bfb217 	ldw	r2,-312(fp)
     410:	10800044 	addi	r2,r2,1
     414:	e0bfb215 	stw	r2,-312(fp)
		}

		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
     418:	e0bfcc84 	addi	r2,fp,-206
     41c:	1009883a 	mov	r4,r2
     420:	00109c80 	call	109c8 <alt_up_sd_card_find_next>
     424:	10bfffcc 	andi	r2,r2,65535
     428:	10a0001c 	xori	r2,r2,32768
     42c:	10a00004 	addi	r2,r2,-32768
     430:	1004c03a 	cmpne	r2,r2,zero
     434:	e0bfb305 	stb	r2,-308(fp)

	//output the current directory
	printf("/%s\n",filepath);

	//loop through the directory tree
	while (!foundAll){
     438:	e0bfb303 	ldbu	r2,-308(fp)
     43c:	1080005c 	xori	r2,r2,1
     440:	10803fcc 	andi	r2,r2,255
     444:	103fa91e 	bne	r2,zero,2ec <__alt_data_end+0xf80002ec>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
     448:	e03fb415 	stw	zero,-304(fp)
     44c:	00003106 	br	514 <find_files+0x290>

		strcpy (fullpath,filepath);
     450:	e0ffb604 	addi	r3,fp,-296
     454:	e0bfd044 	addi	r2,fp,-191
     458:	180b883a 	mov	r5,r3
     45c:	1009883a 	mov	r4,r2
     460:	000103c0 	call	103c <strcpy>
		fullpath [strlen(filepath)-1] = '\0';
     464:	e0bfb604 	addi	r2,fp,-296
     468:	1009883a 	mov	r4,r2
     46c:	00010cc0 	call	10cc <strlen>
     470:	10bfffc4 	addi	r2,r2,-1
     474:	e0ffd044 	addi	r3,fp,-191
     478:	1885883a 	add	r2,r3,r2
     47c:	10000005 	stb	zero,0(r2)
		strcat (fullpath,folders[i]);
     480:	e0bfb417 	ldw	r2,-304(fp)
     484:	1085883a 	add	r2,r2,r2
     488:	1085883a 	add	r2,r2,r2
     48c:	e13fb204 	addi	r4,fp,-312
     490:	2085883a 	add	r2,r4,r2
     494:	10803904 	addi	r2,r2,228
     498:	10c00017 	ldw	r3,0(r2)
     49c:	e0bfd044 	addi	r2,fp,-191
     4a0:	180b883a 	mov	r5,r3
     4a4:	1009883a 	mov	r4,r2
     4a8:	0000fb80 	call	fb8 <strcat>
		strcat (fullpath, "/.");
     4ac:	e0bfd044 	addi	r2,fp,-191
     4b0:	1009883a 	mov	r4,r2
     4b4:	00010cc0 	call	10cc <strlen>
     4b8:	1007883a 	mov	r3,r2
     4bc:	e0bfd044 	addi	r2,fp,-191
     4c0:	10c5883a 	add	r2,r2,r3
     4c4:	00c00bc4 	movi	r3,47
     4c8:	10c00005 	stb	r3,0(r2)
     4cc:	00c00b84 	movi	r3,46
     4d0:	10c00045 	stb	r3,1(r2)
     4d4:	10000085 	stb	zero,2(r2)
		find_files (fullpath);
     4d8:	e0bfd044 	addi	r2,fp,-191
     4dc:	1009883a 	mov	r4,r2
     4e0:	00002840 	call	284 <find_files>
		free(folders[i]);
     4e4:	e0bfb417 	ldw	r2,-304(fp)
     4e8:	1085883a 	add	r2,r2,r2
     4ec:	1085883a 	add	r2,r2,r2
     4f0:	e0ffb204 	addi	r3,fp,-312
     4f4:	1885883a 	add	r2,r3,r2
     4f8:	10803904 	addi	r2,r2,228
     4fc:	10800017 	ldw	r2,0(r2)
     500:	1009883a 	mov	r4,r2
     504:	00006040 	call	604 <free>
		foundAll = (alt_up_sd_card_find_next(filename) == 0 ? false : true);
	}

	//second loop to open any directories found and call find_files() on them
	int i;
	for (i=0; i<num_dirs; i++){
     508:	e0bfb417 	ldw	r2,-304(fp)
     50c:	10800044 	addi	r2,r2,1
     510:	e0bfb415 	stw	r2,-304(fp)
     514:	e0ffb417 	ldw	r3,-304(fp)
     518:	e0bfb217 	ldw	r2,-312(fp)
     51c:	18bfcc16 	blt	r3,r2,450 <__alt_data_end+0xf8000450>
		strcat (fullpath, "/.");
		find_files (fullpath);
		free(folders[i]);
	}

	return;
     520:	0001883a 	nop
}
     524:	e037883a 	mov	sp,fp
     528:	dfc00117 	ldw	ra,4(sp)
     52c:	df000017 	ldw	fp,0(sp)
     530:	dec00204 	addi	sp,sp,8
     534:	f800283a 	ret

00000538 <main>:

int main (void){
     538:	defffd04 	addi	sp,sp,-12
     53c:	dfc00215 	stw	ra,8(sp)
     540:	df000115 	stw	fp,4(sp)
     544:	df000104 	addi	fp,sp,4

	alt_up_sd_card_dev * sd_card;
	sd_card = alt_up_sd_card_open_dev("/dev/SD_Card");
     548:	01000074 	movhi	r4,1
     54c:	210fa904 	addi	r4,r4,16036
     550:	001070c0 	call	1070c <alt_up_sd_card_open_dev>
     554:	e0bfff15 	stw	r2,-4(fp)

 	 if (sd_card!=NULL){
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10001e26 	beq	r2,zero,5d8 <main+0xa0>
		if (alt_up_sd_card_is_Present()){
     560:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
     564:	10803fcc 	andi	r2,r2,255
     568:	10000726 	beq	r2,zero,588 <main+0x50>
			printf("An SD Card was found!\n");
     56c:	01000074 	movhi	r4,1
     570:	210fad04 	addi	r4,r4,16052
     574:	0000f500 	call	f50 <puts>
		else {
			printf("No SD Card Found. \n Exiting the program.");
			return -1;
		}

 		if (alt_up_sd_card_is_FAT16()){
     578:	001088c0 	call	1088c <alt_up_sd_card_is_FAT16>
     57c:	10803fcc 	andi	r2,r2,255
     580:	10001026 	beq	r2,zero,5c4 <main+0x8c>
     584:	00000506 	br	59c <main+0x64>
 	 if (sd_card!=NULL){
		if (alt_up_sd_card_is_Present()){
			printf("An SD Card was found!\n");
		}
		else {
			printf("No SD Card Found. \n Exiting the program.");
     588:	01000074 	movhi	r4,1
     58c:	210fb304 	addi	r4,r4,16076
     590:	0000e540 	call	e54 <printf>
			return -1;
     594:	00bfffc4 	movi	r2,-1
     598:	00001006 	br	5dc <main+0xa4>
		}

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
     59c:	01000074 	movhi	r4,1
     5a0:	210fbe04 	addi	r4,r4,16120
     5a4:	0000f500 	call	f50 <puts>
		else{
			printf("No FAT-16 partition found - Exiting!\n");
			return -1;
		}

		printf("The SD Card contains the following files:\n");
     5a8:	01000074 	movhi	r4,1
     5ac:	210fce04 	addi	r4,r4,16184
     5b0:	0000f500 	call	f50 <puts>

		//Call find_files on the root directory
		find_files (".");
     5b4:	01000074 	movhi	r4,1
     5b8:	210fd904 	addi	r4,r4,16228
     5bc:	00002840 	call	284 <find_files>
     5c0:	00000506 	br	5d8 <main+0xa0>

 		if (alt_up_sd_card_is_FAT16()){
			printf("FAT-16 partiton found!\n");
		}
		else{
			printf("No FAT-16 partition found - Exiting!\n");
     5c4:	01000074 	movhi	r4,1
     5c8:	210fc404 	addi	r4,r4,16144
     5cc:	0000f500 	call	f50 <puts>
			return -1;
     5d0:	00bfffc4 	movi	r2,-1
     5d4:	00000106 	br	5dc <main+0xa4>
		//Call find_files on the root directory
		find_files (".");

	}

	return 0;
     5d8:	0005883a 	mov	r2,zero
}
     5dc:	e037883a 	mov	sp,fp
     5e0:	dfc00117 	ldw	ra,4(sp)
     5e4:	df000017 	ldw	fp,0(sp)
     5e8:	dec00204 	addi	sp,sp,8
     5ec:	f800283a 	ret

000005f0 <malloc>:
     5f0:	00800074 	movhi	r2,1
     5f4:	10978804 	addi	r2,r2,24096
     5f8:	200b883a 	mov	r5,r4
     5fc:	11000017 	ldw	r4,0(r2)
     600:	00006181 	jmpi	618 <_malloc_r>

00000604 <free>:
     604:	00800074 	movhi	r2,1
     608:	10978804 	addi	r2,r2,24096
     60c:	200b883a 	mov	r5,r4
     610:	11000017 	ldw	r4,0(r2)
     614:	000557c1 	jmpi	557c <_free_r>

00000618 <_malloc_r>:
     618:	defff504 	addi	sp,sp,-44
     61c:	dc800315 	stw	r18,12(sp)
     620:	dfc00a15 	stw	ra,40(sp)
     624:	df000915 	stw	fp,36(sp)
     628:	ddc00815 	stw	r23,32(sp)
     62c:	dd800715 	stw	r22,28(sp)
     630:	dd400615 	stw	r21,24(sp)
     634:	dd000515 	stw	r20,20(sp)
     638:	dcc00415 	stw	r19,16(sp)
     63c:	dc400215 	stw	r17,8(sp)
     640:	dc000115 	stw	r16,4(sp)
     644:	288002c4 	addi	r2,r5,11
     648:	00c00584 	movi	r3,22
     64c:	2025883a 	mov	r18,r4
     650:	18807f2e 	bgeu	r3,r2,850 <_malloc_r+0x238>
     654:	047ffe04 	movi	r17,-8
     658:	1462703a 	and	r17,r2,r17
     65c:	8800a316 	blt	r17,zero,8ec <_malloc_r+0x2d4>
     660:	8940a236 	bltu	r17,r5,8ec <_malloc_r+0x2d4>
     664:	000d5c80 	call	d5c8 <__malloc_lock>
     668:	00807dc4 	movi	r2,503
     66c:	1441e92e 	bgeu	r2,r17,e14 <_malloc_r+0x7fc>
     670:	8804d27a 	srli	r2,r17,9
     674:	1000a126 	beq	r2,zero,8fc <_malloc_r+0x2e4>
     678:	00c00104 	movi	r3,4
     67c:	18811e36 	bltu	r3,r2,af8 <_malloc_r+0x4e0>
     680:	8804d1ba 	srli	r2,r17,6
     684:	12000e44 	addi	r8,r2,57
     688:	11c00e04 	addi	r7,r2,56
     68c:	4209883a 	add	r4,r8,r8
     690:	04c00074 	movhi	r19,1
     694:	2109883a 	add	r4,r4,r4
     698:	9cd0ac04 	addi	r19,r19,17072
     69c:	2109883a 	add	r4,r4,r4
     6a0:	9909883a 	add	r4,r19,r4
     6a4:	24000117 	ldw	r16,4(r4)
     6a8:	213ffe04 	addi	r4,r4,-8
     6ac:	24009726 	beq	r4,r16,90c <_malloc_r+0x2f4>
     6b0:	80800117 	ldw	r2,4(r16)
     6b4:	01bfff04 	movi	r6,-4
     6b8:	014003c4 	movi	r5,15
     6bc:	1184703a 	and	r2,r2,r6
     6c0:	1447c83a 	sub	r3,r2,r17
     6c4:	28c00716 	blt	r5,r3,6e4 <_malloc_r+0xcc>
     6c8:	1800920e 	bge	r3,zero,914 <_malloc_r+0x2fc>
     6cc:	84000317 	ldw	r16,12(r16)
     6d0:	24008e26 	beq	r4,r16,90c <_malloc_r+0x2f4>
     6d4:	80800117 	ldw	r2,4(r16)
     6d8:	1184703a 	and	r2,r2,r6
     6dc:	1447c83a 	sub	r3,r2,r17
     6e0:	28fff90e 	bge	r5,r3,6c8 <__alt_data_end+0xf80006c8>
     6e4:	3809883a 	mov	r4,r7
     6e8:	01800074 	movhi	r6,1
     6ec:	9c000417 	ldw	r16,16(r19)
     6f0:	3190ac04 	addi	r6,r6,17072
     6f4:	32000204 	addi	r8,r6,8
     6f8:	82013426 	beq	r16,r8,bcc <_malloc_r+0x5b4>
     6fc:	80c00117 	ldw	r3,4(r16)
     700:	00bfff04 	movi	r2,-4
     704:	188e703a 	and	r7,r3,r2
     708:	3c45c83a 	sub	r2,r7,r17
     70c:	00c003c4 	movi	r3,15
     710:	18811f16 	blt	r3,r2,b90 <_malloc_r+0x578>
     714:	32000515 	stw	r8,20(r6)
     718:	32000415 	stw	r8,16(r6)
     71c:	10007f0e 	bge	r2,zero,91c <_malloc_r+0x304>
     720:	00807fc4 	movi	r2,511
     724:	11c0fd36 	bltu	r2,r7,b1c <_malloc_r+0x504>
     728:	3806d0fa 	srli	r3,r7,3
     72c:	01c00044 	movi	r7,1
     730:	30800117 	ldw	r2,4(r6)
     734:	19400044 	addi	r5,r3,1
     738:	294b883a 	add	r5,r5,r5
     73c:	1807d0ba 	srai	r3,r3,2
     740:	294b883a 	add	r5,r5,r5
     744:	294b883a 	add	r5,r5,r5
     748:	298b883a 	add	r5,r5,r6
     74c:	38c6983a 	sll	r3,r7,r3
     750:	29c00017 	ldw	r7,0(r5)
     754:	2a7ffe04 	addi	r9,r5,-8
     758:	1886b03a 	or	r3,r3,r2
     75c:	82400315 	stw	r9,12(r16)
     760:	81c00215 	stw	r7,8(r16)
     764:	30c00115 	stw	r3,4(r6)
     768:	2c000015 	stw	r16,0(r5)
     76c:	3c000315 	stw	r16,12(r7)
     770:	2005d0ba 	srai	r2,r4,2
     774:	01400044 	movi	r5,1
     778:	288a983a 	sll	r5,r5,r2
     77c:	19406f36 	bltu	r3,r5,93c <_malloc_r+0x324>
     780:	28c4703a 	and	r2,r5,r3
     784:	10000a1e 	bne	r2,zero,7b0 <_malloc_r+0x198>
     788:	00bfff04 	movi	r2,-4
     78c:	294b883a 	add	r5,r5,r5
     790:	2088703a 	and	r4,r4,r2
     794:	28c4703a 	and	r2,r5,r3
     798:	21000104 	addi	r4,r4,4
     79c:	1000041e 	bne	r2,zero,7b0 <_malloc_r+0x198>
     7a0:	294b883a 	add	r5,r5,r5
     7a4:	28c4703a 	and	r2,r5,r3
     7a8:	21000104 	addi	r4,r4,4
     7ac:	103ffc26 	beq	r2,zero,7a0 <__alt_data_end+0xf80007a0>
     7b0:	02bfff04 	movi	r10,-4
     7b4:	024003c4 	movi	r9,15
     7b8:	21800044 	addi	r6,r4,1
     7bc:	318d883a 	add	r6,r6,r6
     7c0:	318d883a 	add	r6,r6,r6
     7c4:	318d883a 	add	r6,r6,r6
     7c8:	998d883a 	add	r6,r19,r6
     7cc:	333ffe04 	addi	r12,r6,-8
     7d0:	2017883a 	mov	r11,r4
     7d4:	31800104 	addi	r6,r6,4
     7d8:	34000017 	ldw	r16,0(r6)
     7dc:	31fffd04 	addi	r7,r6,-12
     7e0:	81c0041e 	bne	r16,r7,7f4 <_malloc_r+0x1dc>
     7e4:	0000fb06 	br	bd4 <_malloc_r+0x5bc>
     7e8:	1801030e 	bge	r3,zero,bf8 <_malloc_r+0x5e0>
     7ec:	84000317 	ldw	r16,12(r16)
     7f0:	81c0f826 	beq	r16,r7,bd4 <_malloc_r+0x5bc>
     7f4:	80800117 	ldw	r2,4(r16)
     7f8:	1284703a 	and	r2,r2,r10
     7fc:	1447c83a 	sub	r3,r2,r17
     800:	48fff90e 	bge	r9,r3,7e8 <__alt_data_end+0xf80007e8>
     804:	80800317 	ldw	r2,12(r16)
     808:	81000217 	ldw	r4,8(r16)
     80c:	89400054 	ori	r5,r17,1
     810:	81400115 	stw	r5,4(r16)
     814:	20800315 	stw	r2,12(r4)
     818:	11000215 	stw	r4,8(r2)
     81c:	8463883a 	add	r17,r16,r17
     820:	9c400515 	stw	r17,20(r19)
     824:	9c400415 	stw	r17,16(r19)
     828:	18800054 	ori	r2,r3,1
     82c:	88800115 	stw	r2,4(r17)
     830:	8a000315 	stw	r8,12(r17)
     834:	8a000215 	stw	r8,8(r17)
     838:	88e3883a 	add	r17,r17,r3
     83c:	88c00015 	stw	r3,0(r17)
     840:	9009883a 	mov	r4,r18
     844:	000d5ec0 	call	d5ec <__malloc_unlock>
     848:	80800204 	addi	r2,r16,8
     84c:	00001b06 	br	8bc <_malloc_r+0x2a4>
     850:	04400404 	movi	r17,16
     854:	89402536 	bltu	r17,r5,8ec <_malloc_r+0x2d4>
     858:	000d5c80 	call	d5c8 <__malloc_lock>
     85c:	00800184 	movi	r2,6
     860:	01000084 	movi	r4,2
     864:	04c00074 	movhi	r19,1
     868:	1085883a 	add	r2,r2,r2
     86c:	9cd0ac04 	addi	r19,r19,17072
     870:	1085883a 	add	r2,r2,r2
     874:	9885883a 	add	r2,r19,r2
     878:	14000117 	ldw	r16,4(r2)
     87c:	10fffe04 	addi	r3,r2,-8
     880:	80c0d926 	beq	r16,r3,be8 <_malloc_r+0x5d0>
     884:	80c00117 	ldw	r3,4(r16)
     888:	81000317 	ldw	r4,12(r16)
     88c:	00bfff04 	movi	r2,-4
     890:	1884703a 	and	r2,r3,r2
     894:	81400217 	ldw	r5,8(r16)
     898:	8085883a 	add	r2,r16,r2
     89c:	10c00117 	ldw	r3,4(r2)
     8a0:	29000315 	stw	r4,12(r5)
     8a4:	21400215 	stw	r5,8(r4)
     8a8:	18c00054 	ori	r3,r3,1
     8ac:	10c00115 	stw	r3,4(r2)
     8b0:	9009883a 	mov	r4,r18
     8b4:	000d5ec0 	call	d5ec <__malloc_unlock>
     8b8:	80800204 	addi	r2,r16,8
     8bc:	dfc00a17 	ldw	ra,40(sp)
     8c0:	df000917 	ldw	fp,36(sp)
     8c4:	ddc00817 	ldw	r23,32(sp)
     8c8:	dd800717 	ldw	r22,28(sp)
     8cc:	dd400617 	ldw	r21,24(sp)
     8d0:	dd000517 	ldw	r20,20(sp)
     8d4:	dcc00417 	ldw	r19,16(sp)
     8d8:	dc800317 	ldw	r18,12(sp)
     8dc:	dc400217 	ldw	r17,8(sp)
     8e0:	dc000117 	ldw	r16,4(sp)
     8e4:	dec00b04 	addi	sp,sp,44
     8e8:	f800283a 	ret
     8ec:	00800304 	movi	r2,12
     8f0:	90800015 	stw	r2,0(r18)
     8f4:	0005883a 	mov	r2,zero
     8f8:	003ff006 	br	8bc <__alt_data_end+0xf80008bc>
     8fc:	01002004 	movi	r4,128
     900:	02001004 	movi	r8,64
     904:	01c00fc4 	movi	r7,63
     908:	003f6106 	br	690 <__alt_data_end+0xf8000690>
     90c:	4009883a 	mov	r4,r8
     910:	003f7506 	br	6e8 <__alt_data_end+0xf80006e8>
     914:	81000317 	ldw	r4,12(r16)
     918:	003fde06 	br	894 <__alt_data_end+0xf8000894>
     91c:	81c5883a 	add	r2,r16,r7
     920:	11400117 	ldw	r5,4(r2)
     924:	9009883a 	mov	r4,r18
     928:	29400054 	ori	r5,r5,1
     92c:	11400115 	stw	r5,4(r2)
     930:	000d5ec0 	call	d5ec <__malloc_unlock>
     934:	80800204 	addi	r2,r16,8
     938:	003fe006 	br	8bc <__alt_data_end+0xf80008bc>
     93c:	9c000217 	ldw	r16,8(r19)
     940:	00bfff04 	movi	r2,-4
     944:	85800117 	ldw	r22,4(r16)
     948:	b0ac703a 	and	r22,r22,r2
     94c:	b4400336 	bltu	r22,r17,95c <_malloc_r+0x344>
     950:	b445c83a 	sub	r2,r22,r17
     954:	00c003c4 	movi	r3,15
     958:	18805d16 	blt	r3,r2,ad0 <_malloc_r+0x4b8>
     95c:	05c00074 	movhi	r23,1
     960:	00800074 	movhi	r2,1
     964:	109e8004 	addi	r2,r2,31232
     968:	bdd78504 	addi	r23,r23,24084
     96c:	15400017 	ldw	r21,0(r2)
     970:	b8c00017 	ldw	r3,0(r23)
     974:	00bfffc4 	movi	r2,-1
     978:	858d883a 	add	r6,r16,r22
     97c:	8d6b883a 	add	r21,r17,r21
     980:	1880ea26 	beq	r3,r2,d2c <_malloc_r+0x714>
     984:	ad4403c4 	addi	r21,r21,4111
     988:	00bc0004 	movi	r2,-4096
     98c:	a8aa703a 	and	r21,r21,r2
     990:	a80b883a 	mov	r5,r21
     994:	9009883a 	mov	r4,r18
     998:	d9800015 	stw	r6,0(sp)
     99c:	0000f640 	call	f64 <_sbrk_r>
     9a0:	1029883a 	mov	r20,r2
     9a4:	00bfffc4 	movi	r2,-1
     9a8:	d9800017 	ldw	r6,0(sp)
     9ac:	a080e826 	beq	r20,r2,d50 <_malloc_r+0x738>
     9b0:	a180a636 	bltu	r20,r6,c4c <_malloc_r+0x634>
     9b4:	07000074 	movhi	fp,1
     9b8:	e71e9904 	addi	fp,fp,31332
     9bc:	e0800017 	ldw	r2,0(fp)
     9c0:	a887883a 	add	r3,r21,r2
     9c4:	e0c00015 	stw	r3,0(fp)
     9c8:	3500e626 	beq	r6,r20,d64 <_malloc_r+0x74c>
     9cc:	b9000017 	ldw	r4,0(r23)
     9d0:	00bfffc4 	movi	r2,-1
     9d4:	2080ee26 	beq	r4,r2,d90 <_malloc_r+0x778>
     9d8:	a185c83a 	sub	r2,r20,r6
     9dc:	10c5883a 	add	r2,r2,r3
     9e0:	e0800015 	stw	r2,0(fp)
     9e4:	a0c001cc 	andi	r3,r20,7
     9e8:	1800bc26 	beq	r3,zero,cdc <_malloc_r+0x6c4>
     9ec:	a0e9c83a 	sub	r20,r20,r3
     9f0:	00840204 	movi	r2,4104
     9f4:	a5000204 	addi	r20,r20,8
     9f8:	10c7c83a 	sub	r3,r2,r3
     9fc:	a545883a 	add	r2,r20,r21
     a00:	1083ffcc 	andi	r2,r2,4095
     a04:	18abc83a 	sub	r21,r3,r2
     a08:	a80b883a 	mov	r5,r21
     a0c:	9009883a 	mov	r4,r18
     a10:	0000f640 	call	f64 <_sbrk_r>
     a14:	00ffffc4 	movi	r3,-1
     a18:	10c0e126 	beq	r2,r3,da0 <_malloc_r+0x788>
     a1c:	1505c83a 	sub	r2,r2,r20
     a20:	1545883a 	add	r2,r2,r21
     a24:	10800054 	ori	r2,r2,1
     a28:	e0c00017 	ldw	r3,0(fp)
     a2c:	9d000215 	stw	r20,8(r19)
     a30:	a0800115 	stw	r2,4(r20)
     a34:	a8c7883a 	add	r3,r21,r3
     a38:	e0c00015 	stw	r3,0(fp)
     a3c:	84c00e26 	beq	r16,r19,a78 <_malloc_r+0x460>
     a40:	018003c4 	movi	r6,15
     a44:	3580a72e 	bgeu	r6,r22,ce4 <_malloc_r+0x6cc>
     a48:	81400117 	ldw	r5,4(r16)
     a4c:	013ffe04 	movi	r4,-8
     a50:	b0bffd04 	addi	r2,r22,-12
     a54:	1104703a 	and	r2,r2,r4
     a58:	2900004c 	andi	r4,r5,1
     a5c:	2088b03a 	or	r4,r4,r2
     a60:	81000115 	stw	r4,4(r16)
     a64:	01400144 	movi	r5,5
     a68:	8089883a 	add	r4,r16,r2
     a6c:	21400115 	stw	r5,4(r4)
     a70:	21400215 	stw	r5,8(r4)
     a74:	3080cd36 	bltu	r6,r2,dac <_malloc_r+0x794>
     a78:	00800074 	movhi	r2,1
     a7c:	109e7f04 	addi	r2,r2,31228
     a80:	11000017 	ldw	r4,0(r2)
     a84:	20c0012e 	bgeu	r4,r3,a8c <_malloc_r+0x474>
     a88:	10c00015 	stw	r3,0(r2)
     a8c:	00800074 	movhi	r2,1
     a90:	109e7e04 	addi	r2,r2,31224
     a94:	11000017 	ldw	r4,0(r2)
     a98:	9c000217 	ldw	r16,8(r19)
     a9c:	20c0012e 	bgeu	r4,r3,aa4 <_malloc_r+0x48c>
     aa0:	10c00015 	stw	r3,0(r2)
     aa4:	80c00117 	ldw	r3,4(r16)
     aa8:	00bfff04 	movi	r2,-4
     aac:	1886703a 	and	r3,r3,r2
     ab0:	1c45c83a 	sub	r2,r3,r17
     ab4:	1c400236 	bltu	r3,r17,ac0 <_malloc_r+0x4a8>
     ab8:	00c003c4 	movi	r3,15
     abc:	18800416 	blt	r3,r2,ad0 <_malloc_r+0x4b8>
     ac0:	9009883a 	mov	r4,r18
     ac4:	000d5ec0 	call	d5ec <__malloc_unlock>
     ac8:	0005883a 	mov	r2,zero
     acc:	003f7b06 	br	8bc <__alt_data_end+0xf80008bc>
     ad0:	88c00054 	ori	r3,r17,1
     ad4:	80c00115 	stw	r3,4(r16)
     ad8:	8463883a 	add	r17,r16,r17
     adc:	10800054 	ori	r2,r2,1
     ae0:	9c400215 	stw	r17,8(r19)
     ae4:	88800115 	stw	r2,4(r17)
     ae8:	9009883a 	mov	r4,r18
     aec:	000d5ec0 	call	d5ec <__malloc_unlock>
     af0:	80800204 	addi	r2,r16,8
     af4:	003f7106 	br	8bc <__alt_data_end+0xf80008bc>
     af8:	00c00504 	movi	r3,20
     afc:	18804a2e 	bgeu	r3,r2,c28 <_malloc_r+0x610>
     b00:	00c01504 	movi	r3,84
     b04:	18806e36 	bltu	r3,r2,cc0 <_malloc_r+0x6a8>
     b08:	8804d33a 	srli	r2,r17,12
     b0c:	12001bc4 	addi	r8,r2,111
     b10:	11c01b84 	addi	r7,r2,110
     b14:	4209883a 	add	r4,r8,r8
     b18:	003edd06 	br	690 <__alt_data_end+0xf8000690>
     b1c:	3804d27a 	srli	r2,r7,9
     b20:	00c00104 	movi	r3,4
     b24:	1880442e 	bgeu	r3,r2,c38 <_malloc_r+0x620>
     b28:	00c00504 	movi	r3,20
     b2c:	18808136 	bltu	r3,r2,d34 <_malloc_r+0x71c>
     b30:	11401704 	addi	r5,r2,92
     b34:	10c016c4 	addi	r3,r2,91
     b38:	294b883a 	add	r5,r5,r5
     b3c:	294b883a 	add	r5,r5,r5
     b40:	294b883a 	add	r5,r5,r5
     b44:	994b883a 	add	r5,r19,r5
     b48:	28800017 	ldw	r2,0(r5)
     b4c:	01800074 	movhi	r6,1
     b50:	297ffe04 	addi	r5,r5,-8
     b54:	3190ac04 	addi	r6,r6,17072
     b58:	28806526 	beq	r5,r2,cf0 <_malloc_r+0x6d8>
     b5c:	01bfff04 	movi	r6,-4
     b60:	10c00117 	ldw	r3,4(r2)
     b64:	1986703a 	and	r3,r3,r6
     b68:	38c0022e 	bgeu	r7,r3,b74 <_malloc_r+0x55c>
     b6c:	10800217 	ldw	r2,8(r2)
     b70:	28bffb1e 	bne	r5,r2,b60 <__alt_data_end+0xf8000b60>
     b74:	11400317 	ldw	r5,12(r2)
     b78:	98c00117 	ldw	r3,4(r19)
     b7c:	81400315 	stw	r5,12(r16)
     b80:	80800215 	stw	r2,8(r16)
     b84:	2c000215 	stw	r16,8(r5)
     b88:	14000315 	stw	r16,12(r2)
     b8c:	003ef806 	br	770 <__alt_data_end+0xf8000770>
     b90:	88c00054 	ori	r3,r17,1
     b94:	80c00115 	stw	r3,4(r16)
     b98:	8463883a 	add	r17,r16,r17
     b9c:	34400515 	stw	r17,20(r6)
     ba0:	34400415 	stw	r17,16(r6)
     ba4:	10c00054 	ori	r3,r2,1
     ba8:	8a000315 	stw	r8,12(r17)
     bac:	8a000215 	stw	r8,8(r17)
     bb0:	88c00115 	stw	r3,4(r17)
     bb4:	88a3883a 	add	r17,r17,r2
     bb8:	88800015 	stw	r2,0(r17)
     bbc:	9009883a 	mov	r4,r18
     bc0:	000d5ec0 	call	d5ec <__malloc_unlock>
     bc4:	80800204 	addi	r2,r16,8
     bc8:	003f3c06 	br	8bc <__alt_data_end+0xf80008bc>
     bcc:	30c00117 	ldw	r3,4(r6)
     bd0:	003ee706 	br	770 <__alt_data_end+0xf8000770>
     bd4:	5ac00044 	addi	r11,r11,1
     bd8:	588000cc 	andi	r2,r11,3
     bdc:	31800204 	addi	r6,r6,8
     be0:	103efd1e 	bne	r2,zero,7d8 <__alt_data_end+0xf80007d8>
     be4:	00002406 	br	c78 <_malloc_r+0x660>
     be8:	14000317 	ldw	r16,12(r2)
     bec:	143f251e 	bne	r2,r16,884 <__alt_data_end+0xf8000884>
     bf0:	21000084 	addi	r4,r4,2
     bf4:	003ebc06 	br	6e8 <__alt_data_end+0xf80006e8>
     bf8:	8085883a 	add	r2,r16,r2
     bfc:	10c00117 	ldw	r3,4(r2)
     c00:	81000317 	ldw	r4,12(r16)
     c04:	81400217 	ldw	r5,8(r16)
     c08:	18c00054 	ori	r3,r3,1
     c0c:	10c00115 	stw	r3,4(r2)
     c10:	29000315 	stw	r4,12(r5)
     c14:	21400215 	stw	r5,8(r4)
     c18:	9009883a 	mov	r4,r18
     c1c:	000d5ec0 	call	d5ec <__malloc_unlock>
     c20:	80800204 	addi	r2,r16,8
     c24:	003f2506 	br	8bc <__alt_data_end+0xf80008bc>
     c28:	12001704 	addi	r8,r2,92
     c2c:	11c016c4 	addi	r7,r2,91
     c30:	4209883a 	add	r4,r8,r8
     c34:	003e9606 	br	690 <__alt_data_end+0xf8000690>
     c38:	3804d1ba 	srli	r2,r7,6
     c3c:	11400e44 	addi	r5,r2,57
     c40:	10c00e04 	addi	r3,r2,56
     c44:	294b883a 	add	r5,r5,r5
     c48:	003fbc06 	br	b3c <__alt_data_end+0xf8000b3c>
     c4c:	84ff5926 	beq	r16,r19,9b4 <__alt_data_end+0xf80009b4>
     c50:	00800074 	movhi	r2,1
     c54:	1090ac04 	addi	r2,r2,17072
     c58:	14000217 	ldw	r16,8(r2)
     c5c:	00bfff04 	movi	r2,-4
     c60:	80c00117 	ldw	r3,4(r16)
     c64:	1886703a 	and	r3,r3,r2
     c68:	003f9106 	br	ab0 <__alt_data_end+0xf8000ab0>
     c6c:	60800217 	ldw	r2,8(r12)
     c70:	213fffc4 	addi	r4,r4,-1
     c74:	1300651e 	bne	r2,r12,e0c <_malloc_r+0x7f4>
     c78:	208000cc 	andi	r2,r4,3
     c7c:	633ffe04 	addi	r12,r12,-8
     c80:	103ffa1e 	bne	r2,zero,c6c <__alt_data_end+0xf8000c6c>
     c84:	98800117 	ldw	r2,4(r19)
     c88:	0146303a 	nor	r3,zero,r5
     c8c:	1884703a 	and	r2,r3,r2
     c90:	98800115 	stw	r2,4(r19)
     c94:	294b883a 	add	r5,r5,r5
     c98:	117f2836 	bltu	r2,r5,93c <__alt_data_end+0xf800093c>
     c9c:	283f2726 	beq	r5,zero,93c <__alt_data_end+0xf800093c>
     ca0:	2886703a 	and	r3,r5,r2
     ca4:	5809883a 	mov	r4,r11
     ca8:	183ec31e 	bne	r3,zero,7b8 <__alt_data_end+0xf80007b8>
     cac:	294b883a 	add	r5,r5,r5
     cb0:	2886703a 	and	r3,r5,r2
     cb4:	21000104 	addi	r4,r4,4
     cb8:	183ffc26 	beq	r3,zero,cac <__alt_data_end+0xf8000cac>
     cbc:	003ebe06 	br	7b8 <__alt_data_end+0xf80007b8>
     cc0:	00c05504 	movi	r3,340
     cc4:	18801236 	bltu	r3,r2,d10 <_malloc_r+0x6f8>
     cc8:	8804d3fa 	srli	r2,r17,15
     ccc:	12001e04 	addi	r8,r2,120
     cd0:	11c01dc4 	addi	r7,r2,119
     cd4:	4209883a 	add	r4,r8,r8
     cd8:	003e6d06 	br	690 <__alt_data_end+0xf8000690>
     cdc:	00c40004 	movi	r3,4096
     ce0:	003f4606 	br	9fc <__alt_data_end+0xf80009fc>
     ce4:	00800044 	movi	r2,1
     ce8:	a0800115 	stw	r2,4(r20)
     cec:	003f7406 	br	ac0 <__alt_data_end+0xf8000ac0>
     cf0:	1805d0ba 	srai	r2,r3,2
     cf4:	01c00044 	movi	r7,1
     cf8:	30c00117 	ldw	r3,4(r6)
     cfc:	388e983a 	sll	r7,r7,r2
     d00:	2805883a 	mov	r2,r5
     d04:	38c6b03a 	or	r3,r7,r3
     d08:	30c00115 	stw	r3,4(r6)
     d0c:	003f9b06 	br	b7c <__alt_data_end+0xf8000b7c>
     d10:	00c15504 	movi	r3,1364
     d14:	18801a36 	bltu	r3,r2,d80 <_malloc_r+0x768>
     d18:	8804d4ba 	srli	r2,r17,18
     d1c:	12001f44 	addi	r8,r2,125
     d20:	11c01f04 	addi	r7,r2,124
     d24:	4209883a 	add	r4,r8,r8
     d28:	003e5906 	br	690 <__alt_data_end+0xf8000690>
     d2c:	ad400404 	addi	r21,r21,16
     d30:	003f1706 	br	990 <__alt_data_end+0xf8000990>
     d34:	00c01504 	movi	r3,84
     d38:	18802336 	bltu	r3,r2,dc8 <_malloc_r+0x7b0>
     d3c:	3804d33a 	srli	r2,r7,12
     d40:	11401bc4 	addi	r5,r2,111
     d44:	10c01b84 	addi	r3,r2,110
     d48:	294b883a 	add	r5,r5,r5
     d4c:	003f7b06 	br	b3c <__alt_data_end+0xf8000b3c>
     d50:	9c000217 	ldw	r16,8(r19)
     d54:	00bfff04 	movi	r2,-4
     d58:	80c00117 	ldw	r3,4(r16)
     d5c:	1886703a 	and	r3,r3,r2
     d60:	003f5306 	br	ab0 <__alt_data_end+0xf8000ab0>
     d64:	3083ffcc 	andi	r2,r6,4095
     d68:	103f181e 	bne	r2,zero,9cc <__alt_data_end+0xf80009cc>
     d6c:	99000217 	ldw	r4,8(r19)
     d70:	b545883a 	add	r2,r22,r21
     d74:	10800054 	ori	r2,r2,1
     d78:	20800115 	stw	r2,4(r4)
     d7c:	003f3e06 	br	a78 <__alt_data_end+0xf8000a78>
     d80:	01003f84 	movi	r4,254
     d84:	02001fc4 	movi	r8,127
     d88:	01c01f84 	movi	r7,126
     d8c:	003e4006 	br	690 <__alt_data_end+0xf8000690>
     d90:	00800074 	movhi	r2,1
     d94:	10978504 	addi	r2,r2,24084
     d98:	15000015 	stw	r20,0(r2)
     d9c:	003f1106 	br	9e4 <__alt_data_end+0xf80009e4>
     da0:	00800044 	movi	r2,1
     da4:	002b883a 	mov	r21,zero
     da8:	003f1f06 	br	a28 <__alt_data_end+0xf8000a28>
     dac:	81400204 	addi	r5,r16,8
     db0:	9009883a 	mov	r4,r18
     db4:	000557c0 	call	557c <_free_r>
     db8:	00800074 	movhi	r2,1
     dbc:	109e9904 	addi	r2,r2,31332
     dc0:	10c00017 	ldw	r3,0(r2)
     dc4:	003f2c06 	br	a78 <__alt_data_end+0xf8000a78>
     dc8:	00c05504 	movi	r3,340
     dcc:	18800536 	bltu	r3,r2,de4 <_malloc_r+0x7cc>
     dd0:	3804d3fa 	srli	r2,r7,15
     dd4:	11401e04 	addi	r5,r2,120
     dd8:	10c01dc4 	addi	r3,r2,119
     ddc:	294b883a 	add	r5,r5,r5
     de0:	003f5606 	br	b3c <__alt_data_end+0xf8000b3c>
     de4:	00c15504 	movi	r3,1364
     de8:	18800536 	bltu	r3,r2,e00 <_malloc_r+0x7e8>
     dec:	3804d4ba 	srli	r2,r7,18
     df0:	11401f44 	addi	r5,r2,125
     df4:	10c01f04 	addi	r3,r2,124
     df8:	294b883a 	add	r5,r5,r5
     dfc:	003f4f06 	br	b3c <__alt_data_end+0xf8000b3c>
     e00:	01403f84 	movi	r5,254
     e04:	00c01f84 	movi	r3,126
     e08:	003f4c06 	br	b3c <__alt_data_end+0xf8000b3c>
     e0c:	98800117 	ldw	r2,4(r19)
     e10:	003fa006 	br	c94 <__alt_data_end+0xf8000c94>
     e14:	8808d0fa 	srli	r4,r17,3
     e18:	20800044 	addi	r2,r4,1
     e1c:	1085883a 	add	r2,r2,r2
     e20:	003e9006 	br	864 <__alt_data_end+0xf8000864>

00000e24 <_printf_r>:
     e24:	defffd04 	addi	sp,sp,-12
     e28:	2805883a 	mov	r2,r5
     e2c:	dfc00015 	stw	ra,0(sp)
     e30:	d9800115 	stw	r6,4(sp)
     e34:	d9c00215 	stw	r7,8(sp)
     e38:	21400217 	ldw	r5,8(r4)
     e3c:	d9c00104 	addi	r7,sp,4
     e40:	100d883a 	mov	r6,r2
     e44:	00011640 	call	1164 <___vfprintf_internal_r>
     e48:	dfc00017 	ldw	ra,0(sp)
     e4c:	dec00304 	addi	sp,sp,12
     e50:	f800283a 	ret

00000e54 <printf>:
     e54:	defffc04 	addi	sp,sp,-16
     e58:	dfc00015 	stw	ra,0(sp)
     e5c:	d9400115 	stw	r5,4(sp)
     e60:	d9800215 	stw	r6,8(sp)
     e64:	d9c00315 	stw	r7,12(sp)
     e68:	00800074 	movhi	r2,1
     e6c:	10978804 	addi	r2,r2,24096
     e70:	10800017 	ldw	r2,0(r2)
     e74:	200b883a 	mov	r5,r4
     e78:	d9800104 	addi	r6,sp,4
     e7c:	11000217 	ldw	r4,8(r2)
     e80:	000335c0 	call	335c <__vfprintf_internal>
     e84:	dfc00017 	ldw	ra,0(sp)
     e88:	dec00404 	addi	sp,sp,16
     e8c:	f800283a 	ret

00000e90 <_puts_r>:
     e90:	defff604 	addi	sp,sp,-40
     e94:	dc000715 	stw	r16,28(sp)
     e98:	2021883a 	mov	r16,r4
     e9c:	2809883a 	mov	r4,r5
     ea0:	dc400815 	stw	r17,32(sp)
     ea4:	dfc00915 	stw	ra,36(sp)
     ea8:	2823883a 	mov	r17,r5
     eac:	00010cc0 	call	10cc <strlen>
     eb0:	10c00044 	addi	r3,r2,1
     eb4:	d8800115 	stw	r2,4(sp)
     eb8:	00800074 	movhi	r2,1
     ebc:	108fda04 	addi	r2,r2,16232
     ec0:	d8800215 	stw	r2,8(sp)
     ec4:	00800044 	movi	r2,1
     ec8:	d8800315 	stw	r2,12(sp)
     ecc:	00800084 	movi	r2,2
     ed0:	dc400015 	stw	r17,0(sp)
     ed4:	d8c00615 	stw	r3,24(sp)
     ed8:	dec00415 	stw	sp,16(sp)
     edc:	d8800515 	stw	r2,20(sp)
     ee0:	80000226 	beq	r16,zero,eec <_puts_r+0x5c>
     ee4:	80800e17 	ldw	r2,56(r16)
     ee8:	10001426 	beq	r2,zero,f3c <_puts_r+0xac>
     eec:	81400217 	ldw	r5,8(r16)
     ef0:	2880030b 	ldhu	r2,12(r5)
     ef4:	10c8000c 	andi	r3,r2,8192
     ef8:	1800061e 	bne	r3,zero,f14 <_puts_r+0x84>
     efc:	29001917 	ldw	r4,100(r5)
     f00:	00f7ffc4 	movi	r3,-8193
     f04:	10880014 	ori	r2,r2,8192
     f08:	20c6703a 	and	r3,r4,r3
     f0c:	2880030d 	sth	r2,12(r5)
     f10:	28c01915 	stw	r3,100(r5)
     f14:	d9800404 	addi	r6,sp,16
     f18:	8009883a 	mov	r4,r16
     f1c:	000588c0 	call	588c <__sfvwrite_r>
     f20:	1000091e 	bne	r2,zero,f48 <_puts_r+0xb8>
     f24:	00800284 	movi	r2,10
     f28:	dfc00917 	ldw	ra,36(sp)
     f2c:	dc400817 	ldw	r17,32(sp)
     f30:	dc000717 	ldw	r16,28(sp)
     f34:	dec00a04 	addi	sp,sp,40
     f38:	f800283a 	ret
     f3c:	8009883a 	mov	r4,r16
     f40:	00054080 	call	5408 <__sinit>
     f44:	003fe906 	br	eec <__alt_data_end+0xf8000eec>
     f48:	00bfffc4 	movi	r2,-1
     f4c:	003ff606 	br	f28 <__alt_data_end+0xf8000f28>

00000f50 <puts>:
     f50:	00800074 	movhi	r2,1
     f54:	10978804 	addi	r2,r2,24096
     f58:	200b883a 	mov	r5,r4
     f5c:	11000017 	ldw	r4,0(r2)
     f60:	0000e901 	jmpi	e90 <_puts_r>

00000f64 <_sbrk_r>:
     f64:	defffd04 	addi	sp,sp,-12
     f68:	dc000015 	stw	r16,0(sp)
     f6c:	04000074 	movhi	r16,1
     f70:	dc400115 	stw	r17,4(sp)
     f74:	841e8104 	addi	r16,r16,31236
     f78:	2023883a 	mov	r17,r4
     f7c:	2809883a 	mov	r4,r5
     f80:	dfc00215 	stw	ra,8(sp)
     f84:	80000015 	stw	zero,0(r16)
     f88:	000d7ac0 	call	d7ac <sbrk>
     f8c:	00ffffc4 	movi	r3,-1
     f90:	10c00526 	beq	r2,r3,fa8 <_sbrk_r+0x44>
     f94:	dfc00217 	ldw	ra,8(sp)
     f98:	dc400117 	ldw	r17,4(sp)
     f9c:	dc000017 	ldw	r16,0(sp)
     fa0:	dec00304 	addi	sp,sp,12
     fa4:	f800283a 	ret
     fa8:	80c00017 	ldw	r3,0(r16)
     fac:	183ff926 	beq	r3,zero,f94 <__alt_data_end+0xf8000f94>
     fb0:	88c00015 	stw	r3,0(r17)
     fb4:	003ff706 	br	f94 <__alt_data_end+0xf8000f94>

00000fb8 <strcat>:
     fb8:	defffe04 	addi	sp,sp,-8
     fbc:	dc000015 	stw	r16,0(sp)
     fc0:	dfc00115 	stw	ra,4(sp)
     fc4:	208000cc 	andi	r2,r4,3
     fc8:	2021883a 	mov	r16,r4
     fcc:	1000131e 	bne	r2,zero,101c <strcat+0x64>
     fd0:	20800017 	ldw	r2,0(r4)
     fd4:	01ffbff4 	movhi	r7,65279
     fd8:	39ffbfc4 	addi	r7,r7,-257
     fdc:	0086303a 	nor	r3,zero,r2
     fe0:	01a02074 	movhi	r6,32897
     fe4:	11c5883a 	add	r2,r2,r7
     fe8:	31a02004 	addi	r6,r6,-32640
     fec:	10c4703a 	and	r2,r2,r3
     ff0:	1184703a 	and	r2,r2,r6
     ff4:	1000091e 	bne	r2,zero,101c <strcat+0x64>
     ff8:	21000104 	addi	r4,r4,4
     ffc:	20800017 	ldw	r2,0(r4)
    1000:	11c7883a 	add	r3,r2,r7
    1004:	0084303a 	nor	r2,zero,r2
    1008:	1884703a 	and	r2,r3,r2
    100c:	1184703a 	and	r2,r2,r6
    1010:	103ff926 	beq	r2,zero,ff8 <__alt_data_end+0xf8000ff8>
    1014:	00000106 	br	101c <strcat+0x64>
    1018:	21000044 	addi	r4,r4,1
    101c:	20800007 	ldb	r2,0(r4)
    1020:	103ffd1e 	bne	r2,zero,1018 <__alt_data_end+0xf8001018>
    1024:	000103c0 	call	103c <strcpy>
    1028:	8005883a 	mov	r2,r16
    102c:	dfc00117 	ldw	ra,4(sp)
    1030:	dc000017 	ldw	r16,0(sp)
    1034:	dec00204 	addi	sp,sp,8
    1038:	f800283a 	ret

0000103c <strcpy>:
    103c:	2906b03a 	or	r3,r5,r4
    1040:	18c000cc 	andi	r3,r3,3
    1044:	2005883a 	mov	r2,r4
    1048:	1800161e 	bne	r3,zero,10a4 <strcpy+0x68>
    104c:	29c00017 	ldw	r7,0(r5)
    1050:	02ffbff4 	movhi	r11,65279
    1054:	5affbfc4 	addi	r11,r11,-257
    1058:	02a02074 	movhi	r10,32897
    105c:	01c6303a 	nor	r3,zero,r7
    1060:	3ac9883a 	add	r4,r7,r11
    1064:	52a02004 	addi	r10,r10,-32640
    1068:	20c6703a 	and	r3,r4,r3
    106c:	1a86703a 	and	r3,r3,r10
    1070:	18000c1e 	bne	r3,zero,10a4 <strcpy+0x68>
    1074:	1011883a 	mov	r8,r2
    1078:	41c00015 	stw	r7,0(r8)
    107c:	29400104 	addi	r5,r5,4
    1080:	29c00017 	ldw	r7,0(r5)
    1084:	41800104 	addi	r6,r8,4
    1088:	3011883a 	mov	r8,r6
    108c:	3ad3883a 	add	r9,r7,r11
    1090:	01c6303a 	nor	r3,zero,r7
    1094:	48c6703a 	and	r3,r9,r3
    1098:	1a86703a 	and	r3,r3,r10
    109c:	183ff626 	beq	r3,zero,1078 <__alt_data_end+0xf8001078>
    10a0:	00000106 	br	10a8 <strcpy+0x6c>
    10a4:	100d883a 	mov	r6,r2
    10a8:	28c00003 	ldbu	r3,0(r5)
    10ac:	31800044 	addi	r6,r6,1
    10b0:	29400044 	addi	r5,r5,1
    10b4:	30ffffc5 	stb	r3,-1(r6)
    10b8:	18c03fcc 	andi	r3,r3,255
    10bc:	18c0201c 	xori	r3,r3,128
    10c0:	18ffe004 	addi	r3,r3,-128
    10c4:	183ff81e 	bne	r3,zero,10a8 <__alt_data_end+0xf80010a8>
    10c8:	f800283a 	ret

000010cc <strlen>:
    10cc:	208000cc 	andi	r2,r4,3
    10d0:	10002026 	beq	r2,zero,1154 <strlen+0x88>
    10d4:	20800007 	ldb	r2,0(r4)
    10d8:	10002026 	beq	r2,zero,115c <strlen+0x90>
    10dc:	2005883a 	mov	r2,r4
    10e0:	00000206 	br	10ec <strlen+0x20>
    10e4:	10c00007 	ldb	r3,0(r2)
    10e8:	18001826 	beq	r3,zero,114c <strlen+0x80>
    10ec:	10800044 	addi	r2,r2,1
    10f0:	10c000cc 	andi	r3,r2,3
    10f4:	183ffb1e 	bne	r3,zero,10e4 <__alt_data_end+0xf80010e4>
    10f8:	10c00017 	ldw	r3,0(r2)
    10fc:	01ffbff4 	movhi	r7,65279
    1100:	39ffbfc4 	addi	r7,r7,-257
    1104:	00ca303a 	nor	r5,zero,r3
    1108:	01a02074 	movhi	r6,32897
    110c:	19c7883a 	add	r3,r3,r7
    1110:	31a02004 	addi	r6,r6,-32640
    1114:	1946703a 	and	r3,r3,r5
    1118:	1986703a 	and	r3,r3,r6
    111c:	1800091e 	bne	r3,zero,1144 <strlen+0x78>
    1120:	10800104 	addi	r2,r2,4
    1124:	10c00017 	ldw	r3,0(r2)
    1128:	19cb883a 	add	r5,r3,r7
    112c:	00c6303a 	nor	r3,zero,r3
    1130:	28c6703a 	and	r3,r5,r3
    1134:	1986703a 	and	r3,r3,r6
    1138:	183ff926 	beq	r3,zero,1120 <__alt_data_end+0xf8001120>
    113c:	00000106 	br	1144 <strlen+0x78>
    1140:	10800044 	addi	r2,r2,1
    1144:	10c00007 	ldb	r3,0(r2)
    1148:	183ffd1e 	bne	r3,zero,1140 <__alt_data_end+0xf8001140>
    114c:	1105c83a 	sub	r2,r2,r4
    1150:	f800283a 	ret
    1154:	2005883a 	mov	r2,r4
    1158:	003fe706 	br	10f8 <__alt_data_end+0xf80010f8>
    115c:	0005883a 	mov	r2,zero
    1160:	f800283a 	ret

00001164 <___vfprintf_internal_r>:
    1164:	deffb804 	addi	sp,sp,-288
    1168:	dfc04715 	stw	ra,284(sp)
    116c:	ddc04515 	stw	r23,276(sp)
    1170:	dd404315 	stw	r21,268(sp)
    1174:	d9002c15 	stw	r4,176(sp)
    1178:	282f883a 	mov	r23,r5
    117c:	302b883a 	mov	r21,r6
    1180:	d9c02d15 	stw	r7,180(sp)
    1184:	df004615 	stw	fp,280(sp)
    1188:	dd804415 	stw	r22,272(sp)
    118c:	dd004215 	stw	r20,264(sp)
    1190:	dcc04115 	stw	r19,260(sp)
    1194:	dc804015 	stw	r18,256(sp)
    1198:	dc403f15 	stw	r17,252(sp)
    119c:	dc003e15 	stw	r16,248(sp)
    11a0:	0005f7c0 	call	5f7c <_localeconv_r>
    11a4:	10800017 	ldw	r2,0(r2)
    11a8:	1009883a 	mov	r4,r2
    11ac:	d8803415 	stw	r2,208(sp)
    11b0:	00010cc0 	call	10cc <strlen>
    11b4:	d8803715 	stw	r2,220(sp)
    11b8:	d8802c17 	ldw	r2,176(sp)
    11bc:	10000226 	beq	r2,zero,11c8 <___vfprintf_internal_r+0x64>
    11c0:	10800e17 	ldw	r2,56(r2)
    11c4:	1000f926 	beq	r2,zero,15ac <___vfprintf_internal_r+0x448>
    11c8:	b880030b 	ldhu	r2,12(r23)
    11cc:	10c8000c 	andi	r3,r2,8192
    11d0:	1800061e 	bne	r3,zero,11ec <___vfprintf_internal_r+0x88>
    11d4:	b9001917 	ldw	r4,100(r23)
    11d8:	00f7ffc4 	movi	r3,-8193
    11dc:	10880014 	ori	r2,r2,8192
    11e0:	20c6703a 	and	r3,r4,r3
    11e4:	b880030d 	sth	r2,12(r23)
    11e8:	b8c01915 	stw	r3,100(r23)
    11ec:	10c0020c 	andi	r3,r2,8
    11f0:	1800c126 	beq	r3,zero,14f8 <___vfprintf_internal_r+0x394>
    11f4:	b8c00417 	ldw	r3,16(r23)
    11f8:	1800bf26 	beq	r3,zero,14f8 <___vfprintf_internal_r+0x394>
    11fc:	1080068c 	andi	r2,r2,26
    1200:	00c00284 	movi	r3,10
    1204:	10c0c426 	beq	r2,r3,1518 <___vfprintf_internal_r+0x3b4>
    1208:	d8c00404 	addi	r3,sp,16
    120c:	05000074 	movhi	r20,1
    1210:	d9001e04 	addi	r4,sp,120
    1214:	a50feb84 	addi	r20,r20,16302
    1218:	d8c01e15 	stw	r3,120(sp)
    121c:	d8002015 	stw	zero,128(sp)
    1220:	d8001f15 	stw	zero,124(sp)
    1224:	d8003315 	stw	zero,204(sp)
    1228:	d8003615 	stw	zero,216(sp)
    122c:	d8003815 	stw	zero,224(sp)
    1230:	1811883a 	mov	r8,r3
    1234:	d8003915 	stw	zero,228(sp)
    1238:	d8003a15 	stw	zero,232(sp)
    123c:	d8002f15 	stw	zero,188(sp)
    1240:	d9002815 	stw	r4,160(sp)
    1244:	a8800007 	ldb	r2,0(r21)
    1248:	10027b26 	beq	r2,zero,1c38 <___vfprintf_internal_r+0xad4>
    124c:	00c00944 	movi	r3,37
    1250:	a821883a 	mov	r16,r21
    1254:	10c0021e 	bne	r2,r3,1260 <___vfprintf_internal_r+0xfc>
    1258:	00001406 	br	12ac <___vfprintf_internal_r+0x148>
    125c:	10c00326 	beq	r2,r3,126c <___vfprintf_internal_r+0x108>
    1260:	84000044 	addi	r16,r16,1
    1264:	80800007 	ldb	r2,0(r16)
    1268:	103ffc1e 	bne	r2,zero,125c <__alt_data_end+0xf800125c>
    126c:	8563c83a 	sub	r17,r16,r21
    1270:	88000e26 	beq	r17,zero,12ac <___vfprintf_internal_r+0x148>
    1274:	d8c02017 	ldw	r3,128(sp)
    1278:	d8801f17 	ldw	r2,124(sp)
    127c:	45400015 	stw	r21,0(r8)
    1280:	1c47883a 	add	r3,r3,r17
    1284:	10800044 	addi	r2,r2,1
    1288:	d8c02015 	stw	r3,128(sp)
    128c:	44400115 	stw	r17,4(r8)
    1290:	d8801f15 	stw	r2,124(sp)
    1294:	00c001c4 	movi	r3,7
    1298:	1880a716 	blt	r3,r2,1538 <___vfprintf_internal_r+0x3d4>
    129c:	42000204 	addi	r8,r8,8
    12a0:	d9402f17 	ldw	r5,188(sp)
    12a4:	2c4b883a 	add	r5,r5,r17
    12a8:	d9402f15 	stw	r5,188(sp)
    12ac:	80800007 	ldb	r2,0(r16)
    12b0:	1000a826 	beq	r2,zero,1554 <___vfprintf_internal_r+0x3f0>
    12b4:	84400047 	ldb	r17,1(r16)
    12b8:	00bfffc4 	movi	r2,-1
    12bc:	85400044 	addi	r21,r16,1
    12c0:	d8002785 	stb	zero,158(sp)
    12c4:	0007883a 	mov	r3,zero
    12c8:	000f883a 	mov	r7,zero
    12cc:	d8802915 	stw	r2,164(sp)
    12d0:	d8003115 	stw	zero,196(sp)
    12d4:	0025883a 	mov	r18,zero
    12d8:	01401604 	movi	r5,88
    12dc:	01800244 	movi	r6,9
    12e0:	02800a84 	movi	r10,42
    12e4:	02401b04 	movi	r9,108
    12e8:	ad400044 	addi	r21,r21,1
    12ec:	88bff804 	addi	r2,r17,-32
    12f0:	28830436 	bltu	r5,r2,1f04 <___vfprintf_internal_r+0xda0>
    12f4:	100490ba 	slli	r2,r2,2
    12f8:	01000034 	movhi	r4,0
    12fc:	2104c304 	addi	r4,r4,4876
    1300:	1105883a 	add	r2,r2,r4
    1304:	10800017 	ldw	r2,0(r2)
    1308:	1000683a 	jmp	r2
    130c:	00001e24 	muli	zero,zero,120
    1310:	00001f04 	movi	zero,124
    1314:	00001f04 	movi	zero,124
    1318:	00001e44 	movi	zero,121
    131c:	00001f04 	movi	zero,124
    1320:	00001f04 	movi	zero,124
    1324:	00001f04 	movi	zero,124
    1328:	00001f04 	movi	zero,124
    132c:	00001f04 	movi	zero,124
    1330:	00001f04 	movi	zero,124
    1334:	000015b8 	rdprs	zero,zero,86
    1338:	00001d60 	cmpeqi	zero,zero,117
    133c:	00001f04 	movi	zero,124
    1340:	00001480 	call	148 <alt_irq_handler+0x4c>
    1344:	000015e0 	cmpeqi	zero,zero,87
    1348:	00001f04 	movi	zero,124
    134c:	00001620 	cmpeqi	zero,zero,88
    1350:	0000162c 	andhi	zero,zero,88
    1354:	0000162c 	andhi	zero,zero,88
    1358:	0000162c 	andhi	zero,zero,88
    135c:	0000162c 	andhi	zero,zero,88
    1360:	0000162c 	andhi	zero,zero,88
    1364:	0000162c 	andhi	zero,zero,88
    1368:	0000162c 	andhi	zero,zero,88
    136c:	0000162c 	andhi	zero,zero,88
    1370:	0000162c 	andhi	zero,zero,88
    1374:	00001f04 	movi	zero,124
    1378:	00001f04 	movi	zero,124
    137c:	00001f04 	movi	zero,124
    1380:	00001f04 	movi	zero,124
    1384:	00001f04 	movi	zero,124
    1388:	00001f04 	movi	zero,124
    138c:	00001f04 	movi	zero,124
    1390:	00001f04 	movi	zero,124
    1394:	00001f04 	movi	zero,124
    1398:	00001f04 	movi	zero,124
    139c:	00001660 	cmpeqi	zero,zero,89
    13a0:	0000171c 	xori	zero,zero,92
    13a4:	00001f04 	movi	zero,124
    13a8:	0000171c 	xori	zero,zero,92
    13ac:	00001f04 	movi	zero,124
    13b0:	00001f04 	movi	zero,124
    13b4:	00001f04 	movi	zero,124
    13b8:	00001f04 	movi	zero,124
    13bc:	000017bc 	xorhi	zero,zero,94
    13c0:	00001f04 	movi	zero,124
    13c4:	00001f04 	movi	zero,124
    13c8:	000017c8 	cmpgei	zero,zero,95
    13cc:	00001f04 	movi	zero,124
    13d0:	00001f04 	movi	zero,124
    13d4:	00001f04 	movi	zero,124
    13d8:	00001f04 	movi	zero,124
    13dc:	00001f04 	movi	zero,124
    13e0:	00001c40 	call	1c4 <alt_irq_handler+0xc8>
    13e4:	00001f04 	movi	zero,124
    13e8:	00001f04 	movi	zero,124
    13ec:	00001ca0 	cmpeqi	zero,zero,114
    13f0:	00001f04 	movi	zero,124
    13f4:	00001f04 	movi	zero,124
    13f8:	00001f04 	movi	zero,124
    13fc:	00001f04 	movi	zero,124
    1400:	00001f04 	movi	zero,124
    1404:	00001f04 	movi	zero,124
    1408:	00001f04 	movi	zero,124
    140c:	00001f04 	movi	zero,124
    1410:	00001f04 	movi	zero,124
    1414:	00001f04 	movi	zero,124
    1418:	00001eb0 	cmpltui	zero,zero,122
    141c:	00001e50 	cmplti	zero,zero,121
    1420:	0000171c 	xori	zero,zero,92
    1424:	0000171c 	xori	zero,zero,92
    1428:	0000171c 	xori	zero,zero,92
    142c:	00001e60 	cmpeqi	zero,zero,121
    1430:	00001e50 	cmplti	zero,zero,121
    1434:	00001f04 	movi	zero,124
    1438:	00001f04 	movi	zero,124
    143c:	00001e6c 	andhi	zero,zero,121
    1440:	00001f04 	movi	zero,124
    1444:	00001e7c 	xorhi	zero,zero,121
    1448:	00001d50 	cmplti	zero,zero,117
    144c:	0000148c 	andi	zero,zero,82
    1450:	00001d70 	cmpltui	zero,zero,117
    1454:	00001f04 	movi	zero,124
    1458:	00001d7c 	xorhi	zero,zero,117
    145c:	00001f04 	movi	zero,124
    1460:	00001dd8 	cmpnei	zero,zero,119
    1464:	00001f04 	movi	zero,124
    1468:	00001f04 	movi	zero,124
    146c:	00001de8 	cmpgeui	zero,zero,119
    1470:	d9003117 	ldw	r4,196(sp)
    1474:	d8802d15 	stw	r2,180(sp)
    1478:	0109c83a 	sub	r4,zero,r4
    147c:	d9003115 	stw	r4,196(sp)
    1480:	94800114 	ori	r18,r18,4
    1484:	ac400007 	ldb	r17,0(r21)
    1488:	003f9706 	br	12e8 <__alt_data_end+0xf80012e8>
    148c:	00800c04 	movi	r2,48
    1490:	d9002d17 	ldw	r4,180(sp)
    1494:	d9402917 	ldw	r5,164(sp)
    1498:	d8802705 	stb	r2,156(sp)
    149c:	00801e04 	movi	r2,120
    14a0:	d8802745 	stb	r2,157(sp)
    14a4:	d8002785 	stb	zero,158(sp)
    14a8:	20c00104 	addi	r3,r4,4
    14ac:	24c00017 	ldw	r19,0(r4)
    14b0:	002d883a 	mov	r22,zero
    14b4:	90800094 	ori	r2,r18,2
    14b8:	28029a16 	blt	r5,zero,1f24 <___vfprintf_internal_r+0xdc0>
    14bc:	00bfdfc4 	movi	r2,-129
    14c0:	90a4703a 	and	r18,r18,r2
    14c4:	d8c02d15 	stw	r3,180(sp)
    14c8:	94800094 	ori	r18,r18,2
    14cc:	9802871e 	bne	r19,zero,1eec <___vfprintf_internal_r+0xd88>
    14d0:	00800074 	movhi	r2,1
    14d4:	108fe404 	addi	r2,r2,16272
    14d8:	d8803915 	stw	r2,228(sp)
    14dc:	04401e04 	movi	r17,120
    14e0:	d8802917 	ldw	r2,164(sp)
    14e4:	0039883a 	mov	fp,zero
    14e8:	1001e926 	beq	r2,zero,1c90 <___vfprintf_internal_r+0xb2c>
    14ec:	0027883a 	mov	r19,zero
    14f0:	002d883a 	mov	r22,zero
    14f4:	00020506 	br	1d0c <___vfprintf_internal_r+0xba8>
    14f8:	d9002c17 	ldw	r4,176(sp)
    14fc:	b80b883a 	mov	r5,r23
    1500:	00034340 	call	3434 <__swsetup_r>
    1504:	1005ac1e 	bne	r2,zero,2bb8 <___vfprintf_internal_r+0x1a54>
    1508:	b880030b 	ldhu	r2,12(r23)
    150c:	00c00284 	movi	r3,10
    1510:	1080068c 	andi	r2,r2,26
    1514:	10ff3c1e 	bne	r2,r3,1208 <__alt_data_end+0xf8001208>
    1518:	b880038f 	ldh	r2,14(r23)
    151c:	103f3a16 	blt	r2,zero,1208 <__alt_data_end+0xf8001208>
    1520:	d9c02d17 	ldw	r7,180(sp)
    1524:	d9002c17 	ldw	r4,176(sp)
    1528:	a80d883a 	mov	r6,r21
    152c:	b80b883a 	mov	r5,r23
    1530:	00033780 	call	3378 <__sbprintf>
    1534:	00001106 	br	157c <___vfprintf_internal_r+0x418>
    1538:	d9002c17 	ldw	r4,176(sp)
    153c:	d9801e04 	addi	r6,sp,120
    1540:	b80b883a 	mov	r5,r23
    1544:	0007f000 	call	7f00 <__sprint_r>
    1548:	1000081e 	bne	r2,zero,156c <___vfprintf_internal_r+0x408>
    154c:	da000404 	addi	r8,sp,16
    1550:	003f5306 	br	12a0 <__alt_data_end+0xf80012a0>
    1554:	d8802017 	ldw	r2,128(sp)
    1558:	10000426 	beq	r2,zero,156c <___vfprintf_internal_r+0x408>
    155c:	d9002c17 	ldw	r4,176(sp)
    1560:	d9801e04 	addi	r6,sp,120
    1564:	b80b883a 	mov	r5,r23
    1568:	0007f000 	call	7f00 <__sprint_r>
    156c:	b880030b 	ldhu	r2,12(r23)
    1570:	1080100c 	andi	r2,r2,64
    1574:	1005901e 	bne	r2,zero,2bb8 <___vfprintf_internal_r+0x1a54>
    1578:	d8802f17 	ldw	r2,188(sp)
    157c:	dfc04717 	ldw	ra,284(sp)
    1580:	df004617 	ldw	fp,280(sp)
    1584:	ddc04517 	ldw	r23,276(sp)
    1588:	dd804417 	ldw	r22,272(sp)
    158c:	dd404317 	ldw	r21,268(sp)
    1590:	dd004217 	ldw	r20,264(sp)
    1594:	dcc04117 	ldw	r19,260(sp)
    1598:	dc804017 	ldw	r18,256(sp)
    159c:	dc403f17 	ldw	r17,252(sp)
    15a0:	dc003e17 	ldw	r16,248(sp)
    15a4:	dec04804 	addi	sp,sp,288
    15a8:	f800283a 	ret
    15ac:	d9002c17 	ldw	r4,176(sp)
    15b0:	00054080 	call	5408 <__sinit>
    15b4:	003f0406 	br	11c8 <__alt_data_end+0xf80011c8>
    15b8:	d8802d17 	ldw	r2,180(sp)
    15bc:	d9002d17 	ldw	r4,180(sp)
    15c0:	10800017 	ldw	r2,0(r2)
    15c4:	d8803115 	stw	r2,196(sp)
    15c8:	20800104 	addi	r2,r4,4
    15cc:	d9003117 	ldw	r4,196(sp)
    15d0:	203fa716 	blt	r4,zero,1470 <__alt_data_end+0xf8001470>
    15d4:	d8802d15 	stw	r2,180(sp)
    15d8:	ac400007 	ldb	r17,0(r21)
    15dc:	003f4206 	br	12e8 <__alt_data_end+0xf80012e8>
    15e0:	ac400007 	ldb	r17,0(r21)
    15e4:	aac00044 	addi	r11,r21,1
    15e8:	8a872826 	beq	r17,r10,328c <___vfprintf_internal_r+0x2128>
    15ec:	88bff404 	addi	r2,r17,-48
    15f0:	0009883a 	mov	r4,zero
    15f4:	30867d36 	bltu	r6,r2,2fec <___vfprintf_internal_r+0x1e88>
    15f8:	5c400007 	ldb	r17,0(r11)
    15fc:	210002a4 	muli	r4,r4,10
    1600:	5d400044 	addi	r21,r11,1
    1604:	a817883a 	mov	r11,r21
    1608:	2089883a 	add	r4,r4,r2
    160c:	88bff404 	addi	r2,r17,-48
    1610:	30bff92e 	bgeu	r6,r2,15f8 <__alt_data_end+0xf80015f8>
    1614:	2005c916 	blt	r4,zero,2d3c <___vfprintf_internal_r+0x1bd8>
    1618:	d9002915 	stw	r4,164(sp)
    161c:	003f3306 	br	12ec <__alt_data_end+0xf80012ec>
    1620:	94802014 	ori	r18,r18,128
    1624:	ac400007 	ldb	r17,0(r21)
    1628:	003f2f06 	br	12e8 <__alt_data_end+0xf80012e8>
    162c:	a809883a 	mov	r4,r21
    1630:	d8003115 	stw	zero,196(sp)
    1634:	88bff404 	addi	r2,r17,-48
    1638:	0017883a 	mov	r11,zero
    163c:	24400007 	ldb	r17,0(r4)
    1640:	5ac002a4 	muli	r11,r11,10
    1644:	ad400044 	addi	r21,r21,1
    1648:	a809883a 	mov	r4,r21
    164c:	12d7883a 	add	r11,r2,r11
    1650:	88bff404 	addi	r2,r17,-48
    1654:	30bff92e 	bgeu	r6,r2,163c <__alt_data_end+0xf800163c>
    1658:	dac03115 	stw	r11,196(sp)
    165c:	003f2306 	br	12ec <__alt_data_end+0xf80012ec>
    1660:	18c03fcc 	andi	r3,r3,255
    1664:	18072b1e 	bne	r3,zero,3314 <___vfprintf_internal_r+0x21b0>
    1668:	94800414 	ori	r18,r18,16
    166c:	9080080c 	andi	r2,r18,32
    1670:	10037b26 	beq	r2,zero,2460 <___vfprintf_internal_r+0x12fc>
    1674:	d9402d17 	ldw	r5,180(sp)
    1678:	28800117 	ldw	r2,4(r5)
    167c:	2cc00017 	ldw	r19,0(r5)
    1680:	29400204 	addi	r5,r5,8
    1684:	d9402d15 	stw	r5,180(sp)
    1688:	102d883a 	mov	r22,r2
    168c:	10044b16 	blt	r2,zero,27bc <___vfprintf_internal_r+0x1658>
    1690:	d9402917 	ldw	r5,164(sp)
    1694:	df002783 	ldbu	fp,158(sp)
    1698:	2803bc16 	blt	r5,zero,258c <___vfprintf_internal_r+0x1428>
    169c:	00ffdfc4 	movi	r3,-129
    16a0:	9d84b03a 	or	r2,r19,r22
    16a4:	90e4703a 	and	r18,r18,r3
    16a8:	10017726 	beq	r2,zero,1c88 <___vfprintf_internal_r+0xb24>
    16ac:	b0038326 	beq	r22,zero,24bc <___vfprintf_internal_r+0x1358>
    16b0:	dc402a15 	stw	r17,168(sp)
    16b4:	dc001e04 	addi	r16,sp,120
    16b8:	b023883a 	mov	r17,r22
    16bc:	402d883a 	mov	r22,r8
    16c0:	9809883a 	mov	r4,r19
    16c4:	880b883a 	mov	r5,r17
    16c8:	01800284 	movi	r6,10
    16cc:	000f883a 	mov	r7,zero
    16d0:	000a2f80 	call	a2f8 <__umoddi3>
    16d4:	10800c04 	addi	r2,r2,48
    16d8:	843fffc4 	addi	r16,r16,-1
    16dc:	9809883a 	mov	r4,r19
    16e0:	880b883a 	mov	r5,r17
    16e4:	80800005 	stb	r2,0(r16)
    16e8:	01800284 	movi	r6,10
    16ec:	000f883a 	mov	r7,zero
    16f0:	0009d800 	call	9d80 <__udivdi3>
    16f4:	1027883a 	mov	r19,r2
    16f8:	10c4b03a 	or	r2,r2,r3
    16fc:	1823883a 	mov	r17,r3
    1700:	103fef1e 	bne	r2,zero,16c0 <__alt_data_end+0xf80016c0>
    1704:	d8c02817 	ldw	r3,160(sp)
    1708:	dc402a17 	ldw	r17,168(sp)
    170c:	b011883a 	mov	r8,r22
    1710:	1c07c83a 	sub	r3,r3,r16
    1714:	d8c02e15 	stw	r3,184(sp)
    1718:	00005906 	br	1880 <___vfprintf_internal_r+0x71c>
    171c:	18c03fcc 	andi	r3,r3,255
    1720:	1806fa1e 	bne	r3,zero,330c <___vfprintf_internal_r+0x21a8>
    1724:	9080020c 	andi	r2,r18,8
    1728:	10048a26 	beq	r2,zero,2954 <___vfprintf_internal_r+0x17f0>
    172c:	d8c02d17 	ldw	r3,180(sp)
    1730:	d9002d17 	ldw	r4,180(sp)
    1734:	d9402d17 	ldw	r5,180(sp)
    1738:	18c00017 	ldw	r3,0(r3)
    173c:	21000117 	ldw	r4,4(r4)
    1740:	29400204 	addi	r5,r5,8
    1744:	d8c03615 	stw	r3,216(sp)
    1748:	d9003815 	stw	r4,224(sp)
    174c:	d9402d15 	stw	r5,180(sp)
    1750:	d9003617 	ldw	r4,216(sp)
    1754:	d9403817 	ldw	r5,224(sp)
    1758:	da003d15 	stw	r8,244(sp)
    175c:	04000044 	movi	r16,1
    1760:	0007b780 	call	7b78 <__fpclassifyd>
    1764:	da003d17 	ldw	r8,244(sp)
    1768:	14041f1e 	bne	r2,r16,27e8 <___vfprintf_internal_r+0x1684>
    176c:	d9003617 	ldw	r4,216(sp)
    1770:	d9403817 	ldw	r5,224(sp)
    1774:	000d883a 	mov	r6,zero
    1778:	000f883a 	mov	r7,zero
    177c:	000bcdc0 	call	bcdc <__ledf2>
    1780:	da003d17 	ldw	r8,244(sp)
    1784:	1005be16 	blt	r2,zero,2e80 <___vfprintf_internal_r+0x1d1c>
    1788:	df002783 	ldbu	fp,158(sp)
    178c:	008011c4 	movi	r2,71
    1790:	1445330e 	bge	r2,r17,2c60 <___vfprintf_internal_r+0x1afc>
    1794:	04000074 	movhi	r16,1
    1798:	840fdc04 	addi	r16,r16,16240
    179c:	00c000c4 	movi	r3,3
    17a0:	00bfdfc4 	movi	r2,-129
    17a4:	d8c02a15 	stw	r3,168(sp)
    17a8:	90a4703a 	and	r18,r18,r2
    17ac:	d8c02e15 	stw	r3,184(sp)
    17b0:	d8002915 	stw	zero,164(sp)
    17b4:	d8003215 	stw	zero,200(sp)
    17b8:	00003706 	br	1898 <___vfprintf_internal_r+0x734>
    17bc:	94800214 	ori	r18,r18,8
    17c0:	ac400007 	ldb	r17,0(r21)
    17c4:	003ec806 	br	12e8 <__alt_data_end+0xf80012e8>
    17c8:	18c03fcc 	andi	r3,r3,255
    17cc:	1806db1e 	bne	r3,zero,333c <___vfprintf_internal_r+0x21d8>
    17d0:	94800414 	ori	r18,r18,16
    17d4:	9080080c 	andi	r2,r18,32
    17d8:	1002d826 	beq	r2,zero,233c <___vfprintf_internal_r+0x11d8>
    17dc:	d9402d17 	ldw	r5,180(sp)
    17e0:	d8c02917 	ldw	r3,164(sp)
    17e4:	d8002785 	stb	zero,158(sp)
    17e8:	28800204 	addi	r2,r5,8
    17ec:	2cc00017 	ldw	r19,0(r5)
    17f0:	2d800117 	ldw	r22,4(r5)
    17f4:	18048f16 	blt	r3,zero,2a34 <___vfprintf_internal_r+0x18d0>
    17f8:	013fdfc4 	movi	r4,-129
    17fc:	9d86b03a 	or	r3,r19,r22
    1800:	d8802d15 	stw	r2,180(sp)
    1804:	9124703a 	and	r18,r18,r4
    1808:	1802d91e 	bne	r3,zero,2370 <___vfprintf_internal_r+0x120c>
    180c:	d8c02917 	ldw	r3,164(sp)
    1810:	0039883a 	mov	fp,zero
    1814:	1805c326 	beq	r3,zero,2f24 <___vfprintf_internal_r+0x1dc0>
    1818:	0027883a 	mov	r19,zero
    181c:	002d883a 	mov	r22,zero
    1820:	dc001e04 	addi	r16,sp,120
    1824:	9806d0fa 	srli	r3,r19,3
    1828:	b008977a 	slli	r4,r22,29
    182c:	b02cd0fa 	srli	r22,r22,3
    1830:	9cc001cc 	andi	r19,r19,7
    1834:	98800c04 	addi	r2,r19,48
    1838:	843fffc4 	addi	r16,r16,-1
    183c:	20e6b03a 	or	r19,r4,r3
    1840:	80800005 	stb	r2,0(r16)
    1844:	9d86b03a 	or	r3,r19,r22
    1848:	183ff61e 	bne	r3,zero,1824 <__alt_data_end+0xf8001824>
    184c:	90c0004c 	andi	r3,r18,1
    1850:	18013b26 	beq	r3,zero,1d40 <___vfprintf_internal_r+0xbdc>
    1854:	10803fcc 	andi	r2,r2,255
    1858:	1080201c 	xori	r2,r2,128
    185c:	10bfe004 	addi	r2,r2,-128
    1860:	00c00c04 	movi	r3,48
    1864:	10c13626 	beq	r2,r3,1d40 <___vfprintf_internal_r+0xbdc>
    1868:	80ffffc5 	stb	r3,-1(r16)
    186c:	d8c02817 	ldw	r3,160(sp)
    1870:	80bfffc4 	addi	r2,r16,-1
    1874:	1021883a 	mov	r16,r2
    1878:	1887c83a 	sub	r3,r3,r2
    187c:	d8c02e15 	stw	r3,184(sp)
    1880:	d8802e17 	ldw	r2,184(sp)
    1884:	d9002917 	ldw	r4,164(sp)
    1888:	1100010e 	bge	r2,r4,1890 <___vfprintf_internal_r+0x72c>
    188c:	2005883a 	mov	r2,r4
    1890:	d8802a15 	stw	r2,168(sp)
    1894:	d8003215 	stw	zero,200(sp)
    1898:	e7003fcc 	andi	fp,fp,255
    189c:	e700201c 	xori	fp,fp,128
    18a0:	e73fe004 	addi	fp,fp,-128
    18a4:	e0000326 	beq	fp,zero,18b4 <___vfprintf_internal_r+0x750>
    18a8:	d8c02a17 	ldw	r3,168(sp)
    18ac:	18c00044 	addi	r3,r3,1
    18b0:	d8c02a15 	stw	r3,168(sp)
    18b4:	90c0008c 	andi	r3,r18,2
    18b8:	d8c02b15 	stw	r3,172(sp)
    18bc:	18000326 	beq	r3,zero,18cc <___vfprintf_internal_r+0x768>
    18c0:	d8c02a17 	ldw	r3,168(sp)
    18c4:	18c00084 	addi	r3,r3,2
    18c8:	d8c02a15 	stw	r3,168(sp)
    18cc:	90c0210c 	andi	r3,r18,132
    18d0:	d8c03015 	stw	r3,192(sp)
    18d4:	1801a31e 	bne	r3,zero,1f64 <___vfprintf_internal_r+0xe00>
    18d8:	d9003117 	ldw	r4,196(sp)
    18dc:	d8c02a17 	ldw	r3,168(sp)
    18e0:	20e7c83a 	sub	r19,r4,r3
    18e4:	04c19f0e 	bge	zero,r19,1f64 <___vfprintf_internal_r+0xe00>
    18e8:	02400404 	movi	r9,16
    18ec:	d8c02017 	ldw	r3,128(sp)
    18f0:	d8801f17 	ldw	r2,124(sp)
    18f4:	4cc50d0e 	bge	r9,r19,2d2c <___vfprintf_internal_r+0x1bc8>
    18f8:	01400074 	movhi	r5,1
    18fc:	294fef84 	addi	r5,r5,16318
    1900:	dc403b15 	stw	r17,236(sp)
    1904:	d9403515 	stw	r5,212(sp)
    1908:	9823883a 	mov	r17,r19
    190c:	482d883a 	mov	r22,r9
    1910:	9027883a 	mov	r19,r18
    1914:	070001c4 	movi	fp,7
    1918:	8025883a 	mov	r18,r16
    191c:	dc002c17 	ldw	r16,176(sp)
    1920:	00000306 	br	1930 <___vfprintf_internal_r+0x7cc>
    1924:	8c7ffc04 	addi	r17,r17,-16
    1928:	42000204 	addi	r8,r8,8
    192c:	b440130e 	bge	r22,r17,197c <___vfprintf_internal_r+0x818>
    1930:	01000074 	movhi	r4,1
    1934:	18c00404 	addi	r3,r3,16
    1938:	10800044 	addi	r2,r2,1
    193c:	210fef84 	addi	r4,r4,16318
    1940:	41000015 	stw	r4,0(r8)
    1944:	45800115 	stw	r22,4(r8)
    1948:	d8c02015 	stw	r3,128(sp)
    194c:	d8801f15 	stw	r2,124(sp)
    1950:	e0bff40e 	bge	fp,r2,1924 <__alt_data_end+0xf8001924>
    1954:	d9801e04 	addi	r6,sp,120
    1958:	b80b883a 	mov	r5,r23
    195c:	8009883a 	mov	r4,r16
    1960:	0007f000 	call	7f00 <__sprint_r>
    1964:	103f011e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    1968:	8c7ffc04 	addi	r17,r17,-16
    196c:	d8c02017 	ldw	r3,128(sp)
    1970:	d8801f17 	ldw	r2,124(sp)
    1974:	da000404 	addi	r8,sp,16
    1978:	b47fed16 	blt	r22,r17,1930 <__alt_data_end+0xf8001930>
    197c:	9021883a 	mov	r16,r18
    1980:	9825883a 	mov	r18,r19
    1984:	8827883a 	mov	r19,r17
    1988:	dc403b17 	ldw	r17,236(sp)
    198c:	d9403517 	ldw	r5,212(sp)
    1990:	98c7883a 	add	r3,r19,r3
    1994:	10800044 	addi	r2,r2,1
    1998:	41400015 	stw	r5,0(r8)
    199c:	44c00115 	stw	r19,4(r8)
    19a0:	d8c02015 	stw	r3,128(sp)
    19a4:	d8801f15 	stw	r2,124(sp)
    19a8:	010001c4 	movi	r4,7
    19ac:	2082a316 	blt	r4,r2,243c <___vfprintf_internal_r+0x12d8>
    19b0:	df002787 	ldb	fp,158(sp)
    19b4:	42000204 	addi	r8,r8,8
    19b8:	e0000c26 	beq	fp,zero,19ec <___vfprintf_internal_r+0x888>
    19bc:	d8801f17 	ldw	r2,124(sp)
    19c0:	d9002784 	addi	r4,sp,158
    19c4:	18c00044 	addi	r3,r3,1
    19c8:	10800044 	addi	r2,r2,1
    19cc:	41000015 	stw	r4,0(r8)
    19d0:	01000044 	movi	r4,1
    19d4:	41000115 	stw	r4,4(r8)
    19d8:	d8c02015 	stw	r3,128(sp)
    19dc:	d8801f15 	stw	r2,124(sp)
    19e0:	010001c4 	movi	r4,7
    19e4:	20823c16 	blt	r4,r2,22d8 <___vfprintf_internal_r+0x1174>
    19e8:	42000204 	addi	r8,r8,8
    19ec:	d8802b17 	ldw	r2,172(sp)
    19f0:	10000c26 	beq	r2,zero,1a24 <___vfprintf_internal_r+0x8c0>
    19f4:	d8801f17 	ldw	r2,124(sp)
    19f8:	d9002704 	addi	r4,sp,156
    19fc:	18c00084 	addi	r3,r3,2
    1a00:	10800044 	addi	r2,r2,1
    1a04:	41000015 	stw	r4,0(r8)
    1a08:	01000084 	movi	r4,2
    1a0c:	41000115 	stw	r4,4(r8)
    1a10:	d8c02015 	stw	r3,128(sp)
    1a14:	d8801f15 	stw	r2,124(sp)
    1a18:	010001c4 	movi	r4,7
    1a1c:	20823616 	blt	r4,r2,22f8 <___vfprintf_internal_r+0x1194>
    1a20:	42000204 	addi	r8,r8,8
    1a24:	d9003017 	ldw	r4,192(sp)
    1a28:	00802004 	movi	r2,128
    1a2c:	20819926 	beq	r4,r2,2094 <___vfprintf_internal_r+0xf30>
    1a30:	d9402917 	ldw	r5,164(sp)
    1a34:	d8802e17 	ldw	r2,184(sp)
    1a38:	28adc83a 	sub	r22,r5,r2
    1a3c:	0580310e 	bge	zero,r22,1b04 <___vfprintf_internal_r+0x9a0>
    1a40:	07000404 	movi	fp,16
    1a44:	d8801f17 	ldw	r2,124(sp)
    1a48:	e584140e 	bge	fp,r22,2a9c <___vfprintf_internal_r+0x1938>
    1a4c:	01400074 	movhi	r5,1
    1a50:	294feb84 	addi	r5,r5,16302
    1a54:	dc402915 	stw	r17,164(sp)
    1a58:	d9402b15 	stw	r5,172(sp)
    1a5c:	b023883a 	mov	r17,r22
    1a60:	04c001c4 	movi	r19,7
    1a64:	a82d883a 	mov	r22,r21
    1a68:	902b883a 	mov	r21,r18
    1a6c:	8025883a 	mov	r18,r16
    1a70:	dc002c17 	ldw	r16,176(sp)
    1a74:	00000306 	br	1a84 <___vfprintf_internal_r+0x920>
    1a78:	8c7ffc04 	addi	r17,r17,-16
    1a7c:	42000204 	addi	r8,r8,8
    1a80:	e440110e 	bge	fp,r17,1ac8 <___vfprintf_internal_r+0x964>
    1a84:	18c00404 	addi	r3,r3,16
    1a88:	10800044 	addi	r2,r2,1
    1a8c:	45000015 	stw	r20,0(r8)
    1a90:	47000115 	stw	fp,4(r8)
    1a94:	d8c02015 	stw	r3,128(sp)
    1a98:	d8801f15 	stw	r2,124(sp)
    1a9c:	98bff60e 	bge	r19,r2,1a78 <__alt_data_end+0xf8001a78>
    1aa0:	d9801e04 	addi	r6,sp,120
    1aa4:	b80b883a 	mov	r5,r23
    1aa8:	8009883a 	mov	r4,r16
    1aac:	0007f000 	call	7f00 <__sprint_r>
    1ab0:	103eae1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    1ab4:	8c7ffc04 	addi	r17,r17,-16
    1ab8:	d8c02017 	ldw	r3,128(sp)
    1abc:	d8801f17 	ldw	r2,124(sp)
    1ac0:	da000404 	addi	r8,sp,16
    1ac4:	e47fef16 	blt	fp,r17,1a84 <__alt_data_end+0xf8001a84>
    1ac8:	9021883a 	mov	r16,r18
    1acc:	a825883a 	mov	r18,r21
    1ad0:	b02b883a 	mov	r21,r22
    1ad4:	882d883a 	mov	r22,r17
    1ad8:	dc402917 	ldw	r17,164(sp)
    1adc:	d9002b17 	ldw	r4,172(sp)
    1ae0:	1d87883a 	add	r3,r3,r22
    1ae4:	10800044 	addi	r2,r2,1
    1ae8:	41000015 	stw	r4,0(r8)
    1aec:	45800115 	stw	r22,4(r8)
    1af0:	d8c02015 	stw	r3,128(sp)
    1af4:	d8801f15 	stw	r2,124(sp)
    1af8:	010001c4 	movi	r4,7
    1afc:	2081ee16 	blt	r4,r2,22b8 <___vfprintf_internal_r+0x1154>
    1b00:	42000204 	addi	r8,r8,8
    1b04:	9080400c 	andi	r2,r18,256
    1b08:	1001181e 	bne	r2,zero,1f6c <___vfprintf_internal_r+0xe08>
    1b0c:	d9402e17 	ldw	r5,184(sp)
    1b10:	d8801f17 	ldw	r2,124(sp)
    1b14:	44000015 	stw	r16,0(r8)
    1b18:	1947883a 	add	r3,r3,r5
    1b1c:	10800044 	addi	r2,r2,1
    1b20:	41400115 	stw	r5,4(r8)
    1b24:	d8c02015 	stw	r3,128(sp)
    1b28:	d8801f15 	stw	r2,124(sp)
    1b2c:	010001c4 	movi	r4,7
    1b30:	2081d316 	blt	r4,r2,2280 <___vfprintf_internal_r+0x111c>
    1b34:	42000204 	addi	r8,r8,8
    1b38:	9480010c 	andi	r18,r18,4
    1b3c:	90003226 	beq	r18,zero,1c08 <___vfprintf_internal_r+0xaa4>
    1b40:	d9403117 	ldw	r5,196(sp)
    1b44:	d8802a17 	ldw	r2,168(sp)
    1b48:	28a1c83a 	sub	r16,r5,r2
    1b4c:	04002e0e 	bge	zero,r16,1c08 <___vfprintf_internal_r+0xaa4>
    1b50:	04400404 	movi	r17,16
    1b54:	d8801f17 	ldw	r2,124(sp)
    1b58:	8c04a20e 	bge	r17,r16,2de4 <___vfprintf_internal_r+0x1c80>
    1b5c:	01400074 	movhi	r5,1
    1b60:	294fef84 	addi	r5,r5,16318
    1b64:	d9403515 	stw	r5,212(sp)
    1b68:	048001c4 	movi	r18,7
    1b6c:	dcc02c17 	ldw	r19,176(sp)
    1b70:	00000306 	br	1b80 <___vfprintf_internal_r+0xa1c>
    1b74:	843ffc04 	addi	r16,r16,-16
    1b78:	42000204 	addi	r8,r8,8
    1b7c:	8c00130e 	bge	r17,r16,1bcc <___vfprintf_internal_r+0xa68>
    1b80:	01000074 	movhi	r4,1
    1b84:	18c00404 	addi	r3,r3,16
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	210fef84 	addi	r4,r4,16318
    1b90:	41000015 	stw	r4,0(r8)
    1b94:	44400115 	stw	r17,4(r8)
    1b98:	d8c02015 	stw	r3,128(sp)
    1b9c:	d8801f15 	stw	r2,124(sp)
    1ba0:	90bff40e 	bge	r18,r2,1b74 <__alt_data_end+0xf8001b74>
    1ba4:	d9801e04 	addi	r6,sp,120
    1ba8:	b80b883a 	mov	r5,r23
    1bac:	9809883a 	mov	r4,r19
    1bb0:	0007f000 	call	7f00 <__sprint_r>
    1bb4:	103e6d1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    1bb8:	843ffc04 	addi	r16,r16,-16
    1bbc:	d8c02017 	ldw	r3,128(sp)
    1bc0:	d8801f17 	ldw	r2,124(sp)
    1bc4:	da000404 	addi	r8,sp,16
    1bc8:	8c3fed16 	blt	r17,r16,1b80 <__alt_data_end+0xf8001b80>
    1bcc:	d9403517 	ldw	r5,212(sp)
    1bd0:	1c07883a 	add	r3,r3,r16
    1bd4:	10800044 	addi	r2,r2,1
    1bd8:	41400015 	stw	r5,0(r8)
    1bdc:	44000115 	stw	r16,4(r8)
    1be0:	d8c02015 	stw	r3,128(sp)
    1be4:	d8801f15 	stw	r2,124(sp)
    1be8:	010001c4 	movi	r4,7
    1bec:	2080060e 	bge	r4,r2,1c08 <___vfprintf_internal_r+0xaa4>
    1bf0:	d9002c17 	ldw	r4,176(sp)
    1bf4:	d9801e04 	addi	r6,sp,120
    1bf8:	b80b883a 	mov	r5,r23
    1bfc:	0007f000 	call	7f00 <__sprint_r>
    1c00:	103e5a1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    1c04:	d8c02017 	ldw	r3,128(sp)
    1c08:	d8803117 	ldw	r2,196(sp)
    1c0c:	d9002a17 	ldw	r4,168(sp)
    1c10:	1100010e 	bge	r2,r4,1c18 <___vfprintf_internal_r+0xab4>
    1c14:	2005883a 	mov	r2,r4
    1c18:	d9402f17 	ldw	r5,188(sp)
    1c1c:	288b883a 	add	r5,r5,r2
    1c20:	d9402f15 	stw	r5,188(sp)
    1c24:	18019e1e 	bne	r3,zero,22a0 <___vfprintf_internal_r+0x113c>
    1c28:	a8800007 	ldb	r2,0(r21)
    1c2c:	d8001f15 	stw	zero,124(sp)
    1c30:	da000404 	addi	r8,sp,16
    1c34:	103d851e 	bne	r2,zero,124c <__alt_data_end+0xf800124c>
    1c38:	a821883a 	mov	r16,r21
    1c3c:	003d9b06 	br	12ac <__alt_data_end+0xf80012ac>
    1c40:	18c03fcc 	andi	r3,r3,255
    1c44:	1805c11e 	bne	r3,zero,334c <___vfprintf_internal_r+0x21e8>
    1c48:	94800414 	ori	r18,r18,16
    1c4c:	9080080c 	andi	r2,r18,32
    1c50:	10020c26 	beq	r2,zero,2484 <___vfprintf_internal_r+0x1320>
    1c54:	d8802d17 	ldw	r2,180(sp)
    1c58:	d9002917 	ldw	r4,164(sp)
    1c5c:	d8002785 	stb	zero,158(sp)
    1c60:	10c00204 	addi	r3,r2,8
    1c64:	14c00017 	ldw	r19,0(r2)
    1c68:	15800117 	ldw	r22,4(r2)
    1c6c:	20040f16 	blt	r4,zero,2cac <___vfprintf_internal_r+0x1b48>
    1c70:	013fdfc4 	movi	r4,-129
    1c74:	9d84b03a 	or	r2,r19,r22
    1c78:	d8c02d15 	stw	r3,180(sp)
    1c7c:	9124703a 	and	r18,r18,r4
    1c80:	0039883a 	mov	fp,zero
    1c84:	103e891e 	bne	r2,zero,16ac <__alt_data_end+0xf80016ac>
    1c88:	d9002917 	ldw	r4,164(sp)
    1c8c:	2002c11e 	bne	r4,zero,2794 <___vfprintf_internal_r+0x1630>
    1c90:	d8002915 	stw	zero,164(sp)
    1c94:	d8002e15 	stw	zero,184(sp)
    1c98:	dc001e04 	addi	r16,sp,120
    1c9c:	003ef806 	br	1880 <__alt_data_end+0xf8001880>
    1ca0:	18c03fcc 	andi	r3,r3,255
    1ca4:	18059d1e 	bne	r3,zero,331c <___vfprintf_internal_r+0x21b8>
    1ca8:	01400074 	movhi	r5,1
    1cac:	294fdf04 	addi	r5,r5,16252
    1cb0:	d9403915 	stw	r5,228(sp)
    1cb4:	9080080c 	andi	r2,r18,32
    1cb8:	10005226 	beq	r2,zero,1e04 <___vfprintf_internal_r+0xca0>
    1cbc:	d8802d17 	ldw	r2,180(sp)
    1cc0:	14c00017 	ldw	r19,0(r2)
    1cc4:	15800117 	ldw	r22,4(r2)
    1cc8:	10800204 	addi	r2,r2,8
    1ccc:	d8802d15 	stw	r2,180(sp)
    1cd0:	9080004c 	andi	r2,r18,1
    1cd4:	10019026 	beq	r2,zero,2318 <___vfprintf_internal_r+0x11b4>
    1cd8:	9d84b03a 	or	r2,r19,r22
    1cdc:	10036926 	beq	r2,zero,2a84 <___vfprintf_internal_r+0x1920>
    1ce0:	d8c02917 	ldw	r3,164(sp)
    1ce4:	00800c04 	movi	r2,48
    1ce8:	d8802705 	stb	r2,156(sp)
    1cec:	dc402745 	stb	r17,157(sp)
    1cf0:	d8002785 	stb	zero,158(sp)
    1cf4:	90800094 	ori	r2,r18,2
    1cf8:	18045d16 	blt	r3,zero,2e70 <___vfprintf_internal_r+0x1d0c>
    1cfc:	00bfdfc4 	movi	r2,-129
    1d00:	90a4703a 	and	r18,r18,r2
    1d04:	94800094 	ori	r18,r18,2
    1d08:	0039883a 	mov	fp,zero
    1d0c:	d9003917 	ldw	r4,228(sp)
    1d10:	dc001e04 	addi	r16,sp,120
    1d14:	988003cc 	andi	r2,r19,15
    1d18:	b006973a 	slli	r3,r22,28
    1d1c:	2085883a 	add	r2,r4,r2
    1d20:	9826d13a 	srli	r19,r19,4
    1d24:	10800003 	ldbu	r2,0(r2)
    1d28:	b02cd13a 	srli	r22,r22,4
    1d2c:	843fffc4 	addi	r16,r16,-1
    1d30:	1ce6b03a 	or	r19,r3,r19
    1d34:	80800005 	stb	r2,0(r16)
    1d38:	9d84b03a 	or	r2,r19,r22
    1d3c:	103ff51e 	bne	r2,zero,1d14 <__alt_data_end+0xf8001d14>
    1d40:	d8c02817 	ldw	r3,160(sp)
    1d44:	1c07c83a 	sub	r3,r3,r16
    1d48:	d8c02e15 	stw	r3,184(sp)
    1d4c:	003ecc06 	br	1880 <__alt_data_end+0xf8001880>
    1d50:	18c03fcc 	andi	r3,r3,255
    1d54:	183e9f26 	beq	r3,zero,17d4 <__alt_data_end+0xf80017d4>
    1d58:	d9c02785 	stb	r7,158(sp)
    1d5c:	003e9d06 	br	17d4 <__alt_data_end+0xf80017d4>
    1d60:	00c00044 	movi	r3,1
    1d64:	01c00ac4 	movi	r7,43
    1d68:	ac400007 	ldb	r17,0(r21)
    1d6c:	003d5e06 	br	12e8 <__alt_data_end+0xf80012e8>
    1d70:	94800814 	ori	r18,r18,32
    1d74:	ac400007 	ldb	r17,0(r21)
    1d78:	003d5b06 	br	12e8 <__alt_data_end+0xf80012e8>
    1d7c:	d8c02d17 	ldw	r3,180(sp)
    1d80:	d8002785 	stb	zero,158(sp)
    1d84:	1c000017 	ldw	r16,0(r3)
    1d88:	1cc00104 	addi	r19,r3,4
    1d8c:	80041926 	beq	r16,zero,2df4 <___vfprintf_internal_r+0x1c90>
    1d90:	d9002917 	ldw	r4,164(sp)
    1d94:	2003d016 	blt	r4,zero,2cd8 <___vfprintf_internal_r+0x1b74>
    1d98:	200d883a 	mov	r6,r4
    1d9c:	000b883a 	mov	r5,zero
    1da0:	8009883a 	mov	r4,r16
    1da4:	da003d15 	stw	r8,244(sp)
    1da8:	00061680 	call	6168 <memchr>
    1dac:	da003d17 	ldw	r8,244(sp)
    1db0:	10045426 	beq	r2,zero,2f04 <___vfprintf_internal_r+0x1da0>
    1db4:	1405c83a 	sub	r2,r2,r16
    1db8:	d8802e15 	stw	r2,184(sp)
    1dbc:	1003cc16 	blt	r2,zero,2cf0 <___vfprintf_internal_r+0x1b8c>
    1dc0:	df002783 	ldbu	fp,158(sp)
    1dc4:	d8802a15 	stw	r2,168(sp)
    1dc8:	dcc02d15 	stw	r19,180(sp)
    1dcc:	d8002915 	stw	zero,164(sp)
    1dd0:	d8003215 	stw	zero,200(sp)
    1dd4:	003eb006 	br	1898 <__alt_data_end+0xf8001898>
    1dd8:	18c03fcc 	andi	r3,r3,255
    1ddc:	183f9b26 	beq	r3,zero,1c4c <__alt_data_end+0xf8001c4c>
    1de0:	d9c02785 	stb	r7,158(sp)
    1de4:	003f9906 	br	1c4c <__alt_data_end+0xf8001c4c>
    1de8:	18c03fcc 	andi	r3,r3,255
    1dec:	1805551e 	bne	r3,zero,3344 <___vfprintf_internal_r+0x21e0>
    1df0:	01400074 	movhi	r5,1
    1df4:	294fe404 	addi	r5,r5,16272
    1df8:	d9403915 	stw	r5,228(sp)
    1dfc:	9080080c 	andi	r2,r18,32
    1e00:	103fae1e 	bne	r2,zero,1cbc <__alt_data_end+0xf8001cbc>
    1e04:	9080040c 	andi	r2,r18,16
    1e08:	1002de26 	beq	r2,zero,2984 <___vfprintf_internal_r+0x1820>
    1e0c:	d8c02d17 	ldw	r3,180(sp)
    1e10:	002d883a 	mov	r22,zero
    1e14:	1cc00017 	ldw	r19,0(r3)
    1e18:	18c00104 	addi	r3,r3,4
    1e1c:	d8c02d15 	stw	r3,180(sp)
    1e20:	003fab06 	br	1cd0 <__alt_data_end+0xf8001cd0>
    1e24:	38803fcc 	andi	r2,r7,255
    1e28:	1080201c 	xori	r2,r2,128
    1e2c:	10bfe004 	addi	r2,r2,-128
    1e30:	1002d21e 	bne	r2,zero,297c <___vfprintf_internal_r+0x1818>
    1e34:	00c00044 	movi	r3,1
    1e38:	01c00804 	movi	r7,32
    1e3c:	ac400007 	ldb	r17,0(r21)
    1e40:	003d2906 	br	12e8 <__alt_data_end+0xf80012e8>
    1e44:	94800054 	ori	r18,r18,1
    1e48:	ac400007 	ldb	r17,0(r21)
    1e4c:	003d2606 	br	12e8 <__alt_data_end+0xf80012e8>
    1e50:	18c03fcc 	andi	r3,r3,255
    1e54:	183e0526 	beq	r3,zero,166c <__alt_data_end+0xf800166c>
    1e58:	d9c02785 	stb	r7,158(sp)
    1e5c:	003e0306 	br	166c <__alt_data_end+0xf800166c>
    1e60:	94801014 	ori	r18,r18,64
    1e64:	ac400007 	ldb	r17,0(r21)
    1e68:	003d1f06 	br	12e8 <__alt_data_end+0xf80012e8>
    1e6c:	ac400007 	ldb	r17,0(r21)
    1e70:	8a438726 	beq	r17,r9,2c90 <___vfprintf_internal_r+0x1b2c>
    1e74:	94800414 	ori	r18,r18,16
    1e78:	003d1b06 	br	12e8 <__alt_data_end+0xf80012e8>
    1e7c:	18c03fcc 	andi	r3,r3,255
    1e80:	1805341e 	bne	r3,zero,3354 <___vfprintf_internal_r+0x21f0>
    1e84:	9080080c 	andi	r2,r18,32
    1e88:	1002cd26 	beq	r2,zero,29c0 <___vfprintf_internal_r+0x185c>
    1e8c:	d9402d17 	ldw	r5,180(sp)
    1e90:	d9002f17 	ldw	r4,188(sp)
    1e94:	28800017 	ldw	r2,0(r5)
    1e98:	2007d7fa 	srai	r3,r4,31
    1e9c:	29400104 	addi	r5,r5,4
    1ea0:	d9402d15 	stw	r5,180(sp)
    1ea4:	11000015 	stw	r4,0(r2)
    1ea8:	10c00115 	stw	r3,4(r2)
    1eac:	003ce506 	br	1244 <__alt_data_end+0xf8001244>
    1eb0:	d8c02d17 	ldw	r3,180(sp)
    1eb4:	d9002d17 	ldw	r4,180(sp)
    1eb8:	d8002785 	stb	zero,158(sp)
    1ebc:	18800017 	ldw	r2,0(r3)
    1ec0:	21000104 	addi	r4,r4,4
    1ec4:	00c00044 	movi	r3,1
    1ec8:	d8c02a15 	stw	r3,168(sp)
    1ecc:	d8801405 	stb	r2,80(sp)
    1ed0:	d9002d15 	stw	r4,180(sp)
    1ed4:	d8c02e15 	stw	r3,184(sp)
    1ed8:	d8002915 	stw	zero,164(sp)
    1edc:	d8003215 	stw	zero,200(sp)
    1ee0:	dc001404 	addi	r16,sp,80
    1ee4:	0039883a 	mov	fp,zero
    1ee8:	003e7206 	br	18b4 <__alt_data_end+0xf80018b4>
    1eec:	01000074 	movhi	r4,1
    1ef0:	210fe404 	addi	r4,r4,16272
    1ef4:	0039883a 	mov	fp,zero
    1ef8:	d9003915 	stw	r4,228(sp)
    1efc:	04401e04 	movi	r17,120
    1f00:	003f8206 	br	1d0c <__alt_data_end+0xf8001d0c>
    1f04:	18c03fcc 	andi	r3,r3,255
    1f08:	1805061e 	bne	r3,zero,3324 <___vfprintf_internal_r+0x21c0>
    1f0c:	883d9126 	beq	r17,zero,1554 <__alt_data_end+0xf8001554>
    1f10:	00c00044 	movi	r3,1
    1f14:	d8c02a15 	stw	r3,168(sp)
    1f18:	dc401405 	stb	r17,80(sp)
    1f1c:	d8002785 	stb	zero,158(sp)
    1f20:	003fec06 	br	1ed4 <__alt_data_end+0xf8001ed4>
    1f24:	01400074 	movhi	r5,1
    1f28:	294fe404 	addi	r5,r5,16272
    1f2c:	d9403915 	stw	r5,228(sp)
    1f30:	d8c02d15 	stw	r3,180(sp)
    1f34:	1025883a 	mov	r18,r2
    1f38:	04401e04 	movi	r17,120
    1f3c:	9d84b03a 	or	r2,r19,r22
    1f40:	1000fc1e 	bne	r2,zero,2334 <___vfprintf_internal_r+0x11d0>
    1f44:	0039883a 	mov	fp,zero
    1f48:	00800084 	movi	r2,2
    1f4c:	10803fcc 	andi	r2,r2,255
    1f50:	00c00044 	movi	r3,1
    1f54:	10c20f26 	beq	r2,r3,2794 <___vfprintf_internal_r+0x1630>
    1f58:	00c00084 	movi	r3,2
    1f5c:	10fd6326 	beq	r2,r3,14ec <__alt_data_end+0xf80014ec>
    1f60:	003e2d06 	br	1818 <__alt_data_end+0xf8001818>
    1f64:	d8c02017 	ldw	r3,128(sp)
    1f68:	003e9306 	br	19b8 <__alt_data_end+0xf80019b8>
    1f6c:	00801944 	movi	r2,101
    1f70:	14407e0e 	bge	r2,r17,216c <___vfprintf_internal_r+0x1008>
    1f74:	d9003617 	ldw	r4,216(sp)
    1f78:	d9403817 	ldw	r5,224(sp)
    1f7c:	000d883a 	mov	r6,zero
    1f80:	000f883a 	mov	r7,zero
    1f84:	d8c03c15 	stw	r3,240(sp)
    1f88:	da003d15 	stw	r8,244(sp)
    1f8c:	000bb780 	call	bb78 <__eqdf2>
    1f90:	d8c03c17 	ldw	r3,240(sp)
    1f94:	da003d17 	ldw	r8,244(sp)
    1f98:	1000f71e 	bne	r2,zero,2378 <___vfprintf_internal_r+0x1214>
    1f9c:	d8801f17 	ldw	r2,124(sp)
    1fa0:	01000074 	movhi	r4,1
    1fa4:	210feb04 	addi	r4,r4,16300
    1fa8:	18c00044 	addi	r3,r3,1
    1fac:	10800044 	addi	r2,r2,1
    1fb0:	41000015 	stw	r4,0(r8)
    1fb4:	01000044 	movi	r4,1
    1fb8:	41000115 	stw	r4,4(r8)
    1fbc:	d8c02015 	stw	r3,128(sp)
    1fc0:	d8801f15 	stw	r2,124(sp)
    1fc4:	010001c4 	movi	r4,7
    1fc8:	2082b816 	blt	r4,r2,2aac <___vfprintf_internal_r+0x1948>
    1fcc:	42000204 	addi	r8,r8,8
    1fd0:	d8802617 	ldw	r2,152(sp)
    1fd4:	d9403317 	ldw	r5,204(sp)
    1fd8:	11400216 	blt	r2,r5,1fe4 <___vfprintf_internal_r+0xe80>
    1fdc:	9080004c 	andi	r2,r18,1
    1fe0:	103ed526 	beq	r2,zero,1b38 <__alt_data_end+0xf8001b38>
    1fe4:	d8803717 	ldw	r2,220(sp)
    1fe8:	d9003417 	ldw	r4,208(sp)
    1fec:	d9403717 	ldw	r5,220(sp)
    1ff0:	1887883a 	add	r3,r3,r2
    1ff4:	d8801f17 	ldw	r2,124(sp)
    1ff8:	41000015 	stw	r4,0(r8)
    1ffc:	41400115 	stw	r5,4(r8)
    2000:	10800044 	addi	r2,r2,1
    2004:	d8c02015 	stw	r3,128(sp)
    2008:	d8801f15 	stw	r2,124(sp)
    200c:	010001c4 	movi	r4,7
    2010:	20832916 	blt	r4,r2,2cb8 <___vfprintf_internal_r+0x1b54>
    2014:	42000204 	addi	r8,r8,8
    2018:	d8803317 	ldw	r2,204(sp)
    201c:	143fffc4 	addi	r16,r2,-1
    2020:	043ec50e 	bge	zero,r16,1b38 <__alt_data_end+0xf8001b38>
    2024:	04400404 	movi	r17,16
    2028:	d8801f17 	ldw	r2,124(sp)
    202c:	8c00880e 	bge	r17,r16,2250 <___vfprintf_internal_r+0x10ec>
    2030:	01400074 	movhi	r5,1
    2034:	294feb84 	addi	r5,r5,16302
    2038:	d9402b15 	stw	r5,172(sp)
    203c:	058001c4 	movi	r22,7
    2040:	dcc02c17 	ldw	r19,176(sp)
    2044:	00000306 	br	2054 <___vfprintf_internal_r+0xef0>
    2048:	42000204 	addi	r8,r8,8
    204c:	843ffc04 	addi	r16,r16,-16
    2050:	8c00820e 	bge	r17,r16,225c <___vfprintf_internal_r+0x10f8>
    2054:	18c00404 	addi	r3,r3,16
    2058:	10800044 	addi	r2,r2,1
    205c:	45000015 	stw	r20,0(r8)
    2060:	44400115 	stw	r17,4(r8)
    2064:	d8c02015 	stw	r3,128(sp)
    2068:	d8801f15 	stw	r2,124(sp)
    206c:	b0bff60e 	bge	r22,r2,2048 <__alt_data_end+0xf8002048>
    2070:	d9801e04 	addi	r6,sp,120
    2074:	b80b883a 	mov	r5,r23
    2078:	9809883a 	mov	r4,r19
    207c:	0007f000 	call	7f00 <__sprint_r>
    2080:	103d3a1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2084:	d8c02017 	ldw	r3,128(sp)
    2088:	d8801f17 	ldw	r2,124(sp)
    208c:	da000404 	addi	r8,sp,16
    2090:	003fee06 	br	204c <__alt_data_end+0xf800204c>
    2094:	d9403117 	ldw	r5,196(sp)
    2098:	d8802a17 	ldw	r2,168(sp)
    209c:	28adc83a 	sub	r22,r5,r2
    20a0:	05be630e 	bge	zero,r22,1a30 <__alt_data_end+0xf8001a30>
    20a4:	07000404 	movi	fp,16
    20a8:	d8801f17 	ldw	r2,124(sp)
    20ac:	e5838f0e 	bge	fp,r22,2eec <___vfprintf_internal_r+0x1d88>
    20b0:	01400074 	movhi	r5,1
    20b4:	294feb84 	addi	r5,r5,16302
    20b8:	dc403015 	stw	r17,192(sp)
    20bc:	d9402b15 	stw	r5,172(sp)
    20c0:	b023883a 	mov	r17,r22
    20c4:	04c001c4 	movi	r19,7
    20c8:	a82d883a 	mov	r22,r21
    20cc:	902b883a 	mov	r21,r18
    20d0:	8025883a 	mov	r18,r16
    20d4:	dc002c17 	ldw	r16,176(sp)
    20d8:	00000306 	br	20e8 <___vfprintf_internal_r+0xf84>
    20dc:	8c7ffc04 	addi	r17,r17,-16
    20e0:	42000204 	addi	r8,r8,8
    20e4:	e440110e 	bge	fp,r17,212c <___vfprintf_internal_r+0xfc8>
    20e8:	18c00404 	addi	r3,r3,16
    20ec:	10800044 	addi	r2,r2,1
    20f0:	45000015 	stw	r20,0(r8)
    20f4:	47000115 	stw	fp,4(r8)
    20f8:	d8c02015 	stw	r3,128(sp)
    20fc:	d8801f15 	stw	r2,124(sp)
    2100:	98bff60e 	bge	r19,r2,20dc <__alt_data_end+0xf80020dc>
    2104:	d9801e04 	addi	r6,sp,120
    2108:	b80b883a 	mov	r5,r23
    210c:	8009883a 	mov	r4,r16
    2110:	0007f000 	call	7f00 <__sprint_r>
    2114:	103d151e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2118:	8c7ffc04 	addi	r17,r17,-16
    211c:	d8c02017 	ldw	r3,128(sp)
    2120:	d8801f17 	ldw	r2,124(sp)
    2124:	da000404 	addi	r8,sp,16
    2128:	e47fef16 	blt	fp,r17,20e8 <__alt_data_end+0xf80020e8>
    212c:	9021883a 	mov	r16,r18
    2130:	a825883a 	mov	r18,r21
    2134:	b02b883a 	mov	r21,r22
    2138:	882d883a 	mov	r22,r17
    213c:	dc403017 	ldw	r17,192(sp)
    2140:	d9002b17 	ldw	r4,172(sp)
    2144:	1d87883a 	add	r3,r3,r22
    2148:	10800044 	addi	r2,r2,1
    214c:	41000015 	stw	r4,0(r8)
    2150:	45800115 	stw	r22,4(r8)
    2154:	d8c02015 	stw	r3,128(sp)
    2158:	d8801f15 	stw	r2,124(sp)
    215c:	010001c4 	movi	r4,7
    2160:	20818e16 	blt	r4,r2,279c <___vfprintf_internal_r+0x1638>
    2164:	42000204 	addi	r8,r8,8
    2168:	003e3106 	br	1a30 <__alt_data_end+0xf8001a30>
    216c:	d9403317 	ldw	r5,204(sp)
    2170:	00800044 	movi	r2,1
    2174:	18c00044 	addi	r3,r3,1
    2178:	1141530e 	bge	r2,r5,26c8 <___vfprintf_internal_r+0x1564>
    217c:	dc401f17 	ldw	r17,124(sp)
    2180:	00800044 	movi	r2,1
    2184:	40800115 	stw	r2,4(r8)
    2188:	8c400044 	addi	r17,r17,1
    218c:	44000015 	stw	r16,0(r8)
    2190:	d8c02015 	stw	r3,128(sp)
    2194:	dc401f15 	stw	r17,124(sp)
    2198:	008001c4 	movi	r2,7
    219c:	14416b16 	blt	r2,r17,274c <___vfprintf_internal_r+0x15e8>
    21a0:	42000204 	addi	r8,r8,8
    21a4:	d8803717 	ldw	r2,220(sp)
    21a8:	d9003417 	ldw	r4,208(sp)
    21ac:	8c400044 	addi	r17,r17,1
    21b0:	10c7883a 	add	r3,r2,r3
    21b4:	40800115 	stw	r2,4(r8)
    21b8:	41000015 	stw	r4,0(r8)
    21bc:	d8c02015 	stw	r3,128(sp)
    21c0:	dc401f15 	stw	r17,124(sp)
    21c4:	008001c4 	movi	r2,7
    21c8:	14416916 	blt	r2,r17,2770 <___vfprintf_internal_r+0x160c>
    21cc:	45800204 	addi	r22,r8,8
    21d0:	d9003617 	ldw	r4,216(sp)
    21d4:	d9403817 	ldw	r5,224(sp)
    21d8:	000d883a 	mov	r6,zero
    21dc:	000f883a 	mov	r7,zero
    21e0:	d8c03c15 	stw	r3,240(sp)
    21e4:	000bb780 	call	bb78 <__eqdf2>
    21e8:	d8c03c17 	ldw	r3,240(sp)
    21ec:	1000bc26 	beq	r2,zero,24e0 <___vfprintf_internal_r+0x137c>
    21f0:	d9403317 	ldw	r5,204(sp)
    21f4:	84000044 	addi	r16,r16,1
    21f8:	8c400044 	addi	r17,r17,1
    21fc:	28bfffc4 	addi	r2,r5,-1
    2200:	1887883a 	add	r3,r3,r2
    2204:	b0800115 	stw	r2,4(r22)
    2208:	b4000015 	stw	r16,0(r22)
    220c:	d8c02015 	stw	r3,128(sp)
    2210:	dc401f15 	stw	r17,124(sp)
    2214:	008001c4 	movi	r2,7
    2218:	14414316 	blt	r2,r17,2728 <___vfprintf_internal_r+0x15c4>
    221c:	b5800204 	addi	r22,r22,8
    2220:	d9003a17 	ldw	r4,232(sp)
    2224:	df0022c4 	addi	fp,sp,139
    2228:	8c400044 	addi	r17,r17,1
    222c:	20c7883a 	add	r3,r4,r3
    2230:	b7000015 	stw	fp,0(r22)
    2234:	b1000115 	stw	r4,4(r22)
    2238:	d8c02015 	stw	r3,128(sp)
    223c:	dc401f15 	stw	r17,124(sp)
    2240:	008001c4 	movi	r2,7
    2244:	14400e16 	blt	r2,r17,2280 <___vfprintf_internal_r+0x111c>
    2248:	b2000204 	addi	r8,r22,8
    224c:	003e3a06 	br	1b38 <__alt_data_end+0xf8001b38>
    2250:	01000074 	movhi	r4,1
    2254:	210feb84 	addi	r4,r4,16302
    2258:	d9002b15 	stw	r4,172(sp)
    225c:	d9002b17 	ldw	r4,172(sp)
    2260:	1c07883a 	add	r3,r3,r16
    2264:	44000115 	stw	r16,4(r8)
    2268:	41000015 	stw	r4,0(r8)
    226c:	10800044 	addi	r2,r2,1
    2270:	d8c02015 	stw	r3,128(sp)
    2274:	d8801f15 	stw	r2,124(sp)
    2278:	010001c4 	movi	r4,7
    227c:	20be2d0e 	bge	r4,r2,1b34 <__alt_data_end+0xf8001b34>
    2280:	d9002c17 	ldw	r4,176(sp)
    2284:	d9801e04 	addi	r6,sp,120
    2288:	b80b883a 	mov	r5,r23
    228c:	0007f000 	call	7f00 <__sprint_r>
    2290:	103cb61e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2294:	d8c02017 	ldw	r3,128(sp)
    2298:	da000404 	addi	r8,sp,16
    229c:	003e2606 	br	1b38 <__alt_data_end+0xf8001b38>
    22a0:	d9002c17 	ldw	r4,176(sp)
    22a4:	d9801e04 	addi	r6,sp,120
    22a8:	b80b883a 	mov	r5,r23
    22ac:	0007f000 	call	7f00 <__sprint_r>
    22b0:	103e5d26 	beq	r2,zero,1c28 <__alt_data_end+0xf8001c28>
    22b4:	003cad06 	br	156c <__alt_data_end+0xf800156c>
    22b8:	d9002c17 	ldw	r4,176(sp)
    22bc:	d9801e04 	addi	r6,sp,120
    22c0:	b80b883a 	mov	r5,r23
    22c4:	0007f000 	call	7f00 <__sprint_r>
    22c8:	103ca81e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    22cc:	d8c02017 	ldw	r3,128(sp)
    22d0:	da000404 	addi	r8,sp,16
    22d4:	003e0b06 	br	1b04 <__alt_data_end+0xf8001b04>
    22d8:	d9002c17 	ldw	r4,176(sp)
    22dc:	d9801e04 	addi	r6,sp,120
    22e0:	b80b883a 	mov	r5,r23
    22e4:	0007f000 	call	7f00 <__sprint_r>
    22e8:	103ca01e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    22ec:	d8c02017 	ldw	r3,128(sp)
    22f0:	da000404 	addi	r8,sp,16
    22f4:	003dbd06 	br	19ec <__alt_data_end+0xf80019ec>
    22f8:	d9002c17 	ldw	r4,176(sp)
    22fc:	d9801e04 	addi	r6,sp,120
    2300:	b80b883a 	mov	r5,r23
    2304:	0007f000 	call	7f00 <__sprint_r>
    2308:	103c981e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    230c:	d8c02017 	ldw	r3,128(sp)
    2310:	da000404 	addi	r8,sp,16
    2314:	003dc306 	br	1a24 <__alt_data_end+0xf8001a24>
    2318:	d8802917 	ldw	r2,164(sp)
    231c:	d8002785 	stb	zero,158(sp)
    2320:	103f0616 	blt	r2,zero,1f3c <__alt_data_end+0xf8001f3c>
    2324:	00ffdfc4 	movi	r3,-129
    2328:	9d84b03a 	or	r2,r19,r22
    232c:	90e4703a 	and	r18,r18,r3
    2330:	103c6b26 	beq	r2,zero,14e0 <__alt_data_end+0xf80014e0>
    2334:	0039883a 	mov	fp,zero
    2338:	003e7406 	br	1d0c <__alt_data_end+0xf8001d0c>
    233c:	9080040c 	andi	r2,r18,16
    2340:	1001b326 	beq	r2,zero,2a10 <___vfprintf_internal_r+0x18ac>
    2344:	d9002d17 	ldw	r4,180(sp)
    2348:	d9402917 	ldw	r5,164(sp)
    234c:	d8002785 	stb	zero,158(sp)
    2350:	20800104 	addi	r2,r4,4
    2354:	24c00017 	ldw	r19,0(r4)
    2358:	002d883a 	mov	r22,zero
    235c:	2801b516 	blt	r5,zero,2a34 <___vfprintf_internal_r+0x18d0>
    2360:	00ffdfc4 	movi	r3,-129
    2364:	d8802d15 	stw	r2,180(sp)
    2368:	90e4703a 	and	r18,r18,r3
    236c:	983d2726 	beq	r19,zero,180c <__alt_data_end+0xf800180c>
    2370:	0039883a 	mov	fp,zero
    2374:	003d2a06 	br	1820 <__alt_data_end+0xf8001820>
    2378:	dc402617 	ldw	r17,152(sp)
    237c:	0441d30e 	bge	zero,r17,2acc <___vfprintf_internal_r+0x1968>
    2380:	dc403217 	ldw	r17,200(sp)
    2384:	d8803317 	ldw	r2,204(sp)
    2388:	1440010e 	bge	r2,r17,2390 <___vfprintf_internal_r+0x122c>
    238c:	1023883a 	mov	r17,r2
    2390:	04400a0e 	bge	zero,r17,23bc <___vfprintf_internal_r+0x1258>
    2394:	d8801f17 	ldw	r2,124(sp)
    2398:	1c47883a 	add	r3,r3,r17
    239c:	44000015 	stw	r16,0(r8)
    23a0:	10800044 	addi	r2,r2,1
    23a4:	44400115 	stw	r17,4(r8)
    23a8:	d8c02015 	stw	r3,128(sp)
    23ac:	d8801f15 	stw	r2,124(sp)
    23b0:	010001c4 	movi	r4,7
    23b4:	20826516 	blt	r4,r2,2d4c <___vfprintf_internal_r+0x1be8>
    23b8:	42000204 	addi	r8,r8,8
    23bc:	88026116 	blt	r17,zero,2d44 <___vfprintf_internal_r+0x1be0>
    23c0:	d9003217 	ldw	r4,200(sp)
    23c4:	2463c83a 	sub	r17,r4,r17
    23c8:	04407b0e 	bge	zero,r17,25b8 <___vfprintf_internal_r+0x1454>
    23cc:	05800404 	movi	r22,16
    23d0:	d8801f17 	ldw	r2,124(sp)
    23d4:	b4419d0e 	bge	r22,r17,2a4c <___vfprintf_internal_r+0x18e8>
    23d8:	01000074 	movhi	r4,1
    23dc:	210feb84 	addi	r4,r4,16302
    23e0:	d9002b15 	stw	r4,172(sp)
    23e4:	070001c4 	movi	fp,7
    23e8:	dcc02c17 	ldw	r19,176(sp)
    23ec:	00000306 	br	23fc <___vfprintf_internal_r+0x1298>
    23f0:	42000204 	addi	r8,r8,8
    23f4:	8c7ffc04 	addi	r17,r17,-16
    23f8:	b441970e 	bge	r22,r17,2a58 <___vfprintf_internal_r+0x18f4>
    23fc:	18c00404 	addi	r3,r3,16
    2400:	10800044 	addi	r2,r2,1
    2404:	45000015 	stw	r20,0(r8)
    2408:	45800115 	stw	r22,4(r8)
    240c:	d8c02015 	stw	r3,128(sp)
    2410:	d8801f15 	stw	r2,124(sp)
    2414:	e0bff60e 	bge	fp,r2,23f0 <__alt_data_end+0xf80023f0>
    2418:	d9801e04 	addi	r6,sp,120
    241c:	b80b883a 	mov	r5,r23
    2420:	9809883a 	mov	r4,r19
    2424:	0007f000 	call	7f00 <__sprint_r>
    2428:	103c501e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    242c:	d8c02017 	ldw	r3,128(sp)
    2430:	d8801f17 	ldw	r2,124(sp)
    2434:	da000404 	addi	r8,sp,16
    2438:	003fee06 	br	23f4 <__alt_data_end+0xf80023f4>
    243c:	d9002c17 	ldw	r4,176(sp)
    2440:	d9801e04 	addi	r6,sp,120
    2444:	b80b883a 	mov	r5,r23
    2448:	0007f000 	call	7f00 <__sprint_r>
    244c:	103c471e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2450:	d8c02017 	ldw	r3,128(sp)
    2454:	df002787 	ldb	fp,158(sp)
    2458:	da000404 	addi	r8,sp,16
    245c:	003d5606 	br	19b8 <__alt_data_end+0xf80019b8>
    2460:	9080040c 	andi	r2,r18,16
    2464:	10016126 	beq	r2,zero,29ec <___vfprintf_internal_r+0x1888>
    2468:	d8802d17 	ldw	r2,180(sp)
    246c:	14c00017 	ldw	r19,0(r2)
    2470:	10800104 	addi	r2,r2,4
    2474:	d8802d15 	stw	r2,180(sp)
    2478:	982dd7fa 	srai	r22,r19,31
    247c:	b005883a 	mov	r2,r22
    2480:	003c8206 	br	168c <__alt_data_end+0xf800168c>
    2484:	9080040c 	andi	r2,r18,16
    2488:	10003526 	beq	r2,zero,2560 <___vfprintf_internal_r+0x13fc>
    248c:	d9402d17 	ldw	r5,180(sp)
    2490:	d8c02917 	ldw	r3,164(sp)
    2494:	d8002785 	stb	zero,158(sp)
    2498:	28800104 	addi	r2,r5,4
    249c:	2cc00017 	ldw	r19,0(r5)
    24a0:	002d883a 	mov	r22,zero
    24a4:	18003716 	blt	r3,zero,2584 <___vfprintf_internal_r+0x1420>
    24a8:	00ffdfc4 	movi	r3,-129
    24ac:	d8802d15 	stw	r2,180(sp)
    24b0:	90e4703a 	and	r18,r18,r3
    24b4:	0039883a 	mov	fp,zero
    24b8:	983df326 	beq	r19,zero,1c88 <__alt_data_end+0xf8001c88>
    24bc:	00800244 	movi	r2,9
    24c0:	14fc7b36 	bltu	r2,r19,16b0 <__alt_data_end+0xf80016b0>
    24c4:	d8c02817 	ldw	r3,160(sp)
    24c8:	dc001dc4 	addi	r16,sp,119
    24cc:	9cc00c04 	addi	r19,r19,48
    24d0:	1c07c83a 	sub	r3,r3,r16
    24d4:	dcc01dc5 	stb	r19,119(sp)
    24d8:	d8c02e15 	stw	r3,184(sp)
    24dc:	003ce806 	br	1880 <__alt_data_end+0xf8001880>
    24e0:	d8803317 	ldw	r2,204(sp)
    24e4:	143fffc4 	addi	r16,r2,-1
    24e8:	043f4d0e 	bge	zero,r16,2220 <__alt_data_end+0xf8002220>
    24ec:	07000404 	movi	fp,16
    24f0:	e400810e 	bge	fp,r16,26f8 <___vfprintf_internal_r+0x1594>
    24f4:	01400074 	movhi	r5,1
    24f8:	294feb84 	addi	r5,r5,16302
    24fc:	d9402b15 	stw	r5,172(sp)
    2500:	01c001c4 	movi	r7,7
    2504:	dcc02c17 	ldw	r19,176(sp)
    2508:	00000306 	br	2518 <___vfprintf_internal_r+0x13b4>
    250c:	b5800204 	addi	r22,r22,8
    2510:	843ffc04 	addi	r16,r16,-16
    2514:	e4007b0e 	bge	fp,r16,2704 <___vfprintf_internal_r+0x15a0>
    2518:	18c00404 	addi	r3,r3,16
    251c:	8c400044 	addi	r17,r17,1
    2520:	b5000015 	stw	r20,0(r22)
    2524:	b7000115 	stw	fp,4(r22)
    2528:	d8c02015 	stw	r3,128(sp)
    252c:	dc401f15 	stw	r17,124(sp)
    2530:	3c7ff60e 	bge	r7,r17,250c <__alt_data_end+0xf800250c>
    2534:	d9801e04 	addi	r6,sp,120
    2538:	b80b883a 	mov	r5,r23
    253c:	9809883a 	mov	r4,r19
    2540:	d9c03c15 	stw	r7,240(sp)
    2544:	0007f000 	call	7f00 <__sprint_r>
    2548:	d9c03c17 	ldw	r7,240(sp)
    254c:	103c071e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2550:	d8c02017 	ldw	r3,128(sp)
    2554:	dc401f17 	ldw	r17,124(sp)
    2558:	dd800404 	addi	r22,sp,16
    255c:	003fec06 	br	2510 <__alt_data_end+0xf8002510>
    2560:	9080100c 	andi	r2,r18,64
    2564:	d8002785 	stb	zero,158(sp)
    2568:	10010e26 	beq	r2,zero,29a4 <___vfprintf_internal_r+0x1840>
    256c:	d9002d17 	ldw	r4,180(sp)
    2570:	d9402917 	ldw	r5,164(sp)
    2574:	002d883a 	mov	r22,zero
    2578:	20800104 	addi	r2,r4,4
    257c:	24c0000b 	ldhu	r19,0(r4)
    2580:	283fc90e 	bge	r5,zero,24a8 <__alt_data_end+0xf80024a8>
    2584:	d8802d15 	stw	r2,180(sp)
    2588:	0039883a 	mov	fp,zero
    258c:	9d84b03a 	or	r2,r19,r22
    2590:	103c461e 	bne	r2,zero,16ac <__alt_data_end+0xf80016ac>
    2594:	00800044 	movi	r2,1
    2598:	003e6c06 	br	1f4c <__alt_data_end+0xf8001f4c>
    259c:	d9002c17 	ldw	r4,176(sp)
    25a0:	d9801e04 	addi	r6,sp,120
    25a4:	b80b883a 	mov	r5,r23
    25a8:	0007f000 	call	7f00 <__sprint_r>
    25ac:	103bef1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    25b0:	d8c02017 	ldw	r3,128(sp)
    25b4:	da000404 	addi	r8,sp,16
    25b8:	d9003217 	ldw	r4,200(sp)
    25bc:	d8802617 	ldw	r2,152(sp)
    25c0:	d9403317 	ldw	r5,204(sp)
    25c4:	8123883a 	add	r17,r16,r4
    25c8:	11400216 	blt	r2,r5,25d4 <___vfprintf_internal_r+0x1470>
    25cc:	9100004c 	andi	r4,r18,1
    25d0:	20000d26 	beq	r4,zero,2608 <___vfprintf_internal_r+0x14a4>
    25d4:	d9003717 	ldw	r4,220(sp)
    25d8:	d9403417 	ldw	r5,208(sp)
    25dc:	1907883a 	add	r3,r3,r4
    25e0:	d9001f17 	ldw	r4,124(sp)
    25e4:	41400015 	stw	r5,0(r8)
    25e8:	d9403717 	ldw	r5,220(sp)
    25ec:	21000044 	addi	r4,r4,1
    25f0:	d8c02015 	stw	r3,128(sp)
    25f4:	41400115 	stw	r5,4(r8)
    25f8:	d9001f15 	stw	r4,124(sp)
    25fc:	014001c4 	movi	r5,7
    2600:	2901e816 	blt	r5,r4,2da4 <___vfprintf_internal_r+0x1c40>
    2604:	42000204 	addi	r8,r8,8
    2608:	d9003317 	ldw	r4,204(sp)
    260c:	8121883a 	add	r16,r16,r4
    2610:	2085c83a 	sub	r2,r4,r2
    2614:	8461c83a 	sub	r16,r16,r17
    2618:	1400010e 	bge	r2,r16,2620 <___vfprintf_internal_r+0x14bc>
    261c:	1021883a 	mov	r16,r2
    2620:	04000a0e 	bge	zero,r16,264c <___vfprintf_internal_r+0x14e8>
    2624:	d9001f17 	ldw	r4,124(sp)
    2628:	1c07883a 	add	r3,r3,r16
    262c:	44400015 	stw	r17,0(r8)
    2630:	21000044 	addi	r4,r4,1
    2634:	44000115 	stw	r16,4(r8)
    2638:	d8c02015 	stw	r3,128(sp)
    263c:	d9001f15 	stw	r4,124(sp)
    2640:	014001c4 	movi	r5,7
    2644:	2901fb16 	blt	r5,r4,2e34 <___vfprintf_internal_r+0x1cd0>
    2648:	42000204 	addi	r8,r8,8
    264c:	8001f716 	blt	r16,zero,2e2c <___vfprintf_internal_r+0x1cc8>
    2650:	1421c83a 	sub	r16,r2,r16
    2654:	043d380e 	bge	zero,r16,1b38 <__alt_data_end+0xf8001b38>
    2658:	04400404 	movi	r17,16
    265c:	d8801f17 	ldw	r2,124(sp)
    2660:	8c3efb0e 	bge	r17,r16,2250 <__alt_data_end+0xf8002250>
    2664:	01400074 	movhi	r5,1
    2668:	294feb84 	addi	r5,r5,16302
    266c:	d9402b15 	stw	r5,172(sp)
    2670:	058001c4 	movi	r22,7
    2674:	dcc02c17 	ldw	r19,176(sp)
    2678:	00000306 	br	2688 <___vfprintf_internal_r+0x1524>
    267c:	42000204 	addi	r8,r8,8
    2680:	843ffc04 	addi	r16,r16,-16
    2684:	8c3ef50e 	bge	r17,r16,225c <__alt_data_end+0xf800225c>
    2688:	18c00404 	addi	r3,r3,16
    268c:	10800044 	addi	r2,r2,1
    2690:	45000015 	stw	r20,0(r8)
    2694:	44400115 	stw	r17,4(r8)
    2698:	d8c02015 	stw	r3,128(sp)
    269c:	d8801f15 	stw	r2,124(sp)
    26a0:	b0bff60e 	bge	r22,r2,267c <__alt_data_end+0xf800267c>
    26a4:	d9801e04 	addi	r6,sp,120
    26a8:	b80b883a 	mov	r5,r23
    26ac:	9809883a 	mov	r4,r19
    26b0:	0007f000 	call	7f00 <__sprint_r>
    26b4:	103bad1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    26b8:	d8c02017 	ldw	r3,128(sp)
    26bc:	d8801f17 	ldw	r2,124(sp)
    26c0:	da000404 	addi	r8,sp,16
    26c4:	003fee06 	br	2680 <__alt_data_end+0xf8002680>
    26c8:	9088703a 	and	r4,r18,r2
    26cc:	203eab1e 	bne	r4,zero,217c <__alt_data_end+0xf800217c>
    26d0:	dc401f17 	ldw	r17,124(sp)
    26d4:	40800115 	stw	r2,4(r8)
    26d8:	44000015 	stw	r16,0(r8)
    26dc:	8c400044 	addi	r17,r17,1
    26e0:	d8c02015 	stw	r3,128(sp)
    26e4:	dc401f15 	stw	r17,124(sp)
    26e8:	008001c4 	movi	r2,7
    26ec:	14400e16 	blt	r2,r17,2728 <___vfprintf_internal_r+0x15c4>
    26f0:	45800204 	addi	r22,r8,8
    26f4:	003eca06 	br	2220 <__alt_data_end+0xf8002220>
    26f8:	01000074 	movhi	r4,1
    26fc:	210feb84 	addi	r4,r4,16302
    2700:	d9002b15 	stw	r4,172(sp)
    2704:	d8802b17 	ldw	r2,172(sp)
    2708:	1c07883a 	add	r3,r3,r16
    270c:	8c400044 	addi	r17,r17,1
    2710:	b0800015 	stw	r2,0(r22)
    2714:	b4000115 	stw	r16,4(r22)
    2718:	d8c02015 	stw	r3,128(sp)
    271c:	dc401f15 	stw	r17,124(sp)
    2720:	008001c4 	movi	r2,7
    2724:	147ebd0e 	bge	r2,r17,221c <__alt_data_end+0xf800221c>
    2728:	d9002c17 	ldw	r4,176(sp)
    272c:	d9801e04 	addi	r6,sp,120
    2730:	b80b883a 	mov	r5,r23
    2734:	0007f000 	call	7f00 <__sprint_r>
    2738:	103b8c1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    273c:	d8c02017 	ldw	r3,128(sp)
    2740:	dc401f17 	ldw	r17,124(sp)
    2744:	dd800404 	addi	r22,sp,16
    2748:	003eb506 	br	2220 <__alt_data_end+0xf8002220>
    274c:	d9002c17 	ldw	r4,176(sp)
    2750:	d9801e04 	addi	r6,sp,120
    2754:	b80b883a 	mov	r5,r23
    2758:	0007f000 	call	7f00 <__sprint_r>
    275c:	103b831e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2760:	d8c02017 	ldw	r3,128(sp)
    2764:	dc401f17 	ldw	r17,124(sp)
    2768:	da000404 	addi	r8,sp,16
    276c:	003e8d06 	br	21a4 <__alt_data_end+0xf80021a4>
    2770:	d9002c17 	ldw	r4,176(sp)
    2774:	d9801e04 	addi	r6,sp,120
    2778:	b80b883a 	mov	r5,r23
    277c:	0007f000 	call	7f00 <__sprint_r>
    2780:	103b7a1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2784:	d8c02017 	ldw	r3,128(sp)
    2788:	dc401f17 	ldw	r17,124(sp)
    278c:	dd800404 	addi	r22,sp,16
    2790:	003e8f06 	br	21d0 <__alt_data_end+0xf80021d0>
    2794:	0027883a 	mov	r19,zero
    2798:	003f4a06 	br	24c4 <__alt_data_end+0xf80024c4>
    279c:	d9002c17 	ldw	r4,176(sp)
    27a0:	d9801e04 	addi	r6,sp,120
    27a4:	b80b883a 	mov	r5,r23
    27a8:	0007f000 	call	7f00 <__sprint_r>
    27ac:	103b6f1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    27b0:	d8c02017 	ldw	r3,128(sp)
    27b4:	da000404 	addi	r8,sp,16
    27b8:	003c9d06 	br	1a30 <__alt_data_end+0xf8001a30>
    27bc:	04e7c83a 	sub	r19,zero,r19
    27c0:	9804c03a 	cmpne	r2,r19,zero
    27c4:	05adc83a 	sub	r22,zero,r22
    27c8:	b0adc83a 	sub	r22,r22,r2
    27cc:	d8802917 	ldw	r2,164(sp)
    27d0:	07000b44 	movi	fp,45
    27d4:	df002785 	stb	fp,158(sp)
    27d8:	10017b16 	blt	r2,zero,2dc8 <___vfprintf_internal_r+0x1c64>
    27dc:	00bfdfc4 	movi	r2,-129
    27e0:	90a4703a 	and	r18,r18,r2
    27e4:	003bb106 	br	16ac <__alt_data_end+0xf80016ac>
    27e8:	d9003617 	ldw	r4,216(sp)
    27ec:	d9403817 	ldw	r5,224(sp)
    27f0:	da003d15 	stw	r8,244(sp)
    27f4:	0007b780 	call	7b78 <__fpclassifyd>
    27f8:	da003d17 	ldw	r8,244(sp)
    27fc:	1000f026 	beq	r2,zero,2bc0 <___vfprintf_internal_r+0x1a5c>
    2800:	d9002917 	ldw	r4,164(sp)
    2804:	05bff7c4 	movi	r22,-33
    2808:	00bfffc4 	movi	r2,-1
    280c:	8dac703a 	and	r22,r17,r22
    2810:	20820026 	beq	r4,r2,3014 <___vfprintf_internal_r+0x1eb0>
    2814:	008011c4 	movi	r2,71
    2818:	b081f726 	beq	r22,r2,2ff8 <___vfprintf_internal_r+0x1e94>
    281c:	d9003817 	ldw	r4,224(sp)
    2820:	90c04014 	ori	r3,r18,256
    2824:	d8c02b15 	stw	r3,172(sp)
    2828:	20021516 	blt	r4,zero,3080 <___vfprintf_internal_r+0x1f1c>
    282c:	dcc03817 	ldw	r19,224(sp)
    2830:	d8002a05 	stb	zero,168(sp)
    2834:	00801984 	movi	r2,102
    2838:	8881f926 	beq	r17,r2,3020 <___vfprintf_internal_r+0x1ebc>
    283c:	00801184 	movi	r2,70
    2840:	88821c26 	beq	r17,r2,30b4 <___vfprintf_internal_r+0x1f50>
    2844:	00801144 	movi	r2,69
    2848:	b081ef26 	beq	r22,r2,3008 <___vfprintf_internal_r+0x1ea4>
    284c:	d8c02917 	ldw	r3,164(sp)
    2850:	d8802104 	addi	r2,sp,132
    2854:	d8800315 	stw	r2,12(sp)
    2858:	d9403617 	ldw	r5,216(sp)
    285c:	d8802504 	addi	r2,sp,148
    2860:	d9002c17 	ldw	r4,176(sp)
    2864:	d8800215 	stw	r2,8(sp)
    2868:	d8802604 	addi	r2,sp,152
    286c:	d8c00015 	stw	r3,0(sp)
    2870:	d8800115 	stw	r2,4(sp)
    2874:	01c00084 	movi	r7,2
    2878:	980d883a 	mov	r6,r19
    287c:	d8c03c15 	stw	r3,240(sp)
    2880:	da003d15 	stw	r8,244(sp)
    2884:	00037880 	call	3788 <_dtoa_r>
    2888:	1021883a 	mov	r16,r2
    288c:	008019c4 	movi	r2,103
    2890:	d8c03c17 	ldw	r3,240(sp)
    2894:	da003d17 	ldw	r8,244(sp)
    2898:	88817126 	beq	r17,r2,2e60 <___vfprintf_internal_r+0x1cfc>
    289c:	008011c4 	movi	r2,71
    28a0:	88829226 	beq	r17,r2,32ec <___vfprintf_internal_r+0x2188>
    28a4:	80f9883a 	add	fp,r16,r3
    28a8:	d9003617 	ldw	r4,216(sp)
    28ac:	000d883a 	mov	r6,zero
    28b0:	000f883a 	mov	r7,zero
    28b4:	980b883a 	mov	r5,r19
    28b8:	da003d15 	stw	r8,244(sp)
    28bc:	000bb780 	call	bb78 <__eqdf2>
    28c0:	da003d17 	ldw	r8,244(sp)
    28c4:	10018d26 	beq	r2,zero,2efc <___vfprintf_internal_r+0x1d98>
    28c8:	d8802117 	ldw	r2,132(sp)
    28cc:	1700062e 	bgeu	r2,fp,28e8 <___vfprintf_internal_r+0x1784>
    28d0:	01000c04 	movi	r4,48
    28d4:	10c00044 	addi	r3,r2,1
    28d8:	d8c02115 	stw	r3,132(sp)
    28dc:	11000005 	stb	r4,0(r2)
    28e0:	d8802117 	ldw	r2,132(sp)
    28e4:	173ffb36 	bltu	r2,fp,28d4 <__alt_data_end+0xf80028d4>
    28e8:	1405c83a 	sub	r2,r2,r16
    28ec:	d8803315 	stw	r2,204(sp)
    28f0:	008011c4 	movi	r2,71
    28f4:	b0817626 	beq	r22,r2,2ed0 <___vfprintf_internal_r+0x1d6c>
    28f8:	00801944 	movi	r2,101
    28fc:	1442810e 	bge	r2,r17,3304 <___vfprintf_internal_r+0x21a0>
    2900:	d8c02617 	ldw	r3,152(sp)
    2904:	00801984 	movi	r2,102
    2908:	d8c03215 	stw	r3,200(sp)
    290c:	8881fe26 	beq	r17,r2,3108 <___vfprintf_internal_r+0x1fa4>
    2910:	d8c03217 	ldw	r3,200(sp)
    2914:	d9003317 	ldw	r4,204(sp)
    2918:	1901dd16 	blt	r3,r4,3090 <___vfprintf_internal_r+0x1f2c>
    291c:	9480004c 	andi	r18,r18,1
    2920:	90022b1e 	bne	r18,zero,31d0 <___vfprintf_internal_r+0x206c>
    2924:	1805883a 	mov	r2,r3
    2928:	18028016 	blt	r3,zero,332c <___vfprintf_internal_r+0x21c8>
    292c:	d8c03217 	ldw	r3,200(sp)
    2930:	044019c4 	movi	r17,103
    2934:	d8c02e15 	stw	r3,184(sp)
    2938:	df002a07 	ldb	fp,168(sp)
    293c:	e001531e 	bne	fp,zero,2e8c <___vfprintf_internal_r+0x1d28>
    2940:	df002783 	ldbu	fp,158(sp)
    2944:	d8802a15 	stw	r2,168(sp)
    2948:	dc802b17 	ldw	r18,172(sp)
    294c:	d8002915 	stw	zero,164(sp)
    2950:	003bd106 	br	1898 <__alt_data_end+0xf8001898>
    2954:	d8802d17 	ldw	r2,180(sp)
    2958:	d8c02d17 	ldw	r3,180(sp)
    295c:	d9002d17 	ldw	r4,180(sp)
    2960:	10800017 	ldw	r2,0(r2)
    2964:	18c00117 	ldw	r3,4(r3)
    2968:	21000204 	addi	r4,r4,8
    296c:	d8803615 	stw	r2,216(sp)
    2970:	d8c03815 	stw	r3,224(sp)
    2974:	d9002d15 	stw	r4,180(sp)
    2978:	003b7506 	br	1750 <__alt_data_end+0xf8001750>
    297c:	ac400007 	ldb	r17,0(r21)
    2980:	003a5906 	br	12e8 <__alt_data_end+0xf80012e8>
    2984:	9080100c 	andi	r2,r18,64
    2988:	1000a826 	beq	r2,zero,2c2c <___vfprintf_internal_r+0x1ac8>
    298c:	d9002d17 	ldw	r4,180(sp)
    2990:	002d883a 	mov	r22,zero
    2994:	24c0000b 	ldhu	r19,0(r4)
    2998:	21000104 	addi	r4,r4,4
    299c:	d9002d15 	stw	r4,180(sp)
    29a0:	003ccb06 	br	1cd0 <__alt_data_end+0xf8001cd0>
    29a4:	d8c02d17 	ldw	r3,180(sp)
    29a8:	d9002917 	ldw	r4,164(sp)
    29ac:	002d883a 	mov	r22,zero
    29b0:	18800104 	addi	r2,r3,4
    29b4:	1cc00017 	ldw	r19,0(r3)
    29b8:	203ebb0e 	bge	r4,zero,24a8 <__alt_data_end+0xf80024a8>
    29bc:	003ef106 	br	2584 <__alt_data_end+0xf8002584>
    29c0:	9080040c 	andi	r2,r18,16
    29c4:	1000921e 	bne	r2,zero,2c10 <___vfprintf_internal_r+0x1aac>
    29c8:	9480100c 	andi	r18,r18,64
    29cc:	90013926 	beq	r18,zero,2eb4 <___vfprintf_internal_r+0x1d50>
    29d0:	d9002d17 	ldw	r4,180(sp)
    29d4:	d9402f17 	ldw	r5,188(sp)
    29d8:	20800017 	ldw	r2,0(r4)
    29dc:	21000104 	addi	r4,r4,4
    29e0:	d9002d15 	stw	r4,180(sp)
    29e4:	1140000d 	sth	r5,0(r2)
    29e8:	003a1606 	br	1244 <__alt_data_end+0xf8001244>
    29ec:	9080100c 	andi	r2,r18,64
    29f0:	10008026 	beq	r2,zero,2bf4 <___vfprintf_internal_r+0x1a90>
    29f4:	d8c02d17 	ldw	r3,180(sp)
    29f8:	1cc0000f 	ldh	r19,0(r3)
    29fc:	18c00104 	addi	r3,r3,4
    2a00:	d8c02d15 	stw	r3,180(sp)
    2a04:	982dd7fa 	srai	r22,r19,31
    2a08:	b005883a 	mov	r2,r22
    2a0c:	003b1f06 	br	168c <__alt_data_end+0xf800168c>
    2a10:	9080100c 	andi	r2,r18,64
    2a14:	d8002785 	stb	zero,158(sp)
    2a18:	10008a1e 	bne	r2,zero,2c44 <___vfprintf_internal_r+0x1ae0>
    2a1c:	d9402d17 	ldw	r5,180(sp)
    2a20:	d8c02917 	ldw	r3,164(sp)
    2a24:	002d883a 	mov	r22,zero
    2a28:	28800104 	addi	r2,r5,4
    2a2c:	2cc00017 	ldw	r19,0(r5)
    2a30:	183e4b0e 	bge	r3,zero,2360 <__alt_data_end+0xf8002360>
    2a34:	9d86b03a 	or	r3,r19,r22
    2a38:	d8802d15 	stw	r2,180(sp)
    2a3c:	183e4c1e 	bne	r3,zero,2370 <__alt_data_end+0xf8002370>
    2a40:	0039883a 	mov	fp,zero
    2a44:	0005883a 	mov	r2,zero
    2a48:	003d4006 	br	1f4c <__alt_data_end+0xf8001f4c>
    2a4c:	01400074 	movhi	r5,1
    2a50:	294feb84 	addi	r5,r5,16302
    2a54:	d9402b15 	stw	r5,172(sp)
    2a58:	d9402b17 	ldw	r5,172(sp)
    2a5c:	1c47883a 	add	r3,r3,r17
    2a60:	10800044 	addi	r2,r2,1
    2a64:	41400015 	stw	r5,0(r8)
    2a68:	44400115 	stw	r17,4(r8)
    2a6c:	d8c02015 	stw	r3,128(sp)
    2a70:	d8801f15 	stw	r2,124(sp)
    2a74:	010001c4 	movi	r4,7
    2a78:	20bec816 	blt	r4,r2,259c <__alt_data_end+0xf800259c>
    2a7c:	42000204 	addi	r8,r8,8
    2a80:	003ecd06 	br	25b8 <__alt_data_end+0xf80025b8>
    2a84:	d9002917 	ldw	r4,164(sp)
    2a88:	d8002785 	stb	zero,158(sp)
    2a8c:	203d2d16 	blt	r4,zero,1f44 <__alt_data_end+0xf8001f44>
    2a90:	00bfdfc4 	movi	r2,-129
    2a94:	90a4703a 	and	r18,r18,r2
    2a98:	003a9106 	br	14e0 <__alt_data_end+0xf80014e0>
    2a9c:	01000074 	movhi	r4,1
    2aa0:	210feb84 	addi	r4,r4,16302
    2aa4:	d9002b15 	stw	r4,172(sp)
    2aa8:	003c0c06 	br	1adc <__alt_data_end+0xf8001adc>
    2aac:	d9002c17 	ldw	r4,176(sp)
    2ab0:	d9801e04 	addi	r6,sp,120
    2ab4:	b80b883a 	mov	r5,r23
    2ab8:	0007f000 	call	7f00 <__sprint_r>
    2abc:	103aab1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2ac0:	d8c02017 	ldw	r3,128(sp)
    2ac4:	da000404 	addi	r8,sp,16
    2ac8:	003d4106 	br	1fd0 <__alt_data_end+0xf8001fd0>
    2acc:	d8801f17 	ldw	r2,124(sp)
    2ad0:	01400074 	movhi	r5,1
    2ad4:	01000044 	movi	r4,1
    2ad8:	18c00044 	addi	r3,r3,1
    2adc:	10800044 	addi	r2,r2,1
    2ae0:	294feb04 	addi	r5,r5,16300
    2ae4:	41000115 	stw	r4,4(r8)
    2ae8:	41400015 	stw	r5,0(r8)
    2aec:	d8c02015 	stw	r3,128(sp)
    2af0:	d8801f15 	stw	r2,124(sp)
    2af4:	010001c4 	movi	r4,7
    2af8:	20805c16 	blt	r4,r2,2c6c <___vfprintf_internal_r+0x1b08>
    2afc:	42000204 	addi	r8,r8,8
    2b00:	8800041e 	bne	r17,zero,2b14 <___vfprintf_internal_r+0x19b0>
    2b04:	d8803317 	ldw	r2,204(sp)
    2b08:	1000021e 	bne	r2,zero,2b14 <___vfprintf_internal_r+0x19b0>
    2b0c:	9080004c 	andi	r2,r18,1
    2b10:	103c0926 	beq	r2,zero,1b38 <__alt_data_end+0xf8001b38>
    2b14:	d9003717 	ldw	r4,220(sp)
    2b18:	d8801f17 	ldw	r2,124(sp)
    2b1c:	d9403417 	ldw	r5,208(sp)
    2b20:	20c7883a 	add	r3,r4,r3
    2b24:	10800044 	addi	r2,r2,1
    2b28:	41000115 	stw	r4,4(r8)
    2b2c:	41400015 	stw	r5,0(r8)
    2b30:	d8c02015 	stw	r3,128(sp)
    2b34:	d8801f15 	stw	r2,124(sp)
    2b38:	010001c4 	movi	r4,7
    2b3c:	20812116 	blt	r4,r2,2fc4 <___vfprintf_internal_r+0x1e60>
    2b40:	42000204 	addi	r8,r8,8
    2b44:	0463c83a 	sub	r17,zero,r17
    2b48:	0440730e 	bge	zero,r17,2d18 <___vfprintf_internal_r+0x1bb4>
    2b4c:	05800404 	movi	r22,16
    2b50:	b440860e 	bge	r22,r17,2d6c <___vfprintf_internal_r+0x1c08>
    2b54:	01400074 	movhi	r5,1
    2b58:	294feb84 	addi	r5,r5,16302
    2b5c:	d9402b15 	stw	r5,172(sp)
    2b60:	070001c4 	movi	fp,7
    2b64:	dcc02c17 	ldw	r19,176(sp)
    2b68:	00000306 	br	2b78 <___vfprintf_internal_r+0x1a14>
    2b6c:	42000204 	addi	r8,r8,8
    2b70:	8c7ffc04 	addi	r17,r17,-16
    2b74:	b440800e 	bge	r22,r17,2d78 <___vfprintf_internal_r+0x1c14>
    2b78:	18c00404 	addi	r3,r3,16
    2b7c:	10800044 	addi	r2,r2,1
    2b80:	45000015 	stw	r20,0(r8)
    2b84:	45800115 	stw	r22,4(r8)
    2b88:	d8c02015 	stw	r3,128(sp)
    2b8c:	d8801f15 	stw	r2,124(sp)
    2b90:	e0bff60e 	bge	fp,r2,2b6c <__alt_data_end+0xf8002b6c>
    2b94:	d9801e04 	addi	r6,sp,120
    2b98:	b80b883a 	mov	r5,r23
    2b9c:	9809883a 	mov	r4,r19
    2ba0:	0007f000 	call	7f00 <__sprint_r>
    2ba4:	103a711e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2ba8:	d8c02017 	ldw	r3,128(sp)
    2bac:	d8801f17 	ldw	r2,124(sp)
    2bb0:	da000404 	addi	r8,sp,16
    2bb4:	003fee06 	br	2b70 <__alt_data_end+0xf8002b70>
    2bb8:	00bfffc4 	movi	r2,-1
    2bbc:	003a6f06 	br	157c <__alt_data_end+0xf800157c>
    2bc0:	008011c4 	movi	r2,71
    2bc4:	1440b816 	blt	r2,r17,2ea8 <___vfprintf_internal_r+0x1d44>
    2bc8:	04000074 	movhi	r16,1
    2bcc:	840fdd04 	addi	r16,r16,16244
    2bd0:	00c000c4 	movi	r3,3
    2bd4:	00bfdfc4 	movi	r2,-129
    2bd8:	d8c02a15 	stw	r3,168(sp)
    2bdc:	90a4703a 	and	r18,r18,r2
    2be0:	df002783 	ldbu	fp,158(sp)
    2be4:	d8c02e15 	stw	r3,184(sp)
    2be8:	d8002915 	stw	zero,164(sp)
    2bec:	d8003215 	stw	zero,200(sp)
    2bf0:	003b2906 	br	1898 <__alt_data_end+0xf8001898>
    2bf4:	d9002d17 	ldw	r4,180(sp)
    2bf8:	24c00017 	ldw	r19,0(r4)
    2bfc:	21000104 	addi	r4,r4,4
    2c00:	d9002d15 	stw	r4,180(sp)
    2c04:	982dd7fa 	srai	r22,r19,31
    2c08:	b005883a 	mov	r2,r22
    2c0c:	003a9f06 	br	168c <__alt_data_end+0xf800168c>
    2c10:	d9402d17 	ldw	r5,180(sp)
    2c14:	d8c02f17 	ldw	r3,188(sp)
    2c18:	28800017 	ldw	r2,0(r5)
    2c1c:	29400104 	addi	r5,r5,4
    2c20:	d9402d15 	stw	r5,180(sp)
    2c24:	10c00015 	stw	r3,0(r2)
    2c28:	00398606 	br	1244 <__alt_data_end+0xf8001244>
    2c2c:	d9402d17 	ldw	r5,180(sp)
    2c30:	002d883a 	mov	r22,zero
    2c34:	2cc00017 	ldw	r19,0(r5)
    2c38:	29400104 	addi	r5,r5,4
    2c3c:	d9402d15 	stw	r5,180(sp)
    2c40:	003c2306 	br	1cd0 <__alt_data_end+0xf8001cd0>
    2c44:	d8c02d17 	ldw	r3,180(sp)
    2c48:	d9002917 	ldw	r4,164(sp)
    2c4c:	002d883a 	mov	r22,zero
    2c50:	18800104 	addi	r2,r3,4
    2c54:	1cc0000b 	ldhu	r19,0(r3)
    2c58:	203dc10e 	bge	r4,zero,2360 <__alt_data_end+0xf8002360>
    2c5c:	003f7506 	br	2a34 <__alt_data_end+0xf8002a34>
    2c60:	04000074 	movhi	r16,1
    2c64:	840fdb04 	addi	r16,r16,16236
    2c68:	003acc06 	br	179c <__alt_data_end+0xf800179c>
    2c6c:	d9002c17 	ldw	r4,176(sp)
    2c70:	d9801e04 	addi	r6,sp,120
    2c74:	b80b883a 	mov	r5,r23
    2c78:	0007f000 	call	7f00 <__sprint_r>
    2c7c:	103a3b1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2c80:	dc402617 	ldw	r17,152(sp)
    2c84:	d8c02017 	ldw	r3,128(sp)
    2c88:	da000404 	addi	r8,sp,16
    2c8c:	003f9c06 	br	2b00 <__alt_data_end+0xf8002b00>
    2c90:	ac400043 	ldbu	r17,1(r21)
    2c94:	94800814 	ori	r18,r18,32
    2c98:	ad400044 	addi	r21,r21,1
    2c9c:	8c403fcc 	andi	r17,r17,255
    2ca0:	8c40201c 	xori	r17,r17,128
    2ca4:	8c7fe004 	addi	r17,r17,-128
    2ca8:	00398f06 	br	12e8 <__alt_data_end+0xf80012e8>
    2cac:	d8c02d15 	stw	r3,180(sp)
    2cb0:	0039883a 	mov	fp,zero
    2cb4:	003e3506 	br	258c <__alt_data_end+0xf800258c>
    2cb8:	d9002c17 	ldw	r4,176(sp)
    2cbc:	d9801e04 	addi	r6,sp,120
    2cc0:	b80b883a 	mov	r5,r23
    2cc4:	0007f000 	call	7f00 <__sprint_r>
    2cc8:	103a281e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2ccc:	d8c02017 	ldw	r3,128(sp)
    2cd0:	da000404 	addi	r8,sp,16
    2cd4:	003cd006 	br	2018 <__alt_data_end+0xf8002018>
    2cd8:	8009883a 	mov	r4,r16
    2cdc:	da003d15 	stw	r8,244(sp)
    2ce0:	00010cc0 	call	10cc <strlen>
    2ce4:	d8802e15 	stw	r2,184(sp)
    2ce8:	da003d17 	ldw	r8,244(sp)
    2cec:	103c340e 	bge	r2,zero,1dc0 <__alt_data_end+0xf8001dc0>
    2cf0:	0005883a 	mov	r2,zero
    2cf4:	003c3206 	br	1dc0 <__alt_data_end+0xf8001dc0>
    2cf8:	d9002c17 	ldw	r4,176(sp)
    2cfc:	d9801e04 	addi	r6,sp,120
    2d00:	b80b883a 	mov	r5,r23
    2d04:	0007f000 	call	7f00 <__sprint_r>
    2d08:	103a181e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2d0c:	d8c02017 	ldw	r3,128(sp)
    2d10:	d8801f17 	ldw	r2,124(sp)
    2d14:	da000404 	addi	r8,sp,16
    2d18:	d9403317 	ldw	r5,204(sp)
    2d1c:	10800044 	addi	r2,r2,1
    2d20:	44000015 	stw	r16,0(r8)
    2d24:	28c7883a 	add	r3,r5,r3
    2d28:	003b7d06 	br	1b20 <__alt_data_end+0xf8001b20>
    2d2c:	01000074 	movhi	r4,1
    2d30:	210fef84 	addi	r4,r4,16318
    2d34:	d9003515 	stw	r4,212(sp)
    2d38:	003b1406 	br	198c <__alt_data_end+0xf800198c>
    2d3c:	013fffc4 	movi	r4,-1
    2d40:	003a3506 	br	1618 <__alt_data_end+0xf8001618>
    2d44:	0023883a 	mov	r17,zero
    2d48:	003d9d06 	br	23c0 <__alt_data_end+0xf80023c0>
    2d4c:	d9002c17 	ldw	r4,176(sp)
    2d50:	d9801e04 	addi	r6,sp,120
    2d54:	b80b883a 	mov	r5,r23
    2d58:	0007f000 	call	7f00 <__sprint_r>
    2d5c:	103a031e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2d60:	d8c02017 	ldw	r3,128(sp)
    2d64:	da000404 	addi	r8,sp,16
    2d68:	003d9406 	br	23bc <__alt_data_end+0xf80023bc>
    2d6c:	01000074 	movhi	r4,1
    2d70:	210feb84 	addi	r4,r4,16302
    2d74:	d9002b15 	stw	r4,172(sp)
    2d78:	d9002b17 	ldw	r4,172(sp)
    2d7c:	1c47883a 	add	r3,r3,r17
    2d80:	10800044 	addi	r2,r2,1
    2d84:	41000015 	stw	r4,0(r8)
    2d88:	44400115 	stw	r17,4(r8)
    2d8c:	d8c02015 	stw	r3,128(sp)
    2d90:	d8801f15 	stw	r2,124(sp)
    2d94:	010001c4 	movi	r4,7
    2d98:	20bfd716 	blt	r4,r2,2cf8 <__alt_data_end+0xf8002cf8>
    2d9c:	42000204 	addi	r8,r8,8
    2da0:	003fdd06 	br	2d18 <__alt_data_end+0xf8002d18>
    2da4:	d9002c17 	ldw	r4,176(sp)
    2da8:	d9801e04 	addi	r6,sp,120
    2dac:	b80b883a 	mov	r5,r23
    2db0:	0007f000 	call	7f00 <__sprint_r>
    2db4:	1039ed1e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2db8:	d8802617 	ldw	r2,152(sp)
    2dbc:	d8c02017 	ldw	r3,128(sp)
    2dc0:	da000404 	addi	r8,sp,16
    2dc4:	003e1006 	br	2608 <__alt_data_end+0xf8002608>
    2dc8:	00800044 	movi	r2,1
    2dcc:	10803fcc 	andi	r2,r2,255
    2dd0:	00c00044 	movi	r3,1
    2dd4:	10fa3526 	beq	r2,r3,16ac <__alt_data_end+0xf80016ac>
    2dd8:	00c00084 	movi	r3,2
    2ddc:	10fbcb26 	beq	r2,r3,1d0c <__alt_data_end+0xf8001d0c>
    2de0:	003a8f06 	br	1820 <__alt_data_end+0xf8001820>
    2de4:	01000074 	movhi	r4,1
    2de8:	210fef84 	addi	r4,r4,16318
    2dec:	d9003515 	stw	r4,212(sp)
    2df0:	003b7606 	br	1bcc <__alt_data_end+0xf8001bcc>
    2df4:	d8802917 	ldw	r2,164(sp)
    2df8:	00c00184 	movi	r3,6
    2dfc:	1880012e 	bgeu	r3,r2,2e04 <___vfprintf_internal_r+0x1ca0>
    2e00:	1805883a 	mov	r2,r3
    2e04:	d8802e15 	stw	r2,184(sp)
    2e08:	1000ef16 	blt	r2,zero,31c8 <___vfprintf_internal_r+0x2064>
    2e0c:	04000074 	movhi	r16,1
    2e10:	d8802a15 	stw	r2,168(sp)
    2e14:	dcc02d15 	stw	r19,180(sp)
    2e18:	d8002915 	stw	zero,164(sp)
    2e1c:	d8003215 	stw	zero,200(sp)
    2e20:	840fe904 	addi	r16,r16,16292
    2e24:	0039883a 	mov	fp,zero
    2e28:	003aa206 	br	18b4 <__alt_data_end+0xf80018b4>
    2e2c:	0021883a 	mov	r16,zero
    2e30:	003e0706 	br	2650 <__alt_data_end+0xf8002650>
    2e34:	d9002c17 	ldw	r4,176(sp)
    2e38:	d9801e04 	addi	r6,sp,120
    2e3c:	b80b883a 	mov	r5,r23
    2e40:	0007f000 	call	7f00 <__sprint_r>
    2e44:	1039c91e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2e48:	d8802617 	ldw	r2,152(sp)
    2e4c:	d9403317 	ldw	r5,204(sp)
    2e50:	d8c02017 	ldw	r3,128(sp)
    2e54:	da000404 	addi	r8,sp,16
    2e58:	2885c83a 	sub	r2,r5,r2
    2e5c:	003dfb06 	br	264c <__alt_data_end+0xf800264c>
    2e60:	9080004c 	andi	r2,r18,1
    2e64:	103e8f1e 	bne	r2,zero,28a4 <__alt_data_end+0xf80028a4>
    2e68:	d8802117 	ldw	r2,132(sp)
    2e6c:	003e9e06 	br	28e8 <__alt_data_end+0xf80028e8>
    2e70:	1025883a 	mov	r18,r2
    2e74:	0039883a 	mov	fp,zero
    2e78:	00800084 	movi	r2,2
    2e7c:	003fd306 	br	2dcc <__alt_data_end+0xf8002dcc>
    2e80:	07000b44 	movi	fp,45
    2e84:	df002785 	stb	fp,158(sp)
    2e88:	003a4006 	br	178c <__alt_data_end+0xf800178c>
    2e8c:	00c00b44 	movi	r3,45
    2e90:	d8c02785 	stb	r3,158(sp)
    2e94:	d8802a15 	stw	r2,168(sp)
    2e98:	dc802b17 	ldw	r18,172(sp)
    2e9c:	d8002915 	stw	zero,164(sp)
    2ea0:	07000b44 	movi	fp,45
    2ea4:	003a8006 	br	18a8 <__alt_data_end+0xf80018a8>
    2ea8:	04000074 	movhi	r16,1
    2eac:	840fde04 	addi	r16,r16,16248
    2eb0:	003f4706 	br	2bd0 <__alt_data_end+0xf8002bd0>
    2eb4:	d8c02d17 	ldw	r3,180(sp)
    2eb8:	d9002f17 	ldw	r4,188(sp)
    2ebc:	18800017 	ldw	r2,0(r3)
    2ec0:	18c00104 	addi	r3,r3,4
    2ec4:	d8c02d15 	stw	r3,180(sp)
    2ec8:	11000015 	stw	r4,0(r2)
    2ecc:	0038dd06 	br	1244 <__alt_data_end+0xf8001244>
    2ed0:	dd802617 	ldw	r22,152(sp)
    2ed4:	00bfff44 	movi	r2,-3
    2ed8:	b0801c16 	blt	r22,r2,2f4c <___vfprintf_internal_r+0x1de8>
    2edc:	d9402917 	ldw	r5,164(sp)
    2ee0:	2d801a16 	blt	r5,r22,2f4c <___vfprintf_internal_r+0x1de8>
    2ee4:	dd803215 	stw	r22,200(sp)
    2ee8:	003e8906 	br	2910 <__alt_data_end+0xf8002910>
    2eec:	01000074 	movhi	r4,1
    2ef0:	210feb84 	addi	r4,r4,16302
    2ef4:	d9002b15 	stw	r4,172(sp)
    2ef8:	003c9106 	br	2140 <__alt_data_end+0xf8002140>
    2efc:	e005883a 	mov	r2,fp
    2f00:	003e7906 	br	28e8 <__alt_data_end+0xf80028e8>
    2f04:	d9402917 	ldw	r5,164(sp)
    2f08:	df002783 	ldbu	fp,158(sp)
    2f0c:	dcc02d15 	stw	r19,180(sp)
    2f10:	d9402a15 	stw	r5,168(sp)
    2f14:	d9402e15 	stw	r5,184(sp)
    2f18:	d8002915 	stw	zero,164(sp)
    2f1c:	d8003215 	stw	zero,200(sp)
    2f20:	003a5d06 	br	1898 <__alt_data_end+0xf8001898>
    2f24:	9080004c 	andi	r2,r18,1
    2f28:	0039883a 	mov	fp,zero
    2f2c:	10000426 	beq	r2,zero,2f40 <___vfprintf_internal_r+0x1ddc>
    2f30:	00800c04 	movi	r2,48
    2f34:	dc001dc4 	addi	r16,sp,119
    2f38:	d8801dc5 	stb	r2,119(sp)
    2f3c:	003b8006 	br	1d40 <__alt_data_end+0xf8001d40>
    2f40:	d8002e15 	stw	zero,184(sp)
    2f44:	dc001e04 	addi	r16,sp,120
    2f48:	003a4d06 	br	1880 <__alt_data_end+0xf8001880>
    2f4c:	8c7fff84 	addi	r17,r17,-2
    2f50:	b5bfffc4 	addi	r22,r22,-1
    2f54:	dd802615 	stw	r22,152(sp)
    2f58:	dc4022c5 	stb	r17,139(sp)
    2f5c:	b000bf16 	blt	r22,zero,325c <___vfprintf_internal_r+0x20f8>
    2f60:	00800ac4 	movi	r2,43
    2f64:	d8802305 	stb	r2,140(sp)
    2f68:	00800244 	movi	r2,9
    2f6c:	15807016 	blt	r2,r22,3130 <___vfprintf_internal_r+0x1fcc>
    2f70:	00800c04 	movi	r2,48
    2f74:	b5800c04 	addi	r22,r22,48
    2f78:	d8802345 	stb	r2,141(sp)
    2f7c:	dd802385 	stb	r22,142(sp)
    2f80:	d88023c4 	addi	r2,sp,143
    2f84:	df0022c4 	addi	fp,sp,139
    2f88:	d8c03317 	ldw	r3,204(sp)
    2f8c:	1739c83a 	sub	fp,r2,fp
    2f90:	d9003317 	ldw	r4,204(sp)
    2f94:	e0c7883a 	add	r3,fp,r3
    2f98:	df003a15 	stw	fp,232(sp)
    2f9c:	d8c02e15 	stw	r3,184(sp)
    2fa0:	00800044 	movi	r2,1
    2fa4:	1100b30e 	bge	r2,r4,3274 <___vfprintf_internal_r+0x2110>
    2fa8:	d8c02e17 	ldw	r3,184(sp)
    2fac:	18c00044 	addi	r3,r3,1
    2fb0:	d8c02e15 	stw	r3,184(sp)
    2fb4:	1805883a 	mov	r2,r3
    2fb8:	1800ac16 	blt	r3,zero,326c <___vfprintf_internal_r+0x2108>
    2fbc:	d8003215 	stw	zero,200(sp)
    2fc0:	003e5d06 	br	2938 <__alt_data_end+0xf8002938>
    2fc4:	d9002c17 	ldw	r4,176(sp)
    2fc8:	d9801e04 	addi	r6,sp,120
    2fcc:	b80b883a 	mov	r5,r23
    2fd0:	0007f000 	call	7f00 <__sprint_r>
    2fd4:	1039651e 	bne	r2,zero,156c <__alt_data_end+0xf800156c>
    2fd8:	dc402617 	ldw	r17,152(sp)
    2fdc:	d8c02017 	ldw	r3,128(sp)
    2fe0:	d8801f17 	ldw	r2,124(sp)
    2fe4:	da000404 	addi	r8,sp,16
    2fe8:	003ed606 	br	2b44 <__alt_data_end+0xf8002b44>
    2fec:	582b883a 	mov	r21,r11
    2ff0:	d8002915 	stw	zero,164(sp)
    2ff4:	0038bd06 	br	12ec <__alt_data_end+0xf80012ec>
    2ff8:	d8802917 	ldw	r2,164(sp)
    2ffc:	103e071e 	bne	r2,zero,281c <__alt_data_end+0xf800281c>
    3000:	dc002915 	stw	r16,164(sp)
    3004:	003e0506 	br	281c <__alt_data_end+0xf800281c>
    3008:	d9002917 	ldw	r4,164(sp)
    300c:	20c00044 	addi	r3,r4,1
    3010:	003e0f06 	br	2850 <__alt_data_end+0xf8002850>
    3014:	01400184 	movi	r5,6
    3018:	d9402915 	stw	r5,164(sp)
    301c:	003dff06 	br	281c <__alt_data_end+0xf800281c>
    3020:	d8802104 	addi	r2,sp,132
    3024:	d8800315 	stw	r2,12(sp)
    3028:	d8802504 	addi	r2,sp,148
    302c:	d8800215 	stw	r2,8(sp)
    3030:	d8802604 	addi	r2,sp,152
    3034:	d8800115 	stw	r2,4(sp)
    3038:	d8802917 	ldw	r2,164(sp)
    303c:	d9403617 	ldw	r5,216(sp)
    3040:	d9002c17 	ldw	r4,176(sp)
    3044:	d8800015 	stw	r2,0(sp)
    3048:	01c000c4 	movi	r7,3
    304c:	980d883a 	mov	r6,r19
    3050:	da003d15 	stw	r8,244(sp)
    3054:	00037880 	call	3788 <_dtoa_r>
    3058:	d8c02917 	ldw	r3,164(sp)
    305c:	da003d17 	ldw	r8,244(sp)
    3060:	1021883a 	mov	r16,r2
    3064:	10f9883a 	add	fp,r2,r3
    3068:	81000007 	ldb	r4,0(r16)
    306c:	00800c04 	movi	r2,48
    3070:	20805e26 	beq	r4,r2,31ec <___vfprintf_internal_r+0x2088>
    3074:	d8c02617 	ldw	r3,152(sp)
    3078:	e0f9883a 	add	fp,fp,r3
    307c:	003e0a06 	br	28a8 <__alt_data_end+0xf80028a8>
    3080:	00c00b44 	movi	r3,45
    3084:	24e0003c 	xorhi	r19,r4,32768
    3088:	d8c02a05 	stb	r3,168(sp)
    308c:	003de906 	br	2834 <__alt_data_end+0xf8002834>
    3090:	d8c03217 	ldw	r3,200(sp)
    3094:	00c07a0e 	bge	zero,r3,3280 <___vfprintf_internal_r+0x211c>
    3098:	00800044 	movi	r2,1
    309c:	d9003317 	ldw	r4,204(sp)
    30a0:	1105883a 	add	r2,r2,r4
    30a4:	d8802e15 	stw	r2,184(sp)
    30a8:	10004e16 	blt	r2,zero,31e4 <___vfprintf_internal_r+0x2080>
    30ac:	044019c4 	movi	r17,103
    30b0:	003e2106 	br	2938 <__alt_data_end+0xf8002938>
    30b4:	d9002917 	ldw	r4,164(sp)
    30b8:	d8802104 	addi	r2,sp,132
    30bc:	d8800315 	stw	r2,12(sp)
    30c0:	d9000015 	stw	r4,0(sp)
    30c4:	d8802504 	addi	r2,sp,148
    30c8:	d9403617 	ldw	r5,216(sp)
    30cc:	d9002c17 	ldw	r4,176(sp)
    30d0:	d8800215 	stw	r2,8(sp)
    30d4:	d8802604 	addi	r2,sp,152
    30d8:	d8800115 	stw	r2,4(sp)
    30dc:	01c000c4 	movi	r7,3
    30e0:	980d883a 	mov	r6,r19
    30e4:	da003d15 	stw	r8,244(sp)
    30e8:	00037880 	call	3788 <_dtoa_r>
    30ec:	d8c02917 	ldw	r3,164(sp)
    30f0:	da003d17 	ldw	r8,244(sp)
    30f4:	1021883a 	mov	r16,r2
    30f8:	00801184 	movi	r2,70
    30fc:	80f9883a 	add	fp,r16,r3
    3100:	88bfd926 	beq	r17,r2,3068 <__alt_data_end+0xf8003068>
    3104:	003de806 	br	28a8 <__alt_data_end+0xf80028a8>
    3108:	d9002917 	ldw	r4,164(sp)
    310c:	00c04d0e 	bge	zero,r3,3244 <___vfprintf_internal_r+0x20e0>
    3110:	2000441e 	bne	r4,zero,3224 <___vfprintf_internal_r+0x20c0>
    3114:	9480004c 	andi	r18,r18,1
    3118:	9000421e 	bne	r18,zero,3224 <___vfprintf_internal_r+0x20c0>
    311c:	1805883a 	mov	r2,r3
    3120:	18007016 	blt	r3,zero,32e4 <___vfprintf_internal_r+0x2180>
    3124:	d8c03217 	ldw	r3,200(sp)
    3128:	d8c02e15 	stw	r3,184(sp)
    312c:	003e0206 	br	2938 <__alt_data_end+0xf8002938>
    3130:	df0022c4 	addi	fp,sp,139
    3134:	dc002915 	stw	r16,164(sp)
    3138:	4027883a 	mov	r19,r8
    313c:	e021883a 	mov	r16,fp
    3140:	b009883a 	mov	r4,r22
    3144:	01400284 	movi	r5,10
    3148:	000a8b40 	call	a8b4 <__modsi3>
    314c:	10800c04 	addi	r2,r2,48
    3150:	843fffc4 	addi	r16,r16,-1
    3154:	b009883a 	mov	r4,r22
    3158:	01400284 	movi	r5,10
    315c:	80800005 	stb	r2,0(r16)
    3160:	000a8300 	call	a830 <__divsi3>
    3164:	102d883a 	mov	r22,r2
    3168:	00800244 	movi	r2,9
    316c:	15bff416 	blt	r2,r22,3140 <__alt_data_end+0xf8003140>
    3170:	9811883a 	mov	r8,r19
    3174:	b0800c04 	addi	r2,r22,48
    3178:	8027883a 	mov	r19,r16
    317c:	997fffc4 	addi	r5,r19,-1
    3180:	98bfffc5 	stb	r2,-1(r19)
    3184:	dc002917 	ldw	r16,164(sp)
    3188:	2f006a2e 	bgeu	r5,fp,3334 <___vfprintf_internal_r+0x21d0>
    318c:	d9c02384 	addi	r7,sp,142
    3190:	3ccfc83a 	sub	r7,r7,r19
    3194:	d9002344 	addi	r4,sp,141
    3198:	e1cf883a 	add	r7,fp,r7
    319c:	00000106 	br	31a4 <___vfprintf_internal_r+0x2040>
    31a0:	28800003 	ldbu	r2,0(r5)
    31a4:	20800005 	stb	r2,0(r4)
    31a8:	21000044 	addi	r4,r4,1
    31ac:	29400044 	addi	r5,r5,1
    31b0:	393ffb1e 	bne	r7,r4,31a0 <__alt_data_end+0xf80031a0>
    31b4:	d8802304 	addi	r2,sp,140
    31b8:	14c5c83a 	sub	r2,r2,r19
    31bc:	d8c02344 	addi	r3,sp,141
    31c0:	1885883a 	add	r2,r3,r2
    31c4:	003f7006 	br	2f88 <__alt_data_end+0xf8002f88>
    31c8:	0005883a 	mov	r2,zero
    31cc:	003f0f06 	br	2e0c <__alt_data_end+0xf8002e0c>
    31d0:	d8c03217 	ldw	r3,200(sp)
    31d4:	18c00044 	addi	r3,r3,1
    31d8:	d8c02e15 	stw	r3,184(sp)
    31dc:	1805883a 	mov	r2,r3
    31e0:	183fb20e 	bge	r3,zero,30ac <__alt_data_end+0xf80030ac>
    31e4:	0005883a 	mov	r2,zero
    31e8:	003fb006 	br	30ac <__alt_data_end+0xf80030ac>
    31ec:	d9003617 	ldw	r4,216(sp)
    31f0:	000d883a 	mov	r6,zero
    31f4:	000f883a 	mov	r7,zero
    31f8:	980b883a 	mov	r5,r19
    31fc:	d8c03c15 	stw	r3,240(sp)
    3200:	da003d15 	stw	r8,244(sp)
    3204:	000bb780 	call	bb78 <__eqdf2>
    3208:	d8c03c17 	ldw	r3,240(sp)
    320c:	da003d17 	ldw	r8,244(sp)
    3210:	103f9826 	beq	r2,zero,3074 <__alt_data_end+0xf8003074>
    3214:	00800044 	movi	r2,1
    3218:	10c7c83a 	sub	r3,r2,r3
    321c:	d8c02615 	stw	r3,152(sp)
    3220:	003f9506 	br	3078 <__alt_data_end+0xf8003078>
    3224:	d9002917 	ldw	r4,164(sp)
    3228:	d8c03217 	ldw	r3,200(sp)
    322c:	20800044 	addi	r2,r4,1
    3230:	1885883a 	add	r2,r3,r2
    3234:	d8802e15 	stw	r2,184(sp)
    3238:	103dbf0e 	bge	r2,zero,2938 <__alt_data_end+0xf8002938>
    323c:	0005883a 	mov	r2,zero
    3240:	003dbd06 	br	2938 <__alt_data_end+0xf8002938>
    3244:	2000211e 	bne	r4,zero,32cc <___vfprintf_internal_r+0x2168>
    3248:	9480004c 	andi	r18,r18,1
    324c:	90001f1e 	bne	r18,zero,32cc <___vfprintf_internal_r+0x2168>
    3250:	00800044 	movi	r2,1
    3254:	d8802e15 	stw	r2,184(sp)
    3258:	003db706 	br	2938 <__alt_data_end+0xf8002938>
    325c:	00800b44 	movi	r2,45
    3260:	05adc83a 	sub	r22,zero,r22
    3264:	d8802305 	stb	r2,140(sp)
    3268:	003f3f06 	br	2f68 <__alt_data_end+0xf8002f68>
    326c:	0005883a 	mov	r2,zero
    3270:	003f5206 	br	2fbc <__alt_data_end+0xf8002fbc>
    3274:	90a4703a 	and	r18,r18,r2
    3278:	903f4e26 	beq	r18,zero,2fb4 <__alt_data_end+0xf8002fb4>
    327c:	003f4a06 	br	2fa8 <__alt_data_end+0xf8002fa8>
    3280:	00800084 	movi	r2,2
    3284:	10c5c83a 	sub	r2,r2,r3
    3288:	003f8406 	br	309c <__alt_data_end+0xf800309c>
    328c:	d8802d17 	ldw	r2,180(sp)
    3290:	d9002d17 	ldw	r4,180(sp)
    3294:	ac400043 	ldbu	r17,1(r21)
    3298:	10800017 	ldw	r2,0(r2)
    329c:	582b883a 	mov	r21,r11
    32a0:	d8802915 	stw	r2,164(sp)
    32a4:	20800104 	addi	r2,r4,4
    32a8:	d9002917 	ldw	r4,164(sp)
    32ac:	d8802d15 	stw	r2,180(sp)
    32b0:	203e7a0e 	bge	r4,zero,2c9c <__alt_data_end+0xf8002c9c>
    32b4:	8c403fcc 	andi	r17,r17,255
    32b8:	00bfffc4 	movi	r2,-1
    32bc:	8c40201c 	xori	r17,r17,128
    32c0:	d8802915 	stw	r2,164(sp)
    32c4:	8c7fe004 	addi	r17,r17,-128
    32c8:	00380706 	br	12e8 <__alt_data_end+0xf80012e8>
    32cc:	d8c02917 	ldw	r3,164(sp)
    32d0:	18c00084 	addi	r3,r3,2
    32d4:	d8c02e15 	stw	r3,184(sp)
    32d8:	1805883a 	mov	r2,r3
    32dc:	183d960e 	bge	r3,zero,2938 <__alt_data_end+0xf8002938>
    32e0:	003fd606 	br	323c <__alt_data_end+0xf800323c>
    32e4:	0005883a 	mov	r2,zero
    32e8:	003f8e06 	br	3124 <__alt_data_end+0xf8003124>
    32ec:	9080004c 	andi	r2,r18,1
    32f0:	103f811e 	bne	r2,zero,30f8 <__alt_data_end+0xf80030f8>
    32f4:	d8802117 	ldw	r2,132(sp)
    32f8:	1405c83a 	sub	r2,r2,r16
    32fc:	d8803315 	stw	r2,204(sp)
    3300:	b47ef326 	beq	r22,r17,2ed0 <__alt_data_end+0xf8002ed0>
    3304:	dd802617 	ldw	r22,152(sp)
    3308:	003f1106 	br	2f50 <__alt_data_end+0xf8002f50>
    330c:	d9c02785 	stb	r7,158(sp)
    3310:	00390406 	br	1724 <__alt_data_end+0xf8001724>
    3314:	d9c02785 	stb	r7,158(sp)
    3318:	0038d306 	br	1668 <__alt_data_end+0xf8001668>
    331c:	d9c02785 	stb	r7,158(sp)
    3320:	003a6106 	br	1ca8 <__alt_data_end+0xf8001ca8>
    3324:	d9c02785 	stb	r7,158(sp)
    3328:	003af806 	br	1f0c <__alt_data_end+0xf8001f0c>
    332c:	0005883a 	mov	r2,zero
    3330:	003d7e06 	br	292c <__alt_data_end+0xf800292c>
    3334:	d8802344 	addi	r2,sp,141
    3338:	003f1306 	br	2f88 <__alt_data_end+0xf8002f88>
    333c:	d9c02785 	stb	r7,158(sp)
    3340:	00392306 	br	17d0 <__alt_data_end+0xf80017d0>
    3344:	d9c02785 	stb	r7,158(sp)
    3348:	003aa906 	br	1df0 <__alt_data_end+0xf8001df0>
    334c:	d9c02785 	stb	r7,158(sp)
    3350:	003a3d06 	br	1c48 <__alt_data_end+0xf8001c48>
    3354:	d9c02785 	stb	r7,158(sp)
    3358:	003aca06 	br	1e84 <__alt_data_end+0xf8001e84>

0000335c <__vfprintf_internal>:
    335c:	00800074 	movhi	r2,1
    3360:	10978804 	addi	r2,r2,24096
    3364:	300f883a 	mov	r7,r6
    3368:	280d883a 	mov	r6,r5
    336c:	200b883a 	mov	r5,r4
    3370:	11000017 	ldw	r4,0(r2)
    3374:	00011641 	jmpi	1164 <___vfprintf_internal_r>

00003378 <__sbprintf>:
    3378:	2880030b 	ldhu	r2,12(r5)
    337c:	2ac01917 	ldw	r11,100(r5)
    3380:	2a80038b 	ldhu	r10,14(r5)
    3384:	2a400717 	ldw	r9,28(r5)
    3388:	2a000917 	ldw	r8,36(r5)
    338c:	defee204 	addi	sp,sp,-1144
    3390:	00c10004 	movi	r3,1024
    3394:	dc011a15 	stw	r16,1128(sp)
    3398:	10bfff4c 	andi	r2,r2,65533
    339c:	2821883a 	mov	r16,r5
    33a0:	d8cb883a 	add	r5,sp,r3
    33a4:	dc811c15 	stw	r18,1136(sp)
    33a8:	dc411b15 	stw	r17,1132(sp)
    33ac:	dfc11d15 	stw	ra,1140(sp)
    33b0:	2025883a 	mov	r18,r4
    33b4:	d881030d 	sth	r2,1036(sp)
    33b8:	dac11915 	stw	r11,1124(sp)
    33bc:	da81038d 	sth	r10,1038(sp)
    33c0:	da410715 	stw	r9,1052(sp)
    33c4:	da010915 	stw	r8,1060(sp)
    33c8:	dec10015 	stw	sp,1024(sp)
    33cc:	dec10415 	stw	sp,1040(sp)
    33d0:	d8c10215 	stw	r3,1032(sp)
    33d4:	d8c10515 	stw	r3,1044(sp)
    33d8:	d8010615 	stw	zero,1048(sp)
    33dc:	00011640 	call	1164 <___vfprintf_internal_r>
    33e0:	1023883a 	mov	r17,r2
    33e4:	10000416 	blt	r2,zero,33f8 <__sbprintf+0x80>
    33e8:	d9410004 	addi	r5,sp,1024
    33ec:	9009883a 	mov	r4,r18
    33f0:	000502c0 	call	502c <_fflush_r>
    33f4:	10000d1e 	bne	r2,zero,342c <__sbprintf+0xb4>
    33f8:	d881030b 	ldhu	r2,1036(sp)
    33fc:	1080100c 	andi	r2,r2,64
    3400:	10000326 	beq	r2,zero,3410 <__sbprintf+0x98>
    3404:	8080030b 	ldhu	r2,12(r16)
    3408:	10801014 	ori	r2,r2,64
    340c:	8080030d 	sth	r2,12(r16)
    3410:	8805883a 	mov	r2,r17
    3414:	dfc11d17 	ldw	ra,1140(sp)
    3418:	dc811c17 	ldw	r18,1136(sp)
    341c:	dc411b17 	ldw	r17,1132(sp)
    3420:	dc011a17 	ldw	r16,1128(sp)
    3424:	dec11e04 	addi	sp,sp,1144
    3428:	f800283a 	ret
    342c:	047fffc4 	movi	r17,-1
    3430:	003ff106 	br	33f8 <__alt_data_end+0xf80033f8>

00003434 <__swsetup_r>:
    3434:	00800074 	movhi	r2,1
    3438:	defffd04 	addi	sp,sp,-12
    343c:	10978804 	addi	r2,r2,24096
    3440:	dc400115 	stw	r17,4(sp)
    3444:	2023883a 	mov	r17,r4
    3448:	11000017 	ldw	r4,0(r2)
    344c:	dc000015 	stw	r16,0(sp)
    3450:	dfc00215 	stw	ra,8(sp)
    3454:	2821883a 	mov	r16,r5
    3458:	20000226 	beq	r4,zero,3464 <__swsetup_r+0x30>
    345c:	20800e17 	ldw	r2,56(r4)
    3460:	10003126 	beq	r2,zero,3528 <__swsetup_r+0xf4>
    3464:	8080030b 	ldhu	r2,12(r16)
    3468:	10c0020c 	andi	r3,r2,8
    346c:	1009883a 	mov	r4,r2
    3470:	18000f26 	beq	r3,zero,34b0 <__swsetup_r+0x7c>
    3474:	80c00417 	ldw	r3,16(r16)
    3478:	18001526 	beq	r3,zero,34d0 <__swsetup_r+0x9c>
    347c:	1100004c 	andi	r4,r2,1
    3480:	20001c1e 	bne	r4,zero,34f4 <__swsetup_r+0xc0>
    3484:	1080008c 	andi	r2,r2,2
    3488:	1000291e 	bne	r2,zero,3530 <__swsetup_r+0xfc>
    348c:	80800517 	ldw	r2,20(r16)
    3490:	80800215 	stw	r2,8(r16)
    3494:	18001c26 	beq	r3,zero,3508 <__swsetup_r+0xd4>
    3498:	0005883a 	mov	r2,zero
    349c:	dfc00217 	ldw	ra,8(sp)
    34a0:	dc400117 	ldw	r17,4(sp)
    34a4:	dc000017 	ldw	r16,0(sp)
    34a8:	dec00304 	addi	sp,sp,12
    34ac:	f800283a 	ret
    34b0:	2080040c 	andi	r2,r4,16
    34b4:	10002e26 	beq	r2,zero,3570 <__swsetup_r+0x13c>
    34b8:	2080010c 	andi	r2,r4,4
    34bc:	10001e1e 	bne	r2,zero,3538 <__swsetup_r+0x104>
    34c0:	80c00417 	ldw	r3,16(r16)
    34c4:	20800214 	ori	r2,r4,8
    34c8:	8080030d 	sth	r2,12(r16)
    34cc:	183feb1e 	bne	r3,zero,347c <__alt_data_end+0xf800347c>
    34d0:	1100a00c 	andi	r4,r2,640
    34d4:	01408004 	movi	r5,512
    34d8:	217fe826 	beq	r4,r5,347c <__alt_data_end+0xf800347c>
    34dc:	800b883a 	mov	r5,r16
    34e0:	8809883a 	mov	r4,r17
    34e4:	0005fac0 	call	5fac <__smakebuf_r>
    34e8:	8080030b 	ldhu	r2,12(r16)
    34ec:	80c00417 	ldw	r3,16(r16)
    34f0:	003fe206 	br	347c <__alt_data_end+0xf800347c>
    34f4:	80800517 	ldw	r2,20(r16)
    34f8:	80000215 	stw	zero,8(r16)
    34fc:	0085c83a 	sub	r2,zero,r2
    3500:	80800615 	stw	r2,24(r16)
    3504:	183fe41e 	bne	r3,zero,3498 <__alt_data_end+0xf8003498>
    3508:	80c0030b 	ldhu	r3,12(r16)
    350c:	0005883a 	mov	r2,zero
    3510:	1900200c 	andi	r4,r3,128
    3514:	203fe126 	beq	r4,zero,349c <__alt_data_end+0xf800349c>
    3518:	18c01014 	ori	r3,r3,64
    351c:	80c0030d 	sth	r3,12(r16)
    3520:	00bfffc4 	movi	r2,-1
    3524:	003fdd06 	br	349c <__alt_data_end+0xf800349c>
    3528:	00054080 	call	5408 <__sinit>
    352c:	003fcd06 	br	3464 <__alt_data_end+0xf8003464>
    3530:	0005883a 	mov	r2,zero
    3534:	003fd606 	br	3490 <__alt_data_end+0xf8003490>
    3538:	81400c17 	ldw	r5,48(r16)
    353c:	28000626 	beq	r5,zero,3558 <__swsetup_r+0x124>
    3540:	80801004 	addi	r2,r16,64
    3544:	28800326 	beq	r5,r2,3554 <__swsetup_r+0x120>
    3548:	8809883a 	mov	r4,r17
    354c:	000557c0 	call	557c <_free_r>
    3550:	8100030b 	ldhu	r4,12(r16)
    3554:	80000c15 	stw	zero,48(r16)
    3558:	80c00417 	ldw	r3,16(r16)
    355c:	00bff6c4 	movi	r2,-37
    3560:	1108703a 	and	r4,r2,r4
    3564:	80000115 	stw	zero,4(r16)
    3568:	80c00015 	stw	r3,0(r16)
    356c:	003fd506 	br	34c4 <__alt_data_end+0xf80034c4>
    3570:	00800244 	movi	r2,9
    3574:	88800015 	stw	r2,0(r17)
    3578:	20801014 	ori	r2,r4,64
    357c:	8080030d 	sth	r2,12(r16)
    3580:	00bfffc4 	movi	r2,-1
    3584:	003fc506 	br	349c <__alt_data_end+0xf800349c>

00003588 <quorem>:
    3588:	defff704 	addi	sp,sp,-36
    358c:	dc800215 	stw	r18,8(sp)
    3590:	20800417 	ldw	r2,16(r4)
    3594:	2c800417 	ldw	r18,16(r5)
    3598:	dfc00815 	stw	ra,32(sp)
    359c:	ddc00715 	stw	r23,28(sp)
    35a0:	dd800615 	stw	r22,24(sp)
    35a4:	dd400515 	stw	r21,20(sp)
    35a8:	dd000415 	stw	r20,16(sp)
    35ac:	dcc00315 	stw	r19,12(sp)
    35b0:	dc400115 	stw	r17,4(sp)
    35b4:	dc000015 	stw	r16,0(sp)
    35b8:	14807116 	blt	r2,r18,3780 <quorem+0x1f8>
    35bc:	94bfffc4 	addi	r18,r18,-1
    35c0:	94ad883a 	add	r22,r18,r18
    35c4:	b5ad883a 	add	r22,r22,r22
    35c8:	2c400504 	addi	r17,r5,20
    35cc:	8da9883a 	add	r20,r17,r22
    35d0:	25400504 	addi	r21,r4,20
    35d4:	282f883a 	mov	r23,r5
    35d8:	adad883a 	add	r22,r21,r22
    35dc:	a1400017 	ldw	r5,0(r20)
    35e0:	2021883a 	mov	r16,r4
    35e4:	b1000017 	ldw	r4,0(r22)
    35e8:	29400044 	addi	r5,r5,1
    35ec:	000a9280 	call	a928 <__udivsi3>
    35f0:	1027883a 	mov	r19,r2
    35f4:	10002c26 	beq	r2,zero,36a8 <quorem+0x120>
    35f8:	a813883a 	mov	r9,r21
    35fc:	880b883a 	mov	r5,r17
    3600:	0009883a 	mov	r4,zero
    3604:	000d883a 	mov	r6,zero
    3608:	2a000017 	ldw	r8,0(r5)
    360c:	49c00017 	ldw	r7,0(r9)
    3610:	29400104 	addi	r5,r5,4
    3614:	40bfffcc 	andi	r2,r8,65535
    3618:	14c5383a 	mul	r2,r2,r19
    361c:	4010d43a 	srli	r8,r8,16
    3620:	38ffffcc 	andi	r3,r7,65535
    3624:	1105883a 	add	r2,r2,r4
    3628:	1008d43a 	srli	r4,r2,16
    362c:	44d1383a 	mul	r8,r8,r19
    3630:	198d883a 	add	r6,r3,r6
    3634:	10ffffcc 	andi	r3,r2,65535
    3638:	30c7c83a 	sub	r3,r6,r3
    363c:	380ed43a 	srli	r7,r7,16
    3640:	4105883a 	add	r2,r8,r4
    3644:	180dd43a 	srai	r6,r3,16
    3648:	113fffcc 	andi	r4,r2,65535
    364c:	390fc83a 	sub	r7,r7,r4
    3650:	398d883a 	add	r6,r7,r6
    3654:	300e943a 	slli	r7,r6,16
    3658:	18ffffcc 	andi	r3,r3,65535
    365c:	1008d43a 	srli	r4,r2,16
    3660:	38ceb03a 	or	r7,r7,r3
    3664:	49c00015 	stw	r7,0(r9)
    3668:	300dd43a 	srai	r6,r6,16
    366c:	4a400104 	addi	r9,r9,4
    3670:	a17fe52e 	bgeu	r20,r5,3608 <__alt_data_end+0xf8003608>
    3674:	b0800017 	ldw	r2,0(r22)
    3678:	10000b1e 	bne	r2,zero,36a8 <quorem+0x120>
    367c:	b0bfff04 	addi	r2,r22,-4
    3680:	a880082e 	bgeu	r21,r2,36a4 <quorem+0x11c>
    3684:	b0ffff17 	ldw	r3,-4(r22)
    3688:	18000326 	beq	r3,zero,3698 <quorem+0x110>
    368c:	00000506 	br	36a4 <quorem+0x11c>
    3690:	10c00017 	ldw	r3,0(r2)
    3694:	1800031e 	bne	r3,zero,36a4 <quorem+0x11c>
    3698:	10bfff04 	addi	r2,r2,-4
    369c:	94bfffc4 	addi	r18,r18,-1
    36a0:	a8bffb36 	bltu	r21,r2,3690 <__alt_data_end+0xf8003690>
    36a4:	84800415 	stw	r18,16(r16)
    36a8:	b80b883a 	mov	r5,r23
    36ac:	8009883a 	mov	r4,r16
    36b0:	0006ee00 	call	6ee0 <__mcmp>
    36b4:	10002616 	blt	r2,zero,3750 <quorem+0x1c8>
    36b8:	9cc00044 	addi	r19,r19,1
    36bc:	a805883a 	mov	r2,r21
    36c0:	000b883a 	mov	r5,zero
    36c4:	11000017 	ldw	r4,0(r2)
    36c8:	89800017 	ldw	r6,0(r17)
    36cc:	10800104 	addi	r2,r2,4
    36d0:	20ffffcc 	andi	r3,r4,65535
    36d4:	194b883a 	add	r5,r3,r5
    36d8:	30ffffcc 	andi	r3,r6,65535
    36dc:	28c7c83a 	sub	r3,r5,r3
    36e0:	300cd43a 	srli	r6,r6,16
    36e4:	2008d43a 	srli	r4,r4,16
    36e8:	180bd43a 	srai	r5,r3,16
    36ec:	18ffffcc 	andi	r3,r3,65535
    36f0:	2189c83a 	sub	r4,r4,r6
    36f4:	2149883a 	add	r4,r4,r5
    36f8:	200c943a 	slli	r6,r4,16
    36fc:	8c400104 	addi	r17,r17,4
    3700:	200bd43a 	srai	r5,r4,16
    3704:	30c6b03a 	or	r3,r6,r3
    3708:	10ffff15 	stw	r3,-4(r2)
    370c:	a47fed2e 	bgeu	r20,r17,36c4 <__alt_data_end+0xf80036c4>
    3710:	9485883a 	add	r2,r18,r18
    3714:	1085883a 	add	r2,r2,r2
    3718:	a887883a 	add	r3,r21,r2
    371c:	18800017 	ldw	r2,0(r3)
    3720:	10000b1e 	bne	r2,zero,3750 <quorem+0x1c8>
    3724:	18bfff04 	addi	r2,r3,-4
    3728:	a880082e 	bgeu	r21,r2,374c <quorem+0x1c4>
    372c:	18ffff17 	ldw	r3,-4(r3)
    3730:	18000326 	beq	r3,zero,3740 <quorem+0x1b8>
    3734:	00000506 	br	374c <quorem+0x1c4>
    3738:	10c00017 	ldw	r3,0(r2)
    373c:	1800031e 	bne	r3,zero,374c <quorem+0x1c4>
    3740:	10bfff04 	addi	r2,r2,-4
    3744:	94bfffc4 	addi	r18,r18,-1
    3748:	a8bffb36 	bltu	r21,r2,3738 <__alt_data_end+0xf8003738>
    374c:	84800415 	stw	r18,16(r16)
    3750:	9805883a 	mov	r2,r19
    3754:	dfc00817 	ldw	ra,32(sp)
    3758:	ddc00717 	ldw	r23,28(sp)
    375c:	dd800617 	ldw	r22,24(sp)
    3760:	dd400517 	ldw	r21,20(sp)
    3764:	dd000417 	ldw	r20,16(sp)
    3768:	dcc00317 	ldw	r19,12(sp)
    376c:	dc800217 	ldw	r18,8(sp)
    3770:	dc400117 	ldw	r17,4(sp)
    3774:	dc000017 	ldw	r16,0(sp)
    3778:	dec00904 	addi	sp,sp,36
    377c:	f800283a 	ret
    3780:	0005883a 	mov	r2,zero
    3784:	003ff306 	br	3754 <__alt_data_end+0xf8003754>

00003788 <_dtoa_r>:
    3788:	20801017 	ldw	r2,64(r4)
    378c:	deffde04 	addi	sp,sp,-136
    3790:	df002015 	stw	fp,128(sp)
    3794:	dcc01b15 	stw	r19,108(sp)
    3798:	dc801a15 	stw	r18,104(sp)
    379c:	dc401915 	stw	r17,100(sp)
    37a0:	dc001815 	stw	r16,96(sp)
    37a4:	dfc02115 	stw	ra,132(sp)
    37a8:	ddc01f15 	stw	r23,124(sp)
    37ac:	dd801e15 	stw	r22,120(sp)
    37b0:	dd401d15 	stw	r21,116(sp)
    37b4:	dd001c15 	stw	r20,112(sp)
    37b8:	d9c00315 	stw	r7,12(sp)
    37bc:	2039883a 	mov	fp,r4
    37c0:	3023883a 	mov	r17,r6
    37c4:	2825883a 	mov	r18,r5
    37c8:	dc002417 	ldw	r16,144(sp)
    37cc:	3027883a 	mov	r19,r6
    37d0:	10000826 	beq	r2,zero,37f4 <_dtoa_r+0x6c>
    37d4:	21801117 	ldw	r6,68(r4)
    37d8:	00c00044 	movi	r3,1
    37dc:	100b883a 	mov	r5,r2
    37e0:	1986983a 	sll	r3,r3,r6
    37e4:	11800115 	stw	r6,4(r2)
    37e8:	10c00215 	stw	r3,8(r2)
    37ec:	00066c00 	call	66c0 <_Bfree>
    37f0:	e0001015 	stw	zero,64(fp)
    37f4:	88002e16 	blt	r17,zero,38b0 <_dtoa_r+0x128>
    37f8:	80000015 	stw	zero,0(r16)
    37fc:	889ffc2c 	andhi	r2,r17,32752
    3800:	00dffc34 	movhi	r3,32752
    3804:	10c01c26 	beq	r2,r3,3878 <_dtoa_r+0xf0>
    3808:	000d883a 	mov	r6,zero
    380c:	000f883a 	mov	r7,zero
    3810:	9009883a 	mov	r4,r18
    3814:	980b883a 	mov	r5,r19
    3818:	000bb780 	call	bb78 <__eqdf2>
    381c:	10002b1e 	bne	r2,zero,38cc <_dtoa_r+0x144>
    3820:	d9c02317 	ldw	r7,140(sp)
    3824:	00800044 	movi	r2,1
    3828:	38800015 	stw	r2,0(r7)
    382c:	d8802517 	ldw	r2,148(sp)
    3830:	10019e26 	beq	r2,zero,3eac <_dtoa_r+0x724>
    3834:	d8c02517 	ldw	r3,148(sp)
    3838:	00800074 	movhi	r2,1
    383c:	108feb44 	addi	r2,r2,16301
    3840:	18800015 	stw	r2,0(r3)
    3844:	10bfffc4 	addi	r2,r2,-1
    3848:	dfc02117 	ldw	ra,132(sp)
    384c:	df002017 	ldw	fp,128(sp)
    3850:	ddc01f17 	ldw	r23,124(sp)
    3854:	dd801e17 	ldw	r22,120(sp)
    3858:	dd401d17 	ldw	r21,116(sp)
    385c:	dd001c17 	ldw	r20,112(sp)
    3860:	dcc01b17 	ldw	r19,108(sp)
    3864:	dc801a17 	ldw	r18,104(sp)
    3868:	dc401917 	ldw	r17,100(sp)
    386c:	dc001817 	ldw	r16,96(sp)
    3870:	dec02204 	addi	sp,sp,136
    3874:	f800283a 	ret
    3878:	d8c02317 	ldw	r3,140(sp)
    387c:	0089c3c4 	movi	r2,9999
    3880:	18800015 	stw	r2,0(r3)
    3884:	90017726 	beq	r18,zero,3e64 <_dtoa_r+0x6dc>
    3888:	00800074 	movhi	r2,1
    388c:	108ff704 	addi	r2,r2,16348
    3890:	d9002517 	ldw	r4,148(sp)
    3894:	203fec26 	beq	r4,zero,3848 <__alt_data_end+0xf8003848>
    3898:	10c000c7 	ldb	r3,3(r2)
    389c:	1801781e 	bne	r3,zero,3e80 <_dtoa_r+0x6f8>
    38a0:	10c000c4 	addi	r3,r2,3
    38a4:	d9802517 	ldw	r6,148(sp)
    38a8:	30c00015 	stw	r3,0(r6)
    38ac:	003fe606 	br	3848 <__alt_data_end+0xf8003848>
    38b0:	04e00034 	movhi	r19,32768
    38b4:	9cffffc4 	addi	r19,r19,-1
    38b8:	00800044 	movi	r2,1
    38bc:	8ce6703a 	and	r19,r17,r19
    38c0:	80800015 	stw	r2,0(r16)
    38c4:	9823883a 	mov	r17,r19
    38c8:	003fcc06 	br	37fc <__alt_data_end+0xf80037fc>
    38cc:	d8800204 	addi	r2,sp,8
    38d0:	d8800015 	stw	r2,0(sp)
    38d4:	d9c00104 	addi	r7,sp,4
    38d8:	900b883a 	mov	r5,r18
    38dc:	980d883a 	mov	r6,r19
    38e0:	e009883a 	mov	r4,fp
    38e4:	8820d53a 	srli	r16,r17,20
    38e8:	00072ac0 	call	72ac <__d2b>
    38ec:	d8800915 	stw	r2,36(sp)
    38f0:	8001651e 	bne	r16,zero,3e88 <_dtoa_r+0x700>
    38f4:	dd800217 	ldw	r22,8(sp)
    38f8:	dc000117 	ldw	r16,4(sp)
    38fc:	00800804 	movi	r2,32
    3900:	b421883a 	add	r16,r22,r16
    3904:	80c10c84 	addi	r3,r16,1074
    3908:	10c2d10e 	bge	r2,r3,4450 <_dtoa_r+0xcc8>
    390c:	00801004 	movi	r2,64
    3910:	81010484 	addi	r4,r16,1042
    3914:	10c7c83a 	sub	r3,r2,r3
    3918:	9108d83a 	srl	r4,r18,r4
    391c:	88e2983a 	sll	r17,r17,r3
    3920:	2448b03a 	or	r4,r4,r17
    3924:	000cf400 	call	cf40 <__floatunsidf>
    3928:	017f8434 	movhi	r5,65040
    392c:	01800044 	movi	r6,1
    3930:	1009883a 	mov	r4,r2
    3934:	194b883a 	add	r5,r3,r5
    3938:	843fffc4 	addi	r16,r16,-1
    393c:	d9801115 	stw	r6,68(sp)
    3940:	000d883a 	mov	r6,zero
    3944:	01cffe34 	movhi	r7,16376
    3948:	000c4e80 	call	c4e8 <__subdf3>
    394c:	0198dbf4 	movhi	r6,25455
    3950:	01cff4f4 	movhi	r7,16339
    3954:	3190d844 	addi	r6,r6,17249
    3958:	39e1e9c4 	addi	r7,r7,-30809
    395c:	1009883a 	mov	r4,r2
    3960:	180b883a 	mov	r5,r3
    3964:	000bdd00 	call	bdd0 <__muldf3>
    3968:	01a2d874 	movhi	r6,35681
    396c:	01cff1f4 	movhi	r7,16327
    3970:	31b22cc4 	addi	r6,r6,-14157
    3974:	39e28a04 	addi	r7,r7,-30168
    3978:	180b883a 	mov	r5,r3
    397c:	1009883a 	mov	r4,r2
    3980:	000a9e40 	call	a9e4 <__adddf3>
    3984:	8009883a 	mov	r4,r16
    3988:	1029883a 	mov	r20,r2
    398c:	1823883a 	mov	r17,r3
    3990:	000ce640 	call	ce64 <__floatsidf>
    3994:	019427f4 	movhi	r6,20639
    3998:	01cff4f4 	movhi	r7,16339
    399c:	319e7ec4 	addi	r6,r6,31227
    39a0:	39d104c4 	addi	r7,r7,17427
    39a4:	1009883a 	mov	r4,r2
    39a8:	180b883a 	mov	r5,r3
    39ac:	000bdd00 	call	bdd0 <__muldf3>
    39b0:	100d883a 	mov	r6,r2
    39b4:	180f883a 	mov	r7,r3
    39b8:	a009883a 	mov	r4,r20
    39bc:	880b883a 	mov	r5,r17
    39c0:	000a9e40 	call	a9e4 <__adddf3>
    39c4:	1009883a 	mov	r4,r2
    39c8:	180b883a 	mov	r5,r3
    39cc:	1029883a 	mov	r20,r2
    39d0:	1823883a 	mov	r17,r3
    39d4:	000cde40 	call	cde4 <__fixdfsi>
    39d8:	000d883a 	mov	r6,zero
    39dc:	000f883a 	mov	r7,zero
    39e0:	a009883a 	mov	r4,r20
    39e4:	880b883a 	mov	r5,r17
    39e8:	d8800515 	stw	r2,20(sp)
    39ec:	000bcdc0 	call	bcdc <__ledf2>
    39f0:	10028716 	blt	r2,zero,4410 <_dtoa_r+0xc88>
    39f4:	d8c00517 	ldw	r3,20(sp)
    39f8:	00800584 	movi	r2,22
    39fc:	10c27536 	bltu	r2,r3,43d4 <_dtoa_r+0xc4c>
    3a00:	180490fa 	slli	r2,r3,3
    3a04:	00c00074 	movhi	r3,1
    3a08:	18d01304 	addi	r3,r3,16460
    3a0c:	1885883a 	add	r2,r3,r2
    3a10:	11000017 	ldw	r4,0(r2)
    3a14:	11400117 	ldw	r5,4(r2)
    3a18:	900d883a 	mov	r6,r18
    3a1c:	980f883a 	mov	r7,r19
    3a20:	000bc000 	call	bc00 <__gedf2>
    3a24:	00828d0e 	bge	zero,r2,445c <_dtoa_r+0xcd4>
    3a28:	d9000517 	ldw	r4,20(sp)
    3a2c:	d8000e15 	stw	zero,56(sp)
    3a30:	213fffc4 	addi	r4,r4,-1
    3a34:	d9000515 	stw	r4,20(sp)
    3a38:	b42dc83a 	sub	r22,r22,r16
    3a3c:	b5bfffc4 	addi	r22,r22,-1
    3a40:	b0026f16 	blt	r22,zero,4400 <_dtoa_r+0xc78>
    3a44:	d8000815 	stw	zero,32(sp)
    3a48:	d9c00517 	ldw	r7,20(sp)
    3a4c:	38026416 	blt	r7,zero,43e0 <_dtoa_r+0xc58>
    3a50:	b1ed883a 	add	r22,r22,r7
    3a54:	d9c00d15 	stw	r7,52(sp)
    3a58:	d8000a15 	stw	zero,40(sp)
    3a5c:	d9800317 	ldw	r6,12(sp)
    3a60:	00800244 	movi	r2,9
    3a64:	11811436 	bltu	r2,r6,3eb8 <_dtoa_r+0x730>
    3a68:	00800144 	movi	r2,5
    3a6c:	1184e10e 	bge	r2,r6,4df4 <_dtoa_r+0x166c>
    3a70:	31bfff04 	addi	r6,r6,-4
    3a74:	d9800315 	stw	r6,12(sp)
    3a78:	0023883a 	mov	r17,zero
    3a7c:	d9800317 	ldw	r6,12(sp)
    3a80:	008000c4 	movi	r2,3
    3a84:	30836726 	beq	r6,r2,4824 <_dtoa_r+0x109c>
    3a88:	1183410e 	bge	r2,r6,4790 <_dtoa_r+0x1008>
    3a8c:	d9c00317 	ldw	r7,12(sp)
    3a90:	00800104 	movi	r2,4
    3a94:	38827c26 	beq	r7,r2,4488 <_dtoa_r+0xd00>
    3a98:	00800144 	movi	r2,5
    3a9c:	3884c41e 	bne	r7,r2,4db0 <_dtoa_r+0x1628>
    3aa0:	00800044 	movi	r2,1
    3aa4:	d8800b15 	stw	r2,44(sp)
    3aa8:	d8c00517 	ldw	r3,20(sp)
    3aac:	d9002217 	ldw	r4,136(sp)
    3ab0:	1907883a 	add	r3,r3,r4
    3ab4:	19800044 	addi	r6,r3,1
    3ab8:	d8c00c15 	stw	r3,48(sp)
    3abc:	d9800615 	stw	r6,24(sp)
    3ac0:	0183a40e 	bge	zero,r6,4954 <_dtoa_r+0x11cc>
    3ac4:	d9800617 	ldw	r6,24(sp)
    3ac8:	3021883a 	mov	r16,r6
    3acc:	e0001115 	stw	zero,68(fp)
    3ad0:	008005c4 	movi	r2,23
    3ad4:	1184c92e 	bgeu	r2,r6,4dfc <_dtoa_r+0x1674>
    3ad8:	00c00044 	movi	r3,1
    3adc:	00800104 	movi	r2,4
    3ae0:	1085883a 	add	r2,r2,r2
    3ae4:	11000504 	addi	r4,r2,20
    3ae8:	180b883a 	mov	r5,r3
    3aec:	18c00044 	addi	r3,r3,1
    3af0:	313ffb2e 	bgeu	r6,r4,3ae0 <__alt_data_end+0xf8003ae0>
    3af4:	e1401115 	stw	r5,68(fp)
    3af8:	e009883a 	mov	r4,fp
    3afc:	00066180 	call	6618 <_Balloc>
    3b00:	d8800715 	stw	r2,28(sp)
    3b04:	e0801015 	stw	r2,64(fp)
    3b08:	00800384 	movi	r2,14
    3b0c:	1400f736 	bltu	r2,r16,3eec <_dtoa_r+0x764>
    3b10:	8800f626 	beq	r17,zero,3eec <_dtoa_r+0x764>
    3b14:	d9c00517 	ldw	r7,20(sp)
    3b18:	01c39a0e 	bge	zero,r7,4984 <_dtoa_r+0x11fc>
    3b1c:	388003cc 	andi	r2,r7,15
    3b20:	100490fa 	slli	r2,r2,3
    3b24:	382bd13a 	srai	r21,r7,4
    3b28:	00c00074 	movhi	r3,1
    3b2c:	18d01304 	addi	r3,r3,16460
    3b30:	1885883a 	add	r2,r3,r2
    3b34:	a8c0040c 	andi	r3,r21,16
    3b38:	12400017 	ldw	r9,0(r2)
    3b3c:	12000117 	ldw	r8,4(r2)
    3b40:	18037926 	beq	r3,zero,4928 <_dtoa_r+0x11a0>
    3b44:	00800074 	movhi	r2,1
    3b48:	10900904 	addi	r2,r2,16420
    3b4c:	11800817 	ldw	r6,32(r2)
    3b50:	11c00917 	ldw	r7,36(r2)
    3b54:	9009883a 	mov	r4,r18
    3b58:	980b883a 	mov	r5,r19
    3b5c:	da001715 	stw	r8,92(sp)
    3b60:	da401615 	stw	r9,88(sp)
    3b64:	000b2900 	call	b290 <__divdf3>
    3b68:	da001717 	ldw	r8,92(sp)
    3b6c:	da401617 	ldw	r9,88(sp)
    3b70:	ad4003cc 	andi	r21,r21,15
    3b74:	040000c4 	movi	r16,3
    3b78:	1023883a 	mov	r17,r2
    3b7c:	1829883a 	mov	r20,r3
    3b80:	a8001126 	beq	r21,zero,3bc8 <_dtoa_r+0x440>
    3b84:	05c00074 	movhi	r23,1
    3b88:	bdd00904 	addi	r23,r23,16420
    3b8c:	4805883a 	mov	r2,r9
    3b90:	4007883a 	mov	r3,r8
    3b94:	a980004c 	andi	r6,r21,1
    3b98:	1009883a 	mov	r4,r2
    3b9c:	a82bd07a 	srai	r21,r21,1
    3ba0:	180b883a 	mov	r5,r3
    3ba4:	30000426 	beq	r6,zero,3bb8 <_dtoa_r+0x430>
    3ba8:	b9800017 	ldw	r6,0(r23)
    3bac:	b9c00117 	ldw	r7,4(r23)
    3bb0:	84000044 	addi	r16,r16,1
    3bb4:	000bdd00 	call	bdd0 <__muldf3>
    3bb8:	bdc00204 	addi	r23,r23,8
    3bbc:	a83ff51e 	bne	r21,zero,3b94 <__alt_data_end+0xf8003b94>
    3bc0:	1013883a 	mov	r9,r2
    3bc4:	1811883a 	mov	r8,r3
    3bc8:	480d883a 	mov	r6,r9
    3bcc:	400f883a 	mov	r7,r8
    3bd0:	8809883a 	mov	r4,r17
    3bd4:	a00b883a 	mov	r5,r20
    3bd8:	000b2900 	call	b290 <__divdf3>
    3bdc:	d8800f15 	stw	r2,60(sp)
    3be0:	d8c01015 	stw	r3,64(sp)
    3be4:	d8c00e17 	ldw	r3,56(sp)
    3be8:	18000626 	beq	r3,zero,3c04 <_dtoa_r+0x47c>
    3bec:	d9000f17 	ldw	r4,60(sp)
    3bf0:	d9401017 	ldw	r5,64(sp)
    3bf4:	000d883a 	mov	r6,zero
    3bf8:	01cffc34 	movhi	r7,16368
    3bfc:	000bcdc0 	call	bcdc <__ledf2>
    3c00:	10040b16 	blt	r2,zero,4c30 <_dtoa_r+0x14a8>
    3c04:	8009883a 	mov	r4,r16
    3c08:	000ce640 	call	ce64 <__floatsidf>
    3c0c:	d9800f17 	ldw	r6,60(sp)
    3c10:	d9c01017 	ldw	r7,64(sp)
    3c14:	1009883a 	mov	r4,r2
    3c18:	180b883a 	mov	r5,r3
    3c1c:	000bdd00 	call	bdd0 <__muldf3>
    3c20:	000d883a 	mov	r6,zero
    3c24:	01d00734 	movhi	r7,16412
    3c28:	1009883a 	mov	r4,r2
    3c2c:	180b883a 	mov	r5,r3
    3c30:	000a9e40 	call	a9e4 <__adddf3>
    3c34:	1021883a 	mov	r16,r2
    3c38:	d8800617 	ldw	r2,24(sp)
    3c3c:	047f3034 	movhi	r17,64704
    3c40:	1c63883a 	add	r17,r3,r17
    3c44:	10031826 	beq	r2,zero,48a8 <_dtoa_r+0x1120>
    3c48:	d8c00517 	ldw	r3,20(sp)
    3c4c:	db000617 	ldw	r12,24(sp)
    3c50:	d8c01315 	stw	r3,76(sp)
    3c54:	d9000b17 	ldw	r4,44(sp)
    3c58:	20038f26 	beq	r4,zero,4a98 <_dtoa_r+0x1310>
    3c5c:	60bfffc4 	addi	r2,r12,-1
    3c60:	100490fa 	slli	r2,r2,3
    3c64:	00c00074 	movhi	r3,1
    3c68:	18d01304 	addi	r3,r3,16460
    3c6c:	1885883a 	add	r2,r3,r2
    3c70:	11800017 	ldw	r6,0(r2)
    3c74:	11c00117 	ldw	r7,4(r2)
    3c78:	d8800717 	ldw	r2,28(sp)
    3c7c:	0009883a 	mov	r4,zero
    3c80:	014ff834 	movhi	r5,16352
    3c84:	db001615 	stw	r12,88(sp)
    3c88:	15c00044 	addi	r23,r2,1
    3c8c:	000b2900 	call	b290 <__divdf3>
    3c90:	800d883a 	mov	r6,r16
    3c94:	880f883a 	mov	r7,r17
    3c98:	1009883a 	mov	r4,r2
    3c9c:	180b883a 	mov	r5,r3
    3ca0:	000c4e80 	call	c4e8 <__subdf3>
    3ca4:	d9401017 	ldw	r5,64(sp)
    3ca8:	d9000f17 	ldw	r4,60(sp)
    3cac:	102b883a 	mov	r21,r2
    3cb0:	d8c01215 	stw	r3,72(sp)
    3cb4:	000cde40 	call	cde4 <__fixdfsi>
    3cb8:	1009883a 	mov	r4,r2
    3cbc:	1029883a 	mov	r20,r2
    3cc0:	000ce640 	call	ce64 <__floatsidf>
    3cc4:	d9000f17 	ldw	r4,60(sp)
    3cc8:	d9401017 	ldw	r5,64(sp)
    3ccc:	100d883a 	mov	r6,r2
    3cd0:	180f883a 	mov	r7,r3
    3cd4:	000c4e80 	call	c4e8 <__subdf3>
    3cd8:	1823883a 	mov	r17,r3
    3cdc:	d8c00717 	ldw	r3,28(sp)
    3ce0:	d9401217 	ldw	r5,72(sp)
    3ce4:	a2000c04 	addi	r8,r20,48
    3ce8:	1021883a 	mov	r16,r2
    3cec:	1a000005 	stb	r8,0(r3)
    3cf0:	800d883a 	mov	r6,r16
    3cf4:	880f883a 	mov	r7,r17
    3cf8:	a809883a 	mov	r4,r21
    3cfc:	4029883a 	mov	r20,r8
    3d00:	000bc000 	call	bc00 <__gedf2>
    3d04:	00841d16 	blt	zero,r2,4d7c <_dtoa_r+0x15f4>
    3d08:	800d883a 	mov	r6,r16
    3d0c:	880f883a 	mov	r7,r17
    3d10:	0009883a 	mov	r4,zero
    3d14:	014ffc34 	movhi	r5,16368
    3d18:	000c4e80 	call	c4e8 <__subdf3>
    3d1c:	d9401217 	ldw	r5,72(sp)
    3d20:	100d883a 	mov	r6,r2
    3d24:	180f883a 	mov	r7,r3
    3d28:	a809883a 	mov	r4,r21
    3d2c:	000bc000 	call	bc00 <__gedf2>
    3d30:	db001617 	ldw	r12,88(sp)
    3d34:	00840e16 	blt	zero,r2,4d70 <_dtoa_r+0x15e8>
    3d38:	00800044 	movi	r2,1
    3d3c:	13006b0e 	bge	r2,r12,3eec <_dtoa_r+0x764>
    3d40:	d9000717 	ldw	r4,28(sp)
    3d44:	dd800f15 	stw	r22,60(sp)
    3d48:	dcc01015 	stw	r19,64(sp)
    3d4c:	2319883a 	add	r12,r4,r12
    3d50:	dcc01217 	ldw	r19,72(sp)
    3d54:	602d883a 	mov	r22,r12
    3d58:	dc801215 	stw	r18,72(sp)
    3d5c:	b825883a 	mov	r18,r23
    3d60:	00000906 	br	3d88 <_dtoa_r+0x600>
    3d64:	000c4e80 	call	c4e8 <__subdf3>
    3d68:	a80d883a 	mov	r6,r21
    3d6c:	980f883a 	mov	r7,r19
    3d70:	1009883a 	mov	r4,r2
    3d74:	180b883a 	mov	r5,r3
    3d78:	000bcdc0 	call	bcdc <__ledf2>
    3d7c:	1003e816 	blt	r2,zero,4d20 <_dtoa_r+0x1598>
    3d80:	b825883a 	mov	r18,r23
    3d84:	bd83e926 	beq	r23,r22,4d2c <_dtoa_r+0x15a4>
    3d88:	a809883a 	mov	r4,r21
    3d8c:	980b883a 	mov	r5,r19
    3d90:	000d883a 	mov	r6,zero
    3d94:	01d00934 	movhi	r7,16420
    3d98:	000bdd00 	call	bdd0 <__muldf3>
    3d9c:	000d883a 	mov	r6,zero
    3da0:	01d00934 	movhi	r7,16420
    3da4:	8009883a 	mov	r4,r16
    3da8:	880b883a 	mov	r5,r17
    3dac:	102b883a 	mov	r21,r2
    3db0:	1827883a 	mov	r19,r3
    3db4:	000bdd00 	call	bdd0 <__muldf3>
    3db8:	180b883a 	mov	r5,r3
    3dbc:	1009883a 	mov	r4,r2
    3dc0:	1821883a 	mov	r16,r3
    3dc4:	1023883a 	mov	r17,r2
    3dc8:	000cde40 	call	cde4 <__fixdfsi>
    3dcc:	1009883a 	mov	r4,r2
    3dd0:	1029883a 	mov	r20,r2
    3dd4:	000ce640 	call	ce64 <__floatsidf>
    3dd8:	8809883a 	mov	r4,r17
    3ddc:	800b883a 	mov	r5,r16
    3de0:	100d883a 	mov	r6,r2
    3de4:	180f883a 	mov	r7,r3
    3de8:	000c4e80 	call	c4e8 <__subdf3>
    3dec:	a5000c04 	addi	r20,r20,48
    3df0:	a80d883a 	mov	r6,r21
    3df4:	980f883a 	mov	r7,r19
    3df8:	1009883a 	mov	r4,r2
    3dfc:	180b883a 	mov	r5,r3
    3e00:	95000005 	stb	r20,0(r18)
    3e04:	1021883a 	mov	r16,r2
    3e08:	1823883a 	mov	r17,r3
    3e0c:	000bcdc0 	call	bcdc <__ledf2>
    3e10:	bdc00044 	addi	r23,r23,1
    3e14:	800d883a 	mov	r6,r16
    3e18:	880f883a 	mov	r7,r17
    3e1c:	0009883a 	mov	r4,zero
    3e20:	014ffc34 	movhi	r5,16368
    3e24:	103fcf0e 	bge	r2,zero,3d64 <__alt_data_end+0xf8003d64>
    3e28:	d8c01317 	ldw	r3,76(sp)
    3e2c:	d8c00515 	stw	r3,20(sp)
    3e30:	d9400917 	ldw	r5,36(sp)
    3e34:	e009883a 	mov	r4,fp
    3e38:	00066c00 	call	66c0 <_Bfree>
    3e3c:	d9000517 	ldw	r4,20(sp)
    3e40:	d9802317 	ldw	r6,140(sp)
    3e44:	d9c02517 	ldw	r7,148(sp)
    3e48:	b8000005 	stb	zero,0(r23)
    3e4c:	20800044 	addi	r2,r4,1
    3e50:	30800015 	stw	r2,0(r6)
    3e54:	3802aa26 	beq	r7,zero,4900 <_dtoa_r+0x1178>
    3e58:	3dc00015 	stw	r23,0(r7)
    3e5c:	d8800717 	ldw	r2,28(sp)
    3e60:	003e7906 	br	3848 <__alt_data_end+0xf8003848>
    3e64:	00800434 	movhi	r2,16
    3e68:	10bfffc4 	addi	r2,r2,-1
    3e6c:	88a2703a 	and	r17,r17,r2
    3e70:	883e851e 	bne	r17,zero,3888 <__alt_data_end+0xf8003888>
    3e74:	00800074 	movhi	r2,1
    3e78:	108ff404 	addi	r2,r2,16336
    3e7c:	003e8406 	br	3890 <__alt_data_end+0xf8003890>
    3e80:	10c00204 	addi	r3,r2,8
    3e84:	003e8706 	br	38a4 <__alt_data_end+0xf80038a4>
    3e88:	01400434 	movhi	r5,16
    3e8c:	297fffc4 	addi	r5,r5,-1
    3e90:	994a703a 	and	r5,r19,r5
    3e94:	9009883a 	mov	r4,r18
    3e98:	843f0044 	addi	r16,r16,-1023
    3e9c:	294ffc34 	orhi	r5,r5,16368
    3ea0:	dd800217 	ldw	r22,8(sp)
    3ea4:	d8001115 	stw	zero,68(sp)
    3ea8:	003ea506 	br	3940 <__alt_data_end+0xf8003940>
    3eac:	00800074 	movhi	r2,1
    3eb0:	108feb04 	addi	r2,r2,16300
    3eb4:	003e6406 	br	3848 <__alt_data_end+0xf8003848>
    3eb8:	e0001115 	stw	zero,68(fp)
    3ebc:	000b883a 	mov	r5,zero
    3ec0:	e009883a 	mov	r4,fp
    3ec4:	00066180 	call	6618 <_Balloc>
    3ec8:	01bfffc4 	movi	r6,-1
    3ecc:	01c00044 	movi	r7,1
    3ed0:	d8800715 	stw	r2,28(sp)
    3ed4:	d9800c15 	stw	r6,48(sp)
    3ed8:	e0801015 	stw	r2,64(fp)
    3edc:	d8000315 	stw	zero,12(sp)
    3ee0:	d9c00b15 	stw	r7,44(sp)
    3ee4:	d9800615 	stw	r6,24(sp)
    3ee8:	d8002215 	stw	zero,136(sp)
    3eec:	d8800117 	ldw	r2,4(sp)
    3ef0:	10008916 	blt	r2,zero,4118 <_dtoa_r+0x990>
    3ef4:	d9000517 	ldw	r4,20(sp)
    3ef8:	00c00384 	movi	r3,14
    3efc:	19008616 	blt	r3,r4,4118 <_dtoa_r+0x990>
    3f00:	200490fa 	slli	r2,r4,3
    3f04:	00c00074 	movhi	r3,1
    3f08:	d9802217 	ldw	r6,136(sp)
    3f0c:	18d01304 	addi	r3,r3,16460
    3f10:	1885883a 	add	r2,r3,r2
    3f14:	14000017 	ldw	r16,0(r2)
    3f18:	14400117 	ldw	r17,4(r2)
    3f1c:	30016316 	blt	r6,zero,44ac <_dtoa_r+0xd24>
    3f20:	800d883a 	mov	r6,r16
    3f24:	880f883a 	mov	r7,r17
    3f28:	9009883a 	mov	r4,r18
    3f2c:	980b883a 	mov	r5,r19
    3f30:	000b2900 	call	b290 <__divdf3>
    3f34:	180b883a 	mov	r5,r3
    3f38:	1009883a 	mov	r4,r2
    3f3c:	000cde40 	call	cde4 <__fixdfsi>
    3f40:	1009883a 	mov	r4,r2
    3f44:	102b883a 	mov	r21,r2
    3f48:	000ce640 	call	ce64 <__floatsidf>
    3f4c:	800d883a 	mov	r6,r16
    3f50:	880f883a 	mov	r7,r17
    3f54:	1009883a 	mov	r4,r2
    3f58:	180b883a 	mov	r5,r3
    3f5c:	000bdd00 	call	bdd0 <__muldf3>
    3f60:	100d883a 	mov	r6,r2
    3f64:	180f883a 	mov	r7,r3
    3f68:	9009883a 	mov	r4,r18
    3f6c:	980b883a 	mov	r5,r19
    3f70:	000c4e80 	call	c4e8 <__subdf3>
    3f74:	d9c00717 	ldw	r7,28(sp)
    3f78:	1009883a 	mov	r4,r2
    3f7c:	a8800c04 	addi	r2,r21,48
    3f80:	38800005 	stb	r2,0(r7)
    3f84:	3dc00044 	addi	r23,r7,1
    3f88:	d9c00617 	ldw	r7,24(sp)
    3f8c:	01800044 	movi	r6,1
    3f90:	180b883a 	mov	r5,r3
    3f94:	2005883a 	mov	r2,r4
    3f98:	39803826 	beq	r7,r6,407c <_dtoa_r+0x8f4>
    3f9c:	000d883a 	mov	r6,zero
    3fa0:	01d00934 	movhi	r7,16420
    3fa4:	000bdd00 	call	bdd0 <__muldf3>
    3fa8:	000d883a 	mov	r6,zero
    3fac:	000f883a 	mov	r7,zero
    3fb0:	1009883a 	mov	r4,r2
    3fb4:	180b883a 	mov	r5,r3
    3fb8:	1025883a 	mov	r18,r2
    3fbc:	1827883a 	mov	r19,r3
    3fc0:	000bb780 	call	bb78 <__eqdf2>
    3fc4:	103f9a26 	beq	r2,zero,3e30 <__alt_data_end+0xf8003e30>
    3fc8:	d9c00617 	ldw	r7,24(sp)
    3fcc:	d8c00717 	ldw	r3,28(sp)
    3fd0:	b829883a 	mov	r20,r23
    3fd4:	38bfffc4 	addi	r2,r7,-1
    3fd8:	18ad883a 	add	r22,r3,r2
    3fdc:	00000a06 	br	4008 <_dtoa_r+0x880>
    3fe0:	000bdd00 	call	bdd0 <__muldf3>
    3fe4:	000d883a 	mov	r6,zero
    3fe8:	000f883a 	mov	r7,zero
    3fec:	1009883a 	mov	r4,r2
    3ff0:	180b883a 	mov	r5,r3
    3ff4:	1025883a 	mov	r18,r2
    3ff8:	1827883a 	mov	r19,r3
    3ffc:	b829883a 	mov	r20,r23
    4000:	000bb780 	call	bb78 <__eqdf2>
    4004:	103f8a26 	beq	r2,zero,3e30 <__alt_data_end+0xf8003e30>
    4008:	800d883a 	mov	r6,r16
    400c:	880f883a 	mov	r7,r17
    4010:	9009883a 	mov	r4,r18
    4014:	980b883a 	mov	r5,r19
    4018:	000b2900 	call	b290 <__divdf3>
    401c:	180b883a 	mov	r5,r3
    4020:	1009883a 	mov	r4,r2
    4024:	000cde40 	call	cde4 <__fixdfsi>
    4028:	1009883a 	mov	r4,r2
    402c:	102b883a 	mov	r21,r2
    4030:	000ce640 	call	ce64 <__floatsidf>
    4034:	800d883a 	mov	r6,r16
    4038:	880f883a 	mov	r7,r17
    403c:	1009883a 	mov	r4,r2
    4040:	180b883a 	mov	r5,r3
    4044:	000bdd00 	call	bdd0 <__muldf3>
    4048:	100d883a 	mov	r6,r2
    404c:	180f883a 	mov	r7,r3
    4050:	9009883a 	mov	r4,r18
    4054:	980b883a 	mov	r5,r19
    4058:	000c4e80 	call	c4e8 <__subdf3>
    405c:	aa000c04 	addi	r8,r21,48
    4060:	a2000005 	stb	r8,0(r20)
    4064:	000d883a 	mov	r6,zero
    4068:	01d00934 	movhi	r7,16420
    406c:	1009883a 	mov	r4,r2
    4070:	180b883a 	mov	r5,r3
    4074:	a5c00044 	addi	r23,r20,1
    4078:	b53fd91e 	bne	r22,r20,3fe0 <__alt_data_end+0xf8003fe0>
    407c:	100d883a 	mov	r6,r2
    4080:	180f883a 	mov	r7,r3
    4084:	1009883a 	mov	r4,r2
    4088:	180b883a 	mov	r5,r3
    408c:	000a9e40 	call	a9e4 <__adddf3>
    4090:	100d883a 	mov	r6,r2
    4094:	180f883a 	mov	r7,r3
    4098:	8009883a 	mov	r4,r16
    409c:	880b883a 	mov	r5,r17
    40a0:	1027883a 	mov	r19,r2
    40a4:	1825883a 	mov	r18,r3
    40a8:	000bcdc0 	call	bcdc <__ledf2>
    40ac:	10000816 	blt	r2,zero,40d0 <_dtoa_r+0x948>
    40b0:	980d883a 	mov	r6,r19
    40b4:	900f883a 	mov	r7,r18
    40b8:	8009883a 	mov	r4,r16
    40bc:	880b883a 	mov	r5,r17
    40c0:	000bb780 	call	bb78 <__eqdf2>
    40c4:	103f5a1e 	bne	r2,zero,3e30 <__alt_data_end+0xf8003e30>
    40c8:	ad40004c 	andi	r21,r21,1
    40cc:	a83f5826 	beq	r21,zero,3e30 <__alt_data_end+0xf8003e30>
    40d0:	bd3fffc3 	ldbu	r20,-1(r23)
    40d4:	b8bfffc4 	addi	r2,r23,-1
    40d8:	1007883a 	mov	r3,r2
    40dc:	01400e44 	movi	r5,57
    40e0:	d9800717 	ldw	r6,28(sp)
    40e4:	00000506 	br	40fc <_dtoa_r+0x974>
    40e8:	18ffffc4 	addi	r3,r3,-1
    40ec:	11824726 	beq	r2,r6,4a0c <_dtoa_r+0x1284>
    40f0:	1d000003 	ldbu	r20,0(r3)
    40f4:	102f883a 	mov	r23,r2
    40f8:	10bfffc4 	addi	r2,r2,-1
    40fc:	a1003fcc 	andi	r4,r20,255
    4100:	2100201c 	xori	r4,r4,128
    4104:	213fe004 	addi	r4,r4,-128
    4108:	217ff726 	beq	r4,r5,40e8 <__alt_data_end+0xf80040e8>
    410c:	a2000044 	addi	r8,r20,1
    4110:	12000005 	stb	r8,0(r2)
    4114:	003f4606 	br	3e30 <__alt_data_end+0xf8003e30>
    4118:	d9000b17 	ldw	r4,44(sp)
    411c:	2000c826 	beq	r4,zero,4440 <_dtoa_r+0xcb8>
    4120:	d9800317 	ldw	r6,12(sp)
    4124:	00c00044 	movi	r3,1
    4128:	1980f90e 	bge	r3,r6,4510 <_dtoa_r+0xd88>
    412c:	d8800617 	ldw	r2,24(sp)
    4130:	d8c00a17 	ldw	r3,40(sp)
    4134:	157fffc4 	addi	r21,r2,-1
    4138:	1d41f316 	blt	r3,r21,4908 <_dtoa_r+0x1180>
    413c:	1d6bc83a 	sub	r21,r3,r21
    4140:	d9c00617 	ldw	r7,24(sp)
    4144:	3802aa16 	blt	r7,zero,4bf0 <_dtoa_r+0x1468>
    4148:	dd000817 	ldw	r20,32(sp)
    414c:	d8800617 	ldw	r2,24(sp)
    4150:	d8c00817 	ldw	r3,32(sp)
    4154:	01400044 	movi	r5,1
    4158:	e009883a 	mov	r4,fp
    415c:	1887883a 	add	r3,r3,r2
    4160:	d8c00815 	stw	r3,32(sp)
    4164:	b0ad883a 	add	r22,r22,r2
    4168:	0006a240 	call	6a24 <__i2b>
    416c:	1023883a 	mov	r17,r2
    4170:	a0000826 	beq	r20,zero,4194 <_dtoa_r+0xa0c>
    4174:	0580070e 	bge	zero,r22,4194 <_dtoa_r+0xa0c>
    4178:	a005883a 	mov	r2,r20
    417c:	b500b916 	blt	r22,r20,4464 <_dtoa_r+0xcdc>
    4180:	d9000817 	ldw	r4,32(sp)
    4184:	a0a9c83a 	sub	r20,r20,r2
    4188:	b0adc83a 	sub	r22,r22,r2
    418c:	2089c83a 	sub	r4,r4,r2
    4190:	d9000815 	stw	r4,32(sp)
    4194:	d9800a17 	ldw	r6,40(sp)
    4198:	0181810e 	bge	zero,r6,47a0 <_dtoa_r+0x1018>
    419c:	d9c00b17 	ldw	r7,44(sp)
    41a0:	3800b326 	beq	r7,zero,4470 <_dtoa_r+0xce8>
    41a4:	a800b226 	beq	r21,zero,4470 <_dtoa_r+0xce8>
    41a8:	880b883a 	mov	r5,r17
    41ac:	a80d883a 	mov	r6,r21
    41b0:	e009883a 	mov	r4,fp
    41b4:	0006c580 	call	6c58 <__pow5mult>
    41b8:	d9800917 	ldw	r6,36(sp)
    41bc:	100b883a 	mov	r5,r2
    41c0:	e009883a 	mov	r4,fp
    41c4:	1023883a 	mov	r17,r2
    41c8:	0006a600 	call	6a60 <__multiply>
    41cc:	1021883a 	mov	r16,r2
    41d0:	d8800a17 	ldw	r2,40(sp)
    41d4:	d9400917 	ldw	r5,36(sp)
    41d8:	e009883a 	mov	r4,fp
    41dc:	1545c83a 	sub	r2,r2,r21
    41e0:	d8800a15 	stw	r2,40(sp)
    41e4:	00066c00 	call	66c0 <_Bfree>
    41e8:	d8c00a17 	ldw	r3,40(sp)
    41ec:	18009f1e 	bne	r3,zero,446c <_dtoa_r+0xce4>
    41f0:	05c00044 	movi	r23,1
    41f4:	e009883a 	mov	r4,fp
    41f8:	b80b883a 	mov	r5,r23
    41fc:	0006a240 	call	6a24 <__i2b>
    4200:	d9000d17 	ldw	r4,52(sp)
    4204:	102b883a 	mov	r21,r2
    4208:	2000ce26 	beq	r4,zero,4544 <_dtoa_r+0xdbc>
    420c:	200d883a 	mov	r6,r4
    4210:	100b883a 	mov	r5,r2
    4214:	e009883a 	mov	r4,fp
    4218:	0006c580 	call	6c58 <__pow5mult>
    421c:	d9800317 	ldw	r6,12(sp)
    4220:	102b883a 	mov	r21,r2
    4224:	b981810e 	bge	r23,r6,482c <_dtoa_r+0x10a4>
    4228:	0027883a 	mov	r19,zero
    422c:	a8800417 	ldw	r2,16(r21)
    4230:	05c00804 	movi	r23,32
    4234:	10800104 	addi	r2,r2,4
    4238:	1085883a 	add	r2,r2,r2
    423c:	1085883a 	add	r2,r2,r2
    4240:	a885883a 	add	r2,r21,r2
    4244:	11000017 	ldw	r4,0(r2)
    4248:	000690c0 	call	690c <__hi0bits>
    424c:	b885c83a 	sub	r2,r23,r2
    4250:	1585883a 	add	r2,r2,r22
    4254:	108007cc 	andi	r2,r2,31
    4258:	1000b326 	beq	r2,zero,4528 <_dtoa_r+0xda0>
    425c:	00c00804 	movi	r3,32
    4260:	1887c83a 	sub	r3,r3,r2
    4264:	01000104 	movi	r4,4
    4268:	20c2cd0e 	bge	r4,r3,4da0 <_dtoa_r+0x1618>
    426c:	00c00704 	movi	r3,28
    4270:	1885c83a 	sub	r2,r3,r2
    4274:	d8c00817 	ldw	r3,32(sp)
    4278:	a0a9883a 	add	r20,r20,r2
    427c:	b0ad883a 	add	r22,r22,r2
    4280:	1887883a 	add	r3,r3,r2
    4284:	d8c00815 	stw	r3,32(sp)
    4288:	d9800817 	ldw	r6,32(sp)
    428c:	0180040e 	bge	zero,r6,42a0 <_dtoa_r+0xb18>
    4290:	800b883a 	mov	r5,r16
    4294:	e009883a 	mov	r4,fp
    4298:	0006d980 	call	6d98 <__lshift>
    429c:	1021883a 	mov	r16,r2
    42a0:	0580050e 	bge	zero,r22,42b8 <_dtoa_r+0xb30>
    42a4:	a80b883a 	mov	r5,r21
    42a8:	b00d883a 	mov	r6,r22
    42ac:	e009883a 	mov	r4,fp
    42b0:	0006d980 	call	6d98 <__lshift>
    42b4:	102b883a 	mov	r21,r2
    42b8:	d9c00e17 	ldw	r7,56(sp)
    42bc:	3801211e 	bne	r7,zero,4744 <_dtoa_r+0xfbc>
    42c0:	d9800617 	ldw	r6,24(sp)
    42c4:	0181380e 	bge	zero,r6,47a8 <_dtoa_r+0x1020>
    42c8:	d8c00b17 	ldw	r3,44(sp)
    42cc:	1800ab1e 	bne	r3,zero,457c <_dtoa_r+0xdf4>
    42d0:	dc800717 	ldw	r18,28(sp)
    42d4:	dcc00617 	ldw	r19,24(sp)
    42d8:	9029883a 	mov	r20,r18
    42dc:	00000206 	br	42e8 <_dtoa_r+0xb60>
    42e0:	00066e80 	call	66e8 <__multadd>
    42e4:	1021883a 	mov	r16,r2
    42e8:	a80b883a 	mov	r5,r21
    42ec:	8009883a 	mov	r4,r16
    42f0:	00035880 	call	3588 <quorem>
    42f4:	10800c04 	addi	r2,r2,48
    42f8:	90800005 	stb	r2,0(r18)
    42fc:	94800044 	addi	r18,r18,1
    4300:	9507c83a 	sub	r3,r18,r20
    4304:	000f883a 	mov	r7,zero
    4308:	01800284 	movi	r6,10
    430c:	800b883a 	mov	r5,r16
    4310:	e009883a 	mov	r4,fp
    4314:	1cfff216 	blt	r3,r19,42e0 <__alt_data_end+0xf80042e0>
    4318:	1011883a 	mov	r8,r2
    431c:	d8800617 	ldw	r2,24(sp)
    4320:	0082370e 	bge	zero,r2,4c00 <_dtoa_r+0x1478>
    4324:	d9000717 	ldw	r4,28(sp)
    4328:	0025883a 	mov	r18,zero
    432c:	20af883a 	add	r23,r4,r2
    4330:	01800044 	movi	r6,1
    4334:	800b883a 	mov	r5,r16
    4338:	e009883a 	mov	r4,fp
    433c:	da001715 	stw	r8,92(sp)
    4340:	0006d980 	call	6d98 <__lshift>
    4344:	a80b883a 	mov	r5,r21
    4348:	1009883a 	mov	r4,r2
    434c:	d8800915 	stw	r2,36(sp)
    4350:	0006ee00 	call	6ee0 <__mcmp>
    4354:	da001717 	ldw	r8,92(sp)
    4358:	0081800e 	bge	zero,r2,495c <_dtoa_r+0x11d4>
    435c:	b93fffc3 	ldbu	r4,-1(r23)
    4360:	b8bfffc4 	addi	r2,r23,-1
    4364:	1007883a 	mov	r3,r2
    4368:	01800e44 	movi	r6,57
    436c:	d9c00717 	ldw	r7,28(sp)
    4370:	00000506 	br	4388 <_dtoa_r+0xc00>
    4374:	18ffffc4 	addi	r3,r3,-1
    4378:	11c12326 	beq	r2,r7,4808 <_dtoa_r+0x1080>
    437c:	19000003 	ldbu	r4,0(r3)
    4380:	102f883a 	mov	r23,r2
    4384:	10bfffc4 	addi	r2,r2,-1
    4388:	21403fcc 	andi	r5,r4,255
    438c:	2940201c 	xori	r5,r5,128
    4390:	297fe004 	addi	r5,r5,-128
    4394:	29bff726 	beq	r5,r6,4374 <__alt_data_end+0xf8004374>
    4398:	21000044 	addi	r4,r4,1
    439c:	11000005 	stb	r4,0(r2)
    43a0:	a80b883a 	mov	r5,r21
    43a4:	e009883a 	mov	r4,fp
    43a8:	00066c00 	call	66c0 <_Bfree>
    43ac:	883ea026 	beq	r17,zero,3e30 <__alt_data_end+0xf8003e30>
    43b0:	90000426 	beq	r18,zero,43c4 <_dtoa_r+0xc3c>
    43b4:	94400326 	beq	r18,r17,43c4 <_dtoa_r+0xc3c>
    43b8:	900b883a 	mov	r5,r18
    43bc:	e009883a 	mov	r4,fp
    43c0:	00066c00 	call	66c0 <_Bfree>
    43c4:	880b883a 	mov	r5,r17
    43c8:	e009883a 	mov	r4,fp
    43cc:	00066c00 	call	66c0 <_Bfree>
    43d0:	003e9706 	br	3e30 <__alt_data_end+0xf8003e30>
    43d4:	01800044 	movi	r6,1
    43d8:	d9800e15 	stw	r6,56(sp)
    43dc:	003d9606 	br	3a38 <__alt_data_end+0xf8003a38>
    43e0:	d8800817 	ldw	r2,32(sp)
    43e4:	d8c00517 	ldw	r3,20(sp)
    43e8:	d8000d15 	stw	zero,52(sp)
    43ec:	10c5c83a 	sub	r2,r2,r3
    43f0:	00c9c83a 	sub	r4,zero,r3
    43f4:	d8800815 	stw	r2,32(sp)
    43f8:	d9000a15 	stw	r4,40(sp)
    43fc:	003d9706 	br	3a5c <__alt_data_end+0xf8003a5c>
    4400:	05adc83a 	sub	r22,zero,r22
    4404:	dd800815 	stw	r22,32(sp)
    4408:	002d883a 	mov	r22,zero
    440c:	003d8e06 	br	3a48 <__alt_data_end+0xf8003a48>
    4410:	d9000517 	ldw	r4,20(sp)
    4414:	000ce640 	call	ce64 <__floatsidf>
    4418:	100d883a 	mov	r6,r2
    441c:	180f883a 	mov	r7,r3
    4420:	a009883a 	mov	r4,r20
    4424:	880b883a 	mov	r5,r17
    4428:	000bb780 	call	bb78 <__eqdf2>
    442c:	103d7126 	beq	r2,zero,39f4 <__alt_data_end+0xf80039f4>
    4430:	d9c00517 	ldw	r7,20(sp)
    4434:	39ffffc4 	addi	r7,r7,-1
    4438:	d9c00515 	stw	r7,20(sp)
    443c:	003d6d06 	br	39f4 <__alt_data_end+0xf80039f4>
    4440:	dd400a17 	ldw	r21,40(sp)
    4444:	dd000817 	ldw	r20,32(sp)
    4448:	0023883a 	mov	r17,zero
    444c:	003f4806 	br	4170 <__alt_data_end+0xf8004170>
    4450:	10e3c83a 	sub	r17,r2,r3
    4454:	9448983a 	sll	r4,r18,r17
    4458:	003d3206 	br	3924 <__alt_data_end+0xf8003924>
    445c:	d8000e15 	stw	zero,56(sp)
    4460:	003d7506 	br	3a38 <__alt_data_end+0xf8003a38>
    4464:	b005883a 	mov	r2,r22
    4468:	003f4506 	br	4180 <__alt_data_end+0xf8004180>
    446c:	dc000915 	stw	r16,36(sp)
    4470:	d9800a17 	ldw	r6,40(sp)
    4474:	d9400917 	ldw	r5,36(sp)
    4478:	e009883a 	mov	r4,fp
    447c:	0006c580 	call	6c58 <__pow5mult>
    4480:	1021883a 	mov	r16,r2
    4484:	003f5a06 	br	41f0 <__alt_data_end+0xf80041f0>
    4488:	01c00044 	movi	r7,1
    448c:	d9c00b15 	stw	r7,44(sp)
    4490:	d8802217 	ldw	r2,136(sp)
    4494:	0081280e 	bge	zero,r2,4938 <_dtoa_r+0x11b0>
    4498:	100d883a 	mov	r6,r2
    449c:	1021883a 	mov	r16,r2
    44a0:	d8800c15 	stw	r2,48(sp)
    44a4:	d8800615 	stw	r2,24(sp)
    44a8:	003d8806 	br	3acc <__alt_data_end+0xf8003acc>
    44ac:	d8800617 	ldw	r2,24(sp)
    44b0:	00be9b16 	blt	zero,r2,3f20 <__alt_data_end+0xf8003f20>
    44b4:	10010f1e 	bne	r2,zero,48f4 <_dtoa_r+0x116c>
    44b8:	880b883a 	mov	r5,r17
    44bc:	000d883a 	mov	r6,zero
    44c0:	01d00534 	movhi	r7,16404
    44c4:	8009883a 	mov	r4,r16
    44c8:	000bdd00 	call	bdd0 <__muldf3>
    44cc:	900d883a 	mov	r6,r18
    44d0:	980f883a 	mov	r7,r19
    44d4:	1009883a 	mov	r4,r2
    44d8:	180b883a 	mov	r5,r3
    44dc:	000bc000 	call	bc00 <__gedf2>
    44e0:	002b883a 	mov	r21,zero
    44e4:	0023883a 	mov	r17,zero
    44e8:	1000bf16 	blt	r2,zero,47e8 <_dtoa_r+0x1060>
    44ec:	d9802217 	ldw	r6,136(sp)
    44f0:	ddc00717 	ldw	r23,28(sp)
    44f4:	018c303a 	nor	r6,zero,r6
    44f8:	d9800515 	stw	r6,20(sp)
    44fc:	a80b883a 	mov	r5,r21
    4500:	e009883a 	mov	r4,fp
    4504:	00066c00 	call	66c0 <_Bfree>
    4508:	883e4926 	beq	r17,zero,3e30 <__alt_data_end+0xf8003e30>
    450c:	003fad06 	br	43c4 <__alt_data_end+0xf80043c4>
    4510:	d9c01117 	ldw	r7,68(sp)
    4514:	3801bc26 	beq	r7,zero,4c08 <_dtoa_r+0x1480>
    4518:	10810cc4 	addi	r2,r2,1075
    451c:	dd400a17 	ldw	r21,40(sp)
    4520:	dd000817 	ldw	r20,32(sp)
    4524:	003f0a06 	br	4150 <__alt_data_end+0xf8004150>
    4528:	00800704 	movi	r2,28
    452c:	d9000817 	ldw	r4,32(sp)
    4530:	a0a9883a 	add	r20,r20,r2
    4534:	b0ad883a 	add	r22,r22,r2
    4538:	2089883a 	add	r4,r4,r2
    453c:	d9000815 	stw	r4,32(sp)
    4540:	003f5106 	br	4288 <__alt_data_end+0xf8004288>
    4544:	d8c00317 	ldw	r3,12(sp)
    4548:	b8c1fc0e 	bge	r23,r3,4d3c <_dtoa_r+0x15b4>
    454c:	0027883a 	mov	r19,zero
    4550:	b805883a 	mov	r2,r23
    4554:	003f3e06 	br	4250 <__alt_data_end+0xf8004250>
    4558:	880b883a 	mov	r5,r17
    455c:	e009883a 	mov	r4,fp
    4560:	000f883a 	mov	r7,zero
    4564:	01800284 	movi	r6,10
    4568:	00066e80 	call	66e8 <__multadd>
    456c:	d9000c17 	ldw	r4,48(sp)
    4570:	1023883a 	mov	r17,r2
    4574:	0102040e 	bge	zero,r4,4d88 <_dtoa_r+0x1600>
    4578:	d9000615 	stw	r4,24(sp)
    457c:	0500050e 	bge	zero,r20,4594 <_dtoa_r+0xe0c>
    4580:	880b883a 	mov	r5,r17
    4584:	a00d883a 	mov	r6,r20
    4588:	e009883a 	mov	r4,fp
    458c:	0006d980 	call	6d98 <__lshift>
    4590:	1023883a 	mov	r17,r2
    4594:	9801241e 	bne	r19,zero,4a28 <_dtoa_r+0x12a0>
    4598:	8829883a 	mov	r20,r17
    459c:	d9000617 	ldw	r4,24(sp)
    45a0:	dcc00717 	ldw	r19,28(sp)
    45a4:	9480004c 	andi	r18,r18,1
    45a8:	20bfffc4 	addi	r2,r4,-1
    45ac:	9885883a 	add	r2,r19,r2
    45b0:	d8800415 	stw	r2,16(sp)
    45b4:	dc800615 	stw	r18,24(sp)
    45b8:	a80b883a 	mov	r5,r21
    45bc:	8009883a 	mov	r4,r16
    45c0:	00035880 	call	3588 <quorem>
    45c4:	880b883a 	mov	r5,r17
    45c8:	8009883a 	mov	r4,r16
    45cc:	102f883a 	mov	r23,r2
    45d0:	0006ee00 	call	6ee0 <__mcmp>
    45d4:	a80b883a 	mov	r5,r21
    45d8:	a00d883a 	mov	r6,r20
    45dc:	e009883a 	mov	r4,fp
    45e0:	102d883a 	mov	r22,r2
    45e4:	0006f400 	call	6f40 <__mdiff>
    45e8:	1007883a 	mov	r3,r2
    45ec:	10800317 	ldw	r2,12(r2)
    45f0:	bc800c04 	addi	r18,r23,48
    45f4:	180b883a 	mov	r5,r3
    45f8:	10004e1e 	bne	r2,zero,4734 <_dtoa_r+0xfac>
    45fc:	8009883a 	mov	r4,r16
    4600:	d8c01615 	stw	r3,88(sp)
    4604:	0006ee00 	call	6ee0 <__mcmp>
    4608:	d8c01617 	ldw	r3,88(sp)
    460c:	e009883a 	mov	r4,fp
    4610:	d8801615 	stw	r2,88(sp)
    4614:	180b883a 	mov	r5,r3
    4618:	00066c00 	call	66c0 <_Bfree>
    461c:	d8801617 	ldw	r2,88(sp)
    4620:	1000041e 	bne	r2,zero,4634 <_dtoa_r+0xeac>
    4624:	d9800317 	ldw	r6,12(sp)
    4628:	3000021e 	bne	r6,zero,4634 <_dtoa_r+0xeac>
    462c:	d8c00617 	ldw	r3,24(sp)
    4630:	18003726 	beq	r3,zero,4710 <_dtoa_r+0xf88>
    4634:	b0002016 	blt	r22,zero,46b8 <_dtoa_r+0xf30>
    4638:	b000041e 	bne	r22,zero,464c <_dtoa_r+0xec4>
    463c:	d9000317 	ldw	r4,12(sp)
    4640:	2000021e 	bne	r4,zero,464c <_dtoa_r+0xec4>
    4644:	d8c00617 	ldw	r3,24(sp)
    4648:	18001b26 	beq	r3,zero,46b8 <_dtoa_r+0xf30>
    464c:	00810716 	blt	zero,r2,4a6c <_dtoa_r+0x12e4>
    4650:	d8c00417 	ldw	r3,16(sp)
    4654:	9d800044 	addi	r22,r19,1
    4658:	9c800005 	stb	r18,0(r19)
    465c:	b02f883a 	mov	r23,r22
    4660:	98c10626 	beq	r19,r3,4a7c <_dtoa_r+0x12f4>
    4664:	800b883a 	mov	r5,r16
    4668:	000f883a 	mov	r7,zero
    466c:	01800284 	movi	r6,10
    4670:	e009883a 	mov	r4,fp
    4674:	00066e80 	call	66e8 <__multadd>
    4678:	1021883a 	mov	r16,r2
    467c:	000f883a 	mov	r7,zero
    4680:	01800284 	movi	r6,10
    4684:	880b883a 	mov	r5,r17
    4688:	e009883a 	mov	r4,fp
    468c:	8d002526 	beq	r17,r20,4724 <_dtoa_r+0xf9c>
    4690:	00066e80 	call	66e8 <__multadd>
    4694:	a00b883a 	mov	r5,r20
    4698:	000f883a 	mov	r7,zero
    469c:	01800284 	movi	r6,10
    46a0:	e009883a 	mov	r4,fp
    46a4:	1023883a 	mov	r17,r2
    46a8:	00066e80 	call	66e8 <__multadd>
    46ac:	1029883a 	mov	r20,r2
    46b0:	b027883a 	mov	r19,r22
    46b4:	003fc006 	br	45b8 <__alt_data_end+0xf80045b8>
    46b8:	9011883a 	mov	r8,r18
    46bc:	00800e0e 	bge	zero,r2,46f8 <_dtoa_r+0xf70>
    46c0:	800b883a 	mov	r5,r16
    46c4:	01800044 	movi	r6,1
    46c8:	e009883a 	mov	r4,fp
    46cc:	da001715 	stw	r8,92(sp)
    46d0:	0006d980 	call	6d98 <__lshift>
    46d4:	a80b883a 	mov	r5,r21
    46d8:	1009883a 	mov	r4,r2
    46dc:	1021883a 	mov	r16,r2
    46e0:	0006ee00 	call	6ee0 <__mcmp>
    46e4:	da001717 	ldw	r8,92(sp)
    46e8:	0081960e 	bge	zero,r2,4d44 <_dtoa_r+0x15bc>
    46ec:	00800e44 	movi	r2,57
    46f0:	40817026 	beq	r8,r2,4cb4 <_dtoa_r+0x152c>
    46f4:	ba000c44 	addi	r8,r23,49
    46f8:	8825883a 	mov	r18,r17
    46fc:	9dc00044 	addi	r23,r19,1
    4700:	9a000005 	stb	r8,0(r19)
    4704:	a023883a 	mov	r17,r20
    4708:	dc000915 	stw	r16,36(sp)
    470c:	003f2406 	br	43a0 <__alt_data_end+0xf80043a0>
    4710:	00800e44 	movi	r2,57
    4714:	9011883a 	mov	r8,r18
    4718:	90816626 	beq	r18,r2,4cb4 <_dtoa_r+0x152c>
    471c:	05bff516 	blt	zero,r22,46f4 <__alt_data_end+0xf80046f4>
    4720:	003ff506 	br	46f8 <__alt_data_end+0xf80046f8>
    4724:	00066e80 	call	66e8 <__multadd>
    4728:	1023883a 	mov	r17,r2
    472c:	1029883a 	mov	r20,r2
    4730:	003fdf06 	br	46b0 <__alt_data_end+0xf80046b0>
    4734:	e009883a 	mov	r4,fp
    4738:	00066c00 	call	66c0 <_Bfree>
    473c:	00800044 	movi	r2,1
    4740:	003fbc06 	br	4634 <__alt_data_end+0xf8004634>
    4744:	a80b883a 	mov	r5,r21
    4748:	8009883a 	mov	r4,r16
    474c:	0006ee00 	call	6ee0 <__mcmp>
    4750:	103edb0e 	bge	r2,zero,42c0 <__alt_data_end+0xf80042c0>
    4754:	800b883a 	mov	r5,r16
    4758:	000f883a 	mov	r7,zero
    475c:	01800284 	movi	r6,10
    4760:	e009883a 	mov	r4,fp
    4764:	00066e80 	call	66e8 <__multadd>
    4768:	1021883a 	mov	r16,r2
    476c:	d8800517 	ldw	r2,20(sp)
    4770:	d8c00b17 	ldw	r3,44(sp)
    4774:	10bfffc4 	addi	r2,r2,-1
    4778:	d8800515 	stw	r2,20(sp)
    477c:	183f761e 	bne	r3,zero,4558 <__alt_data_end+0xf8004558>
    4780:	d9000c17 	ldw	r4,48(sp)
    4784:	0101730e 	bge	zero,r4,4d54 <_dtoa_r+0x15cc>
    4788:	d9000615 	stw	r4,24(sp)
    478c:	003ed006 	br	42d0 <__alt_data_end+0xf80042d0>
    4790:	00800084 	movi	r2,2
    4794:	3081861e 	bne	r6,r2,4db0 <_dtoa_r+0x1628>
    4798:	d8000b15 	stw	zero,44(sp)
    479c:	003f3c06 	br	4490 <__alt_data_end+0xf8004490>
    47a0:	dc000917 	ldw	r16,36(sp)
    47a4:	003e9206 	br	41f0 <__alt_data_end+0xf80041f0>
    47a8:	d9c00317 	ldw	r7,12(sp)
    47ac:	00800084 	movi	r2,2
    47b0:	11fec50e 	bge	r2,r7,42c8 <__alt_data_end+0xf80042c8>
    47b4:	d9000617 	ldw	r4,24(sp)
    47b8:	20013c1e 	bne	r4,zero,4cac <_dtoa_r+0x1524>
    47bc:	a80b883a 	mov	r5,r21
    47c0:	000f883a 	mov	r7,zero
    47c4:	01800144 	movi	r6,5
    47c8:	e009883a 	mov	r4,fp
    47cc:	00066e80 	call	66e8 <__multadd>
    47d0:	100b883a 	mov	r5,r2
    47d4:	8009883a 	mov	r4,r16
    47d8:	102b883a 	mov	r21,r2
    47dc:	0006ee00 	call	6ee0 <__mcmp>
    47e0:	dc000915 	stw	r16,36(sp)
    47e4:	00bf410e 	bge	zero,r2,44ec <__alt_data_end+0xf80044ec>
    47e8:	d9c00717 	ldw	r7,28(sp)
    47ec:	00800c44 	movi	r2,49
    47f0:	38800005 	stb	r2,0(r7)
    47f4:	d8800517 	ldw	r2,20(sp)
    47f8:	3dc00044 	addi	r23,r7,1
    47fc:	10800044 	addi	r2,r2,1
    4800:	d8800515 	stw	r2,20(sp)
    4804:	003f3d06 	br	44fc <__alt_data_end+0xf80044fc>
    4808:	d9800517 	ldw	r6,20(sp)
    480c:	d9c00717 	ldw	r7,28(sp)
    4810:	00800c44 	movi	r2,49
    4814:	31800044 	addi	r6,r6,1
    4818:	d9800515 	stw	r6,20(sp)
    481c:	38800005 	stb	r2,0(r7)
    4820:	003edf06 	br	43a0 <__alt_data_end+0xf80043a0>
    4824:	d8000b15 	stw	zero,44(sp)
    4828:	003c9f06 	br	3aa8 <__alt_data_end+0xf8003aa8>
    482c:	903e7e1e 	bne	r18,zero,4228 <__alt_data_end+0xf8004228>
    4830:	00800434 	movhi	r2,16
    4834:	10bfffc4 	addi	r2,r2,-1
    4838:	9884703a 	and	r2,r19,r2
    483c:	1000ea1e 	bne	r2,zero,4be8 <_dtoa_r+0x1460>
    4840:	9cdffc2c 	andhi	r19,r19,32752
    4844:	9800e826 	beq	r19,zero,4be8 <_dtoa_r+0x1460>
    4848:	d9c00817 	ldw	r7,32(sp)
    484c:	b5800044 	addi	r22,r22,1
    4850:	04c00044 	movi	r19,1
    4854:	39c00044 	addi	r7,r7,1
    4858:	d9c00815 	stw	r7,32(sp)
    485c:	d8800d17 	ldw	r2,52(sp)
    4860:	103e721e 	bne	r2,zero,422c <__alt_data_end+0xf800422c>
    4864:	00800044 	movi	r2,1
    4868:	003e7906 	br	4250 <__alt_data_end+0xf8004250>
    486c:	8009883a 	mov	r4,r16
    4870:	000ce640 	call	ce64 <__floatsidf>
    4874:	d9800f17 	ldw	r6,60(sp)
    4878:	d9c01017 	ldw	r7,64(sp)
    487c:	1009883a 	mov	r4,r2
    4880:	180b883a 	mov	r5,r3
    4884:	000bdd00 	call	bdd0 <__muldf3>
    4888:	000d883a 	mov	r6,zero
    488c:	01d00734 	movhi	r7,16412
    4890:	1009883a 	mov	r4,r2
    4894:	180b883a 	mov	r5,r3
    4898:	000a9e40 	call	a9e4 <__adddf3>
    489c:	047f3034 	movhi	r17,64704
    48a0:	1021883a 	mov	r16,r2
    48a4:	1c63883a 	add	r17,r3,r17
    48a8:	d9000f17 	ldw	r4,60(sp)
    48ac:	d9401017 	ldw	r5,64(sp)
    48b0:	000d883a 	mov	r6,zero
    48b4:	01d00534 	movhi	r7,16404
    48b8:	000c4e80 	call	c4e8 <__subdf3>
    48bc:	800d883a 	mov	r6,r16
    48c0:	880f883a 	mov	r7,r17
    48c4:	1009883a 	mov	r4,r2
    48c8:	180b883a 	mov	r5,r3
    48cc:	102b883a 	mov	r21,r2
    48d0:	1829883a 	mov	r20,r3
    48d4:	000bc000 	call	bc00 <__gedf2>
    48d8:	00806c16 	blt	zero,r2,4a8c <_dtoa_r+0x1304>
    48dc:	89e0003c 	xorhi	r7,r17,32768
    48e0:	800d883a 	mov	r6,r16
    48e4:	a809883a 	mov	r4,r21
    48e8:	a00b883a 	mov	r5,r20
    48ec:	000bcdc0 	call	bcdc <__ledf2>
    48f0:	103d7e0e 	bge	r2,zero,3eec <__alt_data_end+0xf8003eec>
    48f4:	002b883a 	mov	r21,zero
    48f8:	0023883a 	mov	r17,zero
    48fc:	003efb06 	br	44ec <__alt_data_end+0xf80044ec>
    4900:	d8800717 	ldw	r2,28(sp)
    4904:	003bd006 	br	3848 <__alt_data_end+0xf8003848>
    4908:	d9000a17 	ldw	r4,40(sp)
    490c:	d9800d17 	ldw	r6,52(sp)
    4910:	dd400a15 	stw	r21,40(sp)
    4914:	a905c83a 	sub	r2,r21,r4
    4918:	308d883a 	add	r6,r6,r2
    491c:	d9800d15 	stw	r6,52(sp)
    4920:	002b883a 	mov	r21,zero
    4924:	003e0606 	br	4140 <__alt_data_end+0xf8004140>
    4928:	9023883a 	mov	r17,r18
    492c:	9829883a 	mov	r20,r19
    4930:	04000084 	movi	r16,2
    4934:	003c9206 	br	3b80 <__alt_data_end+0xf8003b80>
    4938:	04000044 	movi	r16,1
    493c:	dc000c15 	stw	r16,48(sp)
    4940:	dc000615 	stw	r16,24(sp)
    4944:	dc002215 	stw	r16,136(sp)
    4948:	e0001115 	stw	zero,68(fp)
    494c:	000b883a 	mov	r5,zero
    4950:	003c6906 	br	3af8 <__alt_data_end+0xf8003af8>
    4954:	3021883a 	mov	r16,r6
    4958:	003ffb06 	br	4948 <__alt_data_end+0xf8004948>
    495c:	1000021e 	bne	r2,zero,4968 <_dtoa_r+0x11e0>
    4960:	4200004c 	andi	r8,r8,1
    4964:	403e7d1e 	bne	r8,zero,435c <__alt_data_end+0xf800435c>
    4968:	01000c04 	movi	r4,48
    496c:	00000106 	br	4974 <_dtoa_r+0x11ec>
    4970:	102f883a 	mov	r23,r2
    4974:	b8bfffc4 	addi	r2,r23,-1
    4978:	10c00007 	ldb	r3,0(r2)
    497c:	193ffc26 	beq	r3,r4,4970 <__alt_data_end+0xf8004970>
    4980:	003e8706 	br	43a0 <__alt_data_end+0xf80043a0>
    4984:	d8800517 	ldw	r2,20(sp)
    4988:	00a3c83a 	sub	r17,zero,r2
    498c:	8800a426 	beq	r17,zero,4c20 <_dtoa_r+0x1498>
    4990:	888003cc 	andi	r2,r17,15
    4994:	100490fa 	slli	r2,r2,3
    4998:	00c00074 	movhi	r3,1
    499c:	18d01304 	addi	r3,r3,16460
    49a0:	1885883a 	add	r2,r3,r2
    49a4:	11800017 	ldw	r6,0(r2)
    49a8:	11c00117 	ldw	r7,4(r2)
    49ac:	9009883a 	mov	r4,r18
    49b0:	980b883a 	mov	r5,r19
    49b4:	8823d13a 	srai	r17,r17,4
    49b8:	000bdd00 	call	bdd0 <__muldf3>
    49bc:	d8800f15 	stw	r2,60(sp)
    49c0:	d8c01015 	stw	r3,64(sp)
    49c4:	8800e826 	beq	r17,zero,4d68 <_dtoa_r+0x15e0>
    49c8:	05000074 	movhi	r20,1
    49cc:	a5100904 	addi	r20,r20,16420
    49d0:	04000084 	movi	r16,2
    49d4:	8980004c 	andi	r6,r17,1
    49d8:	1009883a 	mov	r4,r2
    49dc:	8823d07a 	srai	r17,r17,1
    49e0:	180b883a 	mov	r5,r3
    49e4:	30000426 	beq	r6,zero,49f8 <_dtoa_r+0x1270>
    49e8:	a1800017 	ldw	r6,0(r20)
    49ec:	a1c00117 	ldw	r7,4(r20)
    49f0:	84000044 	addi	r16,r16,1
    49f4:	000bdd00 	call	bdd0 <__muldf3>
    49f8:	a5000204 	addi	r20,r20,8
    49fc:	883ff51e 	bne	r17,zero,49d4 <__alt_data_end+0xf80049d4>
    4a00:	d8800f15 	stw	r2,60(sp)
    4a04:	d8c01015 	stw	r3,64(sp)
    4a08:	003c7606 	br	3be4 <__alt_data_end+0xf8003be4>
    4a0c:	00c00c04 	movi	r3,48
    4a10:	10c00005 	stb	r3,0(r2)
    4a14:	d8c00517 	ldw	r3,20(sp)
    4a18:	bd3fffc3 	ldbu	r20,-1(r23)
    4a1c:	18c00044 	addi	r3,r3,1
    4a20:	d8c00515 	stw	r3,20(sp)
    4a24:	003db906 	br	410c <__alt_data_end+0xf800410c>
    4a28:	89400117 	ldw	r5,4(r17)
    4a2c:	e009883a 	mov	r4,fp
    4a30:	00066180 	call	6618 <_Balloc>
    4a34:	89800417 	ldw	r6,16(r17)
    4a38:	89400304 	addi	r5,r17,12
    4a3c:	11000304 	addi	r4,r2,12
    4a40:	31800084 	addi	r6,r6,2
    4a44:	318d883a 	add	r6,r6,r6
    4a48:	318d883a 	add	r6,r6,r6
    4a4c:	1027883a 	mov	r19,r2
    4a50:	000624c0 	call	624c <memcpy>
    4a54:	01800044 	movi	r6,1
    4a58:	980b883a 	mov	r5,r19
    4a5c:	e009883a 	mov	r4,fp
    4a60:	0006d980 	call	6d98 <__lshift>
    4a64:	1029883a 	mov	r20,r2
    4a68:	003ecc06 	br	459c <__alt_data_end+0xf800459c>
    4a6c:	00800e44 	movi	r2,57
    4a70:	90809026 	beq	r18,r2,4cb4 <_dtoa_r+0x152c>
    4a74:	92000044 	addi	r8,r18,1
    4a78:	003f1f06 	br	46f8 <__alt_data_end+0xf80046f8>
    4a7c:	9011883a 	mov	r8,r18
    4a80:	8825883a 	mov	r18,r17
    4a84:	a023883a 	mov	r17,r20
    4a88:	003e2906 	br	4330 <__alt_data_end+0xf8004330>
    4a8c:	002b883a 	mov	r21,zero
    4a90:	0023883a 	mov	r17,zero
    4a94:	003f5406 	br	47e8 <__alt_data_end+0xf80047e8>
    4a98:	61bfffc4 	addi	r6,r12,-1
    4a9c:	300490fa 	slli	r2,r6,3
    4aa0:	00c00074 	movhi	r3,1
    4aa4:	18d01304 	addi	r3,r3,16460
    4aa8:	1885883a 	add	r2,r3,r2
    4aac:	11000017 	ldw	r4,0(r2)
    4ab0:	11400117 	ldw	r5,4(r2)
    4ab4:	d8800717 	ldw	r2,28(sp)
    4ab8:	880f883a 	mov	r7,r17
    4abc:	d9801215 	stw	r6,72(sp)
    4ac0:	800d883a 	mov	r6,r16
    4ac4:	db001615 	stw	r12,88(sp)
    4ac8:	15c00044 	addi	r23,r2,1
    4acc:	000bdd00 	call	bdd0 <__muldf3>
    4ad0:	d9401017 	ldw	r5,64(sp)
    4ad4:	d9000f17 	ldw	r4,60(sp)
    4ad8:	d8c01515 	stw	r3,84(sp)
    4adc:	d8801415 	stw	r2,80(sp)
    4ae0:	000cde40 	call	cde4 <__fixdfsi>
    4ae4:	1009883a 	mov	r4,r2
    4ae8:	1021883a 	mov	r16,r2
    4aec:	000ce640 	call	ce64 <__floatsidf>
    4af0:	d9000f17 	ldw	r4,60(sp)
    4af4:	d9401017 	ldw	r5,64(sp)
    4af8:	100d883a 	mov	r6,r2
    4afc:	180f883a 	mov	r7,r3
    4b00:	000c4e80 	call	c4e8 <__subdf3>
    4b04:	1829883a 	mov	r20,r3
    4b08:	d8c00717 	ldw	r3,28(sp)
    4b0c:	84000c04 	addi	r16,r16,48
    4b10:	1023883a 	mov	r17,r2
    4b14:	1c000005 	stb	r16,0(r3)
    4b18:	db001617 	ldw	r12,88(sp)
    4b1c:	00800044 	movi	r2,1
    4b20:	60802226 	beq	r12,r2,4bac <_dtoa_r+0x1424>
    4b24:	d9c00717 	ldw	r7,28(sp)
    4b28:	8805883a 	mov	r2,r17
    4b2c:	b82b883a 	mov	r21,r23
    4b30:	3b19883a 	add	r12,r7,r12
    4b34:	6023883a 	mov	r17,r12
    4b38:	a007883a 	mov	r3,r20
    4b3c:	dc800f15 	stw	r18,60(sp)
    4b40:	000d883a 	mov	r6,zero
    4b44:	01d00934 	movhi	r7,16420
    4b48:	1009883a 	mov	r4,r2
    4b4c:	180b883a 	mov	r5,r3
    4b50:	000bdd00 	call	bdd0 <__muldf3>
    4b54:	180b883a 	mov	r5,r3
    4b58:	1009883a 	mov	r4,r2
    4b5c:	1829883a 	mov	r20,r3
    4b60:	1025883a 	mov	r18,r2
    4b64:	000cde40 	call	cde4 <__fixdfsi>
    4b68:	1009883a 	mov	r4,r2
    4b6c:	1021883a 	mov	r16,r2
    4b70:	000ce640 	call	ce64 <__floatsidf>
    4b74:	100d883a 	mov	r6,r2
    4b78:	180f883a 	mov	r7,r3
    4b7c:	9009883a 	mov	r4,r18
    4b80:	a00b883a 	mov	r5,r20
    4b84:	84000c04 	addi	r16,r16,48
    4b88:	000c4e80 	call	c4e8 <__subdf3>
    4b8c:	ad400044 	addi	r21,r21,1
    4b90:	ac3fffc5 	stb	r16,-1(r21)
    4b94:	ac7fea1e 	bne	r21,r17,4b40 <__alt_data_end+0xf8004b40>
    4b98:	1023883a 	mov	r17,r2
    4b9c:	d8801217 	ldw	r2,72(sp)
    4ba0:	dc800f17 	ldw	r18,60(sp)
    4ba4:	1829883a 	mov	r20,r3
    4ba8:	b8af883a 	add	r23,r23,r2
    4bac:	d9001417 	ldw	r4,80(sp)
    4bb0:	d9401517 	ldw	r5,84(sp)
    4bb4:	000d883a 	mov	r6,zero
    4bb8:	01cff834 	movhi	r7,16352
    4bbc:	000a9e40 	call	a9e4 <__adddf3>
    4bc0:	880d883a 	mov	r6,r17
    4bc4:	a00f883a 	mov	r7,r20
    4bc8:	1009883a 	mov	r4,r2
    4bcc:	180b883a 	mov	r5,r3
    4bd0:	000bcdc0 	call	bcdc <__ledf2>
    4bd4:	10003e0e 	bge	r2,zero,4cd0 <_dtoa_r+0x1548>
    4bd8:	d9001317 	ldw	r4,76(sp)
    4bdc:	bd3fffc3 	ldbu	r20,-1(r23)
    4be0:	d9000515 	stw	r4,20(sp)
    4be4:	003d3b06 	br	40d4 <__alt_data_end+0xf80040d4>
    4be8:	0027883a 	mov	r19,zero
    4bec:	003f1b06 	br	485c <__alt_data_end+0xf800485c>
    4bf0:	d8800817 	ldw	r2,32(sp)
    4bf4:	11e9c83a 	sub	r20,r2,r7
    4bf8:	0005883a 	mov	r2,zero
    4bfc:	003d5406 	br	4150 <__alt_data_end+0xf8004150>
    4c00:	00800044 	movi	r2,1
    4c04:	003dc706 	br	4324 <__alt_data_end+0xf8004324>
    4c08:	d8c00217 	ldw	r3,8(sp)
    4c0c:	00800d84 	movi	r2,54
    4c10:	dd400a17 	ldw	r21,40(sp)
    4c14:	10c5c83a 	sub	r2,r2,r3
    4c18:	dd000817 	ldw	r20,32(sp)
    4c1c:	003d4c06 	br	4150 <__alt_data_end+0xf8004150>
    4c20:	dc800f15 	stw	r18,60(sp)
    4c24:	dcc01015 	stw	r19,64(sp)
    4c28:	04000084 	movi	r16,2
    4c2c:	003bed06 	br	3be4 <__alt_data_end+0xf8003be4>
    4c30:	d9000617 	ldw	r4,24(sp)
    4c34:	203f0d26 	beq	r4,zero,486c <__alt_data_end+0xf800486c>
    4c38:	d9800c17 	ldw	r6,48(sp)
    4c3c:	01bcab0e 	bge	zero,r6,3eec <__alt_data_end+0xf8003eec>
    4c40:	d9401017 	ldw	r5,64(sp)
    4c44:	d9000f17 	ldw	r4,60(sp)
    4c48:	000d883a 	mov	r6,zero
    4c4c:	01d00934 	movhi	r7,16420
    4c50:	000bdd00 	call	bdd0 <__muldf3>
    4c54:	81000044 	addi	r4,r16,1
    4c58:	d8800f15 	stw	r2,60(sp)
    4c5c:	d8c01015 	stw	r3,64(sp)
    4c60:	000ce640 	call	ce64 <__floatsidf>
    4c64:	d9800f17 	ldw	r6,60(sp)
    4c68:	d9c01017 	ldw	r7,64(sp)
    4c6c:	1009883a 	mov	r4,r2
    4c70:	180b883a 	mov	r5,r3
    4c74:	000bdd00 	call	bdd0 <__muldf3>
    4c78:	01d00734 	movhi	r7,16412
    4c7c:	000d883a 	mov	r6,zero
    4c80:	1009883a 	mov	r4,r2
    4c84:	180b883a 	mov	r5,r3
    4c88:	000a9e40 	call	a9e4 <__adddf3>
    4c8c:	d9c00517 	ldw	r7,20(sp)
    4c90:	047f3034 	movhi	r17,64704
    4c94:	1021883a 	mov	r16,r2
    4c98:	39ffffc4 	addi	r7,r7,-1
    4c9c:	d9c01315 	stw	r7,76(sp)
    4ca0:	1c63883a 	add	r17,r3,r17
    4ca4:	db000c17 	ldw	r12,48(sp)
    4ca8:	003bea06 	br	3c54 <__alt_data_end+0xf8003c54>
    4cac:	dc000915 	stw	r16,36(sp)
    4cb0:	003e0e06 	br	44ec <__alt_data_end+0xf80044ec>
    4cb4:	01000e44 	movi	r4,57
    4cb8:	8825883a 	mov	r18,r17
    4cbc:	9dc00044 	addi	r23,r19,1
    4cc0:	99000005 	stb	r4,0(r19)
    4cc4:	a023883a 	mov	r17,r20
    4cc8:	dc000915 	stw	r16,36(sp)
    4ccc:	003da406 	br	4360 <__alt_data_end+0xf8004360>
    4cd0:	d9801417 	ldw	r6,80(sp)
    4cd4:	d9c01517 	ldw	r7,84(sp)
    4cd8:	0009883a 	mov	r4,zero
    4cdc:	014ff834 	movhi	r5,16352
    4ce0:	000c4e80 	call	c4e8 <__subdf3>
    4ce4:	880d883a 	mov	r6,r17
    4ce8:	a00f883a 	mov	r7,r20
    4cec:	1009883a 	mov	r4,r2
    4cf0:	180b883a 	mov	r5,r3
    4cf4:	000bc000 	call	bc00 <__gedf2>
    4cf8:	00bc7c0e 	bge	zero,r2,3eec <__alt_data_end+0xf8003eec>
    4cfc:	01000c04 	movi	r4,48
    4d00:	00000106 	br	4d08 <_dtoa_r+0x1580>
    4d04:	102f883a 	mov	r23,r2
    4d08:	b8bfffc4 	addi	r2,r23,-1
    4d0c:	10c00007 	ldb	r3,0(r2)
    4d10:	193ffc26 	beq	r3,r4,4d04 <__alt_data_end+0xf8004d04>
    4d14:	d9801317 	ldw	r6,76(sp)
    4d18:	d9800515 	stw	r6,20(sp)
    4d1c:	003c4406 	br	3e30 <__alt_data_end+0xf8003e30>
    4d20:	d9801317 	ldw	r6,76(sp)
    4d24:	d9800515 	stw	r6,20(sp)
    4d28:	003cea06 	br	40d4 <__alt_data_end+0xf80040d4>
    4d2c:	dd800f17 	ldw	r22,60(sp)
    4d30:	dcc01017 	ldw	r19,64(sp)
    4d34:	dc801217 	ldw	r18,72(sp)
    4d38:	003c6c06 	br	3eec <__alt_data_end+0xf8003eec>
    4d3c:	903e031e 	bne	r18,zero,454c <__alt_data_end+0xf800454c>
    4d40:	003ebb06 	br	4830 <__alt_data_end+0xf8004830>
    4d44:	103e6c1e 	bne	r2,zero,46f8 <__alt_data_end+0xf80046f8>
    4d48:	4080004c 	andi	r2,r8,1
    4d4c:	103e6a26 	beq	r2,zero,46f8 <__alt_data_end+0xf80046f8>
    4d50:	003e6606 	br	46ec <__alt_data_end+0xf80046ec>
    4d54:	d8c00317 	ldw	r3,12(sp)
    4d58:	00800084 	movi	r2,2
    4d5c:	10c02916 	blt	r2,r3,4e04 <_dtoa_r+0x167c>
    4d60:	d9000c17 	ldw	r4,48(sp)
    4d64:	003e8806 	br	4788 <__alt_data_end+0xf8004788>
    4d68:	04000084 	movi	r16,2
    4d6c:	003b9d06 	br	3be4 <__alt_data_end+0xf8003be4>
    4d70:	d9001317 	ldw	r4,76(sp)
    4d74:	d9000515 	stw	r4,20(sp)
    4d78:	003cd606 	br	40d4 <__alt_data_end+0xf80040d4>
    4d7c:	d8801317 	ldw	r2,76(sp)
    4d80:	d8800515 	stw	r2,20(sp)
    4d84:	003c2a06 	br	3e30 <__alt_data_end+0xf8003e30>
    4d88:	d9800317 	ldw	r6,12(sp)
    4d8c:	00800084 	movi	r2,2
    4d90:	11801516 	blt	r2,r6,4de8 <_dtoa_r+0x1660>
    4d94:	d9c00c17 	ldw	r7,48(sp)
    4d98:	d9c00615 	stw	r7,24(sp)
    4d9c:	003df706 	br	457c <__alt_data_end+0xf800457c>
    4da0:	193d3926 	beq	r3,r4,4288 <__alt_data_end+0xf8004288>
    4da4:	00c00f04 	movi	r3,60
    4da8:	1885c83a 	sub	r2,r3,r2
    4dac:	003ddf06 	br	452c <__alt_data_end+0xf800452c>
    4db0:	e009883a 	mov	r4,fp
    4db4:	e0001115 	stw	zero,68(fp)
    4db8:	000b883a 	mov	r5,zero
    4dbc:	00066180 	call	6618 <_Balloc>
    4dc0:	d8800715 	stw	r2,28(sp)
    4dc4:	d8c00717 	ldw	r3,28(sp)
    4dc8:	00bfffc4 	movi	r2,-1
    4dcc:	01000044 	movi	r4,1
    4dd0:	d8800c15 	stw	r2,48(sp)
    4dd4:	e0c01015 	stw	r3,64(fp)
    4dd8:	d9000b15 	stw	r4,44(sp)
    4ddc:	d8800615 	stw	r2,24(sp)
    4de0:	d8002215 	stw	zero,136(sp)
    4de4:	003c4106 	br	3eec <__alt_data_end+0xf8003eec>
    4de8:	d8c00c17 	ldw	r3,48(sp)
    4dec:	d8c00615 	stw	r3,24(sp)
    4df0:	003e7006 	br	47b4 <__alt_data_end+0xf80047b4>
    4df4:	04400044 	movi	r17,1
    4df8:	003b2006 	br	3a7c <__alt_data_end+0xf8003a7c>
    4dfc:	000b883a 	mov	r5,zero
    4e00:	003b3d06 	br	3af8 <__alt_data_end+0xf8003af8>
    4e04:	d8800c17 	ldw	r2,48(sp)
    4e08:	d8800615 	stw	r2,24(sp)
    4e0c:	003e6906 	br	47b4 <__alt_data_end+0xf80047b4>

00004e10 <__sflush_r>:
    4e10:	2880030b 	ldhu	r2,12(r5)
    4e14:	defffb04 	addi	sp,sp,-20
    4e18:	dcc00315 	stw	r19,12(sp)
    4e1c:	dc400115 	stw	r17,4(sp)
    4e20:	dfc00415 	stw	ra,16(sp)
    4e24:	dc800215 	stw	r18,8(sp)
    4e28:	dc000015 	stw	r16,0(sp)
    4e2c:	10c0020c 	andi	r3,r2,8
    4e30:	2823883a 	mov	r17,r5
    4e34:	2027883a 	mov	r19,r4
    4e38:	1800311e 	bne	r3,zero,4f00 <__sflush_r+0xf0>
    4e3c:	28c00117 	ldw	r3,4(r5)
    4e40:	10820014 	ori	r2,r2,2048
    4e44:	2880030d 	sth	r2,12(r5)
    4e48:	00c04b0e 	bge	zero,r3,4f78 <__sflush_r+0x168>
    4e4c:	8a000a17 	ldw	r8,40(r17)
    4e50:	40002326 	beq	r8,zero,4ee0 <__sflush_r+0xd0>
    4e54:	9c000017 	ldw	r16,0(r19)
    4e58:	10c4000c 	andi	r3,r2,4096
    4e5c:	98000015 	stw	zero,0(r19)
    4e60:	18004826 	beq	r3,zero,4f84 <__sflush_r+0x174>
    4e64:	89801417 	ldw	r6,80(r17)
    4e68:	10c0010c 	andi	r3,r2,4
    4e6c:	18000626 	beq	r3,zero,4e88 <__sflush_r+0x78>
    4e70:	88c00117 	ldw	r3,4(r17)
    4e74:	88800c17 	ldw	r2,48(r17)
    4e78:	30cdc83a 	sub	r6,r6,r3
    4e7c:	10000226 	beq	r2,zero,4e88 <__sflush_r+0x78>
    4e80:	88800f17 	ldw	r2,60(r17)
    4e84:	308dc83a 	sub	r6,r6,r2
    4e88:	89400717 	ldw	r5,28(r17)
    4e8c:	000f883a 	mov	r7,zero
    4e90:	9809883a 	mov	r4,r19
    4e94:	403ee83a 	callr	r8
    4e98:	00ffffc4 	movi	r3,-1
    4e9c:	10c04426 	beq	r2,r3,4fb0 <__sflush_r+0x1a0>
    4ea0:	88c0030b 	ldhu	r3,12(r17)
    4ea4:	89000417 	ldw	r4,16(r17)
    4ea8:	88000115 	stw	zero,4(r17)
    4eac:	197dffcc 	andi	r5,r3,63487
    4eb0:	8940030d 	sth	r5,12(r17)
    4eb4:	89000015 	stw	r4,0(r17)
    4eb8:	18c4000c 	andi	r3,r3,4096
    4ebc:	18002c1e 	bne	r3,zero,4f70 <__sflush_r+0x160>
    4ec0:	89400c17 	ldw	r5,48(r17)
    4ec4:	9c000015 	stw	r16,0(r19)
    4ec8:	28000526 	beq	r5,zero,4ee0 <__sflush_r+0xd0>
    4ecc:	88801004 	addi	r2,r17,64
    4ed0:	28800226 	beq	r5,r2,4edc <__sflush_r+0xcc>
    4ed4:	9809883a 	mov	r4,r19
    4ed8:	000557c0 	call	557c <_free_r>
    4edc:	88000c15 	stw	zero,48(r17)
    4ee0:	0005883a 	mov	r2,zero
    4ee4:	dfc00417 	ldw	ra,16(sp)
    4ee8:	dcc00317 	ldw	r19,12(sp)
    4eec:	dc800217 	ldw	r18,8(sp)
    4ef0:	dc400117 	ldw	r17,4(sp)
    4ef4:	dc000017 	ldw	r16,0(sp)
    4ef8:	dec00504 	addi	sp,sp,20
    4efc:	f800283a 	ret
    4f00:	2c800417 	ldw	r18,16(r5)
    4f04:	903ff626 	beq	r18,zero,4ee0 <__alt_data_end+0xf8004ee0>
    4f08:	2c000017 	ldw	r16,0(r5)
    4f0c:	108000cc 	andi	r2,r2,3
    4f10:	2c800015 	stw	r18,0(r5)
    4f14:	84a1c83a 	sub	r16,r16,r18
    4f18:	1000131e 	bne	r2,zero,4f68 <__sflush_r+0x158>
    4f1c:	28800517 	ldw	r2,20(r5)
    4f20:	88800215 	stw	r2,8(r17)
    4f24:	04000316 	blt	zero,r16,4f34 <__sflush_r+0x124>
    4f28:	003fed06 	br	4ee0 <__alt_data_end+0xf8004ee0>
    4f2c:	90a5883a 	add	r18,r18,r2
    4f30:	043feb0e 	bge	zero,r16,4ee0 <__alt_data_end+0xf8004ee0>
    4f34:	88800917 	ldw	r2,36(r17)
    4f38:	89400717 	ldw	r5,28(r17)
    4f3c:	800f883a 	mov	r7,r16
    4f40:	900d883a 	mov	r6,r18
    4f44:	9809883a 	mov	r4,r19
    4f48:	103ee83a 	callr	r2
    4f4c:	80a1c83a 	sub	r16,r16,r2
    4f50:	00bff616 	blt	zero,r2,4f2c <__alt_data_end+0xf8004f2c>
    4f54:	88c0030b 	ldhu	r3,12(r17)
    4f58:	00bfffc4 	movi	r2,-1
    4f5c:	18c01014 	ori	r3,r3,64
    4f60:	88c0030d 	sth	r3,12(r17)
    4f64:	003fdf06 	br	4ee4 <__alt_data_end+0xf8004ee4>
    4f68:	0005883a 	mov	r2,zero
    4f6c:	003fec06 	br	4f20 <__alt_data_end+0xf8004f20>
    4f70:	88801415 	stw	r2,80(r17)
    4f74:	003fd206 	br	4ec0 <__alt_data_end+0xf8004ec0>
    4f78:	28c00f17 	ldw	r3,60(r5)
    4f7c:	00ffb316 	blt	zero,r3,4e4c <__alt_data_end+0xf8004e4c>
    4f80:	003fd706 	br	4ee0 <__alt_data_end+0xf8004ee0>
    4f84:	89400717 	ldw	r5,28(r17)
    4f88:	000d883a 	mov	r6,zero
    4f8c:	01c00044 	movi	r7,1
    4f90:	9809883a 	mov	r4,r19
    4f94:	403ee83a 	callr	r8
    4f98:	100d883a 	mov	r6,r2
    4f9c:	00bfffc4 	movi	r2,-1
    4fa0:	30801426 	beq	r6,r2,4ff4 <__sflush_r+0x1e4>
    4fa4:	8880030b 	ldhu	r2,12(r17)
    4fa8:	8a000a17 	ldw	r8,40(r17)
    4fac:	003fae06 	br	4e68 <__alt_data_end+0xf8004e68>
    4fb0:	98c00017 	ldw	r3,0(r19)
    4fb4:	183fba26 	beq	r3,zero,4ea0 <__alt_data_end+0xf8004ea0>
    4fb8:	01000744 	movi	r4,29
    4fbc:	19000626 	beq	r3,r4,4fd8 <__sflush_r+0x1c8>
    4fc0:	01000584 	movi	r4,22
    4fc4:	19000426 	beq	r3,r4,4fd8 <__sflush_r+0x1c8>
    4fc8:	88c0030b 	ldhu	r3,12(r17)
    4fcc:	18c01014 	ori	r3,r3,64
    4fd0:	88c0030d 	sth	r3,12(r17)
    4fd4:	003fc306 	br	4ee4 <__alt_data_end+0xf8004ee4>
    4fd8:	8880030b 	ldhu	r2,12(r17)
    4fdc:	88c00417 	ldw	r3,16(r17)
    4fe0:	88000115 	stw	zero,4(r17)
    4fe4:	10bdffcc 	andi	r2,r2,63487
    4fe8:	8880030d 	sth	r2,12(r17)
    4fec:	88c00015 	stw	r3,0(r17)
    4ff0:	003fb306 	br	4ec0 <__alt_data_end+0xf8004ec0>
    4ff4:	98800017 	ldw	r2,0(r19)
    4ff8:	103fea26 	beq	r2,zero,4fa4 <__alt_data_end+0xf8004fa4>
    4ffc:	00c00744 	movi	r3,29
    5000:	10c00226 	beq	r2,r3,500c <__sflush_r+0x1fc>
    5004:	00c00584 	movi	r3,22
    5008:	10c0031e 	bne	r2,r3,5018 <__sflush_r+0x208>
    500c:	9c000015 	stw	r16,0(r19)
    5010:	0005883a 	mov	r2,zero
    5014:	003fb306 	br	4ee4 <__alt_data_end+0xf8004ee4>
    5018:	88c0030b 	ldhu	r3,12(r17)
    501c:	3005883a 	mov	r2,r6
    5020:	18c01014 	ori	r3,r3,64
    5024:	88c0030d 	sth	r3,12(r17)
    5028:	003fae06 	br	4ee4 <__alt_data_end+0xf8004ee4>

0000502c <_fflush_r>:
    502c:	defffd04 	addi	sp,sp,-12
    5030:	dc000115 	stw	r16,4(sp)
    5034:	dfc00215 	stw	ra,8(sp)
    5038:	2021883a 	mov	r16,r4
    503c:	20000226 	beq	r4,zero,5048 <_fflush_r+0x1c>
    5040:	20800e17 	ldw	r2,56(r4)
    5044:	10000c26 	beq	r2,zero,5078 <_fflush_r+0x4c>
    5048:	2880030f 	ldh	r2,12(r5)
    504c:	1000051e 	bne	r2,zero,5064 <_fflush_r+0x38>
    5050:	0005883a 	mov	r2,zero
    5054:	dfc00217 	ldw	ra,8(sp)
    5058:	dc000117 	ldw	r16,4(sp)
    505c:	dec00304 	addi	sp,sp,12
    5060:	f800283a 	ret
    5064:	8009883a 	mov	r4,r16
    5068:	dfc00217 	ldw	ra,8(sp)
    506c:	dc000117 	ldw	r16,4(sp)
    5070:	dec00304 	addi	sp,sp,12
    5074:	0004e101 	jmpi	4e10 <__sflush_r>
    5078:	d9400015 	stw	r5,0(sp)
    507c:	00054080 	call	5408 <__sinit>
    5080:	d9400017 	ldw	r5,0(sp)
    5084:	003ff006 	br	5048 <__alt_data_end+0xf8005048>

00005088 <fflush>:
    5088:	20000526 	beq	r4,zero,50a0 <fflush+0x18>
    508c:	00800074 	movhi	r2,1
    5090:	10978804 	addi	r2,r2,24096
    5094:	200b883a 	mov	r5,r4
    5098:	11000017 	ldw	r4,0(r2)
    509c:	000502c1 	jmpi	502c <_fflush_r>
    50a0:	00800074 	movhi	r2,1
    50a4:	10978704 	addi	r2,r2,24092
    50a8:	11000017 	ldw	r4,0(r2)
    50ac:	01400034 	movhi	r5,0
    50b0:	29540b04 	addi	r5,r5,20524
    50b4:	0005e0c1 	jmpi	5e0c <_fwalk_reent>

000050b8 <__fp_unlock>:
    50b8:	0005883a 	mov	r2,zero
    50bc:	f800283a 	ret

000050c0 <_cleanup_r>:
    50c0:	01400074 	movhi	r5,1
    50c4:	29657104 	addi	r5,r5,-27196
    50c8:	0005e0c1 	jmpi	5e0c <_fwalk_reent>

000050cc <__sinit.part.1>:
    50cc:	defff704 	addi	sp,sp,-36
    50d0:	00c00034 	movhi	r3,0
    50d4:	dfc00815 	stw	ra,32(sp)
    50d8:	ddc00715 	stw	r23,28(sp)
    50dc:	dd800615 	stw	r22,24(sp)
    50e0:	dd400515 	stw	r21,20(sp)
    50e4:	dd000415 	stw	r20,16(sp)
    50e8:	dcc00315 	stw	r19,12(sp)
    50ec:	dc800215 	stw	r18,8(sp)
    50f0:	dc400115 	stw	r17,4(sp)
    50f4:	dc000015 	stw	r16,0(sp)
    50f8:	18d43004 	addi	r3,r3,20672
    50fc:	24000117 	ldw	r16,4(r4)
    5100:	20c00f15 	stw	r3,60(r4)
    5104:	2080bb04 	addi	r2,r4,748
    5108:	00c000c4 	movi	r3,3
    510c:	20c0b915 	stw	r3,740(r4)
    5110:	2080ba15 	stw	r2,744(r4)
    5114:	2000b815 	stw	zero,736(r4)
    5118:	05c00204 	movi	r23,8
    511c:	00800104 	movi	r2,4
    5120:	2025883a 	mov	r18,r4
    5124:	b80d883a 	mov	r6,r23
    5128:	81001704 	addi	r4,r16,92
    512c:	000b883a 	mov	r5,zero
    5130:	80000015 	stw	zero,0(r16)
    5134:	80000115 	stw	zero,4(r16)
    5138:	80000215 	stw	zero,8(r16)
    513c:	8080030d 	sth	r2,12(r16)
    5140:	80001915 	stw	zero,100(r16)
    5144:	8000038d 	sth	zero,14(r16)
    5148:	80000415 	stw	zero,16(r16)
    514c:	80000515 	stw	zero,20(r16)
    5150:	80000615 	stw	zero,24(r16)
    5154:	00064f00 	call	64f0 <memset>
    5158:	05800034 	movhi	r22,0
    515c:	94400217 	ldw	r17,8(r18)
    5160:	05400034 	movhi	r21,0
    5164:	05000034 	movhi	r20,0
    5168:	04c00034 	movhi	r19,0
    516c:	b59efb04 	addi	r22,r22,31724
    5170:	ad5f1204 	addi	r21,r21,31816
    5174:	a51f3104 	addi	r20,r20,31940
    5178:	9cdf4804 	addi	r19,r19,32032
    517c:	85800815 	stw	r22,32(r16)
    5180:	85400915 	stw	r21,36(r16)
    5184:	85000a15 	stw	r20,40(r16)
    5188:	84c00b15 	stw	r19,44(r16)
    518c:	84000715 	stw	r16,28(r16)
    5190:	00800284 	movi	r2,10
    5194:	8880030d 	sth	r2,12(r17)
    5198:	00800044 	movi	r2,1
    519c:	b80d883a 	mov	r6,r23
    51a0:	89001704 	addi	r4,r17,92
    51a4:	000b883a 	mov	r5,zero
    51a8:	88000015 	stw	zero,0(r17)
    51ac:	88000115 	stw	zero,4(r17)
    51b0:	88000215 	stw	zero,8(r17)
    51b4:	88001915 	stw	zero,100(r17)
    51b8:	8880038d 	sth	r2,14(r17)
    51bc:	88000415 	stw	zero,16(r17)
    51c0:	88000515 	stw	zero,20(r17)
    51c4:	88000615 	stw	zero,24(r17)
    51c8:	00064f00 	call	64f0 <memset>
    51cc:	94000317 	ldw	r16,12(r18)
    51d0:	00800484 	movi	r2,18
    51d4:	8c400715 	stw	r17,28(r17)
    51d8:	8d800815 	stw	r22,32(r17)
    51dc:	8d400915 	stw	r21,36(r17)
    51e0:	8d000a15 	stw	r20,40(r17)
    51e4:	8cc00b15 	stw	r19,44(r17)
    51e8:	8080030d 	sth	r2,12(r16)
    51ec:	00800084 	movi	r2,2
    51f0:	80000015 	stw	zero,0(r16)
    51f4:	80000115 	stw	zero,4(r16)
    51f8:	80000215 	stw	zero,8(r16)
    51fc:	80001915 	stw	zero,100(r16)
    5200:	8080038d 	sth	r2,14(r16)
    5204:	80000415 	stw	zero,16(r16)
    5208:	80000515 	stw	zero,20(r16)
    520c:	80000615 	stw	zero,24(r16)
    5210:	b80d883a 	mov	r6,r23
    5214:	000b883a 	mov	r5,zero
    5218:	81001704 	addi	r4,r16,92
    521c:	00064f00 	call	64f0 <memset>
    5220:	00800044 	movi	r2,1
    5224:	84000715 	stw	r16,28(r16)
    5228:	85800815 	stw	r22,32(r16)
    522c:	85400915 	stw	r21,36(r16)
    5230:	85000a15 	stw	r20,40(r16)
    5234:	84c00b15 	stw	r19,44(r16)
    5238:	90800e15 	stw	r2,56(r18)
    523c:	dfc00817 	ldw	ra,32(sp)
    5240:	ddc00717 	ldw	r23,28(sp)
    5244:	dd800617 	ldw	r22,24(sp)
    5248:	dd400517 	ldw	r21,20(sp)
    524c:	dd000417 	ldw	r20,16(sp)
    5250:	dcc00317 	ldw	r19,12(sp)
    5254:	dc800217 	ldw	r18,8(sp)
    5258:	dc400117 	ldw	r17,4(sp)
    525c:	dc000017 	ldw	r16,0(sp)
    5260:	dec00904 	addi	sp,sp,36
    5264:	f800283a 	ret

00005268 <__fp_lock>:
    5268:	0005883a 	mov	r2,zero
    526c:	f800283a 	ret

00005270 <__sfmoreglue>:
    5270:	defffc04 	addi	sp,sp,-16
    5274:	dc400115 	stw	r17,4(sp)
    5278:	2c7fffc4 	addi	r17,r5,-1
    527c:	8c401a24 	muli	r17,r17,104
    5280:	dc800215 	stw	r18,8(sp)
    5284:	2825883a 	mov	r18,r5
    5288:	89401d04 	addi	r5,r17,116
    528c:	dc000015 	stw	r16,0(sp)
    5290:	dfc00315 	stw	ra,12(sp)
    5294:	00006180 	call	618 <_malloc_r>
    5298:	1021883a 	mov	r16,r2
    529c:	10000726 	beq	r2,zero,52bc <__sfmoreglue+0x4c>
    52a0:	11000304 	addi	r4,r2,12
    52a4:	10000015 	stw	zero,0(r2)
    52a8:	14800115 	stw	r18,4(r2)
    52ac:	11000215 	stw	r4,8(r2)
    52b0:	89801a04 	addi	r6,r17,104
    52b4:	000b883a 	mov	r5,zero
    52b8:	00064f00 	call	64f0 <memset>
    52bc:	8005883a 	mov	r2,r16
    52c0:	dfc00317 	ldw	ra,12(sp)
    52c4:	dc800217 	ldw	r18,8(sp)
    52c8:	dc400117 	ldw	r17,4(sp)
    52cc:	dc000017 	ldw	r16,0(sp)
    52d0:	dec00404 	addi	sp,sp,16
    52d4:	f800283a 	ret

000052d8 <__sfp>:
    52d8:	defffb04 	addi	sp,sp,-20
    52dc:	dc000015 	stw	r16,0(sp)
    52e0:	04000074 	movhi	r16,1
    52e4:	84178704 	addi	r16,r16,24092
    52e8:	dcc00315 	stw	r19,12(sp)
    52ec:	2027883a 	mov	r19,r4
    52f0:	81000017 	ldw	r4,0(r16)
    52f4:	dfc00415 	stw	ra,16(sp)
    52f8:	dc800215 	stw	r18,8(sp)
    52fc:	20800e17 	ldw	r2,56(r4)
    5300:	dc400115 	stw	r17,4(sp)
    5304:	1000021e 	bne	r2,zero,5310 <__sfp+0x38>
    5308:	00050cc0 	call	50cc <__sinit.part.1>
    530c:	81000017 	ldw	r4,0(r16)
    5310:	2480b804 	addi	r18,r4,736
    5314:	047fffc4 	movi	r17,-1
    5318:	91000117 	ldw	r4,4(r18)
    531c:	94000217 	ldw	r16,8(r18)
    5320:	213fffc4 	addi	r4,r4,-1
    5324:	20000a16 	blt	r4,zero,5350 <__sfp+0x78>
    5328:	8080030f 	ldh	r2,12(r16)
    532c:	10000c26 	beq	r2,zero,5360 <__sfp+0x88>
    5330:	80c01d04 	addi	r3,r16,116
    5334:	00000206 	br	5340 <__sfp+0x68>
    5338:	18bfe60f 	ldh	r2,-104(r3)
    533c:	10000826 	beq	r2,zero,5360 <__sfp+0x88>
    5340:	213fffc4 	addi	r4,r4,-1
    5344:	1c3ffd04 	addi	r16,r3,-12
    5348:	18c01a04 	addi	r3,r3,104
    534c:	247ffa1e 	bne	r4,r17,5338 <__alt_data_end+0xf8005338>
    5350:	90800017 	ldw	r2,0(r18)
    5354:	10001d26 	beq	r2,zero,53cc <__sfp+0xf4>
    5358:	1025883a 	mov	r18,r2
    535c:	003fee06 	br	5318 <__alt_data_end+0xf8005318>
    5360:	00bfffc4 	movi	r2,-1
    5364:	8080038d 	sth	r2,14(r16)
    5368:	00800044 	movi	r2,1
    536c:	8080030d 	sth	r2,12(r16)
    5370:	80001915 	stw	zero,100(r16)
    5374:	80000015 	stw	zero,0(r16)
    5378:	80000215 	stw	zero,8(r16)
    537c:	80000115 	stw	zero,4(r16)
    5380:	80000415 	stw	zero,16(r16)
    5384:	80000515 	stw	zero,20(r16)
    5388:	80000615 	stw	zero,24(r16)
    538c:	01800204 	movi	r6,8
    5390:	000b883a 	mov	r5,zero
    5394:	81001704 	addi	r4,r16,92
    5398:	00064f00 	call	64f0 <memset>
    539c:	8005883a 	mov	r2,r16
    53a0:	80000c15 	stw	zero,48(r16)
    53a4:	80000d15 	stw	zero,52(r16)
    53a8:	80001115 	stw	zero,68(r16)
    53ac:	80001215 	stw	zero,72(r16)
    53b0:	dfc00417 	ldw	ra,16(sp)
    53b4:	dcc00317 	ldw	r19,12(sp)
    53b8:	dc800217 	ldw	r18,8(sp)
    53bc:	dc400117 	ldw	r17,4(sp)
    53c0:	dc000017 	ldw	r16,0(sp)
    53c4:	dec00504 	addi	sp,sp,20
    53c8:	f800283a 	ret
    53cc:	01400104 	movi	r5,4
    53d0:	9809883a 	mov	r4,r19
    53d4:	00052700 	call	5270 <__sfmoreglue>
    53d8:	90800015 	stw	r2,0(r18)
    53dc:	103fde1e 	bne	r2,zero,5358 <__alt_data_end+0xf8005358>
    53e0:	00800304 	movi	r2,12
    53e4:	98800015 	stw	r2,0(r19)
    53e8:	0005883a 	mov	r2,zero
    53ec:	003ff006 	br	53b0 <__alt_data_end+0xf80053b0>

000053f0 <_cleanup>:
    53f0:	00800074 	movhi	r2,1
    53f4:	10978704 	addi	r2,r2,24092
    53f8:	11000017 	ldw	r4,0(r2)
    53fc:	01400074 	movhi	r5,1
    5400:	29657104 	addi	r5,r5,-27196
    5404:	0005e0c1 	jmpi	5e0c <_fwalk_reent>

00005408 <__sinit>:
    5408:	20800e17 	ldw	r2,56(r4)
    540c:	10000126 	beq	r2,zero,5414 <__sinit+0xc>
    5410:	f800283a 	ret
    5414:	00050cc1 	jmpi	50cc <__sinit.part.1>

00005418 <__sfp_lock_acquire>:
    5418:	f800283a 	ret

0000541c <__sfp_lock_release>:
    541c:	f800283a 	ret

00005420 <__sinit_lock_acquire>:
    5420:	f800283a 	ret

00005424 <__sinit_lock_release>:
    5424:	f800283a 	ret

00005428 <__fp_lock_all>:
    5428:	00800074 	movhi	r2,1
    542c:	10978804 	addi	r2,r2,24096
    5430:	11000017 	ldw	r4,0(r2)
    5434:	01400034 	movhi	r5,0
    5438:	29549a04 	addi	r5,r5,21096
    543c:	0005d481 	jmpi	5d48 <_fwalk>

00005440 <__fp_unlock_all>:
    5440:	00800074 	movhi	r2,1
    5444:	10978804 	addi	r2,r2,24096
    5448:	11000017 	ldw	r4,0(r2)
    544c:	01400034 	movhi	r5,0
    5450:	29542e04 	addi	r5,r5,20664
    5454:	0005d481 	jmpi	5d48 <_fwalk>

00005458 <_malloc_trim_r>:
    5458:	defffb04 	addi	sp,sp,-20
    545c:	dcc00315 	stw	r19,12(sp)
    5460:	04c00074 	movhi	r19,1
    5464:	dc800215 	stw	r18,8(sp)
    5468:	dc400115 	stw	r17,4(sp)
    546c:	dc000015 	stw	r16,0(sp)
    5470:	dfc00415 	stw	ra,16(sp)
    5474:	2821883a 	mov	r16,r5
    5478:	9cd0ac04 	addi	r19,r19,17072
    547c:	2025883a 	mov	r18,r4
    5480:	000d5c80 	call	d5c8 <__malloc_lock>
    5484:	98800217 	ldw	r2,8(r19)
    5488:	14400117 	ldw	r17,4(r2)
    548c:	00bfff04 	movi	r2,-4
    5490:	88a2703a 	and	r17,r17,r2
    5494:	8c21c83a 	sub	r16,r17,r16
    5498:	8403fbc4 	addi	r16,r16,4079
    549c:	8020d33a 	srli	r16,r16,12
    54a0:	0083ffc4 	movi	r2,4095
    54a4:	843fffc4 	addi	r16,r16,-1
    54a8:	8020933a 	slli	r16,r16,12
    54ac:	1400060e 	bge	r2,r16,54c8 <_malloc_trim_r+0x70>
    54b0:	000b883a 	mov	r5,zero
    54b4:	9009883a 	mov	r4,r18
    54b8:	0000f640 	call	f64 <_sbrk_r>
    54bc:	98c00217 	ldw	r3,8(r19)
    54c0:	1c47883a 	add	r3,r3,r17
    54c4:	10c00a26 	beq	r2,r3,54f0 <_malloc_trim_r+0x98>
    54c8:	9009883a 	mov	r4,r18
    54cc:	000d5ec0 	call	d5ec <__malloc_unlock>
    54d0:	0005883a 	mov	r2,zero
    54d4:	dfc00417 	ldw	ra,16(sp)
    54d8:	dcc00317 	ldw	r19,12(sp)
    54dc:	dc800217 	ldw	r18,8(sp)
    54e0:	dc400117 	ldw	r17,4(sp)
    54e4:	dc000017 	ldw	r16,0(sp)
    54e8:	dec00504 	addi	sp,sp,20
    54ec:	f800283a 	ret
    54f0:	040bc83a 	sub	r5,zero,r16
    54f4:	9009883a 	mov	r4,r18
    54f8:	0000f640 	call	f64 <_sbrk_r>
    54fc:	00ffffc4 	movi	r3,-1
    5500:	10c00d26 	beq	r2,r3,5538 <_malloc_trim_r+0xe0>
    5504:	00c00074 	movhi	r3,1
    5508:	18de9904 	addi	r3,r3,31332
    550c:	18800017 	ldw	r2,0(r3)
    5510:	99000217 	ldw	r4,8(r19)
    5514:	8c23c83a 	sub	r17,r17,r16
    5518:	8c400054 	ori	r17,r17,1
    551c:	1421c83a 	sub	r16,r2,r16
    5520:	24400115 	stw	r17,4(r4)
    5524:	9009883a 	mov	r4,r18
    5528:	1c000015 	stw	r16,0(r3)
    552c:	000d5ec0 	call	d5ec <__malloc_unlock>
    5530:	00800044 	movi	r2,1
    5534:	003fe706 	br	54d4 <__alt_data_end+0xf80054d4>
    5538:	000b883a 	mov	r5,zero
    553c:	9009883a 	mov	r4,r18
    5540:	0000f640 	call	f64 <_sbrk_r>
    5544:	99000217 	ldw	r4,8(r19)
    5548:	014003c4 	movi	r5,15
    554c:	1107c83a 	sub	r3,r2,r4
    5550:	28ffdd0e 	bge	r5,r3,54c8 <__alt_data_end+0xf80054c8>
    5554:	01400074 	movhi	r5,1
    5558:	29578504 	addi	r5,r5,24084
    555c:	29400017 	ldw	r5,0(r5)
    5560:	18c00054 	ori	r3,r3,1
    5564:	20c00115 	stw	r3,4(r4)
    5568:	00c00074 	movhi	r3,1
    556c:	1145c83a 	sub	r2,r2,r5
    5570:	18de9904 	addi	r3,r3,31332
    5574:	18800015 	stw	r2,0(r3)
    5578:	003fd306 	br	54c8 <__alt_data_end+0xf80054c8>

0000557c <_free_r>:
    557c:	28004126 	beq	r5,zero,5684 <_free_r+0x108>
    5580:	defffd04 	addi	sp,sp,-12
    5584:	dc400115 	stw	r17,4(sp)
    5588:	dc000015 	stw	r16,0(sp)
    558c:	2023883a 	mov	r17,r4
    5590:	2821883a 	mov	r16,r5
    5594:	dfc00215 	stw	ra,8(sp)
    5598:	000d5c80 	call	d5c8 <__malloc_lock>
    559c:	81ffff17 	ldw	r7,-4(r16)
    55a0:	00bfff84 	movi	r2,-2
    55a4:	01000074 	movhi	r4,1
    55a8:	81bffe04 	addi	r6,r16,-8
    55ac:	3884703a 	and	r2,r7,r2
    55b0:	2110ac04 	addi	r4,r4,17072
    55b4:	308b883a 	add	r5,r6,r2
    55b8:	2a400117 	ldw	r9,4(r5)
    55bc:	22000217 	ldw	r8,8(r4)
    55c0:	00ffff04 	movi	r3,-4
    55c4:	48c6703a 	and	r3,r9,r3
    55c8:	2a005726 	beq	r5,r8,5728 <_free_r+0x1ac>
    55cc:	28c00115 	stw	r3,4(r5)
    55d0:	39c0004c 	andi	r7,r7,1
    55d4:	3800091e 	bne	r7,zero,55fc <_free_r+0x80>
    55d8:	823ffe17 	ldw	r8,-8(r16)
    55dc:	22400204 	addi	r9,r4,8
    55e0:	320dc83a 	sub	r6,r6,r8
    55e4:	31c00217 	ldw	r7,8(r6)
    55e8:	1205883a 	add	r2,r2,r8
    55ec:	3a406526 	beq	r7,r9,5784 <_free_r+0x208>
    55f0:	32000317 	ldw	r8,12(r6)
    55f4:	3a000315 	stw	r8,12(r7)
    55f8:	41c00215 	stw	r7,8(r8)
    55fc:	28cf883a 	add	r7,r5,r3
    5600:	39c00117 	ldw	r7,4(r7)
    5604:	39c0004c 	andi	r7,r7,1
    5608:	38003a26 	beq	r7,zero,56f4 <_free_r+0x178>
    560c:	10c00054 	ori	r3,r2,1
    5610:	30c00115 	stw	r3,4(r6)
    5614:	3087883a 	add	r3,r6,r2
    5618:	18800015 	stw	r2,0(r3)
    561c:	00c07fc4 	movi	r3,511
    5620:	18801936 	bltu	r3,r2,5688 <_free_r+0x10c>
    5624:	1004d0fa 	srli	r2,r2,3
    5628:	01c00044 	movi	r7,1
    562c:	21400117 	ldw	r5,4(r4)
    5630:	10c00044 	addi	r3,r2,1
    5634:	18c7883a 	add	r3,r3,r3
    5638:	1005d0ba 	srai	r2,r2,2
    563c:	18c7883a 	add	r3,r3,r3
    5640:	18c7883a 	add	r3,r3,r3
    5644:	1907883a 	add	r3,r3,r4
    5648:	3884983a 	sll	r2,r7,r2
    564c:	19c00017 	ldw	r7,0(r3)
    5650:	1a3ffe04 	addi	r8,r3,-8
    5654:	1144b03a 	or	r2,r2,r5
    5658:	32000315 	stw	r8,12(r6)
    565c:	31c00215 	stw	r7,8(r6)
    5660:	20800115 	stw	r2,4(r4)
    5664:	19800015 	stw	r6,0(r3)
    5668:	39800315 	stw	r6,12(r7)
    566c:	8809883a 	mov	r4,r17
    5670:	dfc00217 	ldw	ra,8(sp)
    5674:	dc400117 	ldw	r17,4(sp)
    5678:	dc000017 	ldw	r16,0(sp)
    567c:	dec00304 	addi	sp,sp,12
    5680:	000d5ec1 	jmpi	d5ec <__malloc_unlock>
    5684:	f800283a 	ret
    5688:	100ad27a 	srli	r5,r2,9
    568c:	00c00104 	movi	r3,4
    5690:	19404a36 	bltu	r3,r5,57bc <_free_r+0x240>
    5694:	100ad1ba 	srli	r5,r2,6
    5698:	28c00e44 	addi	r3,r5,57
    569c:	18c7883a 	add	r3,r3,r3
    56a0:	29400e04 	addi	r5,r5,56
    56a4:	18c7883a 	add	r3,r3,r3
    56a8:	18c7883a 	add	r3,r3,r3
    56ac:	1909883a 	add	r4,r3,r4
    56b0:	20c00017 	ldw	r3,0(r4)
    56b4:	01c00074 	movhi	r7,1
    56b8:	213ffe04 	addi	r4,r4,-8
    56bc:	39d0ac04 	addi	r7,r7,17072
    56c0:	20c04426 	beq	r4,r3,57d4 <_free_r+0x258>
    56c4:	01ffff04 	movi	r7,-4
    56c8:	19400117 	ldw	r5,4(r3)
    56cc:	29ca703a 	and	r5,r5,r7
    56d0:	1140022e 	bgeu	r2,r5,56dc <_free_r+0x160>
    56d4:	18c00217 	ldw	r3,8(r3)
    56d8:	20fffb1e 	bne	r4,r3,56c8 <__alt_data_end+0xf80056c8>
    56dc:	19000317 	ldw	r4,12(r3)
    56e0:	31000315 	stw	r4,12(r6)
    56e4:	30c00215 	stw	r3,8(r6)
    56e8:	21800215 	stw	r6,8(r4)
    56ec:	19800315 	stw	r6,12(r3)
    56f0:	003fde06 	br	566c <__alt_data_end+0xf800566c>
    56f4:	29c00217 	ldw	r7,8(r5)
    56f8:	10c5883a 	add	r2,r2,r3
    56fc:	00c00074 	movhi	r3,1
    5700:	18d0ae04 	addi	r3,r3,17080
    5704:	38c03b26 	beq	r7,r3,57f4 <_free_r+0x278>
    5708:	2a000317 	ldw	r8,12(r5)
    570c:	11400054 	ori	r5,r2,1
    5710:	3087883a 	add	r3,r6,r2
    5714:	3a000315 	stw	r8,12(r7)
    5718:	41c00215 	stw	r7,8(r8)
    571c:	31400115 	stw	r5,4(r6)
    5720:	18800015 	stw	r2,0(r3)
    5724:	003fbd06 	br	561c <__alt_data_end+0xf800561c>
    5728:	39c0004c 	andi	r7,r7,1
    572c:	10c5883a 	add	r2,r2,r3
    5730:	3800071e 	bne	r7,zero,5750 <_free_r+0x1d4>
    5734:	81fffe17 	ldw	r7,-8(r16)
    5738:	31cdc83a 	sub	r6,r6,r7
    573c:	30c00317 	ldw	r3,12(r6)
    5740:	31400217 	ldw	r5,8(r6)
    5744:	11c5883a 	add	r2,r2,r7
    5748:	28c00315 	stw	r3,12(r5)
    574c:	19400215 	stw	r5,8(r3)
    5750:	10c00054 	ori	r3,r2,1
    5754:	30c00115 	stw	r3,4(r6)
    5758:	00c00074 	movhi	r3,1
    575c:	18d78604 	addi	r3,r3,24088
    5760:	18c00017 	ldw	r3,0(r3)
    5764:	21800215 	stw	r6,8(r4)
    5768:	10ffc036 	bltu	r2,r3,566c <__alt_data_end+0xf800566c>
    576c:	00800074 	movhi	r2,1
    5770:	109e8004 	addi	r2,r2,31232
    5774:	11400017 	ldw	r5,0(r2)
    5778:	8809883a 	mov	r4,r17
    577c:	00054580 	call	5458 <_malloc_trim_r>
    5780:	003fba06 	br	566c <__alt_data_end+0xf800566c>
    5784:	28c9883a 	add	r4,r5,r3
    5788:	21000117 	ldw	r4,4(r4)
    578c:	2100004c 	andi	r4,r4,1
    5790:	2000391e 	bne	r4,zero,5878 <_free_r+0x2fc>
    5794:	29c00217 	ldw	r7,8(r5)
    5798:	29000317 	ldw	r4,12(r5)
    579c:	1885883a 	add	r2,r3,r2
    57a0:	10c00054 	ori	r3,r2,1
    57a4:	39000315 	stw	r4,12(r7)
    57a8:	21c00215 	stw	r7,8(r4)
    57ac:	30c00115 	stw	r3,4(r6)
    57b0:	308d883a 	add	r6,r6,r2
    57b4:	30800015 	stw	r2,0(r6)
    57b8:	003fac06 	br	566c <__alt_data_end+0xf800566c>
    57bc:	00c00504 	movi	r3,20
    57c0:	19401536 	bltu	r3,r5,5818 <_free_r+0x29c>
    57c4:	28c01704 	addi	r3,r5,92
    57c8:	18c7883a 	add	r3,r3,r3
    57cc:	294016c4 	addi	r5,r5,91
    57d0:	003fb406 	br	56a4 <__alt_data_end+0xf80056a4>
    57d4:	280bd0ba 	srai	r5,r5,2
    57d8:	00c00044 	movi	r3,1
    57dc:	38800117 	ldw	r2,4(r7)
    57e0:	194a983a 	sll	r5,r3,r5
    57e4:	2007883a 	mov	r3,r4
    57e8:	2884b03a 	or	r2,r5,r2
    57ec:	38800115 	stw	r2,4(r7)
    57f0:	003fbb06 	br	56e0 <__alt_data_end+0xf80056e0>
    57f4:	21800515 	stw	r6,20(r4)
    57f8:	21800415 	stw	r6,16(r4)
    57fc:	10c00054 	ori	r3,r2,1
    5800:	31c00315 	stw	r7,12(r6)
    5804:	31c00215 	stw	r7,8(r6)
    5808:	30c00115 	stw	r3,4(r6)
    580c:	308d883a 	add	r6,r6,r2
    5810:	30800015 	stw	r2,0(r6)
    5814:	003f9506 	br	566c <__alt_data_end+0xf800566c>
    5818:	00c01504 	movi	r3,84
    581c:	19400536 	bltu	r3,r5,5834 <_free_r+0x2b8>
    5820:	100ad33a 	srli	r5,r2,12
    5824:	28c01bc4 	addi	r3,r5,111
    5828:	18c7883a 	add	r3,r3,r3
    582c:	29401b84 	addi	r5,r5,110
    5830:	003f9c06 	br	56a4 <__alt_data_end+0xf80056a4>
    5834:	00c05504 	movi	r3,340
    5838:	19400536 	bltu	r3,r5,5850 <_free_r+0x2d4>
    583c:	100ad3fa 	srli	r5,r2,15
    5840:	28c01e04 	addi	r3,r5,120
    5844:	18c7883a 	add	r3,r3,r3
    5848:	29401dc4 	addi	r5,r5,119
    584c:	003f9506 	br	56a4 <__alt_data_end+0xf80056a4>
    5850:	00c15504 	movi	r3,1364
    5854:	19400536 	bltu	r3,r5,586c <_free_r+0x2f0>
    5858:	100ad4ba 	srli	r5,r2,18
    585c:	28c01f44 	addi	r3,r5,125
    5860:	18c7883a 	add	r3,r3,r3
    5864:	29401f04 	addi	r5,r5,124
    5868:	003f8e06 	br	56a4 <__alt_data_end+0xf80056a4>
    586c:	00c03f84 	movi	r3,254
    5870:	01401f84 	movi	r5,126
    5874:	003f8b06 	br	56a4 <__alt_data_end+0xf80056a4>
    5878:	10c00054 	ori	r3,r2,1
    587c:	30c00115 	stw	r3,4(r6)
    5880:	308d883a 	add	r6,r6,r2
    5884:	30800015 	stw	r2,0(r6)
    5888:	003f7806 	br	566c <__alt_data_end+0xf800566c>

0000588c <__sfvwrite_r>:
    588c:	30800217 	ldw	r2,8(r6)
    5890:	10006726 	beq	r2,zero,5a30 <__sfvwrite_r+0x1a4>
    5894:	28c0030b 	ldhu	r3,12(r5)
    5898:	defff404 	addi	sp,sp,-48
    589c:	dd400715 	stw	r21,28(sp)
    58a0:	dd000615 	stw	r20,24(sp)
    58a4:	dc000215 	stw	r16,8(sp)
    58a8:	dfc00b15 	stw	ra,44(sp)
    58ac:	df000a15 	stw	fp,40(sp)
    58b0:	ddc00915 	stw	r23,36(sp)
    58b4:	dd800815 	stw	r22,32(sp)
    58b8:	dcc00515 	stw	r19,20(sp)
    58bc:	dc800415 	stw	r18,16(sp)
    58c0:	dc400315 	stw	r17,12(sp)
    58c4:	1880020c 	andi	r2,r3,8
    58c8:	2821883a 	mov	r16,r5
    58cc:	202b883a 	mov	r21,r4
    58d0:	3029883a 	mov	r20,r6
    58d4:	10002726 	beq	r2,zero,5974 <__sfvwrite_r+0xe8>
    58d8:	28800417 	ldw	r2,16(r5)
    58dc:	10002526 	beq	r2,zero,5974 <__sfvwrite_r+0xe8>
    58e0:	1880008c 	andi	r2,r3,2
    58e4:	a4400017 	ldw	r17,0(r20)
    58e8:	10002a26 	beq	r2,zero,5994 <__sfvwrite_r+0x108>
    58ec:	05a00034 	movhi	r22,32768
    58f0:	0027883a 	mov	r19,zero
    58f4:	0025883a 	mov	r18,zero
    58f8:	b5bf0004 	addi	r22,r22,-1024
    58fc:	980d883a 	mov	r6,r19
    5900:	a809883a 	mov	r4,r21
    5904:	90004626 	beq	r18,zero,5a20 <__sfvwrite_r+0x194>
    5908:	900f883a 	mov	r7,r18
    590c:	b480022e 	bgeu	r22,r18,5918 <__sfvwrite_r+0x8c>
    5910:	01e00034 	movhi	r7,32768
    5914:	39ff0004 	addi	r7,r7,-1024
    5918:	80800917 	ldw	r2,36(r16)
    591c:	81400717 	ldw	r5,28(r16)
    5920:	103ee83a 	callr	r2
    5924:	0080570e 	bge	zero,r2,5a84 <__sfvwrite_r+0x1f8>
    5928:	a0c00217 	ldw	r3,8(r20)
    592c:	98a7883a 	add	r19,r19,r2
    5930:	90a5c83a 	sub	r18,r18,r2
    5934:	1885c83a 	sub	r2,r3,r2
    5938:	a0800215 	stw	r2,8(r20)
    593c:	103fef1e 	bne	r2,zero,58fc <__alt_data_end+0xf80058fc>
    5940:	0005883a 	mov	r2,zero
    5944:	dfc00b17 	ldw	ra,44(sp)
    5948:	df000a17 	ldw	fp,40(sp)
    594c:	ddc00917 	ldw	r23,36(sp)
    5950:	dd800817 	ldw	r22,32(sp)
    5954:	dd400717 	ldw	r21,28(sp)
    5958:	dd000617 	ldw	r20,24(sp)
    595c:	dcc00517 	ldw	r19,20(sp)
    5960:	dc800417 	ldw	r18,16(sp)
    5964:	dc400317 	ldw	r17,12(sp)
    5968:	dc000217 	ldw	r16,8(sp)
    596c:	dec00c04 	addi	sp,sp,48
    5970:	f800283a 	ret
    5974:	800b883a 	mov	r5,r16
    5978:	a809883a 	mov	r4,r21
    597c:	00034340 	call	3434 <__swsetup_r>
    5980:	1000eb1e 	bne	r2,zero,5d30 <__sfvwrite_r+0x4a4>
    5984:	80c0030b 	ldhu	r3,12(r16)
    5988:	a4400017 	ldw	r17,0(r20)
    598c:	1880008c 	andi	r2,r3,2
    5990:	103fd61e 	bne	r2,zero,58ec <__alt_data_end+0xf80058ec>
    5994:	1880004c 	andi	r2,r3,1
    5998:	10003f1e 	bne	r2,zero,5a98 <__sfvwrite_r+0x20c>
    599c:	0039883a 	mov	fp,zero
    59a0:	0025883a 	mov	r18,zero
    59a4:	90001a26 	beq	r18,zero,5a10 <__sfvwrite_r+0x184>
    59a8:	1880800c 	andi	r2,r3,512
    59ac:	84c00217 	ldw	r19,8(r16)
    59b0:	10002126 	beq	r2,zero,5a38 <__sfvwrite_r+0x1ac>
    59b4:	982f883a 	mov	r23,r19
    59b8:	94c09336 	bltu	r18,r19,5c08 <__sfvwrite_r+0x37c>
    59bc:	1881200c 	andi	r2,r3,1152
    59c0:	10009e1e 	bne	r2,zero,5c3c <__sfvwrite_r+0x3b0>
    59c4:	81000017 	ldw	r4,0(r16)
    59c8:	b80d883a 	mov	r6,r23
    59cc:	e00b883a 	mov	r5,fp
    59d0:	00063940 	call	6394 <memmove>
    59d4:	80c00217 	ldw	r3,8(r16)
    59d8:	81000017 	ldw	r4,0(r16)
    59dc:	9005883a 	mov	r2,r18
    59e0:	1ce7c83a 	sub	r19,r3,r19
    59e4:	25cf883a 	add	r7,r4,r23
    59e8:	84c00215 	stw	r19,8(r16)
    59ec:	81c00015 	stw	r7,0(r16)
    59f0:	a0c00217 	ldw	r3,8(r20)
    59f4:	e0b9883a 	add	fp,fp,r2
    59f8:	90a5c83a 	sub	r18,r18,r2
    59fc:	18a7c83a 	sub	r19,r3,r2
    5a00:	a4c00215 	stw	r19,8(r20)
    5a04:	983fce26 	beq	r19,zero,5940 <__alt_data_end+0xf8005940>
    5a08:	80c0030b 	ldhu	r3,12(r16)
    5a0c:	903fe61e 	bne	r18,zero,59a8 <__alt_data_end+0xf80059a8>
    5a10:	8f000017 	ldw	fp,0(r17)
    5a14:	8c800117 	ldw	r18,4(r17)
    5a18:	8c400204 	addi	r17,r17,8
    5a1c:	003fe106 	br	59a4 <__alt_data_end+0xf80059a4>
    5a20:	8cc00017 	ldw	r19,0(r17)
    5a24:	8c800117 	ldw	r18,4(r17)
    5a28:	8c400204 	addi	r17,r17,8
    5a2c:	003fb306 	br	58fc <__alt_data_end+0xf80058fc>
    5a30:	0005883a 	mov	r2,zero
    5a34:	f800283a 	ret
    5a38:	81000017 	ldw	r4,0(r16)
    5a3c:	80800417 	ldw	r2,16(r16)
    5a40:	11005736 	bltu	r2,r4,5ba0 <__sfvwrite_r+0x314>
    5a44:	85c00517 	ldw	r23,20(r16)
    5a48:	95c05536 	bltu	r18,r23,5ba0 <__sfvwrite_r+0x314>
    5a4c:	00a00034 	movhi	r2,32768
    5a50:	10bfffc4 	addi	r2,r2,-1
    5a54:	9009883a 	mov	r4,r18
    5a58:	1480012e 	bgeu	r2,r18,5a60 <__sfvwrite_r+0x1d4>
    5a5c:	1009883a 	mov	r4,r2
    5a60:	b80b883a 	mov	r5,r23
    5a64:	000a8300 	call	a830 <__divsi3>
    5a68:	15cf383a 	mul	r7,r2,r23
    5a6c:	81400717 	ldw	r5,28(r16)
    5a70:	80800917 	ldw	r2,36(r16)
    5a74:	e00d883a 	mov	r6,fp
    5a78:	a809883a 	mov	r4,r21
    5a7c:	103ee83a 	callr	r2
    5a80:	00bfdb16 	blt	zero,r2,59f0 <__alt_data_end+0xf80059f0>
    5a84:	8080030b 	ldhu	r2,12(r16)
    5a88:	10801014 	ori	r2,r2,64
    5a8c:	8080030d 	sth	r2,12(r16)
    5a90:	00bfffc4 	movi	r2,-1
    5a94:	003fab06 	br	5944 <__alt_data_end+0xf8005944>
    5a98:	0027883a 	mov	r19,zero
    5a9c:	0011883a 	mov	r8,zero
    5aa0:	0039883a 	mov	fp,zero
    5aa4:	0025883a 	mov	r18,zero
    5aa8:	90001f26 	beq	r18,zero,5b28 <__sfvwrite_r+0x29c>
    5aac:	40005a26 	beq	r8,zero,5c18 <__sfvwrite_r+0x38c>
    5ab0:	982d883a 	mov	r22,r19
    5ab4:	94c0012e 	bgeu	r18,r19,5abc <__sfvwrite_r+0x230>
    5ab8:	902d883a 	mov	r22,r18
    5abc:	81000017 	ldw	r4,0(r16)
    5ac0:	80800417 	ldw	r2,16(r16)
    5ac4:	b02f883a 	mov	r23,r22
    5ac8:	81c00517 	ldw	r7,20(r16)
    5acc:	1100032e 	bgeu	r2,r4,5adc <__sfvwrite_r+0x250>
    5ad0:	80c00217 	ldw	r3,8(r16)
    5ad4:	38c7883a 	add	r3,r7,r3
    5ad8:	1d801816 	blt	r3,r22,5b3c <__sfvwrite_r+0x2b0>
    5adc:	b1c03e16 	blt	r22,r7,5bd8 <__sfvwrite_r+0x34c>
    5ae0:	80800917 	ldw	r2,36(r16)
    5ae4:	81400717 	ldw	r5,28(r16)
    5ae8:	e00d883a 	mov	r6,fp
    5aec:	da000115 	stw	r8,4(sp)
    5af0:	a809883a 	mov	r4,r21
    5af4:	103ee83a 	callr	r2
    5af8:	102f883a 	mov	r23,r2
    5afc:	da000117 	ldw	r8,4(sp)
    5b00:	00bfe00e 	bge	zero,r2,5a84 <__alt_data_end+0xf8005a84>
    5b04:	9de7c83a 	sub	r19,r19,r23
    5b08:	98001f26 	beq	r19,zero,5b88 <__sfvwrite_r+0x2fc>
    5b0c:	a0800217 	ldw	r2,8(r20)
    5b10:	e5f9883a 	add	fp,fp,r23
    5b14:	95e5c83a 	sub	r18,r18,r23
    5b18:	15efc83a 	sub	r23,r2,r23
    5b1c:	a5c00215 	stw	r23,8(r20)
    5b20:	b83f8726 	beq	r23,zero,5940 <__alt_data_end+0xf8005940>
    5b24:	903fe11e 	bne	r18,zero,5aac <__alt_data_end+0xf8005aac>
    5b28:	8f000017 	ldw	fp,0(r17)
    5b2c:	8c800117 	ldw	r18,4(r17)
    5b30:	0011883a 	mov	r8,zero
    5b34:	8c400204 	addi	r17,r17,8
    5b38:	003fdb06 	br	5aa8 <__alt_data_end+0xf8005aa8>
    5b3c:	180d883a 	mov	r6,r3
    5b40:	e00b883a 	mov	r5,fp
    5b44:	da000115 	stw	r8,4(sp)
    5b48:	d8c00015 	stw	r3,0(sp)
    5b4c:	00063940 	call	6394 <memmove>
    5b50:	d8c00017 	ldw	r3,0(sp)
    5b54:	80800017 	ldw	r2,0(r16)
    5b58:	800b883a 	mov	r5,r16
    5b5c:	a809883a 	mov	r4,r21
    5b60:	10c5883a 	add	r2,r2,r3
    5b64:	80800015 	stw	r2,0(r16)
    5b68:	d8c00015 	stw	r3,0(sp)
    5b6c:	000502c0 	call	502c <_fflush_r>
    5b70:	d8c00017 	ldw	r3,0(sp)
    5b74:	da000117 	ldw	r8,4(sp)
    5b78:	103fc21e 	bne	r2,zero,5a84 <__alt_data_end+0xf8005a84>
    5b7c:	182f883a 	mov	r23,r3
    5b80:	9de7c83a 	sub	r19,r19,r23
    5b84:	983fe11e 	bne	r19,zero,5b0c <__alt_data_end+0xf8005b0c>
    5b88:	800b883a 	mov	r5,r16
    5b8c:	a809883a 	mov	r4,r21
    5b90:	000502c0 	call	502c <_fflush_r>
    5b94:	103fbb1e 	bne	r2,zero,5a84 <__alt_data_end+0xf8005a84>
    5b98:	0011883a 	mov	r8,zero
    5b9c:	003fdb06 	br	5b0c <__alt_data_end+0xf8005b0c>
    5ba0:	94c0012e 	bgeu	r18,r19,5ba8 <__sfvwrite_r+0x31c>
    5ba4:	9027883a 	mov	r19,r18
    5ba8:	980d883a 	mov	r6,r19
    5bac:	e00b883a 	mov	r5,fp
    5bb0:	00063940 	call	6394 <memmove>
    5bb4:	80800217 	ldw	r2,8(r16)
    5bb8:	80c00017 	ldw	r3,0(r16)
    5bbc:	14c5c83a 	sub	r2,r2,r19
    5bc0:	1cc7883a 	add	r3,r3,r19
    5bc4:	80800215 	stw	r2,8(r16)
    5bc8:	80c00015 	stw	r3,0(r16)
    5bcc:	10004326 	beq	r2,zero,5cdc <__sfvwrite_r+0x450>
    5bd0:	9805883a 	mov	r2,r19
    5bd4:	003f8606 	br	59f0 <__alt_data_end+0xf80059f0>
    5bd8:	b00d883a 	mov	r6,r22
    5bdc:	e00b883a 	mov	r5,fp
    5be0:	da000115 	stw	r8,4(sp)
    5be4:	00063940 	call	6394 <memmove>
    5be8:	80800217 	ldw	r2,8(r16)
    5bec:	80c00017 	ldw	r3,0(r16)
    5bf0:	da000117 	ldw	r8,4(sp)
    5bf4:	1585c83a 	sub	r2,r2,r22
    5bf8:	1dad883a 	add	r22,r3,r22
    5bfc:	80800215 	stw	r2,8(r16)
    5c00:	85800015 	stw	r22,0(r16)
    5c04:	003fbf06 	br	5b04 <__alt_data_end+0xf8005b04>
    5c08:	81000017 	ldw	r4,0(r16)
    5c0c:	9027883a 	mov	r19,r18
    5c10:	902f883a 	mov	r23,r18
    5c14:	003f6c06 	br	59c8 <__alt_data_end+0xf80059c8>
    5c18:	900d883a 	mov	r6,r18
    5c1c:	01400284 	movi	r5,10
    5c20:	e009883a 	mov	r4,fp
    5c24:	00061680 	call	6168 <memchr>
    5c28:	10003e26 	beq	r2,zero,5d24 <__sfvwrite_r+0x498>
    5c2c:	10800044 	addi	r2,r2,1
    5c30:	1727c83a 	sub	r19,r2,fp
    5c34:	02000044 	movi	r8,1
    5c38:	003f9d06 	br	5ab0 <__alt_data_end+0xf8005ab0>
    5c3c:	80800517 	ldw	r2,20(r16)
    5c40:	81400417 	ldw	r5,16(r16)
    5c44:	81c00017 	ldw	r7,0(r16)
    5c48:	10a7883a 	add	r19,r2,r2
    5c4c:	9885883a 	add	r2,r19,r2
    5c50:	1026d7fa 	srli	r19,r2,31
    5c54:	396dc83a 	sub	r22,r7,r5
    5c58:	b1000044 	addi	r4,r22,1
    5c5c:	9885883a 	add	r2,r19,r2
    5c60:	1027d07a 	srai	r19,r2,1
    5c64:	2485883a 	add	r2,r4,r18
    5c68:	980d883a 	mov	r6,r19
    5c6c:	9880022e 	bgeu	r19,r2,5c78 <__sfvwrite_r+0x3ec>
    5c70:	1027883a 	mov	r19,r2
    5c74:	100d883a 	mov	r6,r2
    5c78:	18c1000c 	andi	r3,r3,1024
    5c7c:	18001c26 	beq	r3,zero,5cf0 <__sfvwrite_r+0x464>
    5c80:	300b883a 	mov	r5,r6
    5c84:	a809883a 	mov	r4,r21
    5c88:	00006180 	call	618 <_malloc_r>
    5c8c:	102f883a 	mov	r23,r2
    5c90:	10002926 	beq	r2,zero,5d38 <__sfvwrite_r+0x4ac>
    5c94:	81400417 	ldw	r5,16(r16)
    5c98:	b00d883a 	mov	r6,r22
    5c9c:	1009883a 	mov	r4,r2
    5ca0:	000624c0 	call	624c <memcpy>
    5ca4:	8080030b 	ldhu	r2,12(r16)
    5ca8:	00fedfc4 	movi	r3,-1153
    5cac:	10c4703a 	and	r2,r2,r3
    5cb0:	10802014 	ori	r2,r2,128
    5cb4:	8080030d 	sth	r2,12(r16)
    5cb8:	bd89883a 	add	r4,r23,r22
    5cbc:	9d8fc83a 	sub	r7,r19,r22
    5cc0:	85c00415 	stw	r23,16(r16)
    5cc4:	84c00515 	stw	r19,20(r16)
    5cc8:	81000015 	stw	r4,0(r16)
    5ccc:	9027883a 	mov	r19,r18
    5cd0:	81c00215 	stw	r7,8(r16)
    5cd4:	902f883a 	mov	r23,r18
    5cd8:	003f3b06 	br	59c8 <__alt_data_end+0xf80059c8>
    5cdc:	800b883a 	mov	r5,r16
    5ce0:	a809883a 	mov	r4,r21
    5ce4:	000502c0 	call	502c <_fflush_r>
    5ce8:	103fb926 	beq	r2,zero,5bd0 <__alt_data_end+0xf8005bd0>
    5cec:	003f6506 	br	5a84 <__alt_data_end+0xf8005a84>
    5cf0:	a809883a 	mov	r4,r21
    5cf4:	00076140 	call	7614 <_realloc_r>
    5cf8:	102f883a 	mov	r23,r2
    5cfc:	103fee1e 	bne	r2,zero,5cb8 <__alt_data_end+0xf8005cb8>
    5d00:	81400417 	ldw	r5,16(r16)
    5d04:	a809883a 	mov	r4,r21
    5d08:	000557c0 	call	557c <_free_r>
    5d0c:	8080030b 	ldhu	r2,12(r16)
    5d10:	00ffdfc4 	movi	r3,-129
    5d14:	1884703a 	and	r2,r3,r2
    5d18:	00c00304 	movi	r3,12
    5d1c:	a8c00015 	stw	r3,0(r21)
    5d20:	003f5906 	br	5a88 <__alt_data_end+0xf8005a88>
    5d24:	94c00044 	addi	r19,r18,1
    5d28:	02000044 	movi	r8,1
    5d2c:	003f6006 	br	5ab0 <__alt_data_end+0xf8005ab0>
    5d30:	00bfffc4 	movi	r2,-1
    5d34:	003f0306 	br	5944 <__alt_data_end+0xf8005944>
    5d38:	00800304 	movi	r2,12
    5d3c:	a8800015 	stw	r2,0(r21)
    5d40:	8080030b 	ldhu	r2,12(r16)
    5d44:	003f5006 	br	5a88 <__alt_data_end+0xf8005a88>

00005d48 <_fwalk>:
    5d48:	defff704 	addi	sp,sp,-36
    5d4c:	dd000415 	stw	r20,16(sp)
    5d50:	dfc00815 	stw	ra,32(sp)
    5d54:	ddc00715 	stw	r23,28(sp)
    5d58:	dd800615 	stw	r22,24(sp)
    5d5c:	dd400515 	stw	r21,20(sp)
    5d60:	dcc00315 	stw	r19,12(sp)
    5d64:	dc800215 	stw	r18,8(sp)
    5d68:	dc400115 	stw	r17,4(sp)
    5d6c:	dc000015 	stw	r16,0(sp)
    5d70:	2500b804 	addi	r20,r4,736
    5d74:	a0002326 	beq	r20,zero,5e04 <_fwalk+0xbc>
    5d78:	282b883a 	mov	r21,r5
    5d7c:	002f883a 	mov	r23,zero
    5d80:	05800044 	movi	r22,1
    5d84:	04ffffc4 	movi	r19,-1
    5d88:	a4400117 	ldw	r17,4(r20)
    5d8c:	a4800217 	ldw	r18,8(r20)
    5d90:	8c7fffc4 	addi	r17,r17,-1
    5d94:	88000d16 	blt	r17,zero,5dcc <_fwalk+0x84>
    5d98:	94000304 	addi	r16,r18,12
    5d9c:	94800384 	addi	r18,r18,14
    5da0:	8080000b 	ldhu	r2,0(r16)
    5da4:	8c7fffc4 	addi	r17,r17,-1
    5da8:	813ffd04 	addi	r4,r16,-12
    5dac:	b080042e 	bgeu	r22,r2,5dc0 <_fwalk+0x78>
    5db0:	9080000f 	ldh	r2,0(r18)
    5db4:	14c00226 	beq	r2,r19,5dc0 <_fwalk+0x78>
    5db8:	a83ee83a 	callr	r21
    5dbc:	b8aeb03a 	or	r23,r23,r2
    5dc0:	84001a04 	addi	r16,r16,104
    5dc4:	94801a04 	addi	r18,r18,104
    5dc8:	8cfff51e 	bne	r17,r19,5da0 <__alt_data_end+0xf8005da0>
    5dcc:	a5000017 	ldw	r20,0(r20)
    5dd0:	a03fed1e 	bne	r20,zero,5d88 <__alt_data_end+0xf8005d88>
    5dd4:	b805883a 	mov	r2,r23
    5dd8:	dfc00817 	ldw	ra,32(sp)
    5ddc:	ddc00717 	ldw	r23,28(sp)
    5de0:	dd800617 	ldw	r22,24(sp)
    5de4:	dd400517 	ldw	r21,20(sp)
    5de8:	dd000417 	ldw	r20,16(sp)
    5dec:	dcc00317 	ldw	r19,12(sp)
    5df0:	dc800217 	ldw	r18,8(sp)
    5df4:	dc400117 	ldw	r17,4(sp)
    5df8:	dc000017 	ldw	r16,0(sp)
    5dfc:	dec00904 	addi	sp,sp,36
    5e00:	f800283a 	ret
    5e04:	002f883a 	mov	r23,zero
    5e08:	003ff206 	br	5dd4 <__alt_data_end+0xf8005dd4>

00005e0c <_fwalk_reent>:
    5e0c:	defff704 	addi	sp,sp,-36
    5e10:	dd000415 	stw	r20,16(sp)
    5e14:	dfc00815 	stw	ra,32(sp)
    5e18:	ddc00715 	stw	r23,28(sp)
    5e1c:	dd800615 	stw	r22,24(sp)
    5e20:	dd400515 	stw	r21,20(sp)
    5e24:	dcc00315 	stw	r19,12(sp)
    5e28:	dc800215 	stw	r18,8(sp)
    5e2c:	dc400115 	stw	r17,4(sp)
    5e30:	dc000015 	stw	r16,0(sp)
    5e34:	2500b804 	addi	r20,r4,736
    5e38:	a0002326 	beq	r20,zero,5ec8 <_fwalk_reent+0xbc>
    5e3c:	282b883a 	mov	r21,r5
    5e40:	2027883a 	mov	r19,r4
    5e44:	002f883a 	mov	r23,zero
    5e48:	05800044 	movi	r22,1
    5e4c:	04bfffc4 	movi	r18,-1
    5e50:	a4400117 	ldw	r17,4(r20)
    5e54:	a4000217 	ldw	r16,8(r20)
    5e58:	8c7fffc4 	addi	r17,r17,-1
    5e5c:	88000c16 	blt	r17,zero,5e90 <_fwalk_reent+0x84>
    5e60:	84000304 	addi	r16,r16,12
    5e64:	8080000b 	ldhu	r2,0(r16)
    5e68:	8c7fffc4 	addi	r17,r17,-1
    5e6c:	817ffd04 	addi	r5,r16,-12
    5e70:	b080052e 	bgeu	r22,r2,5e88 <_fwalk_reent+0x7c>
    5e74:	8080008f 	ldh	r2,2(r16)
    5e78:	9809883a 	mov	r4,r19
    5e7c:	14800226 	beq	r2,r18,5e88 <_fwalk_reent+0x7c>
    5e80:	a83ee83a 	callr	r21
    5e84:	b8aeb03a 	or	r23,r23,r2
    5e88:	84001a04 	addi	r16,r16,104
    5e8c:	8cbff51e 	bne	r17,r18,5e64 <__alt_data_end+0xf8005e64>
    5e90:	a5000017 	ldw	r20,0(r20)
    5e94:	a03fee1e 	bne	r20,zero,5e50 <__alt_data_end+0xf8005e50>
    5e98:	b805883a 	mov	r2,r23
    5e9c:	dfc00817 	ldw	ra,32(sp)
    5ea0:	ddc00717 	ldw	r23,28(sp)
    5ea4:	dd800617 	ldw	r22,24(sp)
    5ea8:	dd400517 	ldw	r21,20(sp)
    5eac:	dd000417 	ldw	r20,16(sp)
    5eb0:	dcc00317 	ldw	r19,12(sp)
    5eb4:	dc800217 	ldw	r18,8(sp)
    5eb8:	dc400117 	ldw	r17,4(sp)
    5ebc:	dc000017 	ldw	r16,0(sp)
    5ec0:	dec00904 	addi	sp,sp,36
    5ec4:	f800283a 	ret
    5ec8:	002f883a 	mov	r23,zero
    5ecc:	003ff206 	br	5e98 <__alt_data_end+0xf8005e98>

00005ed0 <_setlocale_r>:
    5ed0:	30001b26 	beq	r6,zero,5f40 <_setlocale_r+0x70>
    5ed4:	01400074 	movhi	r5,1
    5ed8:	defffe04 	addi	sp,sp,-8
    5edc:	294ff904 	addi	r5,r5,16356
    5ee0:	3009883a 	mov	r4,r6
    5ee4:	dc000015 	stw	r16,0(sp)
    5ee8:	dfc00115 	stw	ra,4(sp)
    5eec:	3021883a 	mov	r16,r6
    5ef0:	0007d280 	call	7d28 <strcmp>
    5ef4:	1000061e 	bne	r2,zero,5f10 <_setlocale_r+0x40>
    5ef8:	00800074 	movhi	r2,1
    5efc:	108ff804 	addi	r2,r2,16352
    5f00:	dfc00117 	ldw	ra,4(sp)
    5f04:	dc000017 	ldw	r16,0(sp)
    5f08:	dec00204 	addi	sp,sp,8
    5f0c:	f800283a 	ret
    5f10:	01400074 	movhi	r5,1
    5f14:	294ff804 	addi	r5,r5,16352
    5f18:	8009883a 	mov	r4,r16
    5f1c:	0007d280 	call	7d28 <strcmp>
    5f20:	103ff526 	beq	r2,zero,5ef8 <__alt_data_end+0xf8005ef8>
    5f24:	01400074 	movhi	r5,1
    5f28:	294fe304 	addi	r5,r5,16268
    5f2c:	8009883a 	mov	r4,r16
    5f30:	0007d280 	call	7d28 <strcmp>
    5f34:	103ff026 	beq	r2,zero,5ef8 <__alt_data_end+0xf8005ef8>
    5f38:	0005883a 	mov	r2,zero
    5f3c:	003ff006 	br	5f00 <__alt_data_end+0xf8005f00>
    5f40:	00800074 	movhi	r2,1
    5f44:	108ff804 	addi	r2,r2,16352
    5f48:	f800283a 	ret

00005f4c <__locale_charset>:
    5f4c:	00800074 	movhi	r2,1
    5f50:	1092bf04 	addi	r2,r2,19196
    5f54:	f800283a 	ret

00005f58 <__locale_mb_cur_max>:
    5f58:	00800074 	movhi	r2,1
    5f5c:	10978904 	addi	r2,r2,24100
    5f60:	10800017 	ldw	r2,0(r2)
    5f64:	f800283a 	ret

00005f68 <__locale_msgcharset>:
    5f68:	00800074 	movhi	r2,1
    5f6c:	1092b704 	addi	r2,r2,19164
    5f70:	f800283a 	ret

00005f74 <__locale_cjk_lang>:
    5f74:	0005883a 	mov	r2,zero
    5f78:	f800283a 	ret

00005f7c <_localeconv_r>:
    5f7c:	00800074 	movhi	r2,1
    5f80:	1092c704 	addi	r2,r2,19228
    5f84:	f800283a 	ret

00005f88 <setlocale>:
    5f88:	00800074 	movhi	r2,1
    5f8c:	10978804 	addi	r2,r2,24096
    5f90:	280d883a 	mov	r6,r5
    5f94:	200b883a 	mov	r5,r4
    5f98:	11000017 	ldw	r4,0(r2)
    5f9c:	0005ed01 	jmpi	5ed0 <_setlocale_r>

00005fa0 <localeconv>:
    5fa0:	00800074 	movhi	r2,1
    5fa4:	1092c704 	addi	r2,r2,19228
    5fa8:	f800283a 	ret

00005fac <__smakebuf_r>:
    5fac:	2880030b 	ldhu	r2,12(r5)
    5fb0:	10c0008c 	andi	r3,r2,2
    5fb4:	1800411e 	bne	r3,zero,60bc <__smakebuf_r+0x110>
    5fb8:	deffec04 	addi	sp,sp,-80
    5fbc:	dc000f15 	stw	r16,60(sp)
    5fc0:	2821883a 	mov	r16,r5
    5fc4:	2940038f 	ldh	r5,14(r5)
    5fc8:	dc401015 	stw	r17,64(sp)
    5fcc:	dfc01315 	stw	ra,76(sp)
    5fd0:	dcc01215 	stw	r19,72(sp)
    5fd4:	dc801115 	stw	r18,68(sp)
    5fd8:	2023883a 	mov	r17,r4
    5fdc:	28001c16 	blt	r5,zero,6050 <__smakebuf_r+0xa4>
    5fe0:	d80d883a 	mov	r6,sp
    5fe4:	00098d00 	call	98d0 <_fstat_r>
    5fe8:	10001816 	blt	r2,zero,604c <__smakebuf_r+0xa0>
    5fec:	d8800117 	ldw	r2,4(sp)
    5ff0:	00e00014 	movui	r3,32768
    5ff4:	10bc000c 	andi	r2,r2,61440
    5ff8:	14c80020 	cmpeqi	r19,r2,8192
    5ffc:	10c03726 	beq	r2,r3,60dc <__smakebuf_r+0x130>
    6000:	80c0030b 	ldhu	r3,12(r16)
    6004:	18c20014 	ori	r3,r3,2048
    6008:	80c0030d 	sth	r3,12(r16)
    600c:	00c80004 	movi	r3,8192
    6010:	10c0521e 	bne	r2,r3,615c <__smakebuf_r+0x1b0>
    6014:	8140038f 	ldh	r5,14(r16)
    6018:	8809883a 	mov	r4,r17
    601c:	000992c0 	call	992c <_isatty_r>
    6020:	10004c26 	beq	r2,zero,6154 <__smakebuf_r+0x1a8>
    6024:	8080030b 	ldhu	r2,12(r16)
    6028:	80c010c4 	addi	r3,r16,67
    602c:	80c00015 	stw	r3,0(r16)
    6030:	10800054 	ori	r2,r2,1
    6034:	8080030d 	sth	r2,12(r16)
    6038:	00800044 	movi	r2,1
    603c:	80c00415 	stw	r3,16(r16)
    6040:	80800515 	stw	r2,20(r16)
    6044:	04810004 	movi	r18,1024
    6048:	00000706 	br	6068 <__smakebuf_r+0xbc>
    604c:	8080030b 	ldhu	r2,12(r16)
    6050:	10c0200c 	andi	r3,r2,128
    6054:	18001f1e 	bne	r3,zero,60d4 <__smakebuf_r+0x128>
    6058:	04810004 	movi	r18,1024
    605c:	10820014 	ori	r2,r2,2048
    6060:	8080030d 	sth	r2,12(r16)
    6064:	0027883a 	mov	r19,zero
    6068:	900b883a 	mov	r5,r18
    606c:	8809883a 	mov	r4,r17
    6070:	00006180 	call	618 <_malloc_r>
    6074:	10002c26 	beq	r2,zero,6128 <__smakebuf_r+0x17c>
    6078:	80c0030b 	ldhu	r3,12(r16)
    607c:	01000034 	movhi	r4,0
    6080:	21143004 	addi	r4,r4,20672
    6084:	89000f15 	stw	r4,60(r17)
    6088:	18c02014 	ori	r3,r3,128
    608c:	80c0030d 	sth	r3,12(r16)
    6090:	80800015 	stw	r2,0(r16)
    6094:	80800415 	stw	r2,16(r16)
    6098:	84800515 	stw	r18,20(r16)
    609c:	98001a1e 	bne	r19,zero,6108 <__smakebuf_r+0x15c>
    60a0:	dfc01317 	ldw	ra,76(sp)
    60a4:	dcc01217 	ldw	r19,72(sp)
    60a8:	dc801117 	ldw	r18,68(sp)
    60ac:	dc401017 	ldw	r17,64(sp)
    60b0:	dc000f17 	ldw	r16,60(sp)
    60b4:	dec01404 	addi	sp,sp,80
    60b8:	f800283a 	ret
    60bc:	288010c4 	addi	r2,r5,67
    60c0:	28800015 	stw	r2,0(r5)
    60c4:	28800415 	stw	r2,16(r5)
    60c8:	00800044 	movi	r2,1
    60cc:	28800515 	stw	r2,20(r5)
    60d0:	f800283a 	ret
    60d4:	04801004 	movi	r18,64
    60d8:	003fe006 	br	605c <__alt_data_end+0xf800605c>
    60dc:	81000a17 	ldw	r4,40(r16)
    60e0:	00c00034 	movhi	r3,0
    60e4:	18df3104 	addi	r3,r3,31940
    60e8:	20ffc51e 	bne	r4,r3,6000 <__alt_data_end+0xf8006000>
    60ec:	8080030b 	ldhu	r2,12(r16)
    60f0:	04810004 	movi	r18,1024
    60f4:	84801315 	stw	r18,76(r16)
    60f8:	1484b03a 	or	r2,r2,r18
    60fc:	8080030d 	sth	r2,12(r16)
    6100:	0027883a 	mov	r19,zero
    6104:	003fd806 	br	6068 <__alt_data_end+0xf8006068>
    6108:	8140038f 	ldh	r5,14(r16)
    610c:	8809883a 	mov	r4,r17
    6110:	000992c0 	call	992c <_isatty_r>
    6114:	103fe226 	beq	r2,zero,60a0 <__alt_data_end+0xf80060a0>
    6118:	8080030b 	ldhu	r2,12(r16)
    611c:	10800054 	ori	r2,r2,1
    6120:	8080030d 	sth	r2,12(r16)
    6124:	003fde06 	br	60a0 <__alt_data_end+0xf80060a0>
    6128:	8080030b 	ldhu	r2,12(r16)
    612c:	10c0800c 	andi	r3,r2,512
    6130:	183fdb1e 	bne	r3,zero,60a0 <__alt_data_end+0xf80060a0>
    6134:	10800094 	ori	r2,r2,2
    6138:	80c010c4 	addi	r3,r16,67
    613c:	8080030d 	sth	r2,12(r16)
    6140:	00800044 	movi	r2,1
    6144:	80c00015 	stw	r3,0(r16)
    6148:	80c00415 	stw	r3,16(r16)
    614c:	80800515 	stw	r2,20(r16)
    6150:	003fd306 	br	60a0 <__alt_data_end+0xf80060a0>
    6154:	04810004 	movi	r18,1024
    6158:	003fc306 	br	6068 <__alt_data_end+0xf8006068>
    615c:	0027883a 	mov	r19,zero
    6160:	04810004 	movi	r18,1024
    6164:	003fc006 	br	6068 <__alt_data_end+0xf8006068>

00006168 <memchr>:
    6168:	208000cc 	andi	r2,r4,3
    616c:	280f883a 	mov	r7,r5
    6170:	10003426 	beq	r2,zero,6244 <memchr+0xdc>
    6174:	30bfffc4 	addi	r2,r6,-1
    6178:	30001a26 	beq	r6,zero,61e4 <memchr+0x7c>
    617c:	20c00003 	ldbu	r3,0(r4)
    6180:	29803fcc 	andi	r6,r5,255
    6184:	30c0051e 	bne	r6,r3,619c <memchr+0x34>
    6188:	00001806 	br	61ec <memchr+0x84>
    618c:	10001526 	beq	r2,zero,61e4 <memchr+0x7c>
    6190:	20c00003 	ldbu	r3,0(r4)
    6194:	10bfffc4 	addi	r2,r2,-1
    6198:	30c01426 	beq	r6,r3,61ec <memchr+0x84>
    619c:	21000044 	addi	r4,r4,1
    61a0:	20c000cc 	andi	r3,r4,3
    61a4:	183ff91e 	bne	r3,zero,618c <__alt_data_end+0xf800618c>
    61a8:	020000c4 	movi	r8,3
    61ac:	40801136 	bltu	r8,r2,61f4 <memchr+0x8c>
    61b0:	10000c26 	beq	r2,zero,61e4 <memchr+0x7c>
    61b4:	20c00003 	ldbu	r3,0(r4)
    61b8:	29403fcc 	andi	r5,r5,255
    61bc:	28c00b26 	beq	r5,r3,61ec <memchr+0x84>
    61c0:	20c00044 	addi	r3,r4,1
    61c4:	39803fcc 	andi	r6,r7,255
    61c8:	2089883a 	add	r4,r4,r2
    61cc:	00000306 	br	61dc <memchr+0x74>
    61d0:	18c00044 	addi	r3,r3,1
    61d4:	197fffc3 	ldbu	r5,-1(r3)
    61d8:	31400526 	beq	r6,r5,61f0 <memchr+0x88>
    61dc:	1805883a 	mov	r2,r3
    61e0:	20fffb1e 	bne	r4,r3,61d0 <__alt_data_end+0xf80061d0>
    61e4:	0005883a 	mov	r2,zero
    61e8:	f800283a 	ret
    61ec:	2005883a 	mov	r2,r4
    61f0:	f800283a 	ret
    61f4:	28c03fcc 	andi	r3,r5,255
    61f8:	1812923a 	slli	r9,r3,8
    61fc:	02ffbff4 	movhi	r11,65279
    6200:	02a02074 	movhi	r10,32897
    6204:	48d2b03a 	or	r9,r9,r3
    6208:	4806943a 	slli	r3,r9,16
    620c:	5affbfc4 	addi	r11,r11,-257
    6210:	52a02004 	addi	r10,r10,-32640
    6214:	48d2b03a 	or	r9,r9,r3
    6218:	20c00017 	ldw	r3,0(r4)
    621c:	48c6f03a 	xor	r3,r9,r3
    6220:	1acd883a 	add	r6,r3,r11
    6224:	00c6303a 	nor	r3,zero,r3
    6228:	30c6703a 	and	r3,r6,r3
    622c:	1a86703a 	and	r3,r3,r10
    6230:	183fe01e 	bne	r3,zero,61b4 <__alt_data_end+0xf80061b4>
    6234:	10bfff04 	addi	r2,r2,-4
    6238:	21000104 	addi	r4,r4,4
    623c:	40bff636 	bltu	r8,r2,6218 <__alt_data_end+0xf8006218>
    6240:	003fdb06 	br	61b0 <__alt_data_end+0xf80061b0>
    6244:	3005883a 	mov	r2,r6
    6248:	003fd706 	br	61a8 <__alt_data_end+0xf80061a8>

0000624c <memcpy>:
    624c:	defffd04 	addi	sp,sp,-12
    6250:	dfc00215 	stw	ra,8(sp)
    6254:	dc400115 	stw	r17,4(sp)
    6258:	dc000015 	stw	r16,0(sp)
    625c:	00c003c4 	movi	r3,15
    6260:	2005883a 	mov	r2,r4
    6264:	1980452e 	bgeu	r3,r6,637c <memcpy+0x130>
    6268:	2906b03a 	or	r3,r5,r4
    626c:	18c000cc 	andi	r3,r3,3
    6270:	1800441e 	bne	r3,zero,6384 <memcpy+0x138>
    6274:	347ffc04 	addi	r17,r6,-16
    6278:	8822d13a 	srli	r17,r17,4
    627c:	28c00104 	addi	r3,r5,4
    6280:	23400104 	addi	r13,r4,4
    6284:	8820913a 	slli	r16,r17,4
    6288:	2b000204 	addi	r12,r5,8
    628c:	22c00204 	addi	r11,r4,8
    6290:	84000504 	addi	r16,r16,20
    6294:	2a800304 	addi	r10,r5,12
    6298:	22400304 	addi	r9,r4,12
    629c:	2c21883a 	add	r16,r5,r16
    62a0:	2811883a 	mov	r8,r5
    62a4:	200f883a 	mov	r7,r4
    62a8:	41000017 	ldw	r4,0(r8)
    62ac:	1fc00017 	ldw	ra,0(r3)
    62b0:	63c00017 	ldw	r15,0(r12)
    62b4:	39000015 	stw	r4,0(r7)
    62b8:	53800017 	ldw	r14,0(r10)
    62bc:	6fc00015 	stw	ra,0(r13)
    62c0:	5bc00015 	stw	r15,0(r11)
    62c4:	4b800015 	stw	r14,0(r9)
    62c8:	18c00404 	addi	r3,r3,16
    62cc:	39c00404 	addi	r7,r7,16
    62d0:	42000404 	addi	r8,r8,16
    62d4:	6b400404 	addi	r13,r13,16
    62d8:	63000404 	addi	r12,r12,16
    62dc:	5ac00404 	addi	r11,r11,16
    62e0:	52800404 	addi	r10,r10,16
    62e4:	4a400404 	addi	r9,r9,16
    62e8:	1c3fef1e 	bne	r3,r16,62a8 <__alt_data_end+0xf80062a8>
    62ec:	89c00044 	addi	r7,r17,1
    62f0:	380e913a 	slli	r7,r7,4
    62f4:	310003cc 	andi	r4,r6,15
    62f8:	02c000c4 	movi	r11,3
    62fc:	11c7883a 	add	r3,r2,r7
    6300:	29cb883a 	add	r5,r5,r7
    6304:	5900212e 	bgeu	r11,r4,638c <memcpy+0x140>
    6308:	1813883a 	mov	r9,r3
    630c:	2811883a 	mov	r8,r5
    6310:	200f883a 	mov	r7,r4
    6314:	42800017 	ldw	r10,0(r8)
    6318:	4a400104 	addi	r9,r9,4
    631c:	39ffff04 	addi	r7,r7,-4
    6320:	4abfff15 	stw	r10,-4(r9)
    6324:	42000104 	addi	r8,r8,4
    6328:	59fffa36 	bltu	r11,r7,6314 <__alt_data_end+0xf8006314>
    632c:	213fff04 	addi	r4,r4,-4
    6330:	2008d0ba 	srli	r4,r4,2
    6334:	318000cc 	andi	r6,r6,3
    6338:	21000044 	addi	r4,r4,1
    633c:	2109883a 	add	r4,r4,r4
    6340:	2109883a 	add	r4,r4,r4
    6344:	1907883a 	add	r3,r3,r4
    6348:	290b883a 	add	r5,r5,r4
    634c:	30000626 	beq	r6,zero,6368 <memcpy+0x11c>
    6350:	198d883a 	add	r6,r3,r6
    6354:	29c00003 	ldbu	r7,0(r5)
    6358:	18c00044 	addi	r3,r3,1
    635c:	29400044 	addi	r5,r5,1
    6360:	19ffffc5 	stb	r7,-1(r3)
    6364:	19bffb1e 	bne	r3,r6,6354 <__alt_data_end+0xf8006354>
    6368:	dfc00217 	ldw	ra,8(sp)
    636c:	dc400117 	ldw	r17,4(sp)
    6370:	dc000017 	ldw	r16,0(sp)
    6374:	dec00304 	addi	sp,sp,12
    6378:	f800283a 	ret
    637c:	2007883a 	mov	r3,r4
    6380:	003ff206 	br	634c <__alt_data_end+0xf800634c>
    6384:	2007883a 	mov	r3,r4
    6388:	003ff106 	br	6350 <__alt_data_end+0xf8006350>
    638c:	200d883a 	mov	r6,r4
    6390:	003fee06 	br	634c <__alt_data_end+0xf800634c>

00006394 <memmove>:
    6394:	2005883a 	mov	r2,r4
    6398:	29000b2e 	bgeu	r5,r4,63c8 <memmove+0x34>
    639c:	298f883a 	add	r7,r5,r6
    63a0:	21c0092e 	bgeu	r4,r7,63c8 <memmove+0x34>
    63a4:	2187883a 	add	r3,r4,r6
    63a8:	198bc83a 	sub	r5,r3,r6
    63ac:	30004826 	beq	r6,zero,64d0 <memmove+0x13c>
    63b0:	39ffffc4 	addi	r7,r7,-1
    63b4:	39000003 	ldbu	r4,0(r7)
    63b8:	18ffffc4 	addi	r3,r3,-1
    63bc:	19000005 	stb	r4,0(r3)
    63c0:	28fffb1e 	bne	r5,r3,63b0 <__alt_data_end+0xf80063b0>
    63c4:	f800283a 	ret
    63c8:	00c003c4 	movi	r3,15
    63cc:	1980412e 	bgeu	r3,r6,64d4 <memmove+0x140>
    63d0:	2886b03a 	or	r3,r5,r2
    63d4:	18c000cc 	andi	r3,r3,3
    63d8:	1800401e 	bne	r3,zero,64dc <memmove+0x148>
    63dc:	33fffc04 	addi	r15,r6,-16
    63e0:	781ed13a 	srli	r15,r15,4
    63e4:	28c00104 	addi	r3,r5,4
    63e8:	13400104 	addi	r13,r2,4
    63ec:	781c913a 	slli	r14,r15,4
    63f0:	2b000204 	addi	r12,r5,8
    63f4:	12c00204 	addi	r11,r2,8
    63f8:	73800504 	addi	r14,r14,20
    63fc:	2a800304 	addi	r10,r5,12
    6400:	12400304 	addi	r9,r2,12
    6404:	2b9d883a 	add	r14,r5,r14
    6408:	2811883a 	mov	r8,r5
    640c:	100f883a 	mov	r7,r2
    6410:	41000017 	ldw	r4,0(r8)
    6414:	39c00404 	addi	r7,r7,16
    6418:	18c00404 	addi	r3,r3,16
    641c:	393ffc15 	stw	r4,-16(r7)
    6420:	193ffc17 	ldw	r4,-16(r3)
    6424:	6b400404 	addi	r13,r13,16
    6428:	5ac00404 	addi	r11,r11,16
    642c:	693ffc15 	stw	r4,-16(r13)
    6430:	61000017 	ldw	r4,0(r12)
    6434:	4a400404 	addi	r9,r9,16
    6438:	42000404 	addi	r8,r8,16
    643c:	593ffc15 	stw	r4,-16(r11)
    6440:	51000017 	ldw	r4,0(r10)
    6444:	63000404 	addi	r12,r12,16
    6448:	52800404 	addi	r10,r10,16
    644c:	493ffc15 	stw	r4,-16(r9)
    6450:	1bbfef1e 	bne	r3,r14,6410 <__alt_data_end+0xf8006410>
    6454:	79000044 	addi	r4,r15,1
    6458:	2008913a 	slli	r4,r4,4
    645c:	328003cc 	andi	r10,r6,15
    6460:	02c000c4 	movi	r11,3
    6464:	1107883a 	add	r3,r2,r4
    6468:	290b883a 	add	r5,r5,r4
    646c:	5a801e2e 	bgeu	r11,r10,64e8 <memmove+0x154>
    6470:	1813883a 	mov	r9,r3
    6474:	2811883a 	mov	r8,r5
    6478:	500f883a 	mov	r7,r10
    647c:	41000017 	ldw	r4,0(r8)
    6480:	4a400104 	addi	r9,r9,4
    6484:	39ffff04 	addi	r7,r7,-4
    6488:	493fff15 	stw	r4,-4(r9)
    648c:	42000104 	addi	r8,r8,4
    6490:	59fffa36 	bltu	r11,r7,647c <__alt_data_end+0xf800647c>
    6494:	513fff04 	addi	r4,r10,-4
    6498:	2008d0ba 	srli	r4,r4,2
    649c:	318000cc 	andi	r6,r6,3
    64a0:	21000044 	addi	r4,r4,1
    64a4:	2109883a 	add	r4,r4,r4
    64a8:	2109883a 	add	r4,r4,r4
    64ac:	1907883a 	add	r3,r3,r4
    64b0:	290b883a 	add	r5,r5,r4
    64b4:	30000b26 	beq	r6,zero,64e4 <memmove+0x150>
    64b8:	198d883a 	add	r6,r3,r6
    64bc:	29c00003 	ldbu	r7,0(r5)
    64c0:	18c00044 	addi	r3,r3,1
    64c4:	29400044 	addi	r5,r5,1
    64c8:	19ffffc5 	stb	r7,-1(r3)
    64cc:	19bffb1e 	bne	r3,r6,64bc <__alt_data_end+0xf80064bc>
    64d0:	f800283a 	ret
    64d4:	1007883a 	mov	r3,r2
    64d8:	003ff606 	br	64b4 <__alt_data_end+0xf80064b4>
    64dc:	1007883a 	mov	r3,r2
    64e0:	003ff506 	br	64b8 <__alt_data_end+0xf80064b8>
    64e4:	f800283a 	ret
    64e8:	500d883a 	mov	r6,r10
    64ec:	003ff106 	br	64b4 <__alt_data_end+0xf80064b4>

000064f0 <memset>:
    64f0:	20c000cc 	andi	r3,r4,3
    64f4:	2005883a 	mov	r2,r4
    64f8:	18004426 	beq	r3,zero,660c <memset+0x11c>
    64fc:	31ffffc4 	addi	r7,r6,-1
    6500:	30004026 	beq	r6,zero,6604 <memset+0x114>
    6504:	2813883a 	mov	r9,r5
    6508:	200d883a 	mov	r6,r4
    650c:	2007883a 	mov	r3,r4
    6510:	00000406 	br	6524 <memset+0x34>
    6514:	3a3fffc4 	addi	r8,r7,-1
    6518:	31800044 	addi	r6,r6,1
    651c:	38003926 	beq	r7,zero,6604 <memset+0x114>
    6520:	400f883a 	mov	r7,r8
    6524:	18c00044 	addi	r3,r3,1
    6528:	32400005 	stb	r9,0(r6)
    652c:	1a0000cc 	andi	r8,r3,3
    6530:	403ff81e 	bne	r8,zero,6514 <__alt_data_end+0xf8006514>
    6534:	010000c4 	movi	r4,3
    6538:	21c02d2e 	bgeu	r4,r7,65f0 <memset+0x100>
    653c:	29003fcc 	andi	r4,r5,255
    6540:	200c923a 	slli	r6,r4,8
    6544:	3108b03a 	or	r4,r6,r4
    6548:	200c943a 	slli	r6,r4,16
    654c:	218cb03a 	or	r6,r4,r6
    6550:	010003c4 	movi	r4,15
    6554:	21c0182e 	bgeu	r4,r7,65b8 <memset+0xc8>
    6558:	3b3ffc04 	addi	r12,r7,-16
    655c:	6018d13a 	srli	r12,r12,4
    6560:	1a000104 	addi	r8,r3,4
    6564:	1ac00204 	addi	r11,r3,8
    6568:	6008913a 	slli	r4,r12,4
    656c:	1a800304 	addi	r10,r3,12
    6570:	1813883a 	mov	r9,r3
    6574:	21000504 	addi	r4,r4,20
    6578:	1909883a 	add	r4,r3,r4
    657c:	49800015 	stw	r6,0(r9)
    6580:	41800015 	stw	r6,0(r8)
    6584:	59800015 	stw	r6,0(r11)
    6588:	51800015 	stw	r6,0(r10)
    658c:	42000404 	addi	r8,r8,16
    6590:	4a400404 	addi	r9,r9,16
    6594:	5ac00404 	addi	r11,r11,16
    6598:	52800404 	addi	r10,r10,16
    659c:	413ff71e 	bne	r8,r4,657c <__alt_data_end+0xf800657c>
    65a0:	63000044 	addi	r12,r12,1
    65a4:	6018913a 	slli	r12,r12,4
    65a8:	39c003cc 	andi	r7,r7,15
    65ac:	010000c4 	movi	r4,3
    65b0:	1b07883a 	add	r3,r3,r12
    65b4:	21c00e2e 	bgeu	r4,r7,65f0 <memset+0x100>
    65b8:	1813883a 	mov	r9,r3
    65bc:	3811883a 	mov	r8,r7
    65c0:	010000c4 	movi	r4,3
    65c4:	49800015 	stw	r6,0(r9)
    65c8:	423fff04 	addi	r8,r8,-4
    65cc:	4a400104 	addi	r9,r9,4
    65d0:	223ffc36 	bltu	r4,r8,65c4 <__alt_data_end+0xf80065c4>
    65d4:	393fff04 	addi	r4,r7,-4
    65d8:	2008d0ba 	srli	r4,r4,2
    65dc:	39c000cc 	andi	r7,r7,3
    65e0:	21000044 	addi	r4,r4,1
    65e4:	2109883a 	add	r4,r4,r4
    65e8:	2109883a 	add	r4,r4,r4
    65ec:	1907883a 	add	r3,r3,r4
    65f0:	38000526 	beq	r7,zero,6608 <memset+0x118>
    65f4:	19cf883a 	add	r7,r3,r7
    65f8:	19400005 	stb	r5,0(r3)
    65fc:	18c00044 	addi	r3,r3,1
    6600:	38fffd1e 	bne	r7,r3,65f8 <__alt_data_end+0xf80065f8>
    6604:	f800283a 	ret
    6608:	f800283a 	ret
    660c:	2007883a 	mov	r3,r4
    6610:	300f883a 	mov	r7,r6
    6614:	003fc706 	br	6534 <__alt_data_end+0xf8006534>

00006618 <_Balloc>:
    6618:	20801317 	ldw	r2,76(r4)
    661c:	defffc04 	addi	sp,sp,-16
    6620:	dc400115 	stw	r17,4(sp)
    6624:	dc000015 	stw	r16,0(sp)
    6628:	dfc00315 	stw	ra,12(sp)
    662c:	dc800215 	stw	r18,8(sp)
    6630:	2023883a 	mov	r17,r4
    6634:	2821883a 	mov	r16,r5
    6638:	10000f26 	beq	r2,zero,6678 <_Balloc+0x60>
    663c:	8407883a 	add	r3,r16,r16
    6640:	18c7883a 	add	r3,r3,r3
    6644:	10c7883a 	add	r3,r2,r3
    6648:	18800017 	ldw	r2,0(r3)
    664c:	10001126 	beq	r2,zero,6694 <_Balloc+0x7c>
    6650:	11000017 	ldw	r4,0(r2)
    6654:	19000015 	stw	r4,0(r3)
    6658:	10000415 	stw	zero,16(r2)
    665c:	10000315 	stw	zero,12(r2)
    6660:	dfc00317 	ldw	ra,12(sp)
    6664:	dc800217 	ldw	r18,8(sp)
    6668:	dc400117 	ldw	r17,4(sp)
    666c:	dc000017 	ldw	r16,0(sp)
    6670:	dec00404 	addi	sp,sp,16
    6674:	f800283a 	ret
    6678:	01800844 	movi	r6,33
    667c:	01400104 	movi	r5,4
    6680:	00095000 	call	9500 <_calloc_r>
    6684:	88801315 	stw	r2,76(r17)
    6688:	103fec1e 	bne	r2,zero,663c <__alt_data_end+0xf800663c>
    668c:	0005883a 	mov	r2,zero
    6690:	003ff306 	br	6660 <__alt_data_end+0xf8006660>
    6694:	01400044 	movi	r5,1
    6698:	2c24983a 	sll	r18,r5,r16
    669c:	8809883a 	mov	r4,r17
    66a0:	91800144 	addi	r6,r18,5
    66a4:	318d883a 	add	r6,r6,r6
    66a8:	318d883a 	add	r6,r6,r6
    66ac:	00095000 	call	9500 <_calloc_r>
    66b0:	103ff626 	beq	r2,zero,668c <__alt_data_end+0xf800668c>
    66b4:	14000115 	stw	r16,4(r2)
    66b8:	14800215 	stw	r18,8(r2)
    66bc:	003fe606 	br	6658 <__alt_data_end+0xf8006658>

000066c0 <_Bfree>:
    66c0:	28000826 	beq	r5,zero,66e4 <_Bfree+0x24>
    66c4:	28c00117 	ldw	r3,4(r5)
    66c8:	20801317 	ldw	r2,76(r4)
    66cc:	18c7883a 	add	r3,r3,r3
    66d0:	18c7883a 	add	r3,r3,r3
    66d4:	10c5883a 	add	r2,r2,r3
    66d8:	10c00017 	ldw	r3,0(r2)
    66dc:	28c00015 	stw	r3,0(r5)
    66e0:	11400015 	stw	r5,0(r2)
    66e4:	f800283a 	ret

000066e8 <__multadd>:
    66e8:	defffa04 	addi	sp,sp,-24
    66ec:	dc800315 	stw	r18,12(sp)
    66f0:	dc400215 	stw	r17,8(sp)
    66f4:	dc000115 	stw	r16,4(sp)
    66f8:	2823883a 	mov	r17,r5
    66fc:	2c000417 	ldw	r16,16(r5)
    6700:	dfc00515 	stw	ra,20(sp)
    6704:	dcc00415 	stw	r19,16(sp)
    6708:	2025883a 	mov	r18,r4
    670c:	29400504 	addi	r5,r5,20
    6710:	0011883a 	mov	r8,zero
    6714:	28c00017 	ldw	r3,0(r5)
    6718:	29400104 	addi	r5,r5,4
    671c:	42000044 	addi	r8,r8,1
    6720:	18bfffcc 	andi	r2,r3,65535
    6724:	1185383a 	mul	r2,r2,r6
    6728:	1806d43a 	srli	r3,r3,16
    672c:	11cf883a 	add	r7,r2,r7
    6730:	3808d43a 	srli	r4,r7,16
    6734:	1987383a 	mul	r3,r3,r6
    6738:	38bfffcc 	andi	r2,r7,65535
    673c:	1907883a 	add	r3,r3,r4
    6740:	1808943a 	slli	r4,r3,16
    6744:	180ed43a 	srli	r7,r3,16
    6748:	2085883a 	add	r2,r4,r2
    674c:	28bfff15 	stw	r2,-4(r5)
    6750:	443ff016 	blt	r8,r16,6714 <__alt_data_end+0xf8006714>
    6754:	38000926 	beq	r7,zero,677c <__multadd+0x94>
    6758:	88800217 	ldw	r2,8(r17)
    675c:	80800f0e 	bge	r16,r2,679c <__multadd+0xb4>
    6760:	80800144 	addi	r2,r16,5
    6764:	1085883a 	add	r2,r2,r2
    6768:	1085883a 	add	r2,r2,r2
    676c:	8885883a 	add	r2,r17,r2
    6770:	11c00015 	stw	r7,0(r2)
    6774:	84000044 	addi	r16,r16,1
    6778:	8c000415 	stw	r16,16(r17)
    677c:	8805883a 	mov	r2,r17
    6780:	dfc00517 	ldw	ra,20(sp)
    6784:	dcc00417 	ldw	r19,16(sp)
    6788:	dc800317 	ldw	r18,12(sp)
    678c:	dc400217 	ldw	r17,8(sp)
    6790:	dc000117 	ldw	r16,4(sp)
    6794:	dec00604 	addi	sp,sp,24
    6798:	f800283a 	ret
    679c:	89400117 	ldw	r5,4(r17)
    67a0:	9009883a 	mov	r4,r18
    67a4:	d9c00015 	stw	r7,0(sp)
    67a8:	29400044 	addi	r5,r5,1
    67ac:	00066180 	call	6618 <_Balloc>
    67b0:	89800417 	ldw	r6,16(r17)
    67b4:	89400304 	addi	r5,r17,12
    67b8:	11000304 	addi	r4,r2,12
    67bc:	31800084 	addi	r6,r6,2
    67c0:	318d883a 	add	r6,r6,r6
    67c4:	318d883a 	add	r6,r6,r6
    67c8:	1027883a 	mov	r19,r2
    67cc:	000624c0 	call	624c <memcpy>
    67d0:	d9c00017 	ldw	r7,0(sp)
    67d4:	88000a26 	beq	r17,zero,6800 <__multadd+0x118>
    67d8:	88c00117 	ldw	r3,4(r17)
    67dc:	90801317 	ldw	r2,76(r18)
    67e0:	18c7883a 	add	r3,r3,r3
    67e4:	18c7883a 	add	r3,r3,r3
    67e8:	10c5883a 	add	r2,r2,r3
    67ec:	10c00017 	ldw	r3,0(r2)
    67f0:	88c00015 	stw	r3,0(r17)
    67f4:	14400015 	stw	r17,0(r2)
    67f8:	9823883a 	mov	r17,r19
    67fc:	003fd806 	br	6760 <__alt_data_end+0xf8006760>
    6800:	9823883a 	mov	r17,r19
    6804:	003fd606 	br	6760 <__alt_data_end+0xf8006760>

00006808 <__s2b>:
    6808:	defff904 	addi	sp,sp,-28
    680c:	dc400115 	stw	r17,4(sp)
    6810:	dc000015 	stw	r16,0(sp)
    6814:	2023883a 	mov	r17,r4
    6818:	2821883a 	mov	r16,r5
    681c:	39000204 	addi	r4,r7,8
    6820:	01400244 	movi	r5,9
    6824:	dcc00315 	stw	r19,12(sp)
    6828:	dc800215 	stw	r18,8(sp)
    682c:	dfc00615 	stw	ra,24(sp)
    6830:	dd400515 	stw	r21,20(sp)
    6834:	dd000415 	stw	r20,16(sp)
    6838:	3825883a 	mov	r18,r7
    683c:	3027883a 	mov	r19,r6
    6840:	000a8300 	call	a830 <__divsi3>
    6844:	00c00044 	movi	r3,1
    6848:	000b883a 	mov	r5,zero
    684c:	1880030e 	bge	r3,r2,685c <__s2b+0x54>
    6850:	18c7883a 	add	r3,r3,r3
    6854:	29400044 	addi	r5,r5,1
    6858:	18bffd16 	blt	r3,r2,6850 <__alt_data_end+0xf8006850>
    685c:	8809883a 	mov	r4,r17
    6860:	00066180 	call	6618 <_Balloc>
    6864:	d8c00717 	ldw	r3,28(sp)
    6868:	10c00515 	stw	r3,20(r2)
    686c:	00c00044 	movi	r3,1
    6870:	10c00415 	stw	r3,16(r2)
    6874:	00c00244 	movi	r3,9
    6878:	1cc0210e 	bge	r3,r19,6900 <__s2b+0xf8>
    687c:	80eb883a 	add	r21,r16,r3
    6880:	a829883a 	mov	r20,r21
    6884:	84e1883a 	add	r16,r16,r19
    6888:	a1c00007 	ldb	r7,0(r20)
    688c:	01800284 	movi	r6,10
    6890:	a5000044 	addi	r20,r20,1
    6894:	100b883a 	mov	r5,r2
    6898:	39fff404 	addi	r7,r7,-48
    689c:	8809883a 	mov	r4,r17
    68a0:	00066e80 	call	66e8 <__multadd>
    68a4:	a43ff81e 	bne	r20,r16,6888 <__alt_data_end+0xf8006888>
    68a8:	ace1883a 	add	r16,r21,r19
    68ac:	843ffe04 	addi	r16,r16,-8
    68b0:	9c800a0e 	bge	r19,r18,68dc <__s2b+0xd4>
    68b4:	94e5c83a 	sub	r18,r18,r19
    68b8:	84a5883a 	add	r18,r16,r18
    68bc:	81c00007 	ldb	r7,0(r16)
    68c0:	01800284 	movi	r6,10
    68c4:	84000044 	addi	r16,r16,1
    68c8:	100b883a 	mov	r5,r2
    68cc:	39fff404 	addi	r7,r7,-48
    68d0:	8809883a 	mov	r4,r17
    68d4:	00066e80 	call	66e8 <__multadd>
    68d8:	84bff81e 	bne	r16,r18,68bc <__alt_data_end+0xf80068bc>
    68dc:	dfc00617 	ldw	ra,24(sp)
    68e0:	dd400517 	ldw	r21,20(sp)
    68e4:	dd000417 	ldw	r20,16(sp)
    68e8:	dcc00317 	ldw	r19,12(sp)
    68ec:	dc800217 	ldw	r18,8(sp)
    68f0:	dc400117 	ldw	r17,4(sp)
    68f4:	dc000017 	ldw	r16,0(sp)
    68f8:	dec00704 	addi	sp,sp,28
    68fc:	f800283a 	ret
    6900:	84000284 	addi	r16,r16,10
    6904:	1827883a 	mov	r19,r3
    6908:	003fe906 	br	68b0 <__alt_data_end+0xf80068b0>

0000690c <__hi0bits>:
    690c:	20bfffec 	andhi	r2,r4,65535
    6910:	1000141e 	bne	r2,zero,6964 <__hi0bits+0x58>
    6914:	2008943a 	slli	r4,r4,16
    6918:	00800404 	movi	r2,16
    691c:	20ffc02c 	andhi	r3,r4,65280
    6920:	1800021e 	bne	r3,zero,692c <__hi0bits+0x20>
    6924:	2008923a 	slli	r4,r4,8
    6928:	10800204 	addi	r2,r2,8
    692c:	20fc002c 	andhi	r3,r4,61440
    6930:	1800021e 	bne	r3,zero,693c <__hi0bits+0x30>
    6934:	2008913a 	slli	r4,r4,4
    6938:	10800104 	addi	r2,r2,4
    693c:	20f0002c 	andhi	r3,r4,49152
    6940:	1800031e 	bne	r3,zero,6950 <__hi0bits+0x44>
    6944:	2109883a 	add	r4,r4,r4
    6948:	10800084 	addi	r2,r2,2
    694c:	2109883a 	add	r4,r4,r4
    6950:	20000316 	blt	r4,zero,6960 <__hi0bits+0x54>
    6954:	2110002c 	andhi	r4,r4,16384
    6958:	2000041e 	bne	r4,zero,696c <__hi0bits+0x60>
    695c:	00800804 	movi	r2,32
    6960:	f800283a 	ret
    6964:	0005883a 	mov	r2,zero
    6968:	003fec06 	br	691c <__alt_data_end+0xf800691c>
    696c:	10800044 	addi	r2,r2,1
    6970:	f800283a 	ret

00006974 <__lo0bits>:
    6974:	20c00017 	ldw	r3,0(r4)
    6978:	188001cc 	andi	r2,r3,7
    697c:	10000826 	beq	r2,zero,69a0 <__lo0bits+0x2c>
    6980:	1880004c 	andi	r2,r3,1
    6984:	1000211e 	bne	r2,zero,6a0c <__lo0bits+0x98>
    6988:	1880008c 	andi	r2,r3,2
    698c:	1000211e 	bne	r2,zero,6a14 <__lo0bits+0xa0>
    6990:	1806d0ba 	srli	r3,r3,2
    6994:	00800084 	movi	r2,2
    6998:	20c00015 	stw	r3,0(r4)
    699c:	f800283a 	ret
    69a0:	18bfffcc 	andi	r2,r3,65535
    69a4:	10001326 	beq	r2,zero,69f4 <__lo0bits+0x80>
    69a8:	0005883a 	mov	r2,zero
    69ac:	19403fcc 	andi	r5,r3,255
    69b0:	2800021e 	bne	r5,zero,69bc <__lo0bits+0x48>
    69b4:	1806d23a 	srli	r3,r3,8
    69b8:	10800204 	addi	r2,r2,8
    69bc:	194003cc 	andi	r5,r3,15
    69c0:	2800021e 	bne	r5,zero,69cc <__lo0bits+0x58>
    69c4:	1806d13a 	srli	r3,r3,4
    69c8:	10800104 	addi	r2,r2,4
    69cc:	194000cc 	andi	r5,r3,3
    69d0:	2800021e 	bne	r5,zero,69dc <__lo0bits+0x68>
    69d4:	1806d0ba 	srli	r3,r3,2
    69d8:	10800084 	addi	r2,r2,2
    69dc:	1940004c 	andi	r5,r3,1
    69e0:	2800081e 	bne	r5,zero,6a04 <__lo0bits+0x90>
    69e4:	1806d07a 	srli	r3,r3,1
    69e8:	1800051e 	bne	r3,zero,6a00 <__lo0bits+0x8c>
    69ec:	00800804 	movi	r2,32
    69f0:	f800283a 	ret
    69f4:	1806d43a 	srli	r3,r3,16
    69f8:	00800404 	movi	r2,16
    69fc:	003feb06 	br	69ac <__alt_data_end+0xf80069ac>
    6a00:	10800044 	addi	r2,r2,1
    6a04:	20c00015 	stw	r3,0(r4)
    6a08:	f800283a 	ret
    6a0c:	0005883a 	mov	r2,zero
    6a10:	f800283a 	ret
    6a14:	1806d07a 	srli	r3,r3,1
    6a18:	00800044 	movi	r2,1
    6a1c:	20c00015 	stw	r3,0(r4)
    6a20:	f800283a 	ret

00006a24 <__i2b>:
    6a24:	defffd04 	addi	sp,sp,-12
    6a28:	dc000015 	stw	r16,0(sp)
    6a2c:	04000044 	movi	r16,1
    6a30:	dc400115 	stw	r17,4(sp)
    6a34:	2823883a 	mov	r17,r5
    6a38:	800b883a 	mov	r5,r16
    6a3c:	dfc00215 	stw	ra,8(sp)
    6a40:	00066180 	call	6618 <_Balloc>
    6a44:	14400515 	stw	r17,20(r2)
    6a48:	14000415 	stw	r16,16(r2)
    6a4c:	dfc00217 	ldw	ra,8(sp)
    6a50:	dc400117 	ldw	r17,4(sp)
    6a54:	dc000017 	ldw	r16,0(sp)
    6a58:	dec00304 	addi	sp,sp,12
    6a5c:	f800283a 	ret

00006a60 <__multiply>:
    6a60:	defffa04 	addi	sp,sp,-24
    6a64:	dcc00315 	stw	r19,12(sp)
    6a68:	dc800215 	stw	r18,8(sp)
    6a6c:	34c00417 	ldw	r19,16(r6)
    6a70:	2c800417 	ldw	r18,16(r5)
    6a74:	dd000415 	stw	r20,16(sp)
    6a78:	dc400115 	stw	r17,4(sp)
    6a7c:	dfc00515 	stw	ra,20(sp)
    6a80:	dc000015 	stw	r16,0(sp)
    6a84:	2829883a 	mov	r20,r5
    6a88:	3023883a 	mov	r17,r6
    6a8c:	94c0050e 	bge	r18,r19,6aa4 <__multiply+0x44>
    6a90:	9007883a 	mov	r3,r18
    6a94:	3029883a 	mov	r20,r6
    6a98:	9825883a 	mov	r18,r19
    6a9c:	2823883a 	mov	r17,r5
    6aa0:	1827883a 	mov	r19,r3
    6aa4:	a0800217 	ldw	r2,8(r20)
    6aa8:	94e1883a 	add	r16,r18,r19
    6aac:	a1400117 	ldw	r5,4(r20)
    6ab0:	1400010e 	bge	r2,r16,6ab8 <__multiply+0x58>
    6ab4:	29400044 	addi	r5,r5,1
    6ab8:	00066180 	call	6618 <_Balloc>
    6abc:	8415883a 	add	r10,r16,r16
    6ac0:	12c00504 	addi	r11,r2,20
    6ac4:	5295883a 	add	r10,r10,r10
    6ac8:	5a95883a 	add	r10,r11,r10
    6acc:	5807883a 	mov	r3,r11
    6ad0:	5a80032e 	bgeu	r11,r10,6ae0 <__multiply+0x80>
    6ad4:	18000015 	stw	zero,0(r3)
    6ad8:	18c00104 	addi	r3,r3,4
    6adc:	1abffd36 	bltu	r3,r10,6ad4 <__alt_data_end+0xf8006ad4>
    6ae0:	9ce7883a 	add	r19,r19,r19
    6ae4:	94a5883a 	add	r18,r18,r18
    6ae8:	89800504 	addi	r6,r17,20
    6aec:	9ce7883a 	add	r19,r19,r19
    6af0:	a3400504 	addi	r13,r20,20
    6af4:	94a5883a 	add	r18,r18,r18
    6af8:	34d9883a 	add	r12,r6,r19
    6afc:	6c93883a 	add	r9,r13,r18
    6b00:	3300422e 	bgeu	r6,r12,6c0c <__multiply+0x1ac>
    6b04:	37c00017 	ldw	ra,0(r6)
    6b08:	fbffffcc 	andi	r15,ra,65535
    6b0c:	78001b26 	beq	r15,zero,6b7c <__multiply+0x11c>
    6b10:	5811883a 	mov	r8,r11
    6b14:	681d883a 	mov	r14,r13
    6b18:	000f883a 	mov	r7,zero
    6b1c:	71000017 	ldw	r4,0(r14)
    6b20:	40c00017 	ldw	r3,0(r8)
    6b24:	73800104 	addi	r14,r14,4
    6b28:	217fffcc 	andi	r5,r4,65535
    6b2c:	2bcb383a 	mul	r5,r5,r15
    6b30:	2008d43a 	srli	r4,r4,16
    6b34:	1c7fffcc 	andi	r17,r3,65535
    6b38:	2c4b883a 	add	r5,r5,r17
    6b3c:	29cb883a 	add	r5,r5,r7
    6b40:	23c9383a 	mul	r4,r4,r15
    6b44:	1806d43a 	srli	r3,r3,16
    6b48:	280ed43a 	srli	r7,r5,16
    6b4c:	297fffcc 	andi	r5,r5,65535
    6b50:	20c7883a 	add	r3,r4,r3
    6b54:	19c7883a 	add	r3,r3,r7
    6b58:	1808943a 	slli	r4,r3,16
    6b5c:	4023883a 	mov	r17,r8
    6b60:	180ed43a 	srli	r7,r3,16
    6b64:	214ab03a 	or	r5,r4,r5
    6b68:	41400015 	stw	r5,0(r8)
    6b6c:	42000104 	addi	r8,r8,4
    6b70:	727fea36 	bltu	r14,r9,6b1c <__alt_data_end+0xf8006b1c>
    6b74:	89c00115 	stw	r7,4(r17)
    6b78:	37c00017 	ldw	ra,0(r6)
    6b7c:	f83ed43a 	srli	ra,ra,16
    6b80:	f8001f26 	beq	ra,zero,6c00 <__multiply+0x1a0>
    6b84:	58c00017 	ldw	r3,0(r11)
    6b88:	681d883a 	mov	r14,r13
    6b8c:	581f883a 	mov	r15,r11
    6b90:	1811883a 	mov	r8,r3
    6b94:	5825883a 	mov	r18,r11
    6b98:	000f883a 	mov	r7,zero
    6b9c:	00000106 	br	6ba4 <__multiply+0x144>
    6ba0:	8825883a 	mov	r18,r17
    6ba4:	7140000b 	ldhu	r5,0(r14)
    6ba8:	4010d43a 	srli	r8,r8,16
    6bac:	193fffcc 	andi	r4,r3,65535
    6bb0:	2fcb383a 	mul	r5,r5,ra
    6bb4:	7bc00104 	addi	r15,r15,4
    6bb8:	73800104 	addi	r14,r14,4
    6bbc:	2a0b883a 	add	r5,r5,r8
    6bc0:	29cb883a 	add	r5,r5,r7
    6bc4:	2806943a 	slli	r3,r5,16
    6bc8:	94400104 	addi	r17,r18,4
    6bcc:	280ad43a 	srli	r5,r5,16
    6bd0:	1908b03a 	or	r4,r3,r4
    6bd4:	793fff15 	stw	r4,-4(r15)
    6bd8:	70ffff17 	ldw	r3,-4(r14)
    6bdc:	8a000017 	ldw	r8,0(r17)
    6be0:	1806d43a 	srli	r3,r3,16
    6be4:	413fffcc 	andi	r4,r8,65535
    6be8:	1fc7383a 	mul	r3,r3,ra
    6bec:	1907883a 	add	r3,r3,r4
    6bf0:	1947883a 	add	r3,r3,r5
    6bf4:	180ed43a 	srli	r7,r3,16
    6bf8:	727fe936 	bltu	r14,r9,6ba0 <__alt_data_end+0xf8006ba0>
    6bfc:	90c00115 	stw	r3,4(r18)
    6c00:	31800104 	addi	r6,r6,4
    6c04:	5ac00104 	addi	r11,r11,4
    6c08:	333fbe36 	bltu	r6,r12,6b04 <__alt_data_end+0xf8006b04>
    6c0c:	0400090e 	bge	zero,r16,6c34 <__multiply+0x1d4>
    6c10:	50ffff17 	ldw	r3,-4(r10)
    6c14:	52bfff04 	addi	r10,r10,-4
    6c18:	18000326 	beq	r3,zero,6c28 <__multiply+0x1c8>
    6c1c:	00000506 	br	6c34 <__multiply+0x1d4>
    6c20:	50c00017 	ldw	r3,0(r10)
    6c24:	1800031e 	bne	r3,zero,6c34 <__multiply+0x1d4>
    6c28:	843fffc4 	addi	r16,r16,-1
    6c2c:	52bfff04 	addi	r10,r10,-4
    6c30:	803ffb1e 	bne	r16,zero,6c20 <__alt_data_end+0xf8006c20>
    6c34:	14000415 	stw	r16,16(r2)
    6c38:	dfc00517 	ldw	ra,20(sp)
    6c3c:	dd000417 	ldw	r20,16(sp)
    6c40:	dcc00317 	ldw	r19,12(sp)
    6c44:	dc800217 	ldw	r18,8(sp)
    6c48:	dc400117 	ldw	r17,4(sp)
    6c4c:	dc000017 	ldw	r16,0(sp)
    6c50:	dec00604 	addi	sp,sp,24
    6c54:	f800283a 	ret

00006c58 <__pow5mult>:
    6c58:	defffa04 	addi	sp,sp,-24
    6c5c:	dcc00315 	stw	r19,12(sp)
    6c60:	dc000015 	stw	r16,0(sp)
    6c64:	dfc00515 	stw	ra,20(sp)
    6c68:	dd000415 	stw	r20,16(sp)
    6c6c:	dc800215 	stw	r18,8(sp)
    6c70:	dc400115 	stw	r17,4(sp)
    6c74:	308000cc 	andi	r2,r6,3
    6c78:	3021883a 	mov	r16,r6
    6c7c:	2027883a 	mov	r19,r4
    6c80:	10002f1e 	bne	r2,zero,6d40 <__pow5mult+0xe8>
    6c84:	2825883a 	mov	r18,r5
    6c88:	8021d0ba 	srai	r16,r16,2
    6c8c:	80001a26 	beq	r16,zero,6cf8 <__pow5mult+0xa0>
    6c90:	9c401217 	ldw	r17,72(r19)
    6c94:	8800061e 	bne	r17,zero,6cb0 <__pow5mult+0x58>
    6c98:	00003406 	br	6d6c <__pow5mult+0x114>
    6c9c:	8021d07a 	srai	r16,r16,1
    6ca0:	80001526 	beq	r16,zero,6cf8 <__pow5mult+0xa0>
    6ca4:	88800017 	ldw	r2,0(r17)
    6ca8:	10001c26 	beq	r2,zero,6d1c <__pow5mult+0xc4>
    6cac:	1023883a 	mov	r17,r2
    6cb0:	8080004c 	andi	r2,r16,1
    6cb4:	103ff926 	beq	r2,zero,6c9c <__alt_data_end+0xf8006c9c>
    6cb8:	880d883a 	mov	r6,r17
    6cbc:	900b883a 	mov	r5,r18
    6cc0:	9809883a 	mov	r4,r19
    6cc4:	0006a600 	call	6a60 <__multiply>
    6cc8:	90001b26 	beq	r18,zero,6d38 <__pow5mult+0xe0>
    6ccc:	91000117 	ldw	r4,4(r18)
    6cd0:	98c01317 	ldw	r3,76(r19)
    6cd4:	8021d07a 	srai	r16,r16,1
    6cd8:	2109883a 	add	r4,r4,r4
    6cdc:	2109883a 	add	r4,r4,r4
    6ce0:	1907883a 	add	r3,r3,r4
    6ce4:	19000017 	ldw	r4,0(r3)
    6ce8:	91000015 	stw	r4,0(r18)
    6cec:	1c800015 	stw	r18,0(r3)
    6cf0:	1025883a 	mov	r18,r2
    6cf4:	803feb1e 	bne	r16,zero,6ca4 <__alt_data_end+0xf8006ca4>
    6cf8:	9005883a 	mov	r2,r18
    6cfc:	dfc00517 	ldw	ra,20(sp)
    6d00:	dd000417 	ldw	r20,16(sp)
    6d04:	dcc00317 	ldw	r19,12(sp)
    6d08:	dc800217 	ldw	r18,8(sp)
    6d0c:	dc400117 	ldw	r17,4(sp)
    6d10:	dc000017 	ldw	r16,0(sp)
    6d14:	dec00604 	addi	sp,sp,24
    6d18:	f800283a 	ret
    6d1c:	880d883a 	mov	r6,r17
    6d20:	880b883a 	mov	r5,r17
    6d24:	9809883a 	mov	r4,r19
    6d28:	0006a600 	call	6a60 <__multiply>
    6d2c:	88800015 	stw	r2,0(r17)
    6d30:	10000015 	stw	zero,0(r2)
    6d34:	003fdd06 	br	6cac <__alt_data_end+0xf8006cac>
    6d38:	1025883a 	mov	r18,r2
    6d3c:	003fd706 	br	6c9c <__alt_data_end+0xf8006c9c>
    6d40:	10bfffc4 	addi	r2,r2,-1
    6d44:	1085883a 	add	r2,r2,r2
    6d48:	00c00074 	movhi	r3,1
    6d4c:	18cffc04 	addi	r3,r3,16368
    6d50:	1085883a 	add	r2,r2,r2
    6d54:	1885883a 	add	r2,r3,r2
    6d58:	11800017 	ldw	r6,0(r2)
    6d5c:	000f883a 	mov	r7,zero
    6d60:	00066e80 	call	66e8 <__multadd>
    6d64:	1025883a 	mov	r18,r2
    6d68:	003fc706 	br	6c88 <__alt_data_end+0xf8006c88>
    6d6c:	05000044 	movi	r20,1
    6d70:	a00b883a 	mov	r5,r20
    6d74:	9809883a 	mov	r4,r19
    6d78:	00066180 	call	6618 <_Balloc>
    6d7c:	1023883a 	mov	r17,r2
    6d80:	00809c44 	movi	r2,625
    6d84:	88800515 	stw	r2,20(r17)
    6d88:	8d000415 	stw	r20,16(r17)
    6d8c:	9c401215 	stw	r17,72(r19)
    6d90:	88000015 	stw	zero,0(r17)
    6d94:	003fc606 	br	6cb0 <__alt_data_end+0xf8006cb0>

00006d98 <__lshift>:
    6d98:	defff904 	addi	sp,sp,-28
    6d9c:	dd400515 	stw	r21,20(sp)
    6da0:	dcc00315 	stw	r19,12(sp)
    6da4:	302bd17a 	srai	r21,r6,5
    6da8:	2cc00417 	ldw	r19,16(r5)
    6dac:	28800217 	ldw	r2,8(r5)
    6db0:	dd000415 	stw	r20,16(sp)
    6db4:	ace7883a 	add	r19,r21,r19
    6db8:	dc800215 	stw	r18,8(sp)
    6dbc:	dc400115 	stw	r17,4(sp)
    6dc0:	dc000015 	stw	r16,0(sp)
    6dc4:	dfc00615 	stw	ra,24(sp)
    6dc8:	9c000044 	addi	r16,r19,1
    6dcc:	2823883a 	mov	r17,r5
    6dd0:	3029883a 	mov	r20,r6
    6dd4:	2025883a 	mov	r18,r4
    6dd8:	29400117 	ldw	r5,4(r5)
    6ddc:	1400030e 	bge	r2,r16,6dec <__lshift+0x54>
    6de0:	1085883a 	add	r2,r2,r2
    6de4:	29400044 	addi	r5,r5,1
    6de8:	143ffd16 	blt	r2,r16,6de0 <__alt_data_end+0xf8006de0>
    6dec:	9009883a 	mov	r4,r18
    6df0:	00066180 	call	6618 <_Balloc>
    6df4:	10c00504 	addi	r3,r2,20
    6df8:	0540070e 	bge	zero,r21,6e18 <__lshift+0x80>
    6dfc:	ad6b883a 	add	r21,r21,r21
    6e00:	ad6b883a 	add	r21,r21,r21
    6e04:	1809883a 	mov	r4,r3
    6e08:	1d47883a 	add	r3,r3,r21
    6e0c:	20000015 	stw	zero,0(r4)
    6e10:	21000104 	addi	r4,r4,4
    6e14:	193ffd1e 	bne	r3,r4,6e0c <__alt_data_end+0xf8006e0c>
    6e18:	8a000417 	ldw	r8,16(r17)
    6e1c:	89000504 	addi	r4,r17,20
    6e20:	a18007cc 	andi	r6,r20,31
    6e24:	4211883a 	add	r8,r8,r8
    6e28:	4211883a 	add	r8,r8,r8
    6e2c:	2211883a 	add	r8,r4,r8
    6e30:	30002326 	beq	r6,zero,6ec0 <__lshift+0x128>
    6e34:	02400804 	movi	r9,32
    6e38:	4993c83a 	sub	r9,r9,r6
    6e3c:	000b883a 	mov	r5,zero
    6e40:	21c00017 	ldw	r7,0(r4)
    6e44:	1815883a 	mov	r10,r3
    6e48:	18c00104 	addi	r3,r3,4
    6e4c:	398e983a 	sll	r7,r7,r6
    6e50:	21000104 	addi	r4,r4,4
    6e54:	394ab03a 	or	r5,r7,r5
    6e58:	197fff15 	stw	r5,-4(r3)
    6e5c:	217fff17 	ldw	r5,-4(r4)
    6e60:	2a4ad83a 	srl	r5,r5,r9
    6e64:	223ff636 	bltu	r4,r8,6e40 <__alt_data_end+0xf8006e40>
    6e68:	51400115 	stw	r5,4(r10)
    6e6c:	28001a1e 	bne	r5,zero,6ed8 <__lshift+0x140>
    6e70:	843fffc4 	addi	r16,r16,-1
    6e74:	14000415 	stw	r16,16(r2)
    6e78:	88000826 	beq	r17,zero,6e9c <__lshift+0x104>
    6e7c:	89000117 	ldw	r4,4(r17)
    6e80:	90c01317 	ldw	r3,76(r18)
    6e84:	2109883a 	add	r4,r4,r4
    6e88:	2109883a 	add	r4,r4,r4
    6e8c:	1907883a 	add	r3,r3,r4
    6e90:	19000017 	ldw	r4,0(r3)
    6e94:	89000015 	stw	r4,0(r17)
    6e98:	1c400015 	stw	r17,0(r3)
    6e9c:	dfc00617 	ldw	ra,24(sp)
    6ea0:	dd400517 	ldw	r21,20(sp)
    6ea4:	dd000417 	ldw	r20,16(sp)
    6ea8:	dcc00317 	ldw	r19,12(sp)
    6eac:	dc800217 	ldw	r18,8(sp)
    6eb0:	dc400117 	ldw	r17,4(sp)
    6eb4:	dc000017 	ldw	r16,0(sp)
    6eb8:	dec00704 	addi	sp,sp,28
    6ebc:	f800283a 	ret
    6ec0:	21400017 	ldw	r5,0(r4)
    6ec4:	18c00104 	addi	r3,r3,4
    6ec8:	21000104 	addi	r4,r4,4
    6ecc:	197fff15 	stw	r5,-4(r3)
    6ed0:	223ffb36 	bltu	r4,r8,6ec0 <__alt_data_end+0xf8006ec0>
    6ed4:	003fe606 	br	6e70 <__alt_data_end+0xf8006e70>
    6ed8:	9c000084 	addi	r16,r19,2
    6edc:	003fe406 	br	6e70 <__alt_data_end+0xf8006e70>

00006ee0 <__mcmp>:
    6ee0:	20800417 	ldw	r2,16(r4)
    6ee4:	28c00417 	ldw	r3,16(r5)
    6ee8:	10c5c83a 	sub	r2,r2,r3
    6eec:	1000111e 	bne	r2,zero,6f34 <__mcmp+0x54>
    6ef0:	18c7883a 	add	r3,r3,r3
    6ef4:	18c7883a 	add	r3,r3,r3
    6ef8:	21000504 	addi	r4,r4,20
    6efc:	29400504 	addi	r5,r5,20
    6f00:	20c5883a 	add	r2,r4,r3
    6f04:	28cb883a 	add	r5,r5,r3
    6f08:	00000106 	br	6f10 <__mcmp+0x30>
    6f0c:	20800a2e 	bgeu	r4,r2,6f38 <__mcmp+0x58>
    6f10:	10bfff04 	addi	r2,r2,-4
    6f14:	297fff04 	addi	r5,r5,-4
    6f18:	11800017 	ldw	r6,0(r2)
    6f1c:	28c00017 	ldw	r3,0(r5)
    6f20:	30fffa26 	beq	r6,r3,6f0c <__alt_data_end+0xf8006f0c>
    6f24:	30c00236 	bltu	r6,r3,6f30 <__mcmp+0x50>
    6f28:	00800044 	movi	r2,1
    6f2c:	f800283a 	ret
    6f30:	00bfffc4 	movi	r2,-1
    6f34:	f800283a 	ret
    6f38:	0005883a 	mov	r2,zero
    6f3c:	f800283a 	ret

00006f40 <__mdiff>:
    6f40:	28c00417 	ldw	r3,16(r5)
    6f44:	30800417 	ldw	r2,16(r6)
    6f48:	defffa04 	addi	sp,sp,-24
    6f4c:	dcc00315 	stw	r19,12(sp)
    6f50:	dc800215 	stw	r18,8(sp)
    6f54:	dfc00515 	stw	ra,20(sp)
    6f58:	dd000415 	stw	r20,16(sp)
    6f5c:	dc400115 	stw	r17,4(sp)
    6f60:	dc000015 	stw	r16,0(sp)
    6f64:	1887c83a 	sub	r3,r3,r2
    6f68:	2825883a 	mov	r18,r5
    6f6c:	3027883a 	mov	r19,r6
    6f70:	1800141e 	bne	r3,zero,6fc4 <__mdiff+0x84>
    6f74:	1085883a 	add	r2,r2,r2
    6f78:	1085883a 	add	r2,r2,r2
    6f7c:	2a000504 	addi	r8,r5,20
    6f80:	34000504 	addi	r16,r6,20
    6f84:	4087883a 	add	r3,r8,r2
    6f88:	8085883a 	add	r2,r16,r2
    6f8c:	00000106 	br	6f94 <__mdiff+0x54>
    6f90:	40c0592e 	bgeu	r8,r3,70f8 <__mdiff+0x1b8>
    6f94:	18ffff04 	addi	r3,r3,-4
    6f98:	10bfff04 	addi	r2,r2,-4
    6f9c:	19c00017 	ldw	r7,0(r3)
    6fa0:	11400017 	ldw	r5,0(r2)
    6fa4:	397ffa26 	beq	r7,r5,6f90 <__alt_data_end+0xf8006f90>
    6fa8:	3940592e 	bgeu	r7,r5,7110 <__mdiff+0x1d0>
    6fac:	9005883a 	mov	r2,r18
    6fb0:	4023883a 	mov	r17,r8
    6fb4:	9825883a 	mov	r18,r19
    6fb8:	05000044 	movi	r20,1
    6fbc:	1027883a 	mov	r19,r2
    6fc0:	00000406 	br	6fd4 <__mdiff+0x94>
    6fc4:	18005616 	blt	r3,zero,7120 <__mdiff+0x1e0>
    6fc8:	34400504 	addi	r17,r6,20
    6fcc:	2c000504 	addi	r16,r5,20
    6fd0:	0029883a 	mov	r20,zero
    6fd4:	91400117 	ldw	r5,4(r18)
    6fd8:	00066180 	call	6618 <_Balloc>
    6fdc:	92400417 	ldw	r9,16(r18)
    6fe0:	9b000417 	ldw	r12,16(r19)
    6fe4:	12c00504 	addi	r11,r2,20
    6fe8:	4a51883a 	add	r8,r9,r9
    6fec:	6319883a 	add	r12,r12,r12
    6ff0:	4211883a 	add	r8,r8,r8
    6ff4:	6319883a 	add	r12,r12,r12
    6ff8:	15000315 	stw	r20,12(r2)
    6ffc:	8211883a 	add	r8,r16,r8
    7000:	8b19883a 	add	r12,r17,r12
    7004:	0007883a 	mov	r3,zero
    7008:	81400017 	ldw	r5,0(r16)
    700c:	89c00017 	ldw	r7,0(r17)
    7010:	59800104 	addi	r6,r11,4
    7014:	293fffcc 	andi	r4,r5,65535
    7018:	20c7883a 	add	r3,r4,r3
    701c:	393fffcc 	andi	r4,r7,65535
    7020:	1909c83a 	sub	r4,r3,r4
    7024:	280ad43a 	srli	r5,r5,16
    7028:	380ed43a 	srli	r7,r7,16
    702c:	2007d43a 	srai	r3,r4,16
    7030:	213fffcc 	andi	r4,r4,65535
    7034:	29cbc83a 	sub	r5,r5,r7
    7038:	28c7883a 	add	r3,r5,r3
    703c:	180a943a 	slli	r5,r3,16
    7040:	8c400104 	addi	r17,r17,4
    7044:	84000104 	addi	r16,r16,4
    7048:	2908b03a 	or	r4,r5,r4
    704c:	59000015 	stw	r4,0(r11)
    7050:	1807d43a 	srai	r3,r3,16
    7054:	3015883a 	mov	r10,r6
    7058:	3017883a 	mov	r11,r6
    705c:	8b3fea36 	bltu	r17,r12,7008 <__alt_data_end+0xf8007008>
    7060:	8200162e 	bgeu	r16,r8,70bc <__mdiff+0x17c>
    7064:	8017883a 	mov	r11,r16
    7068:	59400017 	ldw	r5,0(r11)
    706c:	31800104 	addi	r6,r6,4
    7070:	5ac00104 	addi	r11,r11,4
    7074:	293fffcc 	andi	r4,r5,65535
    7078:	20c7883a 	add	r3,r4,r3
    707c:	280ed43a 	srli	r7,r5,16
    7080:	180bd43a 	srai	r5,r3,16
    7084:	193fffcc 	andi	r4,r3,65535
    7088:	3947883a 	add	r3,r7,r5
    708c:	180a943a 	slli	r5,r3,16
    7090:	1807d43a 	srai	r3,r3,16
    7094:	2908b03a 	or	r4,r5,r4
    7098:	313fff15 	stw	r4,-4(r6)
    709c:	5a3ff236 	bltu	r11,r8,7068 <__alt_data_end+0xf8007068>
    70a0:	0406303a 	nor	r3,zero,r16
    70a4:	1a07883a 	add	r3,r3,r8
    70a8:	1806d0ba 	srli	r3,r3,2
    70ac:	18c00044 	addi	r3,r3,1
    70b0:	18c7883a 	add	r3,r3,r3
    70b4:	18c7883a 	add	r3,r3,r3
    70b8:	50d5883a 	add	r10,r10,r3
    70bc:	50ffff04 	addi	r3,r10,-4
    70c0:	2000041e 	bne	r4,zero,70d4 <__mdiff+0x194>
    70c4:	18ffff04 	addi	r3,r3,-4
    70c8:	19000017 	ldw	r4,0(r3)
    70cc:	4a7fffc4 	addi	r9,r9,-1
    70d0:	203ffc26 	beq	r4,zero,70c4 <__alt_data_end+0xf80070c4>
    70d4:	12400415 	stw	r9,16(r2)
    70d8:	dfc00517 	ldw	ra,20(sp)
    70dc:	dd000417 	ldw	r20,16(sp)
    70e0:	dcc00317 	ldw	r19,12(sp)
    70e4:	dc800217 	ldw	r18,8(sp)
    70e8:	dc400117 	ldw	r17,4(sp)
    70ec:	dc000017 	ldw	r16,0(sp)
    70f0:	dec00604 	addi	sp,sp,24
    70f4:	f800283a 	ret
    70f8:	000b883a 	mov	r5,zero
    70fc:	00066180 	call	6618 <_Balloc>
    7100:	00c00044 	movi	r3,1
    7104:	10c00415 	stw	r3,16(r2)
    7108:	10000515 	stw	zero,20(r2)
    710c:	003ff206 	br	70d8 <__alt_data_end+0xf80070d8>
    7110:	8023883a 	mov	r17,r16
    7114:	0029883a 	mov	r20,zero
    7118:	4021883a 	mov	r16,r8
    711c:	003fad06 	br	6fd4 <__alt_data_end+0xf8006fd4>
    7120:	9005883a 	mov	r2,r18
    7124:	94400504 	addi	r17,r18,20
    7128:	9c000504 	addi	r16,r19,20
    712c:	9825883a 	mov	r18,r19
    7130:	05000044 	movi	r20,1
    7134:	1027883a 	mov	r19,r2
    7138:	003fa606 	br	6fd4 <__alt_data_end+0xf8006fd4>

0000713c <__ulp>:
    713c:	295ffc2c 	andhi	r5,r5,32752
    7140:	00bf3034 	movhi	r2,64704
    7144:	2887883a 	add	r3,r5,r2
    7148:	00c0020e 	bge	zero,r3,7154 <__ulp+0x18>
    714c:	0005883a 	mov	r2,zero
    7150:	f800283a 	ret
    7154:	00c7c83a 	sub	r3,zero,r3
    7158:	1807d53a 	srai	r3,r3,20
    715c:	008004c4 	movi	r2,19
    7160:	10c00b0e 	bge	r2,r3,7190 <__ulp+0x54>
    7164:	18bffb04 	addi	r2,r3,-20
    7168:	01000784 	movi	r4,30
    716c:	0007883a 	mov	r3,zero
    7170:	20800516 	blt	r4,r2,7188 <__ulp+0x4c>
    7174:	010007c4 	movi	r4,31
    7178:	2089c83a 	sub	r4,r4,r2
    717c:	00800044 	movi	r2,1
    7180:	1104983a 	sll	r2,r2,r4
    7184:	f800283a 	ret
    7188:	00800044 	movi	r2,1
    718c:	f800283a 	ret
    7190:	01400234 	movhi	r5,8
    7194:	28c7d83a 	sra	r3,r5,r3
    7198:	0005883a 	mov	r2,zero
    719c:	f800283a 	ret

000071a0 <__b2d>:
    71a0:	defffa04 	addi	sp,sp,-24
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	24000417 	ldw	r16,16(r4)
    71ac:	dc400115 	stw	r17,4(sp)
    71b0:	24400504 	addi	r17,r4,20
    71b4:	8421883a 	add	r16,r16,r16
    71b8:	8421883a 	add	r16,r16,r16
    71bc:	8c21883a 	add	r16,r17,r16
    71c0:	dc800215 	stw	r18,8(sp)
    71c4:	84bfff17 	ldw	r18,-4(r16)
    71c8:	dd000415 	stw	r20,16(sp)
    71cc:	dcc00315 	stw	r19,12(sp)
    71d0:	9009883a 	mov	r4,r18
    71d4:	2829883a 	mov	r20,r5
    71d8:	dfc00515 	stw	ra,20(sp)
    71dc:	000690c0 	call	690c <__hi0bits>
    71e0:	00c00804 	movi	r3,32
    71e4:	1889c83a 	sub	r4,r3,r2
    71e8:	a1000015 	stw	r4,0(r20)
    71ec:	01000284 	movi	r4,10
    71f0:	84ffff04 	addi	r19,r16,-4
    71f4:	20801216 	blt	r4,r2,7240 <__b2d+0xa0>
    71f8:	018002c4 	movi	r6,11
    71fc:	308dc83a 	sub	r6,r6,r2
    7200:	9186d83a 	srl	r3,r18,r6
    7204:	18cffc34 	orhi	r3,r3,16368
    7208:	8cc0212e 	bgeu	r17,r19,7290 <__b2d+0xf0>
    720c:	813ffe17 	ldw	r4,-8(r16)
    7210:	218cd83a 	srl	r6,r4,r6
    7214:	10800544 	addi	r2,r2,21
    7218:	9084983a 	sll	r2,r18,r2
    721c:	1184b03a 	or	r2,r2,r6
    7220:	dfc00517 	ldw	ra,20(sp)
    7224:	dd000417 	ldw	r20,16(sp)
    7228:	dcc00317 	ldw	r19,12(sp)
    722c:	dc800217 	ldw	r18,8(sp)
    7230:	dc400117 	ldw	r17,4(sp)
    7234:	dc000017 	ldw	r16,0(sp)
    7238:	dec00604 	addi	sp,sp,24
    723c:	f800283a 	ret
    7240:	8cc00f2e 	bgeu	r17,r19,7280 <__b2d+0xe0>
    7244:	117ffd44 	addi	r5,r2,-11
    7248:	80bffe17 	ldw	r2,-8(r16)
    724c:	28000e26 	beq	r5,zero,7288 <__b2d+0xe8>
    7250:	1949c83a 	sub	r4,r3,r5
    7254:	9164983a 	sll	r18,r18,r5
    7258:	1106d83a 	srl	r3,r2,r4
    725c:	81bffe04 	addi	r6,r16,-8
    7260:	948ffc34 	orhi	r18,r18,16368
    7264:	90c6b03a 	or	r3,r18,r3
    7268:	89800e2e 	bgeu	r17,r6,72a4 <__b2d+0x104>
    726c:	81bffd17 	ldw	r6,-12(r16)
    7270:	1144983a 	sll	r2,r2,r5
    7274:	310ad83a 	srl	r5,r6,r4
    7278:	2884b03a 	or	r2,r5,r2
    727c:	003fe806 	br	7220 <__alt_data_end+0xf8007220>
    7280:	10bffd44 	addi	r2,r2,-11
    7284:	1000041e 	bne	r2,zero,7298 <__b2d+0xf8>
    7288:	90cffc34 	orhi	r3,r18,16368
    728c:	003fe406 	br	7220 <__alt_data_end+0xf8007220>
    7290:	000d883a 	mov	r6,zero
    7294:	003fdf06 	br	7214 <__alt_data_end+0xf8007214>
    7298:	90a4983a 	sll	r18,r18,r2
    729c:	0005883a 	mov	r2,zero
    72a0:	003ff906 	br	7288 <__alt_data_end+0xf8007288>
    72a4:	1144983a 	sll	r2,r2,r5
    72a8:	003fdd06 	br	7220 <__alt_data_end+0xf8007220>

000072ac <__d2b>:
    72ac:	defff804 	addi	sp,sp,-32
    72b0:	dc000215 	stw	r16,8(sp)
    72b4:	3021883a 	mov	r16,r6
    72b8:	dc400315 	stw	r17,12(sp)
    72bc:	8022907a 	slli	r17,r16,1
    72c0:	dd000615 	stw	r20,24(sp)
    72c4:	2829883a 	mov	r20,r5
    72c8:	01400044 	movi	r5,1
    72cc:	dcc00515 	stw	r19,20(sp)
    72d0:	dc800415 	stw	r18,16(sp)
    72d4:	dfc00715 	stw	ra,28(sp)
    72d8:	3825883a 	mov	r18,r7
    72dc:	8822d57a 	srli	r17,r17,21
    72e0:	00066180 	call	6618 <_Balloc>
    72e4:	1027883a 	mov	r19,r2
    72e8:	00800434 	movhi	r2,16
    72ec:	10bfffc4 	addi	r2,r2,-1
    72f0:	808c703a 	and	r6,r16,r2
    72f4:	88000126 	beq	r17,zero,72fc <__d2b+0x50>
    72f8:	31800434 	orhi	r6,r6,16
    72fc:	d9800015 	stw	r6,0(sp)
    7300:	a0002426 	beq	r20,zero,7394 <__d2b+0xe8>
    7304:	d9000104 	addi	r4,sp,4
    7308:	dd000115 	stw	r20,4(sp)
    730c:	00069740 	call	6974 <__lo0bits>
    7310:	d8c00017 	ldw	r3,0(sp)
    7314:	10002f1e 	bne	r2,zero,73d4 <__d2b+0x128>
    7318:	d9000117 	ldw	r4,4(sp)
    731c:	99000515 	stw	r4,20(r19)
    7320:	1821003a 	cmpeq	r16,r3,zero
    7324:	01000084 	movi	r4,2
    7328:	2421c83a 	sub	r16,r4,r16
    732c:	98c00615 	stw	r3,24(r19)
    7330:	9c000415 	stw	r16,16(r19)
    7334:	88001f1e 	bne	r17,zero,73b4 <__d2b+0x108>
    7338:	10bef384 	addi	r2,r2,-1074
    733c:	90800015 	stw	r2,0(r18)
    7340:	00900034 	movhi	r2,16384
    7344:	10bfffc4 	addi	r2,r2,-1
    7348:	8085883a 	add	r2,r16,r2
    734c:	1085883a 	add	r2,r2,r2
    7350:	1085883a 	add	r2,r2,r2
    7354:	9885883a 	add	r2,r19,r2
    7358:	11000517 	ldw	r4,20(r2)
    735c:	8020917a 	slli	r16,r16,5
    7360:	000690c0 	call	690c <__hi0bits>
    7364:	d8c00817 	ldw	r3,32(sp)
    7368:	8085c83a 	sub	r2,r16,r2
    736c:	18800015 	stw	r2,0(r3)
    7370:	9805883a 	mov	r2,r19
    7374:	dfc00717 	ldw	ra,28(sp)
    7378:	dd000617 	ldw	r20,24(sp)
    737c:	dcc00517 	ldw	r19,20(sp)
    7380:	dc800417 	ldw	r18,16(sp)
    7384:	dc400317 	ldw	r17,12(sp)
    7388:	dc000217 	ldw	r16,8(sp)
    738c:	dec00804 	addi	sp,sp,32
    7390:	f800283a 	ret
    7394:	d809883a 	mov	r4,sp
    7398:	00069740 	call	6974 <__lo0bits>
    739c:	d8c00017 	ldw	r3,0(sp)
    73a0:	04000044 	movi	r16,1
    73a4:	9c000415 	stw	r16,16(r19)
    73a8:	98c00515 	stw	r3,20(r19)
    73ac:	10800804 	addi	r2,r2,32
    73b0:	883fe126 	beq	r17,zero,7338 <__alt_data_end+0xf8007338>
    73b4:	00c00d44 	movi	r3,53
    73b8:	8c7ef344 	addi	r17,r17,-1075
    73bc:	88a3883a 	add	r17,r17,r2
    73c0:	1885c83a 	sub	r2,r3,r2
    73c4:	d8c00817 	ldw	r3,32(sp)
    73c8:	94400015 	stw	r17,0(r18)
    73cc:	18800015 	stw	r2,0(r3)
    73d0:	003fe706 	br	7370 <__alt_data_end+0xf8007370>
    73d4:	01000804 	movi	r4,32
    73d8:	2089c83a 	sub	r4,r4,r2
    73dc:	1908983a 	sll	r4,r3,r4
    73e0:	d9400117 	ldw	r5,4(sp)
    73e4:	1886d83a 	srl	r3,r3,r2
    73e8:	2148b03a 	or	r4,r4,r5
    73ec:	99000515 	stw	r4,20(r19)
    73f0:	d8c00015 	stw	r3,0(sp)
    73f4:	003fca06 	br	7320 <__alt_data_end+0xf8007320>

000073f8 <__ratio>:
    73f8:	defff904 	addi	sp,sp,-28
    73fc:	dc400315 	stw	r17,12(sp)
    7400:	2823883a 	mov	r17,r5
    7404:	d9400104 	addi	r5,sp,4
    7408:	dfc00615 	stw	ra,24(sp)
    740c:	dcc00515 	stw	r19,20(sp)
    7410:	dc800415 	stw	r18,16(sp)
    7414:	2027883a 	mov	r19,r4
    7418:	dc000215 	stw	r16,8(sp)
    741c:	00071a00 	call	71a0 <__b2d>
    7420:	d80b883a 	mov	r5,sp
    7424:	8809883a 	mov	r4,r17
    7428:	1025883a 	mov	r18,r2
    742c:	1821883a 	mov	r16,r3
    7430:	00071a00 	call	71a0 <__b2d>
    7434:	8a000417 	ldw	r8,16(r17)
    7438:	99000417 	ldw	r4,16(r19)
    743c:	d9400117 	ldw	r5,4(sp)
    7440:	2209c83a 	sub	r4,r4,r8
    7444:	2010917a 	slli	r8,r4,5
    7448:	d9000017 	ldw	r4,0(sp)
    744c:	2909c83a 	sub	r4,r5,r4
    7450:	4109883a 	add	r4,r8,r4
    7454:	01000e0e 	bge	zero,r4,7490 <__ratio+0x98>
    7458:	2008953a 	slli	r4,r4,20
    745c:	2421883a 	add	r16,r4,r16
    7460:	100d883a 	mov	r6,r2
    7464:	180f883a 	mov	r7,r3
    7468:	9009883a 	mov	r4,r18
    746c:	800b883a 	mov	r5,r16
    7470:	000b2900 	call	b290 <__divdf3>
    7474:	dfc00617 	ldw	ra,24(sp)
    7478:	dcc00517 	ldw	r19,20(sp)
    747c:	dc800417 	ldw	r18,16(sp)
    7480:	dc400317 	ldw	r17,12(sp)
    7484:	dc000217 	ldw	r16,8(sp)
    7488:	dec00704 	addi	sp,sp,28
    748c:	f800283a 	ret
    7490:	2008953a 	slli	r4,r4,20
    7494:	1907c83a 	sub	r3,r3,r4
    7498:	003ff106 	br	7460 <__alt_data_end+0xf8007460>

0000749c <_mprec_log10>:
    749c:	defffe04 	addi	sp,sp,-8
    74a0:	dc000015 	stw	r16,0(sp)
    74a4:	dfc00115 	stw	ra,4(sp)
    74a8:	008005c4 	movi	r2,23
    74ac:	2021883a 	mov	r16,r4
    74b0:	11000d0e 	bge	r2,r4,74e8 <_mprec_log10+0x4c>
    74b4:	0005883a 	mov	r2,zero
    74b8:	00cffc34 	movhi	r3,16368
    74bc:	843fffc4 	addi	r16,r16,-1
    74c0:	000d883a 	mov	r6,zero
    74c4:	01d00934 	movhi	r7,16420
    74c8:	1009883a 	mov	r4,r2
    74cc:	180b883a 	mov	r5,r3
    74d0:	000bdd00 	call	bdd0 <__muldf3>
    74d4:	803ff91e 	bne	r16,zero,74bc <__alt_data_end+0xf80074bc>
    74d8:	dfc00117 	ldw	ra,4(sp)
    74dc:	dc000017 	ldw	r16,0(sp)
    74e0:	dec00204 	addi	sp,sp,8
    74e4:	f800283a 	ret
    74e8:	202090fa 	slli	r16,r4,3
    74ec:	00800074 	movhi	r2,1
    74f0:	10901304 	addi	r2,r2,16460
    74f4:	1421883a 	add	r16,r2,r16
    74f8:	80800017 	ldw	r2,0(r16)
    74fc:	80c00117 	ldw	r3,4(r16)
    7500:	dfc00117 	ldw	ra,4(sp)
    7504:	dc000017 	ldw	r16,0(sp)
    7508:	dec00204 	addi	sp,sp,8
    750c:	f800283a 	ret

00007510 <__copybits>:
    7510:	297fffc4 	addi	r5,r5,-1
    7514:	280fd17a 	srai	r7,r5,5
    7518:	30c00417 	ldw	r3,16(r6)
    751c:	30800504 	addi	r2,r6,20
    7520:	39c00044 	addi	r7,r7,1
    7524:	18c7883a 	add	r3,r3,r3
    7528:	39cf883a 	add	r7,r7,r7
    752c:	18c7883a 	add	r3,r3,r3
    7530:	39cf883a 	add	r7,r7,r7
    7534:	10c7883a 	add	r3,r2,r3
    7538:	21cf883a 	add	r7,r4,r7
    753c:	10c00d2e 	bgeu	r2,r3,7574 <__copybits+0x64>
    7540:	200b883a 	mov	r5,r4
    7544:	12000017 	ldw	r8,0(r2)
    7548:	29400104 	addi	r5,r5,4
    754c:	10800104 	addi	r2,r2,4
    7550:	2a3fff15 	stw	r8,-4(r5)
    7554:	10fffb36 	bltu	r2,r3,7544 <__alt_data_end+0xf8007544>
    7558:	1985c83a 	sub	r2,r3,r6
    755c:	10bffac4 	addi	r2,r2,-21
    7560:	1004d0ba 	srli	r2,r2,2
    7564:	10800044 	addi	r2,r2,1
    7568:	1085883a 	add	r2,r2,r2
    756c:	1085883a 	add	r2,r2,r2
    7570:	2089883a 	add	r4,r4,r2
    7574:	21c0032e 	bgeu	r4,r7,7584 <__copybits+0x74>
    7578:	20000015 	stw	zero,0(r4)
    757c:	21000104 	addi	r4,r4,4
    7580:	21fffd36 	bltu	r4,r7,7578 <__alt_data_end+0xf8007578>
    7584:	f800283a 	ret

00007588 <__any_on>:
    7588:	20c00417 	ldw	r3,16(r4)
    758c:	2805d17a 	srai	r2,r5,5
    7590:	21000504 	addi	r4,r4,20
    7594:	18800d0e 	bge	r3,r2,75cc <__any_on+0x44>
    7598:	18c7883a 	add	r3,r3,r3
    759c:	18c7883a 	add	r3,r3,r3
    75a0:	20c7883a 	add	r3,r4,r3
    75a4:	20c0192e 	bgeu	r4,r3,760c <__any_on+0x84>
    75a8:	18bfff17 	ldw	r2,-4(r3)
    75ac:	18ffff04 	addi	r3,r3,-4
    75b0:	1000041e 	bne	r2,zero,75c4 <__any_on+0x3c>
    75b4:	20c0142e 	bgeu	r4,r3,7608 <__any_on+0x80>
    75b8:	18ffff04 	addi	r3,r3,-4
    75bc:	19400017 	ldw	r5,0(r3)
    75c0:	283ffc26 	beq	r5,zero,75b4 <__alt_data_end+0xf80075b4>
    75c4:	00800044 	movi	r2,1
    75c8:	f800283a 	ret
    75cc:	10c00a0e 	bge	r2,r3,75f8 <__any_on+0x70>
    75d0:	1085883a 	add	r2,r2,r2
    75d4:	1085883a 	add	r2,r2,r2
    75d8:	294007cc 	andi	r5,r5,31
    75dc:	2087883a 	add	r3,r4,r2
    75e0:	283ff026 	beq	r5,zero,75a4 <__alt_data_end+0xf80075a4>
    75e4:	19800017 	ldw	r6,0(r3)
    75e8:	3144d83a 	srl	r2,r6,r5
    75ec:	114a983a 	sll	r5,r2,r5
    75f0:	317ff41e 	bne	r6,r5,75c4 <__alt_data_end+0xf80075c4>
    75f4:	003feb06 	br	75a4 <__alt_data_end+0xf80075a4>
    75f8:	1085883a 	add	r2,r2,r2
    75fc:	1085883a 	add	r2,r2,r2
    7600:	2087883a 	add	r3,r4,r2
    7604:	003fe706 	br	75a4 <__alt_data_end+0xf80075a4>
    7608:	f800283a 	ret
    760c:	0005883a 	mov	r2,zero
    7610:	f800283a 	ret

00007614 <_realloc_r>:
    7614:	defff604 	addi	sp,sp,-40
    7618:	dc800215 	stw	r18,8(sp)
    761c:	dfc00915 	stw	ra,36(sp)
    7620:	df000815 	stw	fp,32(sp)
    7624:	ddc00715 	stw	r23,28(sp)
    7628:	dd800615 	stw	r22,24(sp)
    762c:	dd400515 	stw	r21,20(sp)
    7630:	dd000415 	stw	r20,16(sp)
    7634:	dcc00315 	stw	r19,12(sp)
    7638:	dc400115 	stw	r17,4(sp)
    763c:	dc000015 	stw	r16,0(sp)
    7640:	3025883a 	mov	r18,r6
    7644:	2800b726 	beq	r5,zero,7924 <_realloc_r+0x310>
    7648:	282b883a 	mov	r21,r5
    764c:	2029883a 	mov	r20,r4
    7650:	000d5c80 	call	d5c8 <__malloc_lock>
    7654:	a8bfff17 	ldw	r2,-4(r21)
    7658:	043fff04 	movi	r16,-4
    765c:	90c002c4 	addi	r3,r18,11
    7660:	01000584 	movi	r4,22
    7664:	acfffe04 	addi	r19,r21,-8
    7668:	1420703a 	and	r16,r2,r16
    766c:	20c0332e 	bgeu	r4,r3,773c <_realloc_r+0x128>
    7670:	047ffe04 	movi	r17,-8
    7674:	1c62703a 	and	r17,r3,r17
    7678:	8807883a 	mov	r3,r17
    767c:	88005816 	blt	r17,zero,77e0 <_realloc_r+0x1cc>
    7680:	8c805736 	bltu	r17,r18,77e0 <_realloc_r+0x1cc>
    7684:	80c0300e 	bge	r16,r3,7748 <_realloc_r+0x134>
    7688:	07000074 	movhi	fp,1
    768c:	e710ac04 	addi	fp,fp,17072
    7690:	e1c00217 	ldw	r7,8(fp)
    7694:	9c09883a 	add	r4,r19,r16
    7698:	22000117 	ldw	r8,4(r4)
    769c:	21c06326 	beq	r4,r7,782c <_realloc_r+0x218>
    76a0:	017fff84 	movi	r5,-2
    76a4:	414a703a 	and	r5,r8,r5
    76a8:	214b883a 	add	r5,r4,r5
    76ac:	29800117 	ldw	r6,4(r5)
    76b0:	3180004c 	andi	r6,r6,1
    76b4:	30003f26 	beq	r6,zero,77b4 <_realloc_r+0x1a0>
    76b8:	1080004c 	andi	r2,r2,1
    76bc:	10008326 	beq	r2,zero,78cc <_realloc_r+0x2b8>
    76c0:	900b883a 	mov	r5,r18
    76c4:	a009883a 	mov	r4,r20
    76c8:	00006180 	call	618 <_malloc_r>
    76cc:	1025883a 	mov	r18,r2
    76d0:	10011e26 	beq	r2,zero,7b4c <_realloc_r+0x538>
    76d4:	a93fff17 	ldw	r4,-4(r21)
    76d8:	10fffe04 	addi	r3,r2,-8
    76dc:	00bfff84 	movi	r2,-2
    76e0:	2084703a 	and	r2,r4,r2
    76e4:	9885883a 	add	r2,r19,r2
    76e8:	1880ee26 	beq	r3,r2,7aa4 <_realloc_r+0x490>
    76ec:	81bfff04 	addi	r6,r16,-4
    76f0:	00800904 	movi	r2,36
    76f4:	1180b836 	bltu	r2,r6,79d8 <_realloc_r+0x3c4>
    76f8:	00c004c4 	movi	r3,19
    76fc:	19809636 	bltu	r3,r6,7958 <_realloc_r+0x344>
    7700:	9005883a 	mov	r2,r18
    7704:	a807883a 	mov	r3,r21
    7708:	19000017 	ldw	r4,0(r3)
    770c:	11000015 	stw	r4,0(r2)
    7710:	19000117 	ldw	r4,4(r3)
    7714:	11000115 	stw	r4,4(r2)
    7718:	18c00217 	ldw	r3,8(r3)
    771c:	10c00215 	stw	r3,8(r2)
    7720:	a80b883a 	mov	r5,r21
    7724:	a009883a 	mov	r4,r20
    7728:	000557c0 	call	557c <_free_r>
    772c:	a009883a 	mov	r4,r20
    7730:	000d5ec0 	call	d5ec <__malloc_unlock>
    7734:	9005883a 	mov	r2,r18
    7738:	00001206 	br	7784 <_realloc_r+0x170>
    773c:	00c00404 	movi	r3,16
    7740:	1823883a 	mov	r17,r3
    7744:	003fce06 	br	7680 <__alt_data_end+0xf8007680>
    7748:	a825883a 	mov	r18,r21
    774c:	8445c83a 	sub	r2,r16,r17
    7750:	00c003c4 	movi	r3,15
    7754:	18802636 	bltu	r3,r2,77f0 <_realloc_r+0x1dc>
    7758:	99800117 	ldw	r6,4(r19)
    775c:	9c07883a 	add	r3,r19,r16
    7760:	3180004c 	andi	r6,r6,1
    7764:	3420b03a 	or	r16,r6,r16
    7768:	9c000115 	stw	r16,4(r19)
    776c:	18800117 	ldw	r2,4(r3)
    7770:	10800054 	ori	r2,r2,1
    7774:	18800115 	stw	r2,4(r3)
    7778:	a009883a 	mov	r4,r20
    777c:	000d5ec0 	call	d5ec <__malloc_unlock>
    7780:	9005883a 	mov	r2,r18
    7784:	dfc00917 	ldw	ra,36(sp)
    7788:	df000817 	ldw	fp,32(sp)
    778c:	ddc00717 	ldw	r23,28(sp)
    7790:	dd800617 	ldw	r22,24(sp)
    7794:	dd400517 	ldw	r21,20(sp)
    7798:	dd000417 	ldw	r20,16(sp)
    779c:	dcc00317 	ldw	r19,12(sp)
    77a0:	dc800217 	ldw	r18,8(sp)
    77a4:	dc400117 	ldw	r17,4(sp)
    77a8:	dc000017 	ldw	r16,0(sp)
    77ac:	dec00a04 	addi	sp,sp,40
    77b0:	f800283a 	ret
    77b4:	017fff04 	movi	r5,-4
    77b8:	414a703a 	and	r5,r8,r5
    77bc:	814d883a 	add	r6,r16,r5
    77c0:	30c01f16 	blt	r6,r3,7840 <_realloc_r+0x22c>
    77c4:	20800317 	ldw	r2,12(r4)
    77c8:	20c00217 	ldw	r3,8(r4)
    77cc:	a825883a 	mov	r18,r21
    77d0:	3021883a 	mov	r16,r6
    77d4:	18800315 	stw	r2,12(r3)
    77d8:	10c00215 	stw	r3,8(r2)
    77dc:	003fdb06 	br	774c <__alt_data_end+0xf800774c>
    77e0:	00800304 	movi	r2,12
    77e4:	a0800015 	stw	r2,0(r20)
    77e8:	0005883a 	mov	r2,zero
    77ec:	003fe506 	br	7784 <__alt_data_end+0xf8007784>
    77f0:	98c00117 	ldw	r3,4(r19)
    77f4:	9c4b883a 	add	r5,r19,r17
    77f8:	11000054 	ori	r4,r2,1
    77fc:	18c0004c 	andi	r3,r3,1
    7800:	1c62b03a 	or	r17,r3,r17
    7804:	9c400115 	stw	r17,4(r19)
    7808:	29000115 	stw	r4,4(r5)
    780c:	2885883a 	add	r2,r5,r2
    7810:	10c00117 	ldw	r3,4(r2)
    7814:	29400204 	addi	r5,r5,8
    7818:	a009883a 	mov	r4,r20
    781c:	18c00054 	ori	r3,r3,1
    7820:	10c00115 	stw	r3,4(r2)
    7824:	000557c0 	call	557c <_free_r>
    7828:	003fd306 	br	7778 <__alt_data_end+0xf8007778>
    782c:	017fff04 	movi	r5,-4
    7830:	414a703a 	and	r5,r8,r5
    7834:	89800404 	addi	r6,r17,16
    7838:	8151883a 	add	r8,r16,r5
    783c:	4180590e 	bge	r8,r6,79a4 <_realloc_r+0x390>
    7840:	1080004c 	andi	r2,r2,1
    7844:	103f9e1e 	bne	r2,zero,76c0 <__alt_data_end+0xf80076c0>
    7848:	adbffe17 	ldw	r22,-8(r21)
    784c:	00bfff04 	movi	r2,-4
    7850:	9dadc83a 	sub	r22,r19,r22
    7854:	b1800117 	ldw	r6,4(r22)
    7858:	3084703a 	and	r2,r6,r2
    785c:	20002026 	beq	r4,zero,78e0 <_realloc_r+0x2cc>
    7860:	80af883a 	add	r23,r16,r2
    7864:	b96f883a 	add	r23,r23,r5
    7868:	21c05f26 	beq	r4,r7,79e8 <_realloc_r+0x3d4>
    786c:	b8c01c16 	blt	r23,r3,78e0 <_realloc_r+0x2cc>
    7870:	20800317 	ldw	r2,12(r4)
    7874:	20c00217 	ldw	r3,8(r4)
    7878:	81bfff04 	addi	r6,r16,-4
    787c:	01000904 	movi	r4,36
    7880:	18800315 	stw	r2,12(r3)
    7884:	10c00215 	stw	r3,8(r2)
    7888:	b0c00217 	ldw	r3,8(r22)
    788c:	b0800317 	ldw	r2,12(r22)
    7890:	b4800204 	addi	r18,r22,8
    7894:	18800315 	stw	r2,12(r3)
    7898:	10c00215 	stw	r3,8(r2)
    789c:	21801b36 	bltu	r4,r6,790c <_realloc_r+0x2f8>
    78a0:	008004c4 	movi	r2,19
    78a4:	1180352e 	bgeu	r2,r6,797c <_realloc_r+0x368>
    78a8:	a8800017 	ldw	r2,0(r21)
    78ac:	b0800215 	stw	r2,8(r22)
    78b0:	a8800117 	ldw	r2,4(r21)
    78b4:	b0800315 	stw	r2,12(r22)
    78b8:	008006c4 	movi	r2,27
    78bc:	11807f36 	bltu	r2,r6,7abc <_realloc_r+0x4a8>
    78c0:	b0800404 	addi	r2,r22,16
    78c4:	ad400204 	addi	r21,r21,8
    78c8:	00002d06 	br	7980 <_realloc_r+0x36c>
    78cc:	adbffe17 	ldw	r22,-8(r21)
    78d0:	00bfff04 	movi	r2,-4
    78d4:	9dadc83a 	sub	r22,r19,r22
    78d8:	b1000117 	ldw	r4,4(r22)
    78dc:	2084703a 	and	r2,r4,r2
    78e0:	b03f7726 	beq	r22,zero,76c0 <__alt_data_end+0xf80076c0>
    78e4:	80af883a 	add	r23,r16,r2
    78e8:	b8ff7516 	blt	r23,r3,76c0 <__alt_data_end+0xf80076c0>
    78ec:	b0800317 	ldw	r2,12(r22)
    78f0:	b0c00217 	ldw	r3,8(r22)
    78f4:	81bfff04 	addi	r6,r16,-4
    78f8:	01000904 	movi	r4,36
    78fc:	18800315 	stw	r2,12(r3)
    7900:	10c00215 	stw	r3,8(r2)
    7904:	b4800204 	addi	r18,r22,8
    7908:	21bfe52e 	bgeu	r4,r6,78a0 <__alt_data_end+0xf80078a0>
    790c:	a80b883a 	mov	r5,r21
    7910:	9009883a 	mov	r4,r18
    7914:	00063940 	call	6394 <memmove>
    7918:	b821883a 	mov	r16,r23
    791c:	b027883a 	mov	r19,r22
    7920:	003f8a06 	br	774c <__alt_data_end+0xf800774c>
    7924:	300b883a 	mov	r5,r6
    7928:	dfc00917 	ldw	ra,36(sp)
    792c:	df000817 	ldw	fp,32(sp)
    7930:	ddc00717 	ldw	r23,28(sp)
    7934:	dd800617 	ldw	r22,24(sp)
    7938:	dd400517 	ldw	r21,20(sp)
    793c:	dd000417 	ldw	r20,16(sp)
    7940:	dcc00317 	ldw	r19,12(sp)
    7944:	dc800217 	ldw	r18,8(sp)
    7948:	dc400117 	ldw	r17,4(sp)
    794c:	dc000017 	ldw	r16,0(sp)
    7950:	dec00a04 	addi	sp,sp,40
    7954:	00006181 	jmpi	618 <_malloc_r>
    7958:	a8c00017 	ldw	r3,0(r21)
    795c:	90c00015 	stw	r3,0(r18)
    7960:	a8c00117 	ldw	r3,4(r21)
    7964:	90c00115 	stw	r3,4(r18)
    7968:	00c006c4 	movi	r3,27
    796c:	19804536 	bltu	r3,r6,7a84 <_realloc_r+0x470>
    7970:	90800204 	addi	r2,r18,8
    7974:	a8c00204 	addi	r3,r21,8
    7978:	003f6306 	br	7708 <__alt_data_end+0xf8007708>
    797c:	9005883a 	mov	r2,r18
    7980:	a8c00017 	ldw	r3,0(r21)
    7984:	b821883a 	mov	r16,r23
    7988:	b027883a 	mov	r19,r22
    798c:	10c00015 	stw	r3,0(r2)
    7990:	a8c00117 	ldw	r3,4(r21)
    7994:	10c00115 	stw	r3,4(r2)
    7998:	a8c00217 	ldw	r3,8(r21)
    799c:	10c00215 	stw	r3,8(r2)
    79a0:	003f6a06 	br	774c <__alt_data_end+0xf800774c>
    79a4:	9c67883a 	add	r19,r19,r17
    79a8:	4445c83a 	sub	r2,r8,r17
    79ac:	e4c00215 	stw	r19,8(fp)
    79b0:	10800054 	ori	r2,r2,1
    79b4:	98800115 	stw	r2,4(r19)
    79b8:	a8bfff17 	ldw	r2,-4(r21)
    79bc:	a009883a 	mov	r4,r20
    79c0:	1080004c 	andi	r2,r2,1
    79c4:	1462b03a 	or	r17,r2,r17
    79c8:	ac7fff15 	stw	r17,-4(r21)
    79cc:	000d5ec0 	call	d5ec <__malloc_unlock>
    79d0:	a805883a 	mov	r2,r21
    79d4:	003f6b06 	br	7784 <__alt_data_end+0xf8007784>
    79d8:	a80b883a 	mov	r5,r21
    79dc:	9009883a 	mov	r4,r18
    79e0:	00063940 	call	6394 <memmove>
    79e4:	003f4e06 	br	7720 <__alt_data_end+0xf8007720>
    79e8:	89000404 	addi	r4,r17,16
    79ec:	b93fbc16 	blt	r23,r4,78e0 <__alt_data_end+0xf80078e0>
    79f0:	b0800317 	ldw	r2,12(r22)
    79f4:	b0c00217 	ldw	r3,8(r22)
    79f8:	81bfff04 	addi	r6,r16,-4
    79fc:	01000904 	movi	r4,36
    7a00:	18800315 	stw	r2,12(r3)
    7a04:	10c00215 	stw	r3,8(r2)
    7a08:	b4800204 	addi	r18,r22,8
    7a0c:	21804336 	bltu	r4,r6,7b1c <_realloc_r+0x508>
    7a10:	008004c4 	movi	r2,19
    7a14:	11803f2e 	bgeu	r2,r6,7b14 <_realloc_r+0x500>
    7a18:	a8800017 	ldw	r2,0(r21)
    7a1c:	b0800215 	stw	r2,8(r22)
    7a20:	a8800117 	ldw	r2,4(r21)
    7a24:	b0800315 	stw	r2,12(r22)
    7a28:	008006c4 	movi	r2,27
    7a2c:	11803f36 	bltu	r2,r6,7b2c <_realloc_r+0x518>
    7a30:	b0800404 	addi	r2,r22,16
    7a34:	ad400204 	addi	r21,r21,8
    7a38:	a8c00017 	ldw	r3,0(r21)
    7a3c:	10c00015 	stw	r3,0(r2)
    7a40:	a8c00117 	ldw	r3,4(r21)
    7a44:	10c00115 	stw	r3,4(r2)
    7a48:	a8c00217 	ldw	r3,8(r21)
    7a4c:	10c00215 	stw	r3,8(r2)
    7a50:	b447883a 	add	r3,r22,r17
    7a54:	bc45c83a 	sub	r2,r23,r17
    7a58:	e0c00215 	stw	r3,8(fp)
    7a5c:	10800054 	ori	r2,r2,1
    7a60:	18800115 	stw	r2,4(r3)
    7a64:	b0800117 	ldw	r2,4(r22)
    7a68:	a009883a 	mov	r4,r20
    7a6c:	1080004c 	andi	r2,r2,1
    7a70:	1462b03a 	or	r17,r2,r17
    7a74:	b4400115 	stw	r17,4(r22)
    7a78:	000d5ec0 	call	d5ec <__malloc_unlock>
    7a7c:	9005883a 	mov	r2,r18
    7a80:	003f4006 	br	7784 <__alt_data_end+0xf8007784>
    7a84:	a8c00217 	ldw	r3,8(r21)
    7a88:	90c00215 	stw	r3,8(r18)
    7a8c:	a8c00317 	ldw	r3,12(r21)
    7a90:	90c00315 	stw	r3,12(r18)
    7a94:	30801126 	beq	r6,r2,7adc <_realloc_r+0x4c8>
    7a98:	90800404 	addi	r2,r18,16
    7a9c:	a8c00404 	addi	r3,r21,16
    7aa0:	003f1906 	br	7708 <__alt_data_end+0xf8007708>
    7aa4:	90ffff17 	ldw	r3,-4(r18)
    7aa8:	00bfff04 	movi	r2,-4
    7aac:	a825883a 	mov	r18,r21
    7ab0:	1884703a 	and	r2,r3,r2
    7ab4:	80a1883a 	add	r16,r16,r2
    7ab8:	003f2406 	br	774c <__alt_data_end+0xf800774c>
    7abc:	a8800217 	ldw	r2,8(r21)
    7ac0:	b0800415 	stw	r2,16(r22)
    7ac4:	a8800317 	ldw	r2,12(r21)
    7ac8:	b0800515 	stw	r2,20(r22)
    7acc:	31000a26 	beq	r6,r4,7af8 <_realloc_r+0x4e4>
    7ad0:	b0800604 	addi	r2,r22,24
    7ad4:	ad400404 	addi	r21,r21,16
    7ad8:	003fa906 	br	7980 <__alt_data_end+0xf8007980>
    7adc:	a9000417 	ldw	r4,16(r21)
    7ae0:	90800604 	addi	r2,r18,24
    7ae4:	a8c00604 	addi	r3,r21,24
    7ae8:	91000415 	stw	r4,16(r18)
    7aec:	a9000517 	ldw	r4,20(r21)
    7af0:	91000515 	stw	r4,20(r18)
    7af4:	003f0406 	br	7708 <__alt_data_end+0xf8007708>
    7af8:	a8c00417 	ldw	r3,16(r21)
    7afc:	ad400604 	addi	r21,r21,24
    7b00:	b0800804 	addi	r2,r22,32
    7b04:	b0c00615 	stw	r3,24(r22)
    7b08:	a8ffff17 	ldw	r3,-4(r21)
    7b0c:	b0c00715 	stw	r3,28(r22)
    7b10:	003f9b06 	br	7980 <__alt_data_end+0xf8007980>
    7b14:	9005883a 	mov	r2,r18
    7b18:	003fc706 	br	7a38 <__alt_data_end+0xf8007a38>
    7b1c:	a80b883a 	mov	r5,r21
    7b20:	9009883a 	mov	r4,r18
    7b24:	00063940 	call	6394 <memmove>
    7b28:	003fc906 	br	7a50 <__alt_data_end+0xf8007a50>
    7b2c:	a8800217 	ldw	r2,8(r21)
    7b30:	b0800415 	stw	r2,16(r22)
    7b34:	a8800317 	ldw	r2,12(r21)
    7b38:	b0800515 	stw	r2,20(r22)
    7b3c:	31000726 	beq	r6,r4,7b5c <_realloc_r+0x548>
    7b40:	b0800604 	addi	r2,r22,24
    7b44:	ad400404 	addi	r21,r21,16
    7b48:	003fbb06 	br	7a38 <__alt_data_end+0xf8007a38>
    7b4c:	a009883a 	mov	r4,r20
    7b50:	000d5ec0 	call	d5ec <__malloc_unlock>
    7b54:	0005883a 	mov	r2,zero
    7b58:	003f0a06 	br	7784 <__alt_data_end+0xf8007784>
    7b5c:	a8c00417 	ldw	r3,16(r21)
    7b60:	ad400604 	addi	r21,r21,24
    7b64:	b0800804 	addi	r2,r22,32
    7b68:	b0c00615 	stw	r3,24(r22)
    7b6c:	a8ffff17 	ldw	r3,-4(r21)
    7b70:	b0c00715 	stw	r3,28(r22)
    7b74:	003fb006 	br	7a38 <__alt_data_end+0xf8007a38>

00007b78 <__fpclassifyd>:
    7b78:	00a00034 	movhi	r2,32768
    7b7c:	10bfffc4 	addi	r2,r2,-1
    7b80:	2884703a 	and	r2,r5,r2
    7b84:	10000726 	beq	r2,zero,7ba4 <__fpclassifyd+0x2c>
    7b88:	00fffc34 	movhi	r3,65520
    7b8c:	019ff834 	movhi	r6,32736
    7b90:	28c7883a 	add	r3,r5,r3
    7b94:	31bfffc4 	addi	r6,r6,-1
    7b98:	30c00536 	bltu	r6,r3,7bb0 <__fpclassifyd+0x38>
    7b9c:	00800104 	movi	r2,4
    7ba0:	f800283a 	ret
    7ba4:	2000021e 	bne	r4,zero,7bb0 <__fpclassifyd+0x38>
    7ba8:	00800084 	movi	r2,2
    7bac:	f800283a 	ret
    7bb0:	00dffc34 	movhi	r3,32752
    7bb4:	019ff834 	movhi	r6,32736
    7bb8:	28cb883a 	add	r5,r5,r3
    7bbc:	31bfffc4 	addi	r6,r6,-1
    7bc0:	317ff62e 	bgeu	r6,r5,7b9c <__alt_data_end+0xf8007b9c>
    7bc4:	01400434 	movhi	r5,16
    7bc8:	297fffc4 	addi	r5,r5,-1
    7bcc:	28800236 	bltu	r5,r2,7bd8 <__fpclassifyd+0x60>
    7bd0:	008000c4 	movi	r2,3
    7bd4:	f800283a 	ret
    7bd8:	10c00226 	beq	r2,r3,7be4 <__fpclassifyd+0x6c>
    7bdc:	0005883a 	mov	r2,zero
    7be0:	f800283a 	ret
    7be4:	2005003a 	cmpeq	r2,r4,zero
    7be8:	f800283a 	ret

00007bec <__sread>:
    7bec:	defffe04 	addi	sp,sp,-8
    7bf0:	dc000015 	stw	r16,0(sp)
    7bf4:	2821883a 	mov	r16,r5
    7bf8:	2940038f 	ldh	r5,14(r5)
    7bfc:	dfc00115 	stw	ra,4(sp)
    7c00:	00099e00 	call	99e0 <_read_r>
    7c04:	10000716 	blt	r2,zero,7c24 <__sread+0x38>
    7c08:	80c01417 	ldw	r3,80(r16)
    7c0c:	1887883a 	add	r3,r3,r2
    7c10:	80c01415 	stw	r3,80(r16)
    7c14:	dfc00117 	ldw	ra,4(sp)
    7c18:	dc000017 	ldw	r16,0(sp)
    7c1c:	dec00204 	addi	sp,sp,8
    7c20:	f800283a 	ret
    7c24:	80c0030b 	ldhu	r3,12(r16)
    7c28:	18fbffcc 	andi	r3,r3,61439
    7c2c:	80c0030d 	sth	r3,12(r16)
    7c30:	dfc00117 	ldw	ra,4(sp)
    7c34:	dc000017 	ldw	r16,0(sp)
    7c38:	dec00204 	addi	sp,sp,8
    7c3c:	f800283a 	ret

00007c40 <__seofread>:
    7c40:	0005883a 	mov	r2,zero
    7c44:	f800283a 	ret

00007c48 <__swrite>:
    7c48:	2880030b 	ldhu	r2,12(r5)
    7c4c:	defffb04 	addi	sp,sp,-20
    7c50:	dcc00315 	stw	r19,12(sp)
    7c54:	dc800215 	stw	r18,8(sp)
    7c58:	dc400115 	stw	r17,4(sp)
    7c5c:	dc000015 	stw	r16,0(sp)
    7c60:	dfc00415 	stw	ra,16(sp)
    7c64:	10c0400c 	andi	r3,r2,256
    7c68:	2821883a 	mov	r16,r5
    7c6c:	2023883a 	mov	r17,r4
    7c70:	3025883a 	mov	r18,r6
    7c74:	3827883a 	mov	r19,r7
    7c78:	18000526 	beq	r3,zero,7c90 <__swrite+0x48>
    7c7c:	2940038f 	ldh	r5,14(r5)
    7c80:	01c00084 	movi	r7,2
    7c84:	000d883a 	mov	r6,zero
    7c88:	00099800 	call	9980 <_lseek_r>
    7c8c:	8080030b 	ldhu	r2,12(r16)
    7c90:	8140038f 	ldh	r5,14(r16)
    7c94:	10bbffcc 	andi	r2,r2,61439
    7c98:	980f883a 	mov	r7,r19
    7c9c:	900d883a 	mov	r6,r18
    7ca0:	8809883a 	mov	r4,r17
    7ca4:	8080030d 	sth	r2,12(r16)
    7ca8:	dfc00417 	ldw	ra,16(sp)
    7cac:	dcc00317 	ldw	r19,12(sp)
    7cb0:	dc800217 	ldw	r18,8(sp)
    7cb4:	dc400117 	ldw	r17,4(sp)
    7cb8:	dc000017 	ldw	r16,0(sp)
    7cbc:	dec00504 	addi	sp,sp,20
    7cc0:	000944c1 	jmpi	944c <_write_r>

00007cc4 <__sseek>:
    7cc4:	defffe04 	addi	sp,sp,-8
    7cc8:	dc000015 	stw	r16,0(sp)
    7ccc:	2821883a 	mov	r16,r5
    7cd0:	2940038f 	ldh	r5,14(r5)
    7cd4:	dfc00115 	stw	ra,4(sp)
    7cd8:	00099800 	call	9980 <_lseek_r>
    7cdc:	00ffffc4 	movi	r3,-1
    7ce0:	10c00826 	beq	r2,r3,7d04 <__sseek+0x40>
    7ce4:	80c0030b 	ldhu	r3,12(r16)
    7ce8:	80801415 	stw	r2,80(r16)
    7cec:	18c40014 	ori	r3,r3,4096
    7cf0:	80c0030d 	sth	r3,12(r16)
    7cf4:	dfc00117 	ldw	ra,4(sp)
    7cf8:	dc000017 	ldw	r16,0(sp)
    7cfc:	dec00204 	addi	sp,sp,8
    7d00:	f800283a 	ret
    7d04:	80c0030b 	ldhu	r3,12(r16)
    7d08:	18fbffcc 	andi	r3,r3,61439
    7d0c:	80c0030d 	sth	r3,12(r16)
    7d10:	dfc00117 	ldw	ra,4(sp)
    7d14:	dc000017 	ldw	r16,0(sp)
    7d18:	dec00204 	addi	sp,sp,8
    7d1c:	f800283a 	ret

00007d20 <__sclose>:
    7d20:	2940038f 	ldh	r5,14(r5)
    7d24:	00094ac1 	jmpi	94ac <_close_r>

00007d28 <strcmp>:
    7d28:	2144b03a 	or	r2,r4,r5
    7d2c:	108000cc 	andi	r2,r2,3
    7d30:	1000171e 	bne	r2,zero,7d90 <strcmp+0x68>
    7d34:	20800017 	ldw	r2,0(r4)
    7d38:	28c00017 	ldw	r3,0(r5)
    7d3c:	10c0141e 	bne	r2,r3,7d90 <strcmp+0x68>
    7d40:	027fbff4 	movhi	r9,65279
    7d44:	4a7fbfc4 	addi	r9,r9,-257
    7d48:	0086303a 	nor	r3,zero,r2
    7d4c:	02202074 	movhi	r8,32897
    7d50:	1245883a 	add	r2,r2,r9
    7d54:	42202004 	addi	r8,r8,-32640
    7d58:	10c4703a 	and	r2,r2,r3
    7d5c:	1204703a 	and	r2,r2,r8
    7d60:	10000226 	beq	r2,zero,7d6c <strcmp+0x44>
    7d64:	00002306 	br	7df4 <strcmp+0xcc>
    7d68:	1000221e 	bne	r2,zero,7df4 <strcmp+0xcc>
    7d6c:	21000104 	addi	r4,r4,4
    7d70:	20c00017 	ldw	r3,0(r4)
    7d74:	29400104 	addi	r5,r5,4
    7d78:	29800017 	ldw	r6,0(r5)
    7d7c:	1a4f883a 	add	r7,r3,r9
    7d80:	00c4303a 	nor	r2,zero,r3
    7d84:	3884703a 	and	r2,r7,r2
    7d88:	1204703a 	and	r2,r2,r8
    7d8c:	19bff626 	beq	r3,r6,7d68 <__alt_data_end+0xf8007d68>
    7d90:	20800003 	ldbu	r2,0(r4)
    7d94:	10c03fcc 	andi	r3,r2,255
    7d98:	18c0201c 	xori	r3,r3,128
    7d9c:	18ffe004 	addi	r3,r3,-128
    7da0:	18000c26 	beq	r3,zero,7dd4 <strcmp+0xac>
    7da4:	29800007 	ldb	r6,0(r5)
    7da8:	19800326 	beq	r3,r6,7db8 <strcmp+0x90>
    7dac:	00001306 	br	7dfc <strcmp+0xd4>
    7db0:	29800007 	ldb	r6,0(r5)
    7db4:	11800b1e 	bne	r2,r6,7de4 <strcmp+0xbc>
    7db8:	21000044 	addi	r4,r4,1
    7dbc:	20c00003 	ldbu	r3,0(r4)
    7dc0:	29400044 	addi	r5,r5,1
    7dc4:	18803fcc 	andi	r2,r3,255
    7dc8:	1080201c 	xori	r2,r2,128
    7dcc:	10bfe004 	addi	r2,r2,-128
    7dd0:	103ff71e 	bne	r2,zero,7db0 <__alt_data_end+0xf8007db0>
    7dd4:	0007883a 	mov	r3,zero
    7dd8:	28800003 	ldbu	r2,0(r5)
    7ddc:	1885c83a 	sub	r2,r3,r2
    7de0:	f800283a 	ret
    7de4:	28800003 	ldbu	r2,0(r5)
    7de8:	18c03fcc 	andi	r3,r3,255
    7dec:	1885c83a 	sub	r2,r3,r2
    7df0:	f800283a 	ret
    7df4:	0005883a 	mov	r2,zero
    7df8:	f800283a 	ret
    7dfc:	10c03fcc 	andi	r3,r2,255
    7e00:	003ff506 	br	7dd8 <__alt_data_end+0xf8007dd8>

00007e04 <__sprint_r.part.0>:
    7e04:	28801917 	ldw	r2,100(r5)
    7e08:	defff604 	addi	sp,sp,-40
    7e0c:	dd400515 	stw	r21,20(sp)
    7e10:	dfc00915 	stw	ra,36(sp)
    7e14:	df000815 	stw	fp,32(sp)
    7e18:	ddc00715 	stw	r23,28(sp)
    7e1c:	dd800615 	stw	r22,24(sp)
    7e20:	dd000415 	stw	r20,16(sp)
    7e24:	dcc00315 	stw	r19,12(sp)
    7e28:	dc800215 	stw	r18,8(sp)
    7e2c:	dc400115 	stw	r17,4(sp)
    7e30:	dc000015 	stw	r16,0(sp)
    7e34:	1088000c 	andi	r2,r2,8192
    7e38:	302b883a 	mov	r21,r6
    7e3c:	10002e26 	beq	r2,zero,7ef8 <__sprint_r.part.0+0xf4>
    7e40:	30800217 	ldw	r2,8(r6)
    7e44:	35800017 	ldw	r22,0(r6)
    7e48:	10002926 	beq	r2,zero,7ef0 <__sprint_r.part.0+0xec>
    7e4c:	2827883a 	mov	r19,r5
    7e50:	2029883a 	mov	r20,r4
    7e54:	b5c00104 	addi	r23,r22,4
    7e58:	04bfffc4 	movi	r18,-1
    7e5c:	bc400017 	ldw	r17,0(r23)
    7e60:	b4000017 	ldw	r16,0(r22)
    7e64:	0039883a 	mov	fp,zero
    7e68:	8822d0ba 	srli	r17,r17,2
    7e6c:	8800031e 	bne	r17,zero,7e7c <__sprint_r.part.0+0x78>
    7e70:	00001806 	br	7ed4 <__sprint_r.part.0+0xd0>
    7e74:	84000104 	addi	r16,r16,4
    7e78:	8f001526 	beq	r17,fp,7ed0 <__sprint_r.part.0+0xcc>
    7e7c:	81400017 	ldw	r5,0(r16)
    7e80:	980d883a 	mov	r6,r19
    7e84:	a009883a 	mov	r4,r20
    7e88:	000982c0 	call	982c <_fputwc_r>
    7e8c:	e7000044 	addi	fp,fp,1
    7e90:	14bff81e 	bne	r2,r18,7e74 <__alt_data_end+0xf8007e74>
    7e94:	9005883a 	mov	r2,r18
    7e98:	a8000215 	stw	zero,8(r21)
    7e9c:	a8000115 	stw	zero,4(r21)
    7ea0:	dfc00917 	ldw	ra,36(sp)
    7ea4:	df000817 	ldw	fp,32(sp)
    7ea8:	ddc00717 	ldw	r23,28(sp)
    7eac:	dd800617 	ldw	r22,24(sp)
    7eb0:	dd400517 	ldw	r21,20(sp)
    7eb4:	dd000417 	ldw	r20,16(sp)
    7eb8:	dcc00317 	ldw	r19,12(sp)
    7ebc:	dc800217 	ldw	r18,8(sp)
    7ec0:	dc400117 	ldw	r17,4(sp)
    7ec4:	dc000017 	ldw	r16,0(sp)
    7ec8:	dec00a04 	addi	sp,sp,40
    7ecc:	f800283a 	ret
    7ed0:	a8800217 	ldw	r2,8(r21)
    7ed4:	8c63883a 	add	r17,r17,r17
    7ed8:	8c63883a 	add	r17,r17,r17
    7edc:	1445c83a 	sub	r2,r2,r17
    7ee0:	a8800215 	stw	r2,8(r21)
    7ee4:	b5800204 	addi	r22,r22,8
    7ee8:	bdc00204 	addi	r23,r23,8
    7eec:	103fdb1e 	bne	r2,zero,7e5c <__alt_data_end+0xf8007e5c>
    7ef0:	0005883a 	mov	r2,zero
    7ef4:	003fe806 	br	7e98 <__alt_data_end+0xf8007e98>
    7ef8:	000588c0 	call	588c <__sfvwrite_r>
    7efc:	003fe606 	br	7e98 <__alt_data_end+0xf8007e98>

00007f00 <__sprint_r>:
    7f00:	30c00217 	ldw	r3,8(r6)
    7f04:	18000126 	beq	r3,zero,7f0c <__sprint_r+0xc>
    7f08:	0007e041 	jmpi	7e04 <__sprint_r.part.0>
    7f0c:	30000115 	stw	zero,4(r6)
    7f10:	0005883a 	mov	r2,zero
    7f14:	f800283a 	ret

00007f18 <___vfiprintf_internal_r>:
    7f18:	deffc904 	addi	sp,sp,-220
    7f1c:	df003515 	stw	fp,212(sp)
    7f20:	dd003115 	stw	r20,196(sp)
    7f24:	dfc03615 	stw	ra,216(sp)
    7f28:	ddc03415 	stw	r23,208(sp)
    7f2c:	dd803315 	stw	r22,204(sp)
    7f30:	dd403215 	stw	r21,200(sp)
    7f34:	dcc03015 	stw	r19,192(sp)
    7f38:	dc802f15 	stw	r18,188(sp)
    7f3c:	dc402e15 	stw	r17,184(sp)
    7f40:	dc002d15 	stw	r16,180(sp)
    7f44:	d9002015 	stw	r4,128(sp)
    7f48:	d9c02215 	stw	r7,136(sp)
    7f4c:	2829883a 	mov	r20,r5
    7f50:	3039883a 	mov	fp,r6
    7f54:	20000226 	beq	r4,zero,7f60 <___vfiprintf_internal_r+0x48>
    7f58:	20800e17 	ldw	r2,56(r4)
    7f5c:	1000cf26 	beq	r2,zero,829c <___vfiprintf_internal_r+0x384>
    7f60:	a080030b 	ldhu	r2,12(r20)
    7f64:	10c8000c 	andi	r3,r2,8192
    7f68:	1800061e 	bne	r3,zero,7f84 <___vfiprintf_internal_r+0x6c>
    7f6c:	a1001917 	ldw	r4,100(r20)
    7f70:	00f7ffc4 	movi	r3,-8193
    7f74:	10880014 	ori	r2,r2,8192
    7f78:	20c6703a 	and	r3,r4,r3
    7f7c:	a080030d 	sth	r2,12(r20)
    7f80:	a0c01915 	stw	r3,100(r20)
    7f84:	10c0020c 	andi	r3,r2,8
    7f88:	1800a926 	beq	r3,zero,8230 <___vfiprintf_internal_r+0x318>
    7f8c:	a0c00417 	ldw	r3,16(r20)
    7f90:	1800a726 	beq	r3,zero,8230 <___vfiprintf_internal_r+0x318>
    7f94:	1080068c 	andi	r2,r2,26
    7f98:	00c00284 	movi	r3,10
    7f9c:	10c0ac26 	beq	r2,r3,8250 <___vfiprintf_internal_r+0x338>
    7fa0:	da801a04 	addi	r10,sp,104
    7fa4:	da801e15 	stw	r10,120(sp)
    7fa8:	d8801e17 	ldw	r2,120(sp)
    7fac:	da8019c4 	addi	r10,sp,103
    7fb0:	05800074 	movhi	r22,1
    7fb4:	05c00074 	movhi	r23,1
    7fb8:	da801f15 	stw	r10,124(sp)
    7fbc:	1295c83a 	sub	r10,r2,r10
    7fc0:	b5904904 	addi	r22,r22,16676
    7fc4:	bdd04504 	addi	r23,r23,16660
    7fc8:	dec01a15 	stw	sp,104(sp)
    7fcc:	d8001c15 	stw	zero,112(sp)
    7fd0:	d8001b15 	stw	zero,108(sp)
    7fd4:	d8002615 	stw	zero,152(sp)
    7fd8:	d8002315 	stw	zero,140(sp)
    7fdc:	da802715 	stw	r10,156(sp)
    7fe0:	d811883a 	mov	r8,sp
    7fe4:	dd002115 	stw	r20,132(sp)
    7fe8:	e021883a 	mov	r16,fp
    7fec:	80800007 	ldb	r2,0(r16)
    7ff0:	1003ea26 	beq	r2,zero,8f9c <___vfiprintf_internal_r+0x1084>
    7ff4:	00c00944 	movi	r3,37
    7ff8:	8025883a 	mov	r18,r16
    7ffc:	10c0021e 	bne	r2,r3,8008 <___vfiprintf_internal_r+0xf0>
    8000:	00001606 	br	805c <___vfiprintf_internal_r+0x144>
    8004:	10c00326 	beq	r2,r3,8014 <___vfiprintf_internal_r+0xfc>
    8008:	94800044 	addi	r18,r18,1
    800c:	90800007 	ldb	r2,0(r18)
    8010:	103ffc1e 	bne	r2,zero,8004 <__alt_data_end+0xf8008004>
    8014:	9423c83a 	sub	r17,r18,r16
    8018:	88001026 	beq	r17,zero,805c <___vfiprintf_internal_r+0x144>
    801c:	d8c01c17 	ldw	r3,112(sp)
    8020:	d8801b17 	ldw	r2,108(sp)
    8024:	44000015 	stw	r16,0(r8)
    8028:	88c7883a 	add	r3,r17,r3
    802c:	10800044 	addi	r2,r2,1
    8030:	44400115 	stw	r17,4(r8)
    8034:	d8c01c15 	stw	r3,112(sp)
    8038:	d8801b15 	stw	r2,108(sp)
    803c:	010001c4 	movi	r4,7
    8040:	2080760e 	bge	r4,r2,821c <___vfiprintf_internal_r+0x304>
    8044:	1803821e 	bne	r3,zero,8e50 <___vfiprintf_internal_r+0xf38>
    8048:	da802317 	ldw	r10,140(sp)
    804c:	d8001b15 	stw	zero,108(sp)
    8050:	d811883a 	mov	r8,sp
    8054:	5455883a 	add	r10,r10,r17
    8058:	da802315 	stw	r10,140(sp)
    805c:	90800007 	ldb	r2,0(r18)
    8060:	10044626 	beq	r2,zero,917c <___vfiprintf_internal_r+0x1264>
    8064:	90c00047 	ldb	r3,1(r18)
    8068:	94000044 	addi	r16,r18,1
    806c:	d8001d85 	stb	zero,118(sp)
    8070:	0009883a 	mov	r4,zero
    8074:	000f883a 	mov	r7,zero
    8078:	027fffc4 	movi	r9,-1
    807c:	0023883a 	mov	r17,zero
    8080:	0029883a 	mov	r20,zero
    8084:	01401604 	movi	r5,88
    8088:	01800244 	movi	r6,9
    808c:	03400a84 	movi	r13,42
    8090:	03001b04 	movi	r12,108
    8094:	84000044 	addi	r16,r16,1
    8098:	18bff804 	addi	r2,r3,-32
    809c:	28827336 	bltu	r5,r2,8a6c <___vfiprintf_internal_r+0xb54>
    80a0:	100490ba 	slli	r2,r2,2
    80a4:	02800074 	movhi	r10,1
    80a8:	52a02e04 	addi	r10,r10,-32584
    80ac:	1285883a 	add	r2,r2,r10
    80b0:	10800017 	ldw	r2,0(r2)
    80b4:	1000683a 	jmp	r2
    80b8:	000087a0 	cmpeqi	zero,zero,542
    80bc:	00008a6c 	andhi	zero,zero,553
    80c0:	00008a6c 	andhi	zero,zero,553
    80c4:	000087c0 	call	87c <_malloc_r+0x264>
    80c8:	00008a6c 	andhi	zero,zero,553
    80cc:	00008a6c 	andhi	zero,zero,553
    80d0:	00008a6c 	andhi	zero,zero,553
    80d4:	00008a6c 	andhi	zero,zero,553
    80d8:	00008a6c 	andhi	zero,zero,553
    80dc:	00008a6c 	andhi	zero,zero,553
    80e0:	000089a8 	cmpgeui	zero,zero,550
    80e4:	000089c4 	movi	zero,551
    80e8:	00008a6c 	andhi	zero,zero,553
    80ec:	000082ac 	andhi	zero,zero,522
    80f0:	000089d4 	movui	zero,551
    80f4:	00008a6c 	andhi	zero,zero,553
    80f8:	000087cc 	andi	zero,zero,543
    80fc:	000087d8 	cmpnei	zero,zero,543
    8100:	000087d8 	cmpnei	zero,zero,543
    8104:	000087d8 	cmpnei	zero,zero,543
    8108:	000087d8 	cmpnei	zero,zero,543
    810c:	000087d8 	cmpnei	zero,zero,543
    8110:	000087d8 	cmpnei	zero,zero,543
    8114:	000087d8 	cmpnei	zero,zero,543
    8118:	000087d8 	cmpnei	zero,zero,543
    811c:	000087d8 	cmpnei	zero,zero,543
    8120:	00008a6c 	andhi	zero,zero,553
    8124:	00008a6c 	andhi	zero,zero,553
    8128:	00008a6c 	andhi	zero,zero,553
    812c:	00008a6c 	andhi	zero,zero,553
    8130:	00008a6c 	andhi	zero,zero,553
    8134:	00008a6c 	andhi	zero,zero,553
    8138:	00008a6c 	andhi	zero,zero,553
    813c:	00008a6c 	andhi	zero,zero,553
    8140:	00008a6c 	andhi	zero,zero,553
    8144:	00008a6c 	andhi	zero,zero,553
    8148:	00008804 	movi	zero,544
    814c:	00008a6c 	andhi	zero,zero,553
    8150:	00008a6c 	andhi	zero,zero,553
    8154:	00008a6c 	andhi	zero,zero,553
    8158:	00008a6c 	andhi	zero,zero,553
    815c:	00008a6c 	andhi	zero,zero,553
    8160:	00008a6c 	andhi	zero,zero,553
    8164:	00008a6c 	andhi	zero,zero,553
    8168:	00008a6c 	andhi	zero,zero,553
    816c:	00008a6c 	andhi	zero,zero,553
    8170:	00008a6c 	andhi	zero,zero,553
    8174:	0000883c 	xorhi	zero,zero,544
    8178:	00008a6c 	andhi	zero,zero,553
    817c:	00008a6c 	andhi	zero,zero,553
    8180:	00008a6c 	andhi	zero,zero,553
    8184:	00008a6c 	andhi	zero,zero,553
    8188:	00008a6c 	andhi	zero,zero,553
    818c:	00008894 	movui	zero,546
    8190:	00008a6c 	andhi	zero,zero,553
    8194:	00008a6c 	andhi	zero,zero,553
    8198:	00008904 	movi	zero,548
    819c:	00008a6c 	andhi	zero,zero,553
    81a0:	00008a6c 	andhi	zero,zero,553
    81a4:	00008a6c 	andhi	zero,zero,553
    81a8:	00008a6c 	andhi	zero,zero,553
    81ac:	00008a6c 	andhi	zero,zero,553
    81b0:	00008a6c 	andhi	zero,zero,553
    81b4:	00008a6c 	andhi	zero,zero,553
    81b8:	00008a6c 	andhi	zero,zero,553
    81bc:	00008a6c 	andhi	zero,zero,553
    81c0:	00008a6c 	andhi	zero,zero,553
    81c4:	000086b0 	cmpltui	zero,zero,538
    81c8:	000086dc 	xori	zero,zero,539
    81cc:	00008a6c 	andhi	zero,zero,553
    81d0:	00008a6c 	andhi	zero,zero,553
    81d4:	00008a6c 	andhi	zero,zero,553
    81d8:	00008a14 	movui	zero,552
    81dc:	000086dc 	xori	zero,zero,539
    81e0:	00008a6c 	andhi	zero,zero,553
    81e4:	00008a6c 	andhi	zero,zero,553
    81e8:	00008570 	cmpltui	zero,zero,533
    81ec:	00008a6c 	andhi	zero,zero,553
    81f0:	00008580 	call	858 <_malloc_r+0x240>
    81f4:	000085bc 	xorhi	zero,zero,534
    81f8:	000082b8 	rdprs	zero,zero,522
    81fc:	00008564 	muli	zero,zero,533
    8200:	00008a6c 	andhi	zero,zero,553
    8204:	00008940 	call	894 <_malloc_r+0x27c>
    8208:	00008a6c 	andhi	zero,zero,553
    820c:	00008998 	cmpnei	zero,zero,550
    8210:	00008a6c 	andhi	zero,zero,553
    8214:	00008a6c 	andhi	zero,zero,553
    8218:	0000865c 	xori	zero,zero,537
    821c:	42000204 	addi	r8,r8,8
    8220:	da802317 	ldw	r10,140(sp)
    8224:	5455883a 	add	r10,r10,r17
    8228:	da802315 	stw	r10,140(sp)
    822c:	003f8b06 	br	805c <__alt_data_end+0xf800805c>
    8230:	d9002017 	ldw	r4,128(sp)
    8234:	a00b883a 	mov	r5,r20
    8238:	00034340 	call	3434 <__swsetup_r>
    823c:	1003b11e 	bne	r2,zero,9104 <___vfiprintf_internal_r+0x11ec>
    8240:	a080030b 	ldhu	r2,12(r20)
    8244:	00c00284 	movi	r3,10
    8248:	1080068c 	andi	r2,r2,26
    824c:	10ff541e 	bne	r2,r3,7fa0 <__alt_data_end+0xf8007fa0>
    8250:	a080038f 	ldh	r2,14(r20)
    8254:	103f5216 	blt	r2,zero,7fa0 <__alt_data_end+0xf8007fa0>
    8258:	d9c02217 	ldw	r7,136(sp)
    825c:	d9002017 	ldw	r4,128(sp)
    8260:	e00d883a 	mov	r6,fp
    8264:	a00b883a 	mov	r5,r20
    8268:	00093900 	call	9390 <__sbprintf>
    826c:	dfc03617 	ldw	ra,216(sp)
    8270:	df003517 	ldw	fp,212(sp)
    8274:	ddc03417 	ldw	r23,208(sp)
    8278:	dd803317 	ldw	r22,204(sp)
    827c:	dd403217 	ldw	r21,200(sp)
    8280:	dd003117 	ldw	r20,196(sp)
    8284:	dcc03017 	ldw	r19,192(sp)
    8288:	dc802f17 	ldw	r18,188(sp)
    828c:	dc402e17 	ldw	r17,184(sp)
    8290:	dc002d17 	ldw	r16,180(sp)
    8294:	dec03704 	addi	sp,sp,220
    8298:	f800283a 	ret
    829c:	00054080 	call	5408 <__sinit>
    82a0:	003f2f06 	br	7f60 <__alt_data_end+0xf8007f60>
    82a4:	0463c83a 	sub	r17,zero,r17
    82a8:	d8802215 	stw	r2,136(sp)
    82ac:	a5000114 	ori	r20,r20,4
    82b0:	80c00007 	ldb	r3,0(r16)
    82b4:	003f7706 	br	8094 <__alt_data_end+0xf8008094>
    82b8:	00800c04 	movi	r2,48
    82bc:	da802217 	ldw	r10,136(sp)
    82c0:	d8801d05 	stb	r2,116(sp)
    82c4:	00801e04 	movi	r2,120
    82c8:	d8801d45 	stb	r2,117(sp)
    82cc:	d8001d85 	stb	zero,118(sp)
    82d0:	50c00104 	addi	r3,r10,4
    82d4:	54800017 	ldw	r18,0(r10)
    82d8:	0027883a 	mov	r19,zero
    82dc:	a0800094 	ori	r2,r20,2
    82e0:	48030b16 	blt	r9,zero,8f10 <___vfiprintf_internal_r+0xff8>
    82e4:	00bfdfc4 	movi	r2,-129
    82e8:	a096703a 	and	r11,r20,r2
    82ec:	d8c02215 	stw	r3,136(sp)
    82f0:	5d000094 	ori	r20,r11,2
    82f4:	90032b1e 	bne	r18,zero,8fa4 <___vfiprintf_internal_r+0x108c>
    82f8:	00800074 	movhi	r2,1
    82fc:	108fe404 	addi	r2,r2,16272
    8300:	d8802615 	stw	r2,152(sp)
    8304:	0039883a 	mov	fp,zero
    8308:	48017b1e 	bne	r9,zero,88f8 <___vfiprintf_internal_r+0x9e0>
    830c:	0013883a 	mov	r9,zero
    8310:	0027883a 	mov	r19,zero
    8314:	dd401a04 	addi	r21,sp,104
    8318:	4825883a 	mov	r18,r9
    831c:	4cc0010e 	bge	r9,r19,8324 <___vfiprintf_internal_r+0x40c>
    8320:	9825883a 	mov	r18,r19
    8324:	e7003fcc 	andi	fp,fp,255
    8328:	e700201c 	xori	fp,fp,128
    832c:	e73fe004 	addi	fp,fp,-128
    8330:	e0000126 	beq	fp,zero,8338 <___vfiprintf_internal_r+0x420>
    8334:	94800044 	addi	r18,r18,1
    8338:	a380008c 	andi	r14,r20,2
    833c:	70000126 	beq	r14,zero,8344 <___vfiprintf_internal_r+0x42c>
    8340:	94800084 	addi	r18,r18,2
    8344:	a700210c 	andi	fp,r20,132
    8348:	e001df1e 	bne	fp,zero,8ac8 <___vfiprintf_internal_r+0xbb0>
    834c:	8c87c83a 	sub	r3,r17,r18
    8350:	00c1dd0e 	bge	zero,r3,8ac8 <___vfiprintf_internal_r+0xbb0>
    8354:	01c00404 	movi	r7,16
    8358:	d8801c17 	ldw	r2,112(sp)
    835c:	38c3ad0e 	bge	r7,r3,9214 <___vfiprintf_internal_r+0x12fc>
    8360:	02800074 	movhi	r10,1
    8364:	52904904 	addi	r10,r10,16676
    8368:	dc002915 	stw	r16,164(sp)
    836c:	d9801b17 	ldw	r6,108(sp)
    8370:	da802415 	stw	r10,144(sp)
    8374:	03c001c4 	movi	r15,7
    8378:	da402515 	stw	r9,148(sp)
    837c:	db802815 	stw	r14,160(sp)
    8380:	1821883a 	mov	r16,r3
    8384:	00000506 	br	839c <___vfiprintf_internal_r+0x484>
    8388:	31400084 	addi	r5,r6,2
    838c:	42000204 	addi	r8,r8,8
    8390:	200d883a 	mov	r6,r4
    8394:	843ffc04 	addi	r16,r16,-16
    8398:	3c000d0e 	bge	r7,r16,83d0 <___vfiprintf_internal_r+0x4b8>
    839c:	10800404 	addi	r2,r2,16
    83a0:	31000044 	addi	r4,r6,1
    83a4:	45800015 	stw	r22,0(r8)
    83a8:	41c00115 	stw	r7,4(r8)
    83ac:	d8801c15 	stw	r2,112(sp)
    83b0:	d9001b15 	stw	r4,108(sp)
    83b4:	793ff40e 	bge	r15,r4,8388 <__alt_data_end+0xf8008388>
    83b8:	1001b51e 	bne	r2,zero,8a90 <___vfiprintf_internal_r+0xb78>
    83bc:	843ffc04 	addi	r16,r16,-16
    83c0:	000d883a 	mov	r6,zero
    83c4:	01400044 	movi	r5,1
    83c8:	d811883a 	mov	r8,sp
    83cc:	3c3ff316 	blt	r7,r16,839c <__alt_data_end+0xf800839c>
    83d0:	8007883a 	mov	r3,r16
    83d4:	da402517 	ldw	r9,148(sp)
    83d8:	db802817 	ldw	r14,160(sp)
    83dc:	dc002917 	ldw	r16,164(sp)
    83e0:	da802417 	ldw	r10,144(sp)
    83e4:	1885883a 	add	r2,r3,r2
    83e8:	40c00115 	stw	r3,4(r8)
    83ec:	42800015 	stw	r10,0(r8)
    83f0:	d8801c15 	stw	r2,112(sp)
    83f4:	d9401b15 	stw	r5,108(sp)
    83f8:	00c001c4 	movi	r3,7
    83fc:	19426016 	blt	r3,r5,8d80 <___vfiprintf_internal_r+0xe68>
    8400:	d8c01d87 	ldb	r3,118(sp)
    8404:	42000204 	addi	r8,r8,8
    8408:	29000044 	addi	r4,r5,1
    840c:	1801b31e 	bne	r3,zero,8adc <___vfiprintf_internal_r+0xbc4>
    8410:	7001c026 	beq	r14,zero,8b14 <___vfiprintf_internal_r+0xbfc>
    8414:	d8c01d04 	addi	r3,sp,116
    8418:	10800084 	addi	r2,r2,2
    841c:	40c00015 	stw	r3,0(r8)
    8420:	00c00084 	movi	r3,2
    8424:	40c00115 	stw	r3,4(r8)
    8428:	d8801c15 	stw	r2,112(sp)
    842c:	d9001b15 	stw	r4,108(sp)
    8430:	00c001c4 	movi	r3,7
    8434:	1902650e 	bge	r3,r4,8dcc <___vfiprintf_internal_r+0xeb4>
    8438:	10029a1e 	bne	r2,zero,8ea4 <___vfiprintf_internal_r+0xf8c>
    843c:	00c02004 	movi	r3,128
    8440:	01000044 	movi	r4,1
    8444:	000b883a 	mov	r5,zero
    8448:	d811883a 	mov	r8,sp
    844c:	e0c1b31e 	bne	fp,r3,8b1c <___vfiprintf_internal_r+0xc04>
    8450:	8cb9c83a 	sub	fp,r17,r18
    8454:	0701b10e 	bge	zero,fp,8b1c <___vfiprintf_internal_r+0xc04>
    8458:	01c00404 	movi	r7,16
    845c:	3f03890e 	bge	r7,fp,9284 <___vfiprintf_internal_r+0x136c>
    8460:	00c00074 	movhi	r3,1
    8464:	18d04504 	addi	r3,r3,16660
    8468:	d8c02415 	stw	r3,144(sp)
    846c:	8007883a 	mov	r3,r16
    8470:	034001c4 	movi	r13,7
    8474:	e021883a 	mov	r16,fp
    8478:	da402515 	stw	r9,148(sp)
    847c:	1839883a 	mov	fp,r3
    8480:	00000506 	br	8498 <___vfiprintf_internal_r+0x580>
    8484:	29800084 	addi	r6,r5,2
    8488:	42000204 	addi	r8,r8,8
    848c:	180b883a 	mov	r5,r3
    8490:	843ffc04 	addi	r16,r16,-16
    8494:	3c000d0e 	bge	r7,r16,84cc <___vfiprintf_internal_r+0x5b4>
    8498:	10800404 	addi	r2,r2,16
    849c:	28c00044 	addi	r3,r5,1
    84a0:	45c00015 	stw	r23,0(r8)
    84a4:	41c00115 	stw	r7,4(r8)
    84a8:	d8801c15 	stw	r2,112(sp)
    84ac:	d8c01b15 	stw	r3,108(sp)
    84b0:	68fff40e 	bge	r13,r3,8484 <__alt_data_end+0xf8008484>
    84b4:	1002241e 	bne	r2,zero,8d48 <___vfiprintf_internal_r+0xe30>
    84b8:	843ffc04 	addi	r16,r16,-16
    84bc:	01800044 	movi	r6,1
    84c0:	000b883a 	mov	r5,zero
    84c4:	d811883a 	mov	r8,sp
    84c8:	3c3ff316 	blt	r7,r16,8498 <__alt_data_end+0xf8008498>
    84cc:	da402517 	ldw	r9,148(sp)
    84d0:	e007883a 	mov	r3,fp
    84d4:	8039883a 	mov	fp,r16
    84d8:	1821883a 	mov	r16,r3
    84dc:	d8c02417 	ldw	r3,144(sp)
    84e0:	1705883a 	add	r2,r2,fp
    84e4:	47000115 	stw	fp,4(r8)
    84e8:	40c00015 	stw	r3,0(r8)
    84ec:	d8801c15 	stw	r2,112(sp)
    84f0:	d9801b15 	stw	r6,108(sp)
    84f4:	00c001c4 	movi	r3,7
    84f8:	19827616 	blt	r3,r6,8ed4 <___vfiprintf_internal_r+0xfbc>
    84fc:	4cf9c83a 	sub	fp,r9,r19
    8500:	42000204 	addi	r8,r8,8
    8504:	31000044 	addi	r4,r6,1
    8508:	300b883a 	mov	r5,r6
    850c:	07018516 	blt	zero,fp,8b24 <___vfiprintf_internal_r+0xc0c>
    8510:	9885883a 	add	r2,r19,r2
    8514:	45400015 	stw	r21,0(r8)
    8518:	44c00115 	stw	r19,4(r8)
    851c:	d8801c15 	stw	r2,112(sp)
    8520:	d9001b15 	stw	r4,108(sp)
    8524:	00c001c4 	movi	r3,7
    8528:	1901dd0e 	bge	r3,r4,8ca0 <___vfiprintf_internal_r+0xd88>
    852c:	1002401e 	bne	r2,zero,8e30 <___vfiprintf_internal_r+0xf18>
    8530:	d8001b15 	stw	zero,108(sp)
    8534:	a2c0010c 	andi	r11,r20,4
    8538:	58000226 	beq	r11,zero,8544 <___vfiprintf_internal_r+0x62c>
    853c:	8ca7c83a 	sub	r19,r17,r18
    8540:	04c2f216 	blt	zero,r19,910c <___vfiprintf_internal_r+0x11f4>
    8544:	8c80010e 	bge	r17,r18,854c <___vfiprintf_internal_r+0x634>
    8548:	9023883a 	mov	r17,r18
    854c:	da802317 	ldw	r10,140(sp)
    8550:	5455883a 	add	r10,r10,r17
    8554:	da802315 	stw	r10,140(sp)
    8558:	d8001b15 	stw	zero,108(sp)
    855c:	d811883a 	mov	r8,sp
    8560:	003ea206 	br	7fec <__alt_data_end+0xf8007fec>
    8564:	a5000814 	ori	r20,r20,32
    8568:	80c00007 	ldb	r3,0(r16)
    856c:	003ec906 	br	8094 <__alt_data_end+0xf8008094>
    8570:	80c00007 	ldb	r3,0(r16)
    8574:	1b030926 	beq	r3,r12,919c <___vfiprintf_internal_r+0x1284>
    8578:	a5000414 	ori	r20,r20,16
    857c:	003ec506 	br	8094 <__alt_data_end+0xf8008094>
    8580:	21003fcc 	andi	r4,r4,255
    8584:	20035e1e 	bne	r4,zero,9300 <___vfiprintf_internal_r+0x13e8>
    8588:	a080080c 	andi	r2,r20,32
    858c:	1002a526 	beq	r2,zero,9024 <___vfiprintf_internal_r+0x110c>
    8590:	da802217 	ldw	r10,136(sp)
    8594:	50800017 	ldw	r2,0(r10)
    8598:	da802317 	ldw	r10,140(sp)
    859c:	5007d7fa 	srai	r3,r10,31
    85a0:	da802217 	ldw	r10,136(sp)
    85a4:	10c00115 	stw	r3,4(r2)
    85a8:	52800104 	addi	r10,r10,4
    85ac:	da802215 	stw	r10,136(sp)
    85b0:	da802317 	ldw	r10,140(sp)
    85b4:	12800015 	stw	r10,0(r2)
    85b8:	003e8c06 	br	7fec <__alt_data_end+0xf8007fec>
    85bc:	21003fcc 	andi	r4,r4,255
    85c0:	2003511e 	bne	r4,zero,9308 <___vfiprintf_internal_r+0x13f0>
    85c4:	a080080c 	andi	r2,r20,32
    85c8:	1000a126 	beq	r2,zero,8850 <___vfiprintf_internal_r+0x938>
    85cc:	da802217 	ldw	r10,136(sp)
    85d0:	d8001d85 	stb	zero,118(sp)
    85d4:	50800204 	addi	r2,r10,8
    85d8:	54800017 	ldw	r18,0(r10)
    85dc:	54c00117 	ldw	r19,4(r10)
    85e0:	4802b416 	blt	r9,zero,90b4 <___vfiprintf_internal_r+0x119c>
    85e4:	013fdfc4 	movi	r4,-129
    85e8:	94c6b03a 	or	r3,r18,r19
    85ec:	d8802215 	stw	r2,136(sp)
    85f0:	a128703a 	and	r20,r20,r4
    85f4:	1800a226 	beq	r3,zero,8880 <___vfiprintf_internal_r+0x968>
    85f8:	0039883a 	mov	fp,zero
    85fc:	dd401a04 	addi	r21,sp,104
    8600:	9006d0fa 	srli	r3,r18,3
    8604:	9808977a 	slli	r4,r19,29
    8608:	9826d0fa 	srli	r19,r19,3
    860c:	948001cc 	andi	r18,r18,7
    8610:	90800c04 	addi	r2,r18,48
    8614:	ad7fffc4 	addi	r21,r21,-1
    8618:	20e4b03a 	or	r18,r4,r3
    861c:	a8800005 	stb	r2,0(r21)
    8620:	94c6b03a 	or	r3,r18,r19
    8624:	183ff61e 	bne	r3,zero,8600 <__alt_data_end+0xf8008600>
    8628:	a0c0004c 	andi	r3,r20,1
    862c:	18005926 	beq	r3,zero,8794 <___vfiprintf_internal_r+0x87c>
    8630:	10803fcc 	andi	r2,r2,255
    8634:	1080201c 	xori	r2,r2,128
    8638:	10bfe004 	addi	r2,r2,-128
    863c:	00c00c04 	movi	r3,48
    8640:	10c05426 	beq	r2,r3,8794 <___vfiprintf_internal_r+0x87c>
    8644:	da801e17 	ldw	r10,120(sp)
    8648:	a8bfffc4 	addi	r2,r21,-1
    864c:	a8ffffc5 	stb	r3,-1(r21)
    8650:	50a7c83a 	sub	r19,r10,r2
    8654:	102b883a 	mov	r21,r2
    8658:	003f2f06 	br	8318 <__alt_data_end+0xf8008318>
    865c:	21003fcc 	andi	r4,r4,255
    8660:	2003421e 	bne	r4,zero,936c <___vfiprintf_internal_r+0x1454>
    8664:	00800074 	movhi	r2,1
    8668:	108fe404 	addi	r2,r2,16272
    866c:	d8802615 	stw	r2,152(sp)
    8670:	a080080c 	andi	r2,r20,32
    8674:	1000aa26 	beq	r2,zero,8920 <___vfiprintf_internal_r+0xa08>
    8678:	da802217 	ldw	r10,136(sp)
    867c:	54800017 	ldw	r18,0(r10)
    8680:	54c00117 	ldw	r19,4(r10)
    8684:	52800204 	addi	r10,r10,8
    8688:	da802215 	stw	r10,136(sp)
    868c:	a080004c 	andi	r2,r20,1
    8690:	1001d226 	beq	r2,zero,8ddc <___vfiprintf_internal_r+0xec4>
    8694:	94c4b03a 	or	r2,r18,r19
    8698:	1002351e 	bne	r2,zero,8f70 <___vfiprintf_internal_r+0x1058>
    869c:	d8001d85 	stb	zero,118(sp)
    86a0:	48022216 	blt	r9,zero,8f2c <___vfiprintf_internal_r+0x1014>
    86a4:	00bfdfc4 	movi	r2,-129
    86a8:	a0a8703a 	and	r20,r20,r2
    86ac:	003f1506 	br	8304 <__alt_data_end+0xf8008304>
    86b0:	da802217 	ldw	r10,136(sp)
    86b4:	04800044 	movi	r18,1
    86b8:	d8001d85 	stb	zero,118(sp)
    86bc:	50800017 	ldw	r2,0(r10)
    86c0:	52800104 	addi	r10,r10,4
    86c4:	da802215 	stw	r10,136(sp)
    86c8:	d8801005 	stb	r2,64(sp)
    86cc:	9027883a 	mov	r19,r18
    86d0:	dd401004 	addi	r21,sp,64
    86d4:	0013883a 	mov	r9,zero
    86d8:	003f1706 	br	8338 <__alt_data_end+0xf8008338>
    86dc:	21003fcc 	andi	r4,r4,255
    86e0:	2003201e 	bne	r4,zero,9364 <___vfiprintf_internal_r+0x144c>
    86e4:	a080080c 	andi	r2,r20,32
    86e8:	10004b26 	beq	r2,zero,8818 <___vfiprintf_internal_r+0x900>
    86ec:	da802217 	ldw	r10,136(sp)
    86f0:	50800117 	ldw	r2,4(r10)
    86f4:	54800017 	ldw	r18,0(r10)
    86f8:	52800204 	addi	r10,r10,8
    86fc:	da802215 	stw	r10,136(sp)
    8700:	1027883a 	mov	r19,r2
    8704:	10022c16 	blt	r2,zero,8fb8 <___vfiprintf_internal_r+0x10a0>
    8708:	df001d83 	ldbu	fp,118(sp)
    870c:	48007216 	blt	r9,zero,88d8 <___vfiprintf_internal_r+0x9c0>
    8710:	00ffdfc4 	movi	r3,-129
    8714:	94c4b03a 	or	r2,r18,r19
    8718:	a0e8703a 	and	r20,r20,r3
    871c:	1000cc26 	beq	r2,zero,8a50 <___vfiprintf_internal_r+0xb38>
    8720:	98021026 	beq	r19,zero,8f64 <___vfiprintf_internal_r+0x104c>
    8724:	dc402415 	stw	r17,144(sp)
    8728:	dc002515 	stw	r16,148(sp)
    872c:	9823883a 	mov	r17,r19
    8730:	9021883a 	mov	r16,r18
    8734:	dd401a04 	addi	r21,sp,104
    8738:	4825883a 	mov	r18,r9
    873c:	4027883a 	mov	r19,r8
    8740:	8009883a 	mov	r4,r16
    8744:	880b883a 	mov	r5,r17
    8748:	01800284 	movi	r6,10
    874c:	000f883a 	mov	r7,zero
    8750:	000a2f80 	call	a2f8 <__umoddi3>
    8754:	10800c04 	addi	r2,r2,48
    8758:	ad7fffc4 	addi	r21,r21,-1
    875c:	8009883a 	mov	r4,r16
    8760:	880b883a 	mov	r5,r17
    8764:	a8800005 	stb	r2,0(r21)
    8768:	01800284 	movi	r6,10
    876c:	000f883a 	mov	r7,zero
    8770:	0009d800 	call	9d80 <__udivdi3>
    8774:	1021883a 	mov	r16,r2
    8778:	10c4b03a 	or	r2,r2,r3
    877c:	1823883a 	mov	r17,r3
    8780:	103fef1e 	bne	r2,zero,8740 <__alt_data_end+0xf8008740>
    8784:	dc402417 	ldw	r17,144(sp)
    8788:	dc002517 	ldw	r16,148(sp)
    878c:	9013883a 	mov	r9,r18
    8790:	9811883a 	mov	r8,r19
    8794:	da801e17 	ldw	r10,120(sp)
    8798:	5567c83a 	sub	r19,r10,r21
    879c:	003ede06 	br	8318 <__alt_data_end+0xf8008318>
    87a0:	38803fcc 	andi	r2,r7,255
    87a4:	1080201c 	xori	r2,r2,128
    87a8:	10bfe004 	addi	r2,r2,-128
    87ac:	1002371e 	bne	r2,zero,908c <___vfiprintf_internal_r+0x1174>
    87b0:	01000044 	movi	r4,1
    87b4:	01c00804 	movi	r7,32
    87b8:	80c00007 	ldb	r3,0(r16)
    87bc:	003e3506 	br	8094 <__alt_data_end+0xf8008094>
    87c0:	a5000054 	ori	r20,r20,1
    87c4:	80c00007 	ldb	r3,0(r16)
    87c8:	003e3206 	br	8094 <__alt_data_end+0xf8008094>
    87cc:	a5002014 	ori	r20,r20,128
    87d0:	80c00007 	ldb	r3,0(r16)
    87d4:	003e2f06 	br	8094 <__alt_data_end+0xf8008094>
    87d8:	8015883a 	mov	r10,r16
    87dc:	0023883a 	mov	r17,zero
    87e0:	18bff404 	addi	r2,r3,-48
    87e4:	50c00007 	ldb	r3,0(r10)
    87e8:	8c4002a4 	muli	r17,r17,10
    87ec:	84000044 	addi	r16,r16,1
    87f0:	8015883a 	mov	r10,r16
    87f4:	1463883a 	add	r17,r2,r17
    87f8:	18bff404 	addi	r2,r3,-48
    87fc:	30bff92e 	bgeu	r6,r2,87e4 <__alt_data_end+0xf80087e4>
    8800:	003e2506 	br	8098 <__alt_data_end+0xf8008098>
    8804:	21003fcc 	andi	r4,r4,255
    8808:	2002d41e 	bne	r4,zero,935c <___vfiprintf_internal_r+0x1444>
    880c:	a5000414 	ori	r20,r20,16
    8810:	a080080c 	andi	r2,r20,32
    8814:	103fb51e 	bne	r2,zero,86ec <__alt_data_end+0xf80086ec>
    8818:	a080040c 	andi	r2,r20,16
    881c:	1001f826 	beq	r2,zero,9000 <___vfiprintf_internal_r+0x10e8>
    8820:	da802217 	ldw	r10,136(sp)
    8824:	54800017 	ldw	r18,0(r10)
    8828:	52800104 	addi	r10,r10,4
    882c:	da802215 	stw	r10,136(sp)
    8830:	9027d7fa 	srai	r19,r18,31
    8834:	9805883a 	mov	r2,r19
    8838:	003fb206 	br	8704 <__alt_data_end+0xf8008704>
    883c:	21003fcc 	andi	r4,r4,255
    8840:	2002c41e 	bne	r4,zero,9354 <___vfiprintf_internal_r+0x143c>
    8844:	a5000414 	ori	r20,r20,16
    8848:	a080080c 	andi	r2,r20,32
    884c:	103f5f1e 	bne	r2,zero,85cc <__alt_data_end+0xf80085cc>
    8850:	a080040c 	andi	r2,r20,16
    8854:	10020f26 	beq	r2,zero,9094 <___vfiprintf_internal_r+0x117c>
    8858:	da802217 	ldw	r10,136(sp)
    885c:	d8001d85 	stb	zero,118(sp)
    8860:	0027883a 	mov	r19,zero
    8864:	50800104 	addi	r2,r10,4
    8868:	54800017 	ldw	r18,0(r10)
    886c:	48021116 	blt	r9,zero,90b4 <___vfiprintf_internal_r+0x119c>
    8870:	00ffdfc4 	movi	r3,-129
    8874:	d8802215 	stw	r2,136(sp)
    8878:	a0e8703a 	and	r20,r20,r3
    887c:	903f5e1e 	bne	r18,zero,85f8 <__alt_data_end+0xf80085f8>
    8880:	0039883a 	mov	fp,zero
    8884:	4802a626 	beq	r9,zero,9320 <___vfiprintf_internal_r+0x1408>
    8888:	0025883a 	mov	r18,zero
    888c:	0027883a 	mov	r19,zero
    8890:	003f5a06 	br	85fc <__alt_data_end+0xf80085fc>
    8894:	21003fcc 	andi	r4,r4,255
    8898:	20029f1e 	bne	r4,zero,9318 <___vfiprintf_internal_r+0x1400>
    889c:	a5000414 	ori	r20,r20,16
    88a0:	a080080c 	andi	r2,r20,32
    88a4:	10005e1e 	bne	r2,zero,8a20 <___vfiprintf_internal_r+0xb08>
    88a8:	a080040c 	andi	r2,r20,16
    88ac:	1001a21e 	bne	r2,zero,8f38 <___vfiprintf_internal_r+0x1020>
    88b0:	a080100c 	andi	r2,r20,64
    88b4:	d8001d85 	stb	zero,118(sp)
    88b8:	da802217 	ldw	r10,136(sp)
    88bc:	1002231e 	bne	r2,zero,914c <___vfiprintf_internal_r+0x1234>
    88c0:	50800104 	addi	r2,r10,4
    88c4:	54800017 	ldw	r18,0(r10)
    88c8:	0027883a 	mov	r19,zero
    88cc:	4801a00e 	bge	r9,zero,8f50 <___vfiprintf_internal_r+0x1038>
    88d0:	d8802215 	stw	r2,136(sp)
    88d4:	0039883a 	mov	fp,zero
    88d8:	94c4b03a 	or	r2,r18,r19
    88dc:	103f901e 	bne	r2,zero,8720 <__alt_data_end+0xf8008720>
    88e0:	00800044 	movi	r2,1
    88e4:	10803fcc 	andi	r2,r2,255
    88e8:	00c00044 	movi	r3,1
    88ec:	10c05926 	beq	r2,r3,8a54 <___vfiprintf_internal_r+0xb3c>
    88f0:	00c00084 	movi	r3,2
    88f4:	10ffe41e 	bne	r2,r3,8888 <__alt_data_end+0xf8008888>
    88f8:	0025883a 	mov	r18,zero
    88fc:	0027883a 	mov	r19,zero
    8900:	00013d06 	br	8df8 <___vfiprintf_internal_r+0xee0>
    8904:	21003fcc 	andi	r4,r4,255
    8908:	2002811e 	bne	r4,zero,9310 <___vfiprintf_internal_r+0x13f8>
    890c:	00800074 	movhi	r2,1
    8910:	108fdf04 	addi	r2,r2,16252
    8914:	d8802615 	stw	r2,152(sp)
    8918:	a080080c 	andi	r2,r20,32
    891c:	103f561e 	bne	r2,zero,8678 <__alt_data_end+0xf8008678>
    8920:	a080040c 	andi	r2,r20,16
    8924:	1001d126 	beq	r2,zero,906c <___vfiprintf_internal_r+0x1154>
    8928:	da802217 	ldw	r10,136(sp)
    892c:	0027883a 	mov	r19,zero
    8930:	54800017 	ldw	r18,0(r10)
    8934:	52800104 	addi	r10,r10,4
    8938:	da802215 	stw	r10,136(sp)
    893c:	003f5306 	br	868c <__alt_data_end+0xf800868c>
    8940:	da802217 	ldw	r10,136(sp)
    8944:	d8001d85 	stb	zero,118(sp)
    8948:	55400017 	ldw	r21,0(r10)
    894c:	50c00104 	addi	r3,r10,4
    8950:	a8024226 	beq	r21,zero,925c <___vfiprintf_internal_r+0x1344>
    8954:	48021816 	blt	r9,zero,91b8 <___vfiprintf_internal_r+0x12a0>
    8958:	480d883a 	mov	r6,r9
    895c:	000b883a 	mov	r5,zero
    8960:	a809883a 	mov	r4,r21
    8964:	d8c02a15 	stw	r3,168(sp)
    8968:	da002b15 	stw	r8,172(sp)
    896c:	da402c15 	stw	r9,176(sp)
    8970:	00061680 	call	6168 <memchr>
    8974:	d8c02a17 	ldw	r3,168(sp)
    8978:	da002b17 	ldw	r8,172(sp)
    897c:	da402c17 	ldw	r9,176(sp)
    8980:	10024826 	beq	r2,zero,92a4 <___vfiprintf_internal_r+0x138c>
    8984:	1567c83a 	sub	r19,r2,r21
    8988:	df001d83 	ldbu	fp,118(sp)
    898c:	d8c02215 	stw	r3,136(sp)
    8990:	0013883a 	mov	r9,zero
    8994:	003e6006 	br	8318 <__alt_data_end+0xf8008318>
    8998:	21003fcc 	andi	r4,r4,255
    899c:	203fc026 	beq	r4,zero,88a0 <__alt_data_end+0xf80088a0>
    89a0:	d9c01d85 	stb	r7,118(sp)
    89a4:	003fbe06 	br	88a0 <__alt_data_end+0xf80088a0>
    89a8:	da802217 	ldw	r10,136(sp)
    89ac:	54400017 	ldw	r17,0(r10)
    89b0:	50800104 	addi	r2,r10,4
    89b4:	883e3b16 	blt	r17,zero,82a4 <__alt_data_end+0xf80082a4>
    89b8:	d8802215 	stw	r2,136(sp)
    89bc:	80c00007 	ldb	r3,0(r16)
    89c0:	003db406 	br	8094 <__alt_data_end+0xf8008094>
    89c4:	01000044 	movi	r4,1
    89c8:	01c00ac4 	movi	r7,43
    89cc:	80c00007 	ldb	r3,0(r16)
    89d0:	003db006 	br	8094 <__alt_data_end+0xf8008094>
    89d4:	80c00007 	ldb	r3,0(r16)
    89d8:	82800044 	addi	r10,r16,1
    89dc:	1b423c26 	beq	r3,r13,92d0 <___vfiprintf_internal_r+0x13b8>
    89e0:	18bff404 	addi	r2,r3,-48
    89e4:	0013883a 	mov	r9,zero
    89e8:	30822b36 	bltu	r6,r2,9298 <___vfiprintf_internal_r+0x1380>
    89ec:	50c00007 	ldb	r3,0(r10)
    89f0:	4a4002a4 	muli	r9,r9,10
    89f4:	54000044 	addi	r16,r10,1
    89f8:	8015883a 	mov	r10,r16
    89fc:	4893883a 	add	r9,r9,r2
    8a00:	18bff404 	addi	r2,r3,-48
    8a04:	30bff92e 	bgeu	r6,r2,89ec <__alt_data_end+0xf80089ec>
    8a08:	483da30e 	bge	r9,zero,8098 <__alt_data_end+0xf8008098>
    8a0c:	027fffc4 	movi	r9,-1
    8a10:	003da106 	br	8098 <__alt_data_end+0xf8008098>
    8a14:	a5001014 	ori	r20,r20,64
    8a18:	80c00007 	ldb	r3,0(r16)
    8a1c:	003d9d06 	br	8094 <__alt_data_end+0xf8008094>
    8a20:	da802217 	ldw	r10,136(sp)
    8a24:	d8001d85 	stb	zero,118(sp)
    8a28:	50c00204 	addi	r3,r10,8
    8a2c:	54800017 	ldw	r18,0(r10)
    8a30:	54c00117 	ldw	r19,4(r10)
    8a34:	4801ca16 	blt	r9,zero,9160 <___vfiprintf_internal_r+0x1248>
    8a38:	013fdfc4 	movi	r4,-129
    8a3c:	94c4b03a 	or	r2,r18,r19
    8a40:	d8c02215 	stw	r3,136(sp)
    8a44:	a128703a 	and	r20,r20,r4
    8a48:	0039883a 	mov	fp,zero
    8a4c:	103f341e 	bne	r2,zero,8720 <__alt_data_end+0xf8008720>
    8a50:	483e2e26 	beq	r9,zero,830c <__alt_data_end+0xf800830c>
    8a54:	0025883a 	mov	r18,zero
    8a58:	94800c04 	addi	r18,r18,48
    8a5c:	dc8019c5 	stb	r18,103(sp)
    8a60:	dcc02717 	ldw	r19,156(sp)
    8a64:	dd4019c4 	addi	r21,sp,103
    8a68:	003e2b06 	br	8318 <__alt_data_end+0xf8008318>
    8a6c:	21003fcc 	andi	r4,r4,255
    8a70:	2002361e 	bne	r4,zero,934c <___vfiprintf_internal_r+0x1434>
    8a74:	1801c126 	beq	r3,zero,917c <___vfiprintf_internal_r+0x1264>
    8a78:	04800044 	movi	r18,1
    8a7c:	d8c01005 	stb	r3,64(sp)
    8a80:	d8001d85 	stb	zero,118(sp)
    8a84:	9027883a 	mov	r19,r18
    8a88:	dd401004 	addi	r21,sp,64
    8a8c:	003f1106 	br	86d4 <__alt_data_end+0xf80086d4>
    8a90:	d9402117 	ldw	r5,132(sp)
    8a94:	d9002017 	ldw	r4,128(sp)
    8a98:	d9801a04 	addi	r6,sp,104
    8a9c:	d9c02b15 	stw	r7,172(sp)
    8aa0:	dbc02a15 	stw	r15,168(sp)
    8aa4:	0007e040 	call	7e04 <__sprint_r.part.0>
    8aa8:	d9c02b17 	ldw	r7,172(sp)
    8aac:	dbc02a17 	ldw	r15,168(sp)
    8ab0:	10006d1e 	bne	r2,zero,8c68 <___vfiprintf_internal_r+0xd50>
    8ab4:	d9801b17 	ldw	r6,108(sp)
    8ab8:	d8801c17 	ldw	r2,112(sp)
    8abc:	d811883a 	mov	r8,sp
    8ac0:	31400044 	addi	r5,r6,1
    8ac4:	003e3306 	br	8394 <__alt_data_end+0xf8008394>
    8ac8:	d9401b17 	ldw	r5,108(sp)
    8acc:	d8801c17 	ldw	r2,112(sp)
    8ad0:	29000044 	addi	r4,r5,1
    8ad4:	d8c01d87 	ldb	r3,118(sp)
    8ad8:	183e4d26 	beq	r3,zero,8410 <__alt_data_end+0xf8008410>
    8adc:	00c00044 	movi	r3,1
    8ae0:	d9401d84 	addi	r5,sp,118
    8ae4:	10c5883a 	add	r2,r2,r3
    8ae8:	41400015 	stw	r5,0(r8)
    8aec:	40c00115 	stw	r3,4(r8)
    8af0:	d8801c15 	stw	r2,112(sp)
    8af4:	d9001b15 	stw	r4,108(sp)
    8af8:	014001c4 	movi	r5,7
    8afc:	2900a90e 	bge	r5,r4,8da4 <___vfiprintf_internal_r+0xe8c>
    8b00:	1000da1e 	bne	r2,zero,8e6c <___vfiprintf_internal_r+0xf54>
    8b04:	7000ab1e 	bne	r14,zero,8db4 <___vfiprintf_internal_r+0xe9c>
    8b08:	000b883a 	mov	r5,zero
    8b0c:	1809883a 	mov	r4,r3
    8b10:	d811883a 	mov	r8,sp
    8b14:	00c02004 	movi	r3,128
    8b18:	e0fe4d26 	beq	fp,r3,8450 <__alt_data_end+0xf8008450>
    8b1c:	4cf9c83a 	sub	fp,r9,r19
    8b20:	073e7b0e 	bge	zero,fp,8510 <__alt_data_end+0xf8008510>
    8b24:	01c00404 	movi	r7,16
    8b28:	3f01900e 	bge	r7,fp,916c <___vfiprintf_internal_r+0x1254>
    8b2c:	00c00074 	movhi	r3,1
    8b30:	18d04504 	addi	r3,r3,16660
    8b34:	d8c02415 	stw	r3,144(sp)
    8b38:	034001c4 	movi	r13,7
    8b3c:	00000506 	br	8b54 <___vfiprintf_internal_r+0xc3c>
    8b40:	29000084 	addi	r4,r5,2
    8b44:	42000204 	addi	r8,r8,8
    8b48:	180b883a 	mov	r5,r3
    8b4c:	e73ffc04 	addi	fp,fp,-16
    8b50:	3f000d0e 	bge	r7,fp,8b88 <___vfiprintf_internal_r+0xc70>
    8b54:	10800404 	addi	r2,r2,16
    8b58:	28c00044 	addi	r3,r5,1
    8b5c:	45c00015 	stw	r23,0(r8)
    8b60:	41c00115 	stw	r7,4(r8)
    8b64:	d8801c15 	stw	r2,112(sp)
    8b68:	d8c01b15 	stw	r3,108(sp)
    8b6c:	68fff40e 	bge	r13,r3,8b40 <__alt_data_end+0xf8008b40>
    8b70:	1000101e 	bne	r2,zero,8bb4 <___vfiprintf_internal_r+0xc9c>
    8b74:	e73ffc04 	addi	fp,fp,-16
    8b78:	01000044 	movi	r4,1
    8b7c:	000b883a 	mov	r5,zero
    8b80:	d811883a 	mov	r8,sp
    8b84:	3f3ff316 	blt	r7,fp,8b54 <__alt_data_end+0xf8008b54>
    8b88:	da802417 	ldw	r10,144(sp)
    8b8c:	1705883a 	add	r2,r2,fp
    8b90:	47000115 	stw	fp,4(r8)
    8b94:	42800015 	stw	r10,0(r8)
    8b98:	d8801c15 	stw	r2,112(sp)
    8b9c:	d9001b15 	stw	r4,108(sp)
    8ba0:	00c001c4 	movi	r3,7
    8ba4:	19003616 	blt	r3,r4,8c80 <___vfiprintf_internal_r+0xd68>
    8ba8:	42000204 	addi	r8,r8,8
    8bac:	21000044 	addi	r4,r4,1
    8bb0:	003e5706 	br	8510 <__alt_data_end+0xf8008510>
    8bb4:	d9402117 	ldw	r5,132(sp)
    8bb8:	d9002017 	ldw	r4,128(sp)
    8bbc:	d9801a04 	addi	r6,sp,104
    8bc0:	d9c02b15 	stw	r7,172(sp)
    8bc4:	db402a15 	stw	r13,168(sp)
    8bc8:	0007e040 	call	7e04 <__sprint_r.part.0>
    8bcc:	d9c02b17 	ldw	r7,172(sp)
    8bd0:	db402a17 	ldw	r13,168(sp)
    8bd4:	1000241e 	bne	r2,zero,8c68 <___vfiprintf_internal_r+0xd50>
    8bd8:	d9401b17 	ldw	r5,108(sp)
    8bdc:	d8801c17 	ldw	r2,112(sp)
    8be0:	d811883a 	mov	r8,sp
    8be4:	29000044 	addi	r4,r5,1
    8be8:	003fd806 	br	8b4c <__alt_data_end+0xf8008b4c>
    8bec:	d9401b17 	ldw	r5,108(sp)
    8bf0:	00c00074 	movhi	r3,1
    8bf4:	18d04904 	addi	r3,r3,16676
    8bf8:	d8c02415 	stw	r3,144(sp)
    8bfc:	29400044 	addi	r5,r5,1
    8c00:	d8c02417 	ldw	r3,144(sp)
    8c04:	14c5883a 	add	r2,r2,r19
    8c08:	44c00115 	stw	r19,4(r8)
    8c0c:	40c00015 	stw	r3,0(r8)
    8c10:	d8801c15 	stw	r2,112(sp)
    8c14:	d9401b15 	stw	r5,108(sp)
    8c18:	00c001c4 	movi	r3,7
    8c1c:	1940070e 	bge	r3,r5,8c3c <___vfiprintf_internal_r+0xd24>
    8c20:	103e4826 	beq	r2,zero,8544 <__alt_data_end+0xf8008544>
    8c24:	d9402117 	ldw	r5,132(sp)
    8c28:	d9002017 	ldw	r4,128(sp)
    8c2c:	d9801a04 	addi	r6,sp,104
    8c30:	0007e040 	call	7e04 <__sprint_r.part.0>
    8c34:	10000c1e 	bne	r2,zero,8c68 <___vfiprintf_internal_r+0xd50>
    8c38:	d8801c17 	ldw	r2,112(sp)
    8c3c:	8c80010e 	bge	r17,r18,8c44 <___vfiprintf_internal_r+0xd2c>
    8c40:	9023883a 	mov	r17,r18
    8c44:	da802317 	ldw	r10,140(sp)
    8c48:	5455883a 	add	r10,r10,r17
    8c4c:	da802315 	stw	r10,140(sp)
    8c50:	103e4126 	beq	r2,zero,8558 <__alt_data_end+0xf8008558>
    8c54:	d9402117 	ldw	r5,132(sp)
    8c58:	d9002017 	ldw	r4,128(sp)
    8c5c:	d9801a04 	addi	r6,sp,104
    8c60:	0007e040 	call	7e04 <__sprint_r.part.0>
    8c64:	103e3c26 	beq	r2,zero,8558 <__alt_data_end+0xf8008558>
    8c68:	dd002117 	ldw	r20,132(sp)
    8c6c:	a080030b 	ldhu	r2,12(r20)
    8c70:	1080100c 	andi	r2,r2,64
    8c74:	1001231e 	bne	r2,zero,9104 <___vfiprintf_internal_r+0x11ec>
    8c78:	d8802317 	ldw	r2,140(sp)
    8c7c:	003d7b06 	br	826c <__alt_data_end+0xf800826c>
    8c80:	1000991e 	bne	r2,zero,8ee8 <___vfiprintf_internal_r+0xfd0>
    8c84:	00c00044 	movi	r3,1
    8c88:	9805883a 	mov	r2,r19
    8c8c:	dd400015 	stw	r21,0(sp)
    8c90:	dcc00115 	stw	r19,4(sp)
    8c94:	dcc01c15 	stw	r19,112(sp)
    8c98:	d8c01b15 	stw	r3,108(sp)
    8c9c:	d811883a 	mov	r8,sp
    8ca0:	42000204 	addi	r8,r8,8
    8ca4:	a2c0010c 	andi	r11,r20,4
    8ca8:	583fe426 	beq	r11,zero,8c3c <__alt_data_end+0xf8008c3c>
    8cac:	8ca7c83a 	sub	r19,r17,r18
    8cb0:	04ffe20e 	bge	zero,r19,8c3c <__alt_data_end+0xf8008c3c>
    8cb4:	01c00404 	movi	r7,16
    8cb8:	3cffcc0e 	bge	r7,r19,8bec <__alt_data_end+0xf8008bec>
    8cbc:	02800074 	movhi	r10,1
    8cc0:	52904904 	addi	r10,r10,16676
    8cc4:	d9001b17 	ldw	r4,108(sp)
    8cc8:	da802415 	stw	r10,144(sp)
    8ccc:	382b883a 	mov	r21,r7
    8cd0:	050001c4 	movi	r20,7
    8cd4:	df002017 	ldw	fp,128(sp)
    8cd8:	00000506 	br	8cf0 <___vfiprintf_internal_r+0xdd8>
    8cdc:	21400084 	addi	r5,r4,2
    8ce0:	42000204 	addi	r8,r8,8
    8ce4:	1809883a 	mov	r4,r3
    8ce8:	9cfffc04 	addi	r19,r19,-16
    8cec:	acffc40e 	bge	r21,r19,8c00 <__alt_data_end+0xf8008c00>
    8cf0:	10800404 	addi	r2,r2,16
    8cf4:	20c00044 	addi	r3,r4,1
    8cf8:	45800015 	stw	r22,0(r8)
    8cfc:	45400115 	stw	r21,4(r8)
    8d00:	d8801c15 	stw	r2,112(sp)
    8d04:	d8c01b15 	stw	r3,108(sp)
    8d08:	a0fff40e 	bge	r20,r3,8cdc <__alt_data_end+0xf8008cdc>
    8d0c:	1000041e 	bne	r2,zero,8d20 <___vfiprintf_internal_r+0xe08>
    8d10:	01400044 	movi	r5,1
    8d14:	0009883a 	mov	r4,zero
    8d18:	d811883a 	mov	r8,sp
    8d1c:	003ff206 	br	8ce8 <__alt_data_end+0xf8008ce8>
    8d20:	d9402117 	ldw	r5,132(sp)
    8d24:	d9801a04 	addi	r6,sp,104
    8d28:	e009883a 	mov	r4,fp
    8d2c:	0007e040 	call	7e04 <__sprint_r.part.0>
    8d30:	103fcd1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8d34:	d9001b17 	ldw	r4,108(sp)
    8d38:	d8801c17 	ldw	r2,112(sp)
    8d3c:	d811883a 	mov	r8,sp
    8d40:	21400044 	addi	r5,r4,1
    8d44:	003fe806 	br	8ce8 <__alt_data_end+0xf8008ce8>
    8d48:	d9402117 	ldw	r5,132(sp)
    8d4c:	d9002017 	ldw	r4,128(sp)
    8d50:	d9801a04 	addi	r6,sp,104
    8d54:	d9c02b15 	stw	r7,172(sp)
    8d58:	db402a15 	stw	r13,168(sp)
    8d5c:	0007e040 	call	7e04 <__sprint_r.part.0>
    8d60:	d9c02b17 	ldw	r7,172(sp)
    8d64:	db402a17 	ldw	r13,168(sp)
    8d68:	103fbf1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8d6c:	d9401b17 	ldw	r5,108(sp)
    8d70:	d8801c17 	ldw	r2,112(sp)
    8d74:	d811883a 	mov	r8,sp
    8d78:	29800044 	addi	r6,r5,1
    8d7c:	003dc406 	br	8490 <__alt_data_end+0xf8008490>
    8d80:	1000d21e 	bne	r2,zero,90cc <___vfiprintf_internal_r+0x11b4>
    8d84:	d8c01d87 	ldb	r3,118(sp)
    8d88:	18009526 	beq	r3,zero,8fe0 <___vfiprintf_internal_r+0x10c8>
    8d8c:	00800044 	movi	r2,1
    8d90:	d8c01d84 	addi	r3,sp,118
    8d94:	1009883a 	mov	r4,r2
    8d98:	d8c00015 	stw	r3,0(sp)
    8d9c:	d8800115 	stw	r2,4(sp)
    8da0:	d811883a 	mov	r8,sp
    8da4:	200b883a 	mov	r5,r4
    8da8:	42000204 	addi	r8,r8,8
    8dac:	21000044 	addi	r4,r4,1
    8db0:	003d9706 	br	8410 <__alt_data_end+0xf8008410>
    8db4:	d9001d04 	addi	r4,sp,116
    8db8:	00800084 	movi	r2,2
    8dbc:	d9000015 	stw	r4,0(sp)
    8dc0:	d8800115 	stw	r2,4(sp)
    8dc4:	1809883a 	mov	r4,r3
    8dc8:	d811883a 	mov	r8,sp
    8dcc:	200b883a 	mov	r5,r4
    8dd0:	42000204 	addi	r8,r8,8
    8dd4:	21000044 	addi	r4,r4,1
    8dd8:	003f4e06 	br	8b14 <__alt_data_end+0xf8008b14>
    8ddc:	d8001d85 	stb	zero,118(sp)
    8de0:	48005016 	blt	r9,zero,8f24 <___vfiprintf_internal_r+0x100c>
    8de4:	00ffdfc4 	movi	r3,-129
    8de8:	94c4b03a 	or	r2,r18,r19
    8dec:	a0e8703a 	and	r20,r20,r3
    8df0:	103d4426 	beq	r2,zero,8304 <__alt_data_end+0xf8008304>
    8df4:	0039883a 	mov	fp,zero
    8df8:	d9002617 	ldw	r4,152(sp)
    8dfc:	dd401a04 	addi	r21,sp,104
    8e00:	908003cc 	andi	r2,r18,15
    8e04:	9806973a 	slli	r3,r19,28
    8e08:	2085883a 	add	r2,r4,r2
    8e0c:	9024d13a 	srli	r18,r18,4
    8e10:	10800003 	ldbu	r2,0(r2)
    8e14:	9826d13a 	srli	r19,r19,4
    8e18:	ad7fffc4 	addi	r21,r21,-1
    8e1c:	1ca4b03a 	or	r18,r3,r18
    8e20:	a8800005 	stb	r2,0(r21)
    8e24:	94c4b03a 	or	r2,r18,r19
    8e28:	103ff51e 	bne	r2,zero,8e00 <__alt_data_end+0xf8008e00>
    8e2c:	003e5906 	br	8794 <__alt_data_end+0xf8008794>
    8e30:	d9402117 	ldw	r5,132(sp)
    8e34:	d9002017 	ldw	r4,128(sp)
    8e38:	d9801a04 	addi	r6,sp,104
    8e3c:	0007e040 	call	7e04 <__sprint_r.part.0>
    8e40:	103f891e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8e44:	d8801c17 	ldw	r2,112(sp)
    8e48:	d811883a 	mov	r8,sp
    8e4c:	003f9506 	br	8ca4 <__alt_data_end+0xf8008ca4>
    8e50:	d9402117 	ldw	r5,132(sp)
    8e54:	d9002017 	ldw	r4,128(sp)
    8e58:	d9801a04 	addi	r6,sp,104
    8e5c:	0007e040 	call	7e04 <__sprint_r.part.0>
    8e60:	103f811e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8e64:	d811883a 	mov	r8,sp
    8e68:	003ced06 	br	8220 <__alt_data_end+0xf8008220>
    8e6c:	d9402117 	ldw	r5,132(sp)
    8e70:	d9002017 	ldw	r4,128(sp)
    8e74:	d9801a04 	addi	r6,sp,104
    8e78:	da402c15 	stw	r9,176(sp)
    8e7c:	db802a15 	stw	r14,168(sp)
    8e80:	0007e040 	call	7e04 <__sprint_r.part.0>
    8e84:	da402c17 	ldw	r9,176(sp)
    8e88:	db802a17 	ldw	r14,168(sp)
    8e8c:	103f761e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8e90:	d9401b17 	ldw	r5,108(sp)
    8e94:	d8801c17 	ldw	r2,112(sp)
    8e98:	d811883a 	mov	r8,sp
    8e9c:	29000044 	addi	r4,r5,1
    8ea0:	003d5b06 	br	8410 <__alt_data_end+0xf8008410>
    8ea4:	d9402117 	ldw	r5,132(sp)
    8ea8:	d9002017 	ldw	r4,128(sp)
    8eac:	d9801a04 	addi	r6,sp,104
    8eb0:	da402c15 	stw	r9,176(sp)
    8eb4:	0007e040 	call	7e04 <__sprint_r.part.0>
    8eb8:	da402c17 	ldw	r9,176(sp)
    8ebc:	103f6a1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8ec0:	d9401b17 	ldw	r5,108(sp)
    8ec4:	d8801c17 	ldw	r2,112(sp)
    8ec8:	d811883a 	mov	r8,sp
    8ecc:	29000044 	addi	r4,r5,1
    8ed0:	003f1006 	br	8b14 <__alt_data_end+0xf8008b14>
    8ed4:	1000c31e 	bne	r2,zero,91e4 <___vfiprintf_internal_r+0x12cc>
    8ed8:	01000044 	movi	r4,1
    8edc:	000b883a 	mov	r5,zero
    8ee0:	d811883a 	mov	r8,sp
    8ee4:	003f0d06 	br	8b1c <__alt_data_end+0xf8008b1c>
    8ee8:	d9402117 	ldw	r5,132(sp)
    8eec:	d9002017 	ldw	r4,128(sp)
    8ef0:	d9801a04 	addi	r6,sp,104
    8ef4:	0007e040 	call	7e04 <__sprint_r.part.0>
    8ef8:	103f5b1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    8efc:	d9001b17 	ldw	r4,108(sp)
    8f00:	d8801c17 	ldw	r2,112(sp)
    8f04:	d811883a 	mov	r8,sp
    8f08:	21000044 	addi	r4,r4,1
    8f0c:	003d8006 	br	8510 <__alt_data_end+0xf8008510>
    8f10:	01000074 	movhi	r4,1
    8f14:	210fe404 	addi	r4,r4,16272
    8f18:	d9002615 	stw	r4,152(sp)
    8f1c:	d8c02215 	stw	r3,136(sp)
    8f20:	1029883a 	mov	r20,r2
    8f24:	94c4b03a 	or	r2,r18,r19
    8f28:	103fb21e 	bne	r2,zero,8df4 <__alt_data_end+0xf8008df4>
    8f2c:	0039883a 	mov	fp,zero
    8f30:	00800084 	movi	r2,2
    8f34:	003e6b06 	br	88e4 <__alt_data_end+0xf80088e4>
    8f38:	da802217 	ldw	r10,136(sp)
    8f3c:	d8001d85 	stb	zero,118(sp)
    8f40:	0027883a 	mov	r19,zero
    8f44:	50800104 	addi	r2,r10,4
    8f48:	54800017 	ldw	r18,0(r10)
    8f4c:	483e6016 	blt	r9,zero,88d0 <__alt_data_end+0xf80088d0>
    8f50:	00ffdfc4 	movi	r3,-129
    8f54:	d8802215 	stw	r2,136(sp)
    8f58:	a0e8703a 	and	r20,r20,r3
    8f5c:	0039883a 	mov	fp,zero
    8f60:	903ebb26 	beq	r18,zero,8a50 <__alt_data_end+0xf8008a50>
    8f64:	00800244 	movi	r2,9
    8f68:	14bdee36 	bltu	r2,r18,8724 <__alt_data_end+0xf8008724>
    8f6c:	003eba06 	br	8a58 <__alt_data_end+0xf8008a58>
    8f70:	00800c04 	movi	r2,48
    8f74:	d8c01d45 	stb	r3,117(sp)
    8f78:	d8801d05 	stb	r2,116(sp)
    8f7c:	d8001d85 	stb	zero,118(sp)
    8f80:	a0c00094 	ori	r3,r20,2
    8f84:	4800a916 	blt	r9,zero,922c <___vfiprintf_internal_r+0x1314>
    8f88:	00bfdfc4 	movi	r2,-129
    8f8c:	a096703a 	and	r11,r20,r2
    8f90:	5d000094 	ori	r20,r11,2
    8f94:	0039883a 	mov	fp,zero
    8f98:	003f9706 	br	8df8 <__alt_data_end+0xf8008df8>
    8f9c:	8025883a 	mov	r18,r16
    8fa0:	003c2e06 	br	805c <__alt_data_end+0xf800805c>
    8fa4:	00800074 	movhi	r2,1
    8fa8:	108fe404 	addi	r2,r2,16272
    8fac:	0039883a 	mov	fp,zero
    8fb0:	d8802615 	stw	r2,152(sp)
    8fb4:	003f9006 	br	8df8 <__alt_data_end+0xf8008df8>
    8fb8:	04a5c83a 	sub	r18,zero,r18
    8fbc:	07000b44 	movi	fp,45
    8fc0:	9004c03a 	cmpne	r2,r18,zero
    8fc4:	04e7c83a 	sub	r19,zero,r19
    8fc8:	df001d85 	stb	fp,118(sp)
    8fcc:	98a7c83a 	sub	r19,r19,r2
    8fd0:	48009f16 	blt	r9,zero,9250 <___vfiprintf_internal_r+0x1338>
    8fd4:	00bfdfc4 	movi	r2,-129
    8fd8:	a0a8703a 	and	r20,r20,r2
    8fdc:	003dd006 	br	8720 <__alt_data_end+0xf8008720>
    8fe0:	70004c26 	beq	r14,zero,9114 <___vfiprintf_internal_r+0x11fc>
    8fe4:	00800084 	movi	r2,2
    8fe8:	d8c01d04 	addi	r3,sp,116
    8fec:	d8c00015 	stw	r3,0(sp)
    8ff0:	d8800115 	stw	r2,4(sp)
    8ff4:	01000044 	movi	r4,1
    8ff8:	d811883a 	mov	r8,sp
    8ffc:	003f7306 	br	8dcc <__alt_data_end+0xf8008dcc>
    9000:	a080100c 	andi	r2,r20,64
    9004:	da802217 	ldw	r10,136(sp)
    9008:	103e0626 	beq	r2,zero,8824 <__alt_data_end+0xf8008824>
    900c:	5480000f 	ldh	r18,0(r10)
    9010:	52800104 	addi	r10,r10,4
    9014:	da802215 	stw	r10,136(sp)
    9018:	9027d7fa 	srai	r19,r18,31
    901c:	9805883a 	mov	r2,r19
    9020:	003db806 	br	8704 <__alt_data_end+0xf8008704>
    9024:	a080040c 	andi	r2,r20,16
    9028:	1000091e 	bne	r2,zero,9050 <___vfiprintf_internal_r+0x1138>
    902c:	a2c0100c 	andi	r11,r20,64
    9030:	58000726 	beq	r11,zero,9050 <___vfiprintf_internal_r+0x1138>
    9034:	da802217 	ldw	r10,136(sp)
    9038:	50800017 	ldw	r2,0(r10)
    903c:	52800104 	addi	r10,r10,4
    9040:	da802215 	stw	r10,136(sp)
    9044:	da802317 	ldw	r10,140(sp)
    9048:	1280000d 	sth	r10,0(r2)
    904c:	003be706 	br	7fec <__alt_data_end+0xf8007fec>
    9050:	da802217 	ldw	r10,136(sp)
    9054:	50800017 	ldw	r2,0(r10)
    9058:	52800104 	addi	r10,r10,4
    905c:	da802215 	stw	r10,136(sp)
    9060:	da802317 	ldw	r10,140(sp)
    9064:	12800015 	stw	r10,0(r2)
    9068:	003be006 	br	7fec <__alt_data_end+0xf8007fec>
    906c:	a080100c 	andi	r2,r20,64
    9070:	da802217 	ldw	r10,136(sp)
    9074:	10003026 	beq	r2,zero,9138 <___vfiprintf_internal_r+0x1220>
    9078:	5480000b 	ldhu	r18,0(r10)
    907c:	52800104 	addi	r10,r10,4
    9080:	0027883a 	mov	r19,zero
    9084:	da802215 	stw	r10,136(sp)
    9088:	003d8006 	br	868c <__alt_data_end+0xf800868c>
    908c:	80c00007 	ldb	r3,0(r16)
    9090:	003c0006 	br	8094 <__alt_data_end+0xf8008094>
    9094:	a080100c 	andi	r2,r20,64
    9098:	d8001d85 	stb	zero,118(sp)
    909c:	da802217 	ldw	r10,136(sp)
    90a0:	1000201e 	bne	r2,zero,9124 <___vfiprintf_internal_r+0x120c>
    90a4:	50800104 	addi	r2,r10,4
    90a8:	54800017 	ldw	r18,0(r10)
    90ac:	0027883a 	mov	r19,zero
    90b0:	483def0e 	bge	r9,zero,8870 <__alt_data_end+0xf8008870>
    90b4:	94c6b03a 	or	r3,r18,r19
    90b8:	d8802215 	stw	r2,136(sp)
    90bc:	183d4e1e 	bne	r3,zero,85f8 <__alt_data_end+0xf80085f8>
    90c0:	0039883a 	mov	fp,zero
    90c4:	0005883a 	mov	r2,zero
    90c8:	003e0606 	br	88e4 <__alt_data_end+0xf80088e4>
    90cc:	d9402117 	ldw	r5,132(sp)
    90d0:	d9002017 	ldw	r4,128(sp)
    90d4:	d9801a04 	addi	r6,sp,104
    90d8:	da402c15 	stw	r9,176(sp)
    90dc:	db802a15 	stw	r14,168(sp)
    90e0:	0007e040 	call	7e04 <__sprint_r.part.0>
    90e4:	da402c17 	ldw	r9,176(sp)
    90e8:	db802a17 	ldw	r14,168(sp)
    90ec:	103ede1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    90f0:	d9401b17 	ldw	r5,108(sp)
    90f4:	d8801c17 	ldw	r2,112(sp)
    90f8:	d811883a 	mov	r8,sp
    90fc:	29000044 	addi	r4,r5,1
    9100:	003e7406 	br	8ad4 <__alt_data_end+0xf8008ad4>
    9104:	00bfffc4 	movi	r2,-1
    9108:	003c5806 	br	826c <__alt_data_end+0xf800826c>
    910c:	d811883a 	mov	r8,sp
    9110:	003ee806 	br	8cb4 <__alt_data_end+0xf8008cb4>
    9114:	000b883a 	mov	r5,zero
    9118:	01000044 	movi	r4,1
    911c:	d811883a 	mov	r8,sp
    9120:	003e7c06 	br	8b14 <__alt_data_end+0xf8008b14>
    9124:	50800104 	addi	r2,r10,4
    9128:	5480000b 	ldhu	r18,0(r10)
    912c:	0027883a 	mov	r19,zero
    9130:	483dcf0e 	bge	r9,zero,8870 <__alt_data_end+0xf8008870>
    9134:	003fdf06 	br	90b4 <__alt_data_end+0xf80090b4>
    9138:	54800017 	ldw	r18,0(r10)
    913c:	52800104 	addi	r10,r10,4
    9140:	0027883a 	mov	r19,zero
    9144:	da802215 	stw	r10,136(sp)
    9148:	003d5006 	br	868c <__alt_data_end+0xf800868c>
    914c:	50800104 	addi	r2,r10,4
    9150:	5480000b 	ldhu	r18,0(r10)
    9154:	0027883a 	mov	r19,zero
    9158:	483f7d0e 	bge	r9,zero,8f50 <__alt_data_end+0xf8008f50>
    915c:	003ddc06 	br	88d0 <__alt_data_end+0xf80088d0>
    9160:	d8c02215 	stw	r3,136(sp)
    9164:	0039883a 	mov	fp,zero
    9168:	003ddb06 	br	88d8 <__alt_data_end+0xf80088d8>
    916c:	02800074 	movhi	r10,1
    9170:	52904504 	addi	r10,r10,16660
    9174:	da802415 	stw	r10,144(sp)
    9178:	003e8306 	br	8b88 <__alt_data_end+0xf8008b88>
    917c:	d8801c17 	ldw	r2,112(sp)
    9180:	dd002117 	ldw	r20,132(sp)
    9184:	103eb926 	beq	r2,zero,8c6c <__alt_data_end+0xf8008c6c>
    9188:	d9002017 	ldw	r4,128(sp)
    918c:	d9801a04 	addi	r6,sp,104
    9190:	a00b883a 	mov	r5,r20
    9194:	0007e040 	call	7e04 <__sprint_r.part.0>
    9198:	003eb406 	br	8c6c <__alt_data_end+0xf8008c6c>
    919c:	80c00043 	ldbu	r3,1(r16)
    91a0:	a5000814 	ori	r20,r20,32
    91a4:	84000044 	addi	r16,r16,1
    91a8:	18c03fcc 	andi	r3,r3,255
    91ac:	18c0201c 	xori	r3,r3,128
    91b0:	18ffe004 	addi	r3,r3,-128
    91b4:	003bb706 	br	8094 <__alt_data_end+0xf8008094>
    91b8:	a809883a 	mov	r4,r21
    91bc:	d8c02a15 	stw	r3,168(sp)
    91c0:	da002b15 	stw	r8,172(sp)
    91c4:	00010cc0 	call	10cc <strlen>
    91c8:	d8c02a17 	ldw	r3,168(sp)
    91cc:	1027883a 	mov	r19,r2
    91d0:	df001d83 	ldbu	fp,118(sp)
    91d4:	d8c02215 	stw	r3,136(sp)
    91d8:	0013883a 	mov	r9,zero
    91dc:	da002b17 	ldw	r8,172(sp)
    91e0:	003c4d06 	br	8318 <__alt_data_end+0xf8008318>
    91e4:	d9402117 	ldw	r5,132(sp)
    91e8:	d9002017 	ldw	r4,128(sp)
    91ec:	d9801a04 	addi	r6,sp,104
    91f0:	da402c15 	stw	r9,176(sp)
    91f4:	0007e040 	call	7e04 <__sprint_r.part.0>
    91f8:	da402c17 	ldw	r9,176(sp)
    91fc:	103e9a1e 	bne	r2,zero,8c68 <__alt_data_end+0xf8008c68>
    9200:	d9401b17 	ldw	r5,108(sp)
    9204:	d8801c17 	ldw	r2,112(sp)
    9208:	d811883a 	mov	r8,sp
    920c:	29000044 	addi	r4,r5,1
    9210:	003e4206 	br	8b1c <__alt_data_end+0xf8008b1c>
    9214:	d9401b17 	ldw	r5,108(sp)
    9218:	01000074 	movhi	r4,1
    921c:	21104904 	addi	r4,r4,16676
    9220:	d9002415 	stw	r4,144(sp)
    9224:	29400044 	addi	r5,r5,1
    9228:	003c6d06 	br	83e0 <__alt_data_end+0xf80083e0>
    922c:	0039883a 	mov	fp,zero
    9230:	00800084 	movi	r2,2
    9234:	10803fcc 	andi	r2,r2,255
    9238:	01000044 	movi	r4,1
    923c:	11001e26 	beq	r2,r4,92b8 <___vfiprintf_internal_r+0x13a0>
    9240:	01000084 	movi	r4,2
    9244:	11001e1e 	bne	r2,r4,92c0 <___vfiprintf_internal_r+0x13a8>
    9248:	1829883a 	mov	r20,r3
    924c:	003eea06 	br	8df8 <__alt_data_end+0xf8008df8>
    9250:	a007883a 	mov	r3,r20
    9254:	00800044 	movi	r2,1
    9258:	003ff606 	br	9234 <__alt_data_end+0xf8009234>
    925c:	00800184 	movi	r2,6
    9260:	1240012e 	bgeu	r2,r9,9268 <___vfiprintf_internal_r+0x1350>
    9264:	1013883a 	mov	r9,r2
    9268:	4827883a 	mov	r19,r9
    926c:	4825883a 	mov	r18,r9
    9270:	48001516 	blt	r9,zero,92c8 <___vfiprintf_internal_r+0x13b0>
    9274:	05400074 	movhi	r21,1
    9278:	d8c02215 	stw	r3,136(sp)
    927c:	ad4fe904 	addi	r21,r21,16292
    9280:	003d1406 	br	86d4 <__alt_data_end+0xf80086d4>
    9284:	02800074 	movhi	r10,1
    9288:	52904504 	addi	r10,r10,16660
    928c:	da802415 	stw	r10,144(sp)
    9290:	200d883a 	mov	r6,r4
    9294:	003c9106 	br	84dc <__alt_data_end+0xf80084dc>
    9298:	5021883a 	mov	r16,r10
    929c:	0013883a 	mov	r9,zero
    92a0:	003b7d06 	br	8098 <__alt_data_end+0xf8008098>
    92a4:	4827883a 	mov	r19,r9
    92a8:	df001d83 	ldbu	fp,118(sp)
    92ac:	d8c02215 	stw	r3,136(sp)
    92b0:	0013883a 	mov	r9,zero
    92b4:	003c1806 	br	8318 <__alt_data_end+0xf8008318>
    92b8:	1829883a 	mov	r20,r3
    92bc:	003d1806 	br	8720 <__alt_data_end+0xf8008720>
    92c0:	1829883a 	mov	r20,r3
    92c4:	003ccd06 	br	85fc <__alt_data_end+0xf80085fc>
    92c8:	0025883a 	mov	r18,zero
    92cc:	003fe906 	br	9274 <__alt_data_end+0xf8009274>
    92d0:	d8802217 	ldw	r2,136(sp)
    92d4:	80c00043 	ldbu	r3,1(r16)
    92d8:	5021883a 	mov	r16,r10
    92dc:	12400017 	ldw	r9,0(r2)
    92e0:	10800104 	addi	r2,r2,4
    92e4:	d8802215 	stw	r2,136(sp)
    92e8:	483faf0e 	bge	r9,zero,91a8 <__alt_data_end+0xf80091a8>
    92ec:	18c03fcc 	andi	r3,r3,255
    92f0:	18c0201c 	xori	r3,r3,128
    92f4:	027fffc4 	movi	r9,-1
    92f8:	18ffe004 	addi	r3,r3,-128
    92fc:	003b6506 	br	8094 <__alt_data_end+0xf8008094>
    9300:	d9c01d85 	stb	r7,118(sp)
    9304:	003ca006 	br	8588 <__alt_data_end+0xf8008588>
    9308:	d9c01d85 	stb	r7,118(sp)
    930c:	003cad06 	br	85c4 <__alt_data_end+0xf80085c4>
    9310:	d9c01d85 	stb	r7,118(sp)
    9314:	003d7d06 	br	890c <__alt_data_end+0xf800890c>
    9318:	d9c01d85 	stb	r7,118(sp)
    931c:	003d5f06 	br	889c <__alt_data_end+0xf800889c>
    9320:	a080004c 	andi	r2,r20,1
    9324:	0039883a 	mov	fp,zero
    9328:	10000526 	beq	r2,zero,9340 <___vfiprintf_internal_r+0x1428>
    932c:	00800c04 	movi	r2,48
    9330:	d88019c5 	stb	r2,103(sp)
    9334:	dcc02717 	ldw	r19,156(sp)
    9338:	dd4019c4 	addi	r21,sp,103
    933c:	003bf606 	br	8318 <__alt_data_end+0xf8008318>
    9340:	0027883a 	mov	r19,zero
    9344:	dd401a04 	addi	r21,sp,104
    9348:	003bf306 	br	8318 <__alt_data_end+0xf8008318>
    934c:	d9c01d85 	stb	r7,118(sp)
    9350:	003dc806 	br	8a74 <__alt_data_end+0xf8008a74>
    9354:	d9c01d85 	stb	r7,118(sp)
    9358:	003d3a06 	br	8844 <__alt_data_end+0xf8008844>
    935c:	d9c01d85 	stb	r7,118(sp)
    9360:	003d2a06 	br	880c <__alt_data_end+0xf800880c>
    9364:	d9c01d85 	stb	r7,118(sp)
    9368:	003cde06 	br	86e4 <__alt_data_end+0xf80086e4>
    936c:	d9c01d85 	stb	r7,118(sp)
    9370:	003cbc06 	br	8664 <__alt_data_end+0xf8008664>

00009374 <__vfiprintf_internal>:
    9374:	00800074 	movhi	r2,1
    9378:	10978804 	addi	r2,r2,24096
    937c:	300f883a 	mov	r7,r6
    9380:	280d883a 	mov	r6,r5
    9384:	200b883a 	mov	r5,r4
    9388:	11000017 	ldw	r4,0(r2)
    938c:	0007f181 	jmpi	7f18 <___vfiprintf_internal_r>

00009390 <__sbprintf>:
    9390:	2880030b 	ldhu	r2,12(r5)
    9394:	2ac01917 	ldw	r11,100(r5)
    9398:	2a80038b 	ldhu	r10,14(r5)
    939c:	2a400717 	ldw	r9,28(r5)
    93a0:	2a000917 	ldw	r8,36(r5)
    93a4:	defee204 	addi	sp,sp,-1144
    93a8:	00c10004 	movi	r3,1024
    93ac:	dc011a15 	stw	r16,1128(sp)
    93b0:	10bfff4c 	andi	r2,r2,65533
    93b4:	2821883a 	mov	r16,r5
    93b8:	d8cb883a 	add	r5,sp,r3
    93bc:	dc811c15 	stw	r18,1136(sp)
    93c0:	dc411b15 	stw	r17,1132(sp)
    93c4:	dfc11d15 	stw	ra,1140(sp)
    93c8:	2025883a 	mov	r18,r4
    93cc:	d881030d 	sth	r2,1036(sp)
    93d0:	dac11915 	stw	r11,1124(sp)
    93d4:	da81038d 	sth	r10,1038(sp)
    93d8:	da410715 	stw	r9,1052(sp)
    93dc:	da010915 	stw	r8,1060(sp)
    93e0:	dec10015 	stw	sp,1024(sp)
    93e4:	dec10415 	stw	sp,1040(sp)
    93e8:	d8c10215 	stw	r3,1032(sp)
    93ec:	d8c10515 	stw	r3,1044(sp)
    93f0:	d8010615 	stw	zero,1048(sp)
    93f4:	0007f180 	call	7f18 <___vfiprintf_internal_r>
    93f8:	1023883a 	mov	r17,r2
    93fc:	10000416 	blt	r2,zero,9410 <__sbprintf+0x80>
    9400:	d9410004 	addi	r5,sp,1024
    9404:	9009883a 	mov	r4,r18
    9408:	000502c0 	call	502c <_fflush_r>
    940c:	10000d1e 	bne	r2,zero,9444 <__sbprintf+0xb4>
    9410:	d881030b 	ldhu	r2,1036(sp)
    9414:	1080100c 	andi	r2,r2,64
    9418:	10000326 	beq	r2,zero,9428 <__sbprintf+0x98>
    941c:	8080030b 	ldhu	r2,12(r16)
    9420:	10801014 	ori	r2,r2,64
    9424:	8080030d 	sth	r2,12(r16)
    9428:	8805883a 	mov	r2,r17
    942c:	dfc11d17 	ldw	ra,1140(sp)
    9430:	dc811c17 	ldw	r18,1136(sp)
    9434:	dc411b17 	ldw	r17,1132(sp)
    9438:	dc011a17 	ldw	r16,1128(sp)
    943c:	dec11e04 	addi	sp,sp,1144
    9440:	f800283a 	ret
    9444:	047fffc4 	movi	r17,-1
    9448:	003ff106 	br	9410 <__alt_data_end+0xf8009410>

0000944c <_write_r>:
    944c:	defffd04 	addi	sp,sp,-12
    9450:	2805883a 	mov	r2,r5
    9454:	dc000015 	stw	r16,0(sp)
    9458:	04000074 	movhi	r16,1
    945c:	dc400115 	stw	r17,4(sp)
    9460:	300b883a 	mov	r5,r6
    9464:	841e8104 	addi	r16,r16,31236
    9468:	2023883a 	mov	r17,r4
    946c:	380d883a 	mov	r6,r7
    9470:	1009883a 	mov	r4,r2
    9474:	dfc00215 	stw	ra,8(sp)
    9478:	80000015 	stw	zero,0(r16)
    947c:	000d8980 	call	d898 <write>
    9480:	00ffffc4 	movi	r3,-1
    9484:	10c00526 	beq	r2,r3,949c <_write_r+0x50>
    9488:	dfc00217 	ldw	ra,8(sp)
    948c:	dc400117 	ldw	r17,4(sp)
    9490:	dc000017 	ldw	r16,0(sp)
    9494:	dec00304 	addi	sp,sp,12
    9498:	f800283a 	ret
    949c:	80c00017 	ldw	r3,0(r16)
    94a0:	183ff926 	beq	r3,zero,9488 <__alt_data_end+0xf8009488>
    94a4:	88c00015 	stw	r3,0(r17)
    94a8:	003ff706 	br	9488 <__alt_data_end+0xf8009488>

000094ac <_close_r>:
    94ac:	defffd04 	addi	sp,sp,-12
    94b0:	dc000015 	stw	r16,0(sp)
    94b4:	04000074 	movhi	r16,1
    94b8:	dc400115 	stw	r17,4(sp)
    94bc:	841e8104 	addi	r16,r16,31236
    94c0:	2023883a 	mov	r17,r4
    94c4:	2809883a 	mov	r4,r5
    94c8:	dfc00215 	stw	ra,8(sp)
    94cc:	80000015 	stw	zero,0(r16)
    94d0:	000d0880 	call	d088 <close>
    94d4:	00ffffc4 	movi	r3,-1
    94d8:	10c00526 	beq	r2,r3,94f0 <_close_r+0x44>
    94dc:	dfc00217 	ldw	ra,8(sp)
    94e0:	dc400117 	ldw	r17,4(sp)
    94e4:	dc000017 	ldw	r16,0(sp)
    94e8:	dec00304 	addi	sp,sp,12
    94ec:	f800283a 	ret
    94f0:	80c00017 	ldw	r3,0(r16)
    94f4:	183ff926 	beq	r3,zero,94dc <__alt_data_end+0xf80094dc>
    94f8:	88c00015 	stw	r3,0(r17)
    94fc:	003ff706 	br	94dc <__alt_data_end+0xf80094dc>

00009500 <_calloc_r>:
    9500:	298b383a 	mul	r5,r5,r6
    9504:	defffe04 	addi	sp,sp,-8
    9508:	dfc00115 	stw	ra,4(sp)
    950c:	dc000015 	stw	r16,0(sp)
    9510:	00006180 	call	618 <_malloc_r>
    9514:	10002926 	beq	r2,zero,95bc <_calloc_r+0xbc>
    9518:	11bfff17 	ldw	r6,-4(r2)
    951c:	1021883a 	mov	r16,r2
    9520:	00bfff04 	movi	r2,-4
    9524:	308c703a 	and	r6,r6,r2
    9528:	00c00904 	movi	r3,36
    952c:	308d883a 	add	r6,r6,r2
    9530:	19801636 	bltu	r3,r6,958c <_calloc_r+0x8c>
    9534:	008004c4 	movi	r2,19
    9538:	11800b2e 	bgeu	r2,r6,9568 <_calloc_r+0x68>
    953c:	80000015 	stw	zero,0(r16)
    9540:	80000115 	stw	zero,4(r16)
    9544:	008006c4 	movi	r2,27
    9548:	11801a2e 	bgeu	r2,r6,95b4 <_calloc_r+0xb4>
    954c:	80000215 	stw	zero,8(r16)
    9550:	80000315 	stw	zero,12(r16)
    9554:	30c0151e 	bne	r6,r3,95ac <_calloc_r+0xac>
    9558:	80000415 	stw	zero,16(r16)
    955c:	80800604 	addi	r2,r16,24
    9560:	80000515 	stw	zero,20(r16)
    9564:	00000106 	br	956c <_calloc_r+0x6c>
    9568:	8005883a 	mov	r2,r16
    956c:	10000015 	stw	zero,0(r2)
    9570:	10000115 	stw	zero,4(r2)
    9574:	10000215 	stw	zero,8(r2)
    9578:	8005883a 	mov	r2,r16
    957c:	dfc00117 	ldw	ra,4(sp)
    9580:	dc000017 	ldw	r16,0(sp)
    9584:	dec00204 	addi	sp,sp,8
    9588:	f800283a 	ret
    958c:	000b883a 	mov	r5,zero
    9590:	8009883a 	mov	r4,r16
    9594:	00064f00 	call	64f0 <memset>
    9598:	8005883a 	mov	r2,r16
    959c:	dfc00117 	ldw	ra,4(sp)
    95a0:	dc000017 	ldw	r16,0(sp)
    95a4:	dec00204 	addi	sp,sp,8
    95a8:	f800283a 	ret
    95ac:	80800404 	addi	r2,r16,16
    95b0:	003fee06 	br	956c <__alt_data_end+0xf800956c>
    95b4:	80800204 	addi	r2,r16,8
    95b8:	003fec06 	br	956c <__alt_data_end+0xf800956c>
    95bc:	0005883a 	mov	r2,zero
    95c0:	003fee06 	br	957c <__alt_data_end+0xf800957c>

000095c4 <_fclose_r>:
    95c4:	28003926 	beq	r5,zero,96ac <_fclose_r+0xe8>
    95c8:	defffc04 	addi	sp,sp,-16
    95cc:	dc400115 	stw	r17,4(sp)
    95d0:	dc000015 	stw	r16,0(sp)
    95d4:	dfc00315 	stw	ra,12(sp)
    95d8:	dc800215 	stw	r18,8(sp)
    95dc:	2023883a 	mov	r17,r4
    95e0:	2821883a 	mov	r16,r5
    95e4:	20000226 	beq	r4,zero,95f0 <_fclose_r+0x2c>
    95e8:	20800e17 	ldw	r2,56(r4)
    95ec:	10002726 	beq	r2,zero,968c <_fclose_r+0xc8>
    95f0:	8080030f 	ldh	r2,12(r16)
    95f4:	1000071e 	bne	r2,zero,9614 <_fclose_r+0x50>
    95f8:	0005883a 	mov	r2,zero
    95fc:	dfc00317 	ldw	ra,12(sp)
    9600:	dc800217 	ldw	r18,8(sp)
    9604:	dc400117 	ldw	r17,4(sp)
    9608:	dc000017 	ldw	r16,0(sp)
    960c:	dec00404 	addi	sp,sp,16
    9610:	f800283a 	ret
    9614:	800b883a 	mov	r5,r16
    9618:	8809883a 	mov	r4,r17
    961c:	0004e100 	call	4e10 <__sflush_r>
    9620:	1025883a 	mov	r18,r2
    9624:	80800b17 	ldw	r2,44(r16)
    9628:	10000426 	beq	r2,zero,963c <_fclose_r+0x78>
    962c:	81400717 	ldw	r5,28(r16)
    9630:	8809883a 	mov	r4,r17
    9634:	103ee83a 	callr	r2
    9638:	10001616 	blt	r2,zero,9694 <_fclose_r+0xd0>
    963c:	8080030b 	ldhu	r2,12(r16)
    9640:	1080200c 	andi	r2,r2,128
    9644:	1000151e 	bne	r2,zero,969c <_fclose_r+0xd8>
    9648:	81400c17 	ldw	r5,48(r16)
    964c:	28000526 	beq	r5,zero,9664 <_fclose_r+0xa0>
    9650:	80801004 	addi	r2,r16,64
    9654:	28800226 	beq	r5,r2,9660 <_fclose_r+0x9c>
    9658:	8809883a 	mov	r4,r17
    965c:	000557c0 	call	557c <_free_r>
    9660:	80000c15 	stw	zero,48(r16)
    9664:	81401117 	ldw	r5,68(r16)
    9668:	28000326 	beq	r5,zero,9678 <_fclose_r+0xb4>
    966c:	8809883a 	mov	r4,r17
    9670:	000557c0 	call	557c <_free_r>
    9674:	80001115 	stw	zero,68(r16)
    9678:	00054180 	call	5418 <__sfp_lock_acquire>
    967c:	8000030d 	sth	zero,12(r16)
    9680:	000541c0 	call	541c <__sfp_lock_release>
    9684:	9005883a 	mov	r2,r18
    9688:	003fdc06 	br	95fc <__alt_data_end+0xf80095fc>
    968c:	00054080 	call	5408 <__sinit>
    9690:	003fd706 	br	95f0 <__alt_data_end+0xf80095f0>
    9694:	04bfffc4 	movi	r18,-1
    9698:	003fe806 	br	963c <__alt_data_end+0xf800963c>
    969c:	81400417 	ldw	r5,16(r16)
    96a0:	8809883a 	mov	r4,r17
    96a4:	000557c0 	call	557c <_free_r>
    96a8:	003fe706 	br	9648 <__alt_data_end+0xf8009648>
    96ac:	0005883a 	mov	r2,zero
    96b0:	f800283a 	ret

000096b4 <fclose>:
    96b4:	00800074 	movhi	r2,1
    96b8:	10978804 	addi	r2,r2,24096
    96bc:	200b883a 	mov	r5,r4
    96c0:	11000017 	ldw	r4,0(r2)
    96c4:	00095c41 	jmpi	95c4 <_fclose_r>

000096c8 <__fputwc>:
    96c8:	defff804 	addi	sp,sp,-32
    96cc:	dcc00415 	stw	r19,16(sp)
    96d0:	dc800315 	stw	r18,12(sp)
    96d4:	dc000115 	stw	r16,4(sp)
    96d8:	dfc00715 	stw	ra,28(sp)
    96dc:	dd400615 	stw	r21,24(sp)
    96e0:	dd000515 	stw	r20,20(sp)
    96e4:	dc400215 	stw	r17,8(sp)
    96e8:	2027883a 	mov	r19,r4
    96ec:	2825883a 	mov	r18,r5
    96f0:	3021883a 	mov	r16,r6
    96f4:	0005f580 	call	5f58 <__locale_mb_cur_max>
    96f8:	00c00044 	movi	r3,1
    96fc:	10c03e26 	beq	r2,r3,97f8 <__fputwc+0x130>
    9700:	81c01704 	addi	r7,r16,92
    9704:	900d883a 	mov	r6,r18
    9708:	d80b883a 	mov	r5,sp
    970c:	9809883a 	mov	r4,r19
    9710:	0009b980 	call	9b98 <_wcrtomb_r>
    9714:	1029883a 	mov	r20,r2
    9718:	00bfffc4 	movi	r2,-1
    971c:	a0802026 	beq	r20,r2,97a0 <__fputwc+0xd8>
    9720:	d9400003 	ldbu	r5,0(sp)
    9724:	a0001c26 	beq	r20,zero,9798 <__fputwc+0xd0>
    9728:	0023883a 	mov	r17,zero
    972c:	05400284 	movi	r21,10
    9730:	00000906 	br	9758 <__fputwc+0x90>
    9734:	80800017 	ldw	r2,0(r16)
    9738:	11400005 	stb	r5,0(r2)
    973c:	80c00017 	ldw	r3,0(r16)
    9740:	18c00044 	addi	r3,r3,1
    9744:	80c00015 	stw	r3,0(r16)
    9748:	8c400044 	addi	r17,r17,1
    974c:	dc45883a 	add	r2,sp,r17
    9750:	8d00112e 	bgeu	r17,r20,9798 <__fputwc+0xd0>
    9754:	11400003 	ldbu	r5,0(r2)
    9758:	80c00217 	ldw	r3,8(r16)
    975c:	18ffffc4 	addi	r3,r3,-1
    9760:	80c00215 	stw	r3,8(r16)
    9764:	183ff30e 	bge	r3,zero,9734 <__alt_data_end+0xf8009734>
    9768:	80800617 	ldw	r2,24(r16)
    976c:	18801916 	blt	r3,r2,97d4 <__fputwc+0x10c>
    9770:	80800017 	ldw	r2,0(r16)
    9774:	11400005 	stb	r5,0(r2)
    9778:	80800017 	ldw	r2,0(r16)
    977c:	10c00003 	ldbu	r3,0(r2)
    9780:	10800044 	addi	r2,r2,1
    9784:	1d402326 	beq	r3,r21,9814 <__fputwc+0x14c>
    9788:	80800015 	stw	r2,0(r16)
    978c:	8c400044 	addi	r17,r17,1
    9790:	dc45883a 	add	r2,sp,r17
    9794:	8d3fef36 	bltu	r17,r20,9754 <__alt_data_end+0xf8009754>
    9798:	9005883a 	mov	r2,r18
    979c:	00000406 	br	97b0 <__fputwc+0xe8>
    97a0:	80c0030b 	ldhu	r3,12(r16)
    97a4:	a005883a 	mov	r2,r20
    97a8:	18c01014 	ori	r3,r3,64
    97ac:	80c0030d 	sth	r3,12(r16)
    97b0:	dfc00717 	ldw	ra,28(sp)
    97b4:	dd400617 	ldw	r21,24(sp)
    97b8:	dd000517 	ldw	r20,20(sp)
    97bc:	dcc00417 	ldw	r19,16(sp)
    97c0:	dc800317 	ldw	r18,12(sp)
    97c4:	dc400217 	ldw	r17,8(sp)
    97c8:	dc000117 	ldw	r16,4(sp)
    97cc:	dec00804 	addi	sp,sp,32
    97d0:	f800283a 	ret
    97d4:	800d883a 	mov	r6,r16
    97d8:	29403fcc 	andi	r5,r5,255
    97dc:	9809883a 	mov	r4,r19
    97e0:	0009a400 	call	9a40 <__swbuf_r>
    97e4:	10bfffe0 	cmpeqi	r2,r2,-1
    97e8:	10803fcc 	andi	r2,r2,255
    97ec:	103fd626 	beq	r2,zero,9748 <__alt_data_end+0xf8009748>
    97f0:	00bfffc4 	movi	r2,-1
    97f4:	003fee06 	br	97b0 <__alt_data_end+0xf80097b0>
    97f8:	90ffffc4 	addi	r3,r18,-1
    97fc:	01003f84 	movi	r4,254
    9800:	20ffbf36 	bltu	r4,r3,9700 <__alt_data_end+0xf8009700>
    9804:	900b883a 	mov	r5,r18
    9808:	dc800005 	stb	r18,0(sp)
    980c:	1029883a 	mov	r20,r2
    9810:	003fc506 	br	9728 <__alt_data_end+0xf8009728>
    9814:	800d883a 	mov	r6,r16
    9818:	a80b883a 	mov	r5,r21
    981c:	9809883a 	mov	r4,r19
    9820:	0009a400 	call	9a40 <__swbuf_r>
    9824:	10bfffe0 	cmpeqi	r2,r2,-1
    9828:	003fef06 	br	97e8 <__alt_data_end+0xf80097e8>

0000982c <_fputwc_r>:
    982c:	3080030b 	ldhu	r2,12(r6)
    9830:	10c8000c 	andi	r3,r2,8192
    9834:	1800051e 	bne	r3,zero,984c <_fputwc_r+0x20>
    9838:	30c01917 	ldw	r3,100(r6)
    983c:	10880014 	ori	r2,r2,8192
    9840:	3080030d 	sth	r2,12(r6)
    9844:	18880014 	ori	r2,r3,8192
    9848:	30801915 	stw	r2,100(r6)
    984c:	00096c81 	jmpi	96c8 <__fputwc>

00009850 <fputwc>:
    9850:	00800074 	movhi	r2,1
    9854:	defffc04 	addi	sp,sp,-16
    9858:	10978804 	addi	r2,r2,24096
    985c:	dc000115 	stw	r16,4(sp)
    9860:	14000017 	ldw	r16,0(r2)
    9864:	dc400215 	stw	r17,8(sp)
    9868:	dfc00315 	stw	ra,12(sp)
    986c:	2023883a 	mov	r17,r4
    9870:	80000226 	beq	r16,zero,987c <fputwc+0x2c>
    9874:	80800e17 	ldw	r2,56(r16)
    9878:	10001026 	beq	r2,zero,98bc <fputwc+0x6c>
    987c:	2880030b 	ldhu	r2,12(r5)
    9880:	10c8000c 	andi	r3,r2,8192
    9884:	1800051e 	bne	r3,zero,989c <fputwc+0x4c>
    9888:	28c01917 	ldw	r3,100(r5)
    988c:	10880014 	ori	r2,r2,8192
    9890:	2880030d 	sth	r2,12(r5)
    9894:	18880014 	ori	r2,r3,8192
    9898:	28801915 	stw	r2,100(r5)
    989c:	280d883a 	mov	r6,r5
    98a0:	8009883a 	mov	r4,r16
    98a4:	880b883a 	mov	r5,r17
    98a8:	dfc00317 	ldw	ra,12(sp)
    98ac:	dc400217 	ldw	r17,8(sp)
    98b0:	dc000117 	ldw	r16,4(sp)
    98b4:	dec00404 	addi	sp,sp,16
    98b8:	00096c81 	jmpi	96c8 <__fputwc>
    98bc:	8009883a 	mov	r4,r16
    98c0:	d9400015 	stw	r5,0(sp)
    98c4:	00054080 	call	5408 <__sinit>
    98c8:	d9400017 	ldw	r5,0(sp)
    98cc:	003feb06 	br	987c <__alt_data_end+0xf800987c>

000098d0 <_fstat_r>:
    98d0:	defffd04 	addi	sp,sp,-12
    98d4:	2805883a 	mov	r2,r5
    98d8:	dc000015 	stw	r16,0(sp)
    98dc:	04000074 	movhi	r16,1
    98e0:	dc400115 	stw	r17,4(sp)
    98e4:	841e8104 	addi	r16,r16,31236
    98e8:	2023883a 	mov	r17,r4
    98ec:	300b883a 	mov	r5,r6
    98f0:	1009883a 	mov	r4,r2
    98f4:	dfc00215 	stw	ra,8(sp)
    98f8:	80000015 	stw	zero,0(r16)
    98fc:	000d1c00 	call	d1c0 <fstat>
    9900:	00ffffc4 	movi	r3,-1
    9904:	10c00526 	beq	r2,r3,991c <_fstat_r+0x4c>
    9908:	dfc00217 	ldw	ra,8(sp)
    990c:	dc400117 	ldw	r17,4(sp)
    9910:	dc000017 	ldw	r16,0(sp)
    9914:	dec00304 	addi	sp,sp,12
    9918:	f800283a 	ret
    991c:	80c00017 	ldw	r3,0(r16)
    9920:	183ff926 	beq	r3,zero,9908 <__alt_data_end+0xf8009908>
    9924:	88c00015 	stw	r3,0(r17)
    9928:	003ff706 	br	9908 <__alt_data_end+0xf8009908>

0000992c <_isatty_r>:
    992c:	defffd04 	addi	sp,sp,-12
    9930:	dc000015 	stw	r16,0(sp)
    9934:	04000074 	movhi	r16,1
    9938:	dc400115 	stw	r17,4(sp)
    993c:	841e8104 	addi	r16,r16,31236
    9940:	2023883a 	mov	r17,r4
    9944:	2809883a 	mov	r4,r5
    9948:	dfc00215 	stw	ra,8(sp)
    994c:	80000015 	stw	zero,0(r16)
    9950:	000d2ac0 	call	d2ac <isatty>
    9954:	00ffffc4 	movi	r3,-1
    9958:	10c00526 	beq	r2,r3,9970 <_isatty_r+0x44>
    995c:	dfc00217 	ldw	ra,8(sp)
    9960:	dc400117 	ldw	r17,4(sp)
    9964:	dc000017 	ldw	r16,0(sp)
    9968:	dec00304 	addi	sp,sp,12
    996c:	f800283a 	ret
    9970:	80c00017 	ldw	r3,0(r16)
    9974:	183ff926 	beq	r3,zero,995c <__alt_data_end+0xf800995c>
    9978:	88c00015 	stw	r3,0(r17)
    997c:	003ff706 	br	995c <__alt_data_end+0xf800995c>

00009980 <_lseek_r>:
    9980:	defffd04 	addi	sp,sp,-12
    9984:	2805883a 	mov	r2,r5
    9988:	dc000015 	stw	r16,0(sp)
    998c:	04000074 	movhi	r16,1
    9990:	dc400115 	stw	r17,4(sp)
    9994:	300b883a 	mov	r5,r6
    9998:	841e8104 	addi	r16,r16,31236
    999c:	2023883a 	mov	r17,r4
    99a0:	380d883a 	mov	r6,r7
    99a4:	1009883a 	mov	r4,r2
    99a8:	dfc00215 	stw	ra,8(sp)
    99ac:	80000015 	stw	zero,0(r16)
    99b0:	000d4780 	call	d478 <lseek>
    99b4:	00ffffc4 	movi	r3,-1
    99b8:	10c00526 	beq	r2,r3,99d0 <_lseek_r+0x50>
    99bc:	dfc00217 	ldw	ra,8(sp)
    99c0:	dc400117 	ldw	r17,4(sp)
    99c4:	dc000017 	ldw	r16,0(sp)
    99c8:	dec00304 	addi	sp,sp,12
    99cc:	f800283a 	ret
    99d0:	80c00017 	ldw	r3,0(r16)
    99d4:	183ff926 	beq	r3,zero,99bc <__alt_data_end+0xf80099bc>
    99d8:	88c00015 	stw	r3,0(r17)
    99dc:	003ff706 	br	99bc <__alt_data_end+0xf80099bc>

000099e0 <_read_r>:
    99e0:	defffd04 	addi	sp,sp,-12
    99e4:	2805883a 	mov	r2,r5
    99e8:	dc000015 	stw	r16,0(sp)
    99ec:	04000074 	movhi	r16,1
    99f0:	dc400115 	stw	r17,4(sp)
    99f4:	300b883a 	mov	r5,r6
    99f8:	841e8104 	addi	r16,r16,31236
    99fc:	2023883a 	mov	r17,r4
    9a00:	380d883a 	mov	r6,r7
    9a04:	1009883a 	mov	r4,r2
    9a08:	dfc00215 	stw	ra,8(sp)
    9a0c:	80000015 	stw	zero,0(r16)
    9a10:	000d64c0 	call	d64c <read>
    9a14:	00ffffc4 	movi	r3,-1
    9a18:	10c00526 	beq	r2,r3,9a30 <_read_r+0x50>
    9a1c:	dfc00217 	ldw	ra,8(sp)
    9a20:	dc400117 	ldw	r17,4(sp)
    9a24:	dc000017 	ldw	r16,0(sp)
    9a28:	dec00304 	addi	sp,sp,12
    9a2c:	f800283a 	ret
    9a30:	80c00017 	ldw	r3,0(r16)
    9a34:	183ff926 	beq	r3,zero,9a1c <__alt_data_end+0xf8009a1c>
    9a38:	88c00015 	stw	r3,0(r17)
    9a3c:	003ff706 	br	9a1c <__alt_data_end+0xf8009a1c>

00009a40 <__swbuf_r>:
    9a40:	defffb04 	addi	sp,sp,-20
    9a44:	dcc00315 	stw	r19,12(sp)
    9a48:	dc800215 	stw	r18,8(sp)
    9a4c:	dc000015 	stw	r16,0(sp)
    9a50:	dfc00415 	stw	ra,16(sp)
    9a54:	dc400115 	stw	r17,4(sp)
    9a58:	2025883a 	mov	r18,r4
    9a5c:	2827883a 	mov	r19,r5
    9a60:	3021883a 	mov	r16,r6
    9a64:	20000226 	beq	r4,zero,9a70 <__swbuf_r+0x30>
    9a68:	20800e17 	ldw	r2,56(r4)
    9a6c:	10004226 	beq	r2,zero,9b78 <__swbuf_r+0x138>
    9a70:	80800617 	ldw	r2,24(r16)
    9a74:	8100030b 	ldhu	r4,12(r16)
    9a78:	80800215 	stw	r2,8(r16)
    9a7c:	2080020c 	andi	r2,r4,8
    9a80:	10003626 	beq	r2,zero,9b5c <__swbuf_r+0x11c>
    9a84:	80c00417 	ldw	r3,16(r16)
    9a88:	18003426 	beq	r3,zero,9b5c <__swbuf_r+0x11c>
    9a8c:	2088000c 	andi	r2,r4,8192
    9a90:	9c403fcc 	andi	r17,r19,255
    9a94:	10001a26 	beq	r2,zero,9b00 <__swbuf_r+0xc0>
    9a98:	80800017 	ldw	r2,0(r16)
    9a9c:	81000517 	ldw	r4,20(r16)
    9aa0:	10c7c83a 	sub	r3,r2,r3
    9aa4:	1900200e 	bge	r3,r4,9b28 <__swbuf_r+0xe8>
    9aa8:	18c00044 	addi	r3,r3,1
    9aac:	81000217 	ldw	r4,8(r16)
    9ab0:	11400044 	addi	r5,r2,1
    9ab4:	81400015 	stw	r5,0(r16)
    9ab8:	213fffc4 	addi	r4,r4,-1
    9abc:	81000215 	stw	r4,8(r16)
    9ac0:	14c00005 	stb	r19,0(r2)
    9ac4:	80800517 	ldw	r2,20(r16)
    9ac8:	10c01e26 	beq	r2,r3,9b44 <__swbuf_r+0x104>
    9acc:	8080030b 	ldhu	r2,12(r16)
    9ad0:	1080004c 	andi	r2,r2,1
    9ad4:	10000226 	beq	r2,zero,9ae0 <__swbuf_r+0xa0>
    9ad8:	00800284 	movi	r2,10
    9adc:	88801926 	beq	r17,r2,9b44 <__swbuf_r+0x104>
    9ae0:	8805883a 	mov	r2,r17
    9ae4:	dfc00417 	ldw	ra,16(sp)
    9ae8:	dcc00317 	ldw	r19,12(sp)
    9aec:	dc800217 	ldw	r18,8(sp)
    9af0:	dc400117 	ldw	r17,4(sp)
    9af4:	dc000017 	ldw	r16,0(sp)
    9af8:	dec00504 	addi	sp,sp,20
    9afc:	f800283a 	ret
    9b00:	81401917 	ldw	r5,100(r16)
    9b04:	00b7ffc4 	movi	r2,-8193
    9b08:	21080014 	ori	r4,r4,8192
    9b0c:	2884703a 	and	r2,r5,r2
    9b10:	80801915 	stw	r2,100(r16)
    9b14:	80800017 	ldw	r2,0(r16)
    9b18:	8100030d 	sth	r4,12(r16)
    9b1c:	81000517 	ldw	r4,20(r16)
    9b20:	10c7c83a 	sub	r3,r2,r3
    9b24:	193fe016 	blt	r3,r4,9aa8 <__alt_data_end+0xf8009aa8>
    9b28:	800b883a 	mov	r5,r16
    9b2c:	9009883a 	mov	r4,r18
    9b30:	000502c0 	call	502c <_fflush_r>
    9b34:	1000071e 	bne	r2,zero,9b54 <__swbuf_r+0x114>
    9b38:	80800017 	ldw	r2,0(r16)
    9b3c:	00c00044 	movi	r3,1
    9b40:	003fda06 	br	9aac <__alt_data_end+0xf8009aac>
    9b44:	800b883a 	mov	r5,r16
    9b48:	9009883a 	mov	r4,r18
    9b4c:	000502c0 	call	502c <_fflush_r>
    9b50:	103fe326 	beq	r2,zero,9ae0 <__alt_data_end+0xf8009ae0>
    9b54:	00bfffc4 	movi	r2,-1
    9b58:	003fe206 	br	9ae4 <__alt_data_end+0xf8009ae4>
    9b5c:	800b883a 	mov	r5,r16
    9b60:	9009883a 	mov	r4,r18
    9b64:	00034340 	call	3434 <__swsetup_r>
    9b68:	103ffa1e 	bne	r2,zero,9b54 <__alt_data_end+0xf8009b54>
    9b6c:	8100030b 	ldhu	r4,12(r16)
    9b70:	80c00417 	ldw	r3,16(r16)
    9b74:	003fc506 	br	9a8c <__alt_data_end+0xf8009a8c>
    9b78:	00054080 	call	5408 <__sinit>
    9b7c:	003fbc06 	br	9a70 <__alt_data_end+0xf8009a70>

00009b80 <__swbuf>:
    9b80:	00800074 	movhi	r2,1
    9b84:	10978804 	addi	r2,r2,24096
    9b88:	280d883a 	mov	r6,r5
    9b8c:	200b883a 	mov	r5,r4
    9b90:	11000017 	ldw	r4,0(r2)
    9b94:	0009a401 	jmpi	9a40 <__swbuf_r>

00009b98 <_wcrtomb_r>:
    9b98:	defff604 	addi	sp,sp,-40
    9b9c:	00800074 	movhi	r2,1
    9ba0:	dc800815 	stw	r18,32(sp)
    9ba4:	dc400715 	stw	r17,28(sp)
    9ba8:	dc000615 	stw	r16,24(sp)
    9bac:	10978a04 	addi	r2,r2,24104
    9bb0:	dfc00915 	stw	ra,36(sp)
    9bb4:	2021883a 	mov	r16,r4
    9bb8:	3823883a 	mov	r17,r7
    9bbc:	14800017 	ldw	r18,0(r2)
    9bc0:	28001426 	beq	r5,zero,9c14 <_wcrtomb_r+0x7c>
    9bc4:	d9400415 	stw	r5,16(sp)
    9bc8:	d9800515 	stw	r6,20(sp)
    9bcc:	0005f4c0 	call	5f4c <__locale_charset>
    9bd0:	d9800517 	ldw	r6,20(sp)
    9bd4:	d9400417 	ldw	r5,16(sp)
    9bd8:	100f883a 	mov	r7,r2
    9bdc:	dc400015 	stw	r17,0(sp)
    9be0:	8009883a 	mov	r4,r16
    9be4:	903ee83a 	callr	r18
    9be8:	00ffffc4 	movi	r3,-1
    9bec:	10c0031e 	bne	r2,r3,9bfc <_wcrtomb_r+0x64>
    9bf0:	88000015 	stw	zero,0(r17)
    9bf4:	00c02284 	movi	r3,138
    9bf8:	80c00015 	stw	r3,0(r16)
    9bfc:	dfc00917 	ldw	ra,36(sp)
    9c00:	dc800817 	ldw	r18,32(sp)
    9c04:	dc400717 	ldw	r17,28(sp)
    9c08:	dc000617 	ldw	r16,24(sp)
    9c0c:	dec00a04 	addi	sp,sp,40
    9c10:	f800283a 	ret
    9c14:	0005f4c0 	call	5f4c <__locale_charset>
    9c18:	100f883a 	mov	r7,r2
    9c1c:	dc400015 	stw	r17,0(sp)
    9c20:	000d883a 	mov	r6,zero
    9c24:	d9400104 	addi	r5,sp,4
    9c28:	8009883a 	mov	r4,r16
    9c2c:	903ee83a 	callr	r18
    9c30:	003fed06 	br	9be8 <__alt_data_end+0xf8009be8>

00009c34 <wcrtomb>:
    9c34:	defff604 	addi	sp,sp,-40
    9c38:	00800074 	movhi	r2,1
    9c3c:	dc800615 	stw	r18,24(sp)
    9c40:	dc400515 	stw	r17,20(sp)
    9c44:	10978804 	addi	r2,r2,24096
    9c48:	dfc00915 	stw	ra,36(sp)
    9c4c:	dd000815 	stw	r20,32(sp)
    9c50:	dcc00715 	stw	r19,28(sp)
    9c54:	dc000415 	stw	r16,16(sp)
    9c58:	3025883a 	mov	r18,r6
    9c5c:	14400017 	ldw	r17,0(r2)
    9c60:	20001926 	beq	r4,zero,9cc8 <wcrtomb+0x94>
    9c64:	00800074 	movhi	r2,1
    9c68:	10978a04 	addi	r2,r2,24104
    9c6c:	15000017 	ldw	r20,0(r2)
    9c70:	2021883a 	mov	r16,r4
    9c74:	2827883a 	mov	r19,r5
    9c78:	0005f4c0 	call	5f4c <__locale_charset>
    9c7c:	100f883a 	mov	r7,r2
    9c80:	dc800015 	stw	r18,0(sp)
    9c84:	980d883a 	mov	r6,r19
    9c88:	800b883a 	mov	r5,r16
    9c8c:	8809883a 	mov	r4,r17
    9c90:	a03ee83a 	callr	r20
    9c94:	00ffffc4 	movi	r3,-1
    9c98:	10c0031e 	bne	r2,r3,9ca8 <wcrtomb+0x74>
    9c9c:	90000015 	stw	zero,0(r18)
    9ca0:	00c02284 	movi	r3,138
    9ca4:	88c00015 	stw	r3,0(r17)
    9ca8:	dfc00917 	ldw	ra,36(sp)
    9cac:	dd000817 	ldw	r20,32(sp)
    9cb0:	dcc00717 	ldw	r19,28(sp)
    9cb4:	dc800617 	ldw	r18,24(sp)
    9cb8:	dc400517 	ldw	r17,20(sp)
    9cbc:	dc000417 	ldw	r16,16(sp)
    9cc0:	dec00a04 	addi	sp,sp,40
    9cc4:	f800283a 	ret
    9cc8:	00800074 	movhi	r2,1
    9ccc:	10978a04 	addi	r2,r2,24104
    9cd0:	14000017 	ldw	r16,0(r2)
    9cd4:	0005f4c0 	call	5f4c <__locale_charset>
    9cd8:	100f883a 	mov	r7,r2
    9cdc:	dc800015 	stw	r18,0(sp)
    9ce0:	000d883a 	mov	r6,zero
    9ce4:	d9400104 	addi	r5,sp,4
    9ce8:	8809883a 	mov	r4,r17
    9cec:	803ee83a 	callr	r16
    9cf0:	003fe806 	br	9c94 <__alt_data_end+0xf8009c94>

00009cf4 <__ascii_wctomb>:
    9cf4:	28000526 	beq	r5,zero,9d0c <__ascii_wctomb+0x18>
    9cf8:	00803fc4 	movi	r2,255
    9cfc:	11800536 	bltu	r2,r6,9d14 <__ascii_wctomb+0x20>
    9d00:	29800005 	stb	r6,0(r5)
    9d04:	00800044 	movi	r2,1
    9d08:	f800283a 	ret
    9d0c:	0005883a 	mov	r2,zero
    9d10:	f800283a 	ret
    9d14:	00802284 	movi	r2,138
    9d18:	20800015 	stw	r2,0(r4)
    9d1c:	00bfffc4 	movi	r2,-1
    9d20:	f800283a 	ret

00009d24 <_wctomb_r>:
    9d24:	00800074 	movhi	r2,1
    9d28:	defff904 	addi	sp,sp,-28
    9d2c:	10978a04 	addi	r2,r2,24104
    9d30:	dfc00615 	stw	ra,24(sp)
    9d34:	dc400515 	stw	r17,20(sp)
    9d38:	dc000415 	stw	r16,16(sp)
    9d3c:	3823883a 	mov	r17,r7
    9d40:	14000017 	ldw	r16,0(r2)
    9d44:	d9000115 	stw	r4,4(sp)
    9d48:	d9400215 	stw	r5,8(sp)
    9d4c:	d9800315 	stw	r6,12(sp)
    9d50:	0005f4c0 	call	5f4c <__locale_charset>
    9d54:	d9800317 	ldw	r6,12(sp)
    9d58:	d9400217 	ldw	r5,8(sp)
    9d5c:	d9000117 	ldw	r4,4(sp)
    9d60:	100f883a 	mov	r7,r2
    9d64:	dc400015 	stw	r17,0(sp)
    9d68:	803ee83a 	callr	r16
    9d6c:	dfc00617 	ldw	ra,24(sp)
    9d70:	dc400517 	ldw	r17,20(sp)
    9d74:	dc000417 	ldw	r16,16(sp)
    9d78:	dec00704 	addi	sp,sp,28
    9d7c:	f800283a 	ret

00009d80 <__udivdi3>:
    9d80:	defff504 	addi	sp,sp,-44
    9d84:	dcc00415 	stw	r19,16(sp)
    9d88:	dc000115 	stw	r16,4(sp)
    9d8c:	dfc00a15 	stw	ra,40(sp)
    9d90:	df000915 	stw	fp,36(sp)
    9d94:	ddc00815 	stw	r23,32(sp)
    9d98:	dd800715 	stw	r22,28(sp)
    9d9c:	dd400615 	stw	r21,24(sp)
    9da0:	dd000515 	stw	r20,20(sp)
    9da4:	dc800315 	stw	r18,12(sp)
    9da8:	dc400215 	stw	r17,8(sp)
    9dac:	2027883a 	mov	r19,r4
    9db0:	2821883a 	mov	r16,r5
    9db4:	3800411e 	bne	r7,zero,9ebc <__udivdi3+0x13c>
    9db8:	3023883a 	mov	r17,r6
    9dbc:	2025883a 	mov	r18,r4
    9dc0:	2980522e 	bgeu	r5,r6,9f0c <__udivdi3+0x18c>
    9dc4:	00bfffd4 	movui	r2,65535
    9dc8:	282d883a 	mov	r22,r5
    9dcc:	1180a836 	bltu	r2,r6,a070 <__udivdi3+0x2f0>
    9dd0:	00803fc4 	movi	r2,255
    9dd4:	1185803a 	cmpltu	r2,r2,r6
    9dd8:	100490fa 	slli	r2,r2,3
    9ddc:	3086d83a 	srl	r3,r6,r2
    9de0:	01000074 	movhi	r4,1
    9de4:	21104d04 	addi	r4,r4,16692
    9de8:	20c7883a 	add	r3,r4,r3
    9dec:	18c00003 	ldbu	r3,0(r3)
    9df0:	1885883a 	add	r2,r3,r2
    9df4:	00c00804 	movi	r3,32
    9df8:	1887c83a 	sub	r3,r3,r2
    9dfc:	18000526 	beq	r3,zero,9e14 <__udivdi3+0x94>
    9e00:	80e0983a 	sll	r16,r16,r3
    9e04:	9884d83a 	srl	r2,r19,r2
    9e08:	30e2983a 	sll	r17,r6,r3
    9e0c:	98e4983a 	sll	r18,r19,r3
    9e10:	142cb03a 	or	r22,r2,r16
    9e14:	882ad43a 	srli	r21,r17,16
    9e18:	b009883a 	mov	r4,r22
    9e1c:	8d3fffcc 	andi	r20,r17,65535
    9e20:	a80b883a 	mov	r5,r21
    9e24:	000a98c0 	call	a98c <__umodsi3>
    9e28:	b009883a 	mov	r4,r22
    9e2c:	a80b883a 	mov	r5,r21
    9e30:	1027883a 	mov	r19,r2
    9e34:	000a9280 	call	a928 <__udivsi3>
    9e38:	102d883a 	mov	r22,r2
    9e3c:	9826943a 	slli	r19,r19,16
    9e40:	9004d43a 	srli	r2,r18,16
    9e44:	a5a1383a 	mul	r16,r20,r22
    9e48:	14c4b03a 	or	r2,r2,r19
    9e4c:	1400052e 	bgeu	r2,r16,9e64 <__udivdi3+0xe4>
    9e50:	1445883a 	add	r2,r2,r17
    9e54:	b0ffffc4 	addi	r3,r22,-1
    9e58:	14400136 	bltu	r2,r17,9e60 <__udivdi3+0xe0>
    9e5c:	14012336 	bltu	r2,r16,a2ec <__udivdi3+0x56c>
    9e60:	182d883a 	mov	r22,r3
    9e64:	1421c83a 	sub	r16,r2,r16
    9e68:	a80b883a 	mov	r5,r21
    9e6c:	8009883a 	mov	r4,r16
    9e70:	000a98c0 	call	a98c <__umodsi3>
    9e74:	1027883a 	mov	r19,r2
    9e78:	a80b883a 	mov	r5,r21
    9e7c:	8009883a 	mov	r4,r16
    9e80:	000a9280 	call	a928 <__udivsi3>
    9e84:	9826943a 	slli	r19,r19,16
    9e88:	a0a9383a 	mul	r20,r20,r2
    9e8c:	94bfffcc 	andi	r18,r18,65535
    9e90:	94e4b03a 	or	r18,r18,r19
    9e94:	9500052e 	bgeu	r18,r20,9eac <__udivdi3+0x12c>
    9e98:	8ca5883a 	add	r18,r17,r18
    9e9c:	10ffffc4 	addi	r3,r2,-1
    9ea0:	9440f136 	bltu	r18,r17,a268 <__udivdi3+0x4e8>
    9ea4:	9500f02e 	bgeu	r18,r20,a268 <__udivdi3+0x4e8>
    9ea8:	10bfff84 	addi	r2,r2,-2
    9eac:	b00c943a 	slli	r6,r22,16
    9eb0:	0007883a 	mov	r3,zero
    9eb4:	3084b03a 	or	r2,r6,r2
    9eb8:	00005906 	br	a020 <__udivdi3+0x2a0>
    9ebc:	29c05636 	bltu	r5,r7,a018 <__udivdi3+0x298>
    9ec0:	00bfffd4 	movui	r2,65535
    9ec4:	11c0622e 	bgeu	r2,r7,a050 <__udivdi3+0x2d0>
    9ec8:	00804034 	movhi	r2,256
    9ecc:	10bfffc4 	addi	r2,r2,-1
    9ed0:	11c0ee36 	bltu	r2,r7,a28c <__udivdi3+0x50c>
    9ed4:	00800404 	movi	r2,16
    9ed8:	3886d83a 	srl	r3,r7,r2
    9edc:	01000074 	movhi	r4,1
    9ee0:	21104d04 	addi	r4,r4,16692
    9ee4:	20c7883a 	add	r3,r4,r3
    9ee8:	18c00003 	ldbu	r3,0(r3)
    9eec:	05400804 	movi	r21,32
    9ef0:	1885883a 	add	r2,r3,r2
    9ef4:	a8abc83a 	sub	r21,r21,r2
    9ef8:	a800621e 	bne	r21,zero,a084 <__udivdi3+0x304>
    9efc:	3c00e936 	bltu	r7,r16,a2a4 <__udivdi3+0x524>
    9f00:	9985403a 	cmpgeu	r2,r19,r6
    9f04:	0007883a 	mov	r3,zero
    9f08:	00004506 	br	a020 <__udivdi3+0x2a0>
    9f0c:	3000041e 	bne	r6,zero,9f20 <__udivdi3+0x1a0>
    9f10:	000b883a 	mov	r5,zero
    9f14:	01000044 	movi	r4,1
    9f18:	000a9280 	call	a928 <__udivsi3>
    9f1c:	1023883a 	mov	r17,r2
    9f20:	00bfffd4 	movui	r2,65535
    9f24:	14404e2e 	bgeu	r2,r17,a060 <__udivdi3+0x2e0>
    9f28:	00804034 	movhi	r2,256
    9f2c:	10bfffc4 	addi	r2,r2,-1
    9f30:	1440d836 	bltu	r2,r17,a294 <__udivdi3+0x514>
    9f34:	00800404 	movi	r2,16
    9f38:	8886d83a 	srl	r3,r17,r2
    9f3c:	01000074 	movhi	r4,1
    9f40:	21104d04 	addi	r4,r4,16692
    9f44:	20c7883a 	add	r3,r4,r3
    9f48:	18c00003 	ldbu	r3,0(r3)
    9f4c:	1885883a 	add	r2,r3,r2
    9f50:	00c00804 	movi	r3,32
    9f54:	1887c83a 	sub	r3,r3,r2
    9f58:	18008f1e 	bne	r3,zero,a198 <__udivdi3+0x418>
    9f5c:	882ad43a 	srli	r21,r17,16
    9f60:	8461c83a 	sub	r16,r16,r17
    9f64:	8d3fffcc 	andi	r20,r17,65535
    9f68:	00c00044 	movi	r3,1
    9f6c:	8009883a 	mov	r4,r16
    9f70:	a80b883a 	mov	r5,r21
    9f74:	d8c00015 	stw	r3,0(sp)
    9f78:	000a98c0 	call	a98c <__umodsi3>
    9f7c:	8009883a 	mov	r4,r16
    9f80:	a80b883a 	mov	r5,r21
    9f84:	1027883a 	mov	r19,r2
    9f88:	000a9280 	call	a928 <__udivsi3>
    9f8c:	9826943a 	slli	r19,r19,16
    9f90:	9008d43a 	srli	r4,r18,16
    9f94:	1521383a 	mul	r16,r2,r20
    9f98:	102d883a 	mov	r22,r2
    9f9c:	24c8b03a 	or	r4,r4,r19
    9fa0:	d8c00017 	ldw	r3,0(sp)
    9fa4:	2400052e 	bgeu	r4,r16,9fbc <__udivdi3+0x23c>
    9fa8:	2449883a 	add	r4,r4,r17
    9fac:	b0bfffc4 	addi	r2,r22,-1
    9fb0:	24400136 	bltu	r4,r17,9fb8 <__udivdi3+0x238>
    9fb4:	2400ca36 	bltu	r4,r16,a2e0 <__udivdi3+0x560>
    9fb8:	102d883a 	mov	r22,r2
    9fbc:	2421c83a 	sub	r16,r4,r16
    9fc0:	a80b883a 	mov	r5,r21
    9fc4:	8009883a 	mov	r4,r16
    9fc8:	d8c00015 	stw	r3,0(sp)
    9fcc:	000a98c0 	call	a98c <__umodsi3>
    9fd0:	1027883a 	mov	r19,r2
    9fd4:	a80b883a 	mov	r5,r21
    9fd8:	8009883a 	mov	r4,r16
    9fdc:	000a9280 	call	a928 <__udivsi3>
    9fe0:	9826943a 	slli	r19,r19,16
    9fe4:	1529383a 	mul	r20,r2,r20
    9fe8:	94bfffcc 	andi	r18,r18,65535
    9fec:	94e4b03a 	or	r18,r18,r19
    9ff0:	d8c00017 	ldw	r3,0(sp)
    9ff4:	9500052e 	bgeu	r18,r20,a00c <__udivdi3+0x28c>
    9ff8:	8ca5883a 	add	r18,r17,r18
    9ffc:	113fffc4 	addi	r4,r2,-1
    a000:	94409736 	bltu	r18,r17,a260 <__udivdi3+0x4e0>
    a004:	9500962e 	bgeu	r18,r20,a260 <__udivdi3+0x4e0>
    a008:	10bfff84 	addi	r2,r2,-2
    a00c:	b00c943a 	slli	r6,r22,16
    a010:	3084b03a 	or	r2,r6,r2
    a014:	00000206 	br	a020 <__udivdi3+0x2a0>
    a018:	0007883a 	mov	r3,zero
    a01c:	0005883a 	mov	r2,zero
    a020:	dfc00a17 	ldw	ra,40(sp)
    a024:	df000917 	ldw	fp,36(sp)
    a028:	ddc00817 	ldw	r23,32(sp)
    a02c:	dd800717 	ldw	r22,28(sp)
    a030:	dd400617 	ldw	r21,24(sp)
    a034:	dd000517 	ldw	r20,20(sp)
    a038:	dcc00417 	ldw	r19,16(sp)
    a03c:	dc800317 	ldw	r18,12(sp)
    a040:	dc400217 	ldw	r17,8(sp)
    a044:	dc000117 	ldw	r16,4(sp)
    a048:	dec00b04 	addi	sp,sp,44
    a04c:	f800283a 	ret
    a050:	00803fc4 	movi	r2,255
    a054:	11c5803a 	cmpltu	r2,r2,r7
    a058:	100490fa 	slli	r2,r2,3
    a05c:	003f9e06 	br	9ed8 <__alt_data_end+0xf8009ed8>
    a060:	00803fc4 	movi	r2,255
    a064:	1445803a 	cmpltu	r2,r2,r17
    a068:	100490fa 	slli	r2,r2,3
    a06c:	003fb206 	br	9f38 <__alt_data_end+0xf8009f38>
    a070:	00804034 	movhi	r2,256
    a074:	10bfffc4 	addi	r2,r2,-1
    a078:	11808836 	bltu	r2,r6,a29c <__udivdi3+0x51c>
    a07c:	00800404 	movi	r2,16
    a080:	003f5606 	br	9ddc <__alt_data_end+0xf8009ddc>
    a084:	30aed83a 	srl	r23,r6,r2
    a088:	3d4e983a 	sll	r7,r7,r21
    a08c:	80acd83a 	srl	r22,r16,r2
    a090:	9884d83a 	srl	r2,r19,r2
    a094:	3deeb03a 	or	r23,r7,r23
    a098:	b824d43a 	srli	r18,r23,16
    a09c:	8560983a 	sll	r16,r16,r21
    a0a0:	b009883a 	mov	r4,r22
    a0a4:	900b883a 	mov	r5,r18
    a0a8:	3568983a 	sll	r20,r6,r21
    a0ac:	1420b03a 	or	r16,r2,r16
    a0b0:	000a98c0 	call	a98c <__umodsi3>
    a0b4:	b009883a 	mov	r4,r22
    a0b8:	900b883a 	mov	r5,r18
    a0bc:	1023883a 	mov	r17,r2
    a0c0:	000a9280 	call	a928 <__udivsi3>
    a0c4:	8808943a 	slli	r4,r17,16
    a0c8:	bf3fffcc 	andi	fp,r23,65535
    a0cc:	8006d43a 	srli	r3,r16,16
    a0d0:	e0a3383a 	mul	r17,fp,r2
    a0d4:	100d883a 	mov	r6,r2
    a0d8:	1906b03a 	or	r3,r3,r4
    a0dc:	1c40042e 	bgeu	r3,r17,a0f0 <__udivdi3+0x370>
    a0e0:	1dc7883a 	add	r3,r3,r23
    a0e4:	10bfffc4 	addi	r2,r2,-1
    a0e8:	1dc0752e 	bgeu	r3,r23,a2c0 <__udivdi3+0x540>
    a0ec:	100d883a 	mov	r6,r2
    a0f0:	1c63c83a 	sub	r17,r3,r17
    a0f4:	900b883a 	mov	r5,r18
    a0f8:	8809883a 	mov	r4,r17
    a0fc:	d9800015 	stw	r6,0(sp)
    a100:	000a98c0 	call	a98c <__umodsi3>
    a104:	102d883a 	mov	r22,r2
    a108:	8809883a 	mov	r4,r17
    a10c:	900b883a 	mov	r5,r18
    a110:	000a9280 	call	a928 <__udivsi3>
    a114:	b02c943a 	slli	r22,r22,16
    a118:	e089383a 	mul	r4,fp,r2
    a11c:	843fffcc 	andi	r16,r16,65535
    a120:	85a0b03a 	or	r16,r16,r22
    a124:	d9800017 	ldw	r6,0(sp)
    a128:	8100042e 	bgeu	r16,r4,a13c <__udivdi3+0x3bc>
    a12c:	85e1883a 	add	r16,r16,r23
    a130:	10ffffc4 	addi	r3,r2,-1
    a134:	85c05e2e 	bgeu	r16,r23,a2b0 <__udivdi3+0x530>
    a138:	1805883a 	mov	r2,r3
    a13c:	300c943a 	slli	r6,r6,16
    a140:	a17fffcc 	andi	r5,r20,65535
    a144:	a028d43a 	srli	r20,r20,16
    a148:	3084b03a 	or	r2,r6,r2
    a14c:	10ffffcc 	andi	r3,r2,65535
    a150:	100cd43a 	srli	r6,r2,16
    a154:	194f383a 	mul	r7,r3,r5
    a158:	1d07383a 	mul	r3,r3,r20
    a15c:	314b383a 	mul	r5,r6,r5
    a160:	3810d43a 	srli	r8,r7,16
    a164:	8121c83a 	sub	r16,r16,r4
    a168:	1947883a 	add	r3,r3,r5
    a16c:	40c7883a 	add	r3,r8,r3
    a170:	350d383a 	mul	r6,r6,r20
    a174:	1940022e 	bgeu	r3,r5,a180 <__udivdi3+0x400>
    a178:	01000074 	movhi	r4,1
    a17c:	310d883a 	add	r6,r6,r4
    a180:	1828d43a 	srli	r20,r3,16
    a184:	a18d883a 	add	r6,r20,r6
    a188:	81803e36 	bltu	r16,r6,a284 <__udivdi3+0x504>
    a18c:	81803826 	beq	r16,r6,a270 <__udivdi3+0x4f0>
    a190:	0007883a 	mov	r3,zero
    a194:	003fa206 	br	a020 <__alt_data_end+0xf800a020>
    a198:	88e2983a 	sll	r17,r17,r3
    a19c:	80a8d83a 	srl	r20,r16,r2
    a1a0:	80e0983a 	sll	r16,r16,r3
    a1a4:	882ad43a 	srli	r21,r17,16
    a1a8:	9884d83a 	srl	r2,r19,r2
    a1ac:	a009883a 	mov	r4,r20
    a1b0:	a80b883a 	mov	r5,r21
    a1b4:	142eb03a 	or	r23,r2,r16
    a1b8:	98e4983a 	sll	r18,r19,r3
    a1bc:	000a98c0 	call	a98c <__umodsi3>
    a1c0:	a009883a 	mov	r4,r20
    a1c4:	a80b883a 	mov	r5,r21
    a1c8:	1021883a 	mov	r16,r2
    a1cc:	000a9280 	call	a928 <__udivsi3>
    a1d0:	1039883a 	mov	fp,r2
    a1d4:	8d3fffcc 	andi	r20,r17,65535
    a1d8:	8020943a 	slli	r16,r16,16
    a1dc:	b804d43a 	srli	r2,r23,16
    a1e0:	a72d383a 	mul	r22,r20,fp
    a1e4:	1404b03a 	or	r2,r2,r16
    a1e8:	1580062e 	bgeu	r2,r22,a204 <__udivdi3+0x484>
    a1ec:	1445883a 	add	r2,r2,r17
    a1f0:	e0ffffc4 	addi	r3,fp,-1
    a1f4:	14403836 	bltu	r2,r17,a2d8 <__udivdi3+0x558>
    a1f8:	1580372e 	bgeu	r2,r22,a2d8 <__udivdi3+0x558>
    a1fc:	e73fff84 	addi	fp,fp,-2
    a200:	1445883a 	add	r2,r2,r17
    a204:	15adc83a 	sub	r22,r2,r22
    a208:	a80b883a 	mov	r5,r21
    a20c:	b009883a 	mov	r4,r22
    a210:	000a98c0 	call	a98c <__umodsi3>
    a214:	1027883a 	mov	r19,r2
    a218:	b009883a 	mov	r4,r22
    a21c:	a80b883a 	mov	r5,r21
    a220:	000a9280 	call	a928 <__udivsi3>
    a224:	9826943a 	slli	r19,r19,16
    a228:	a0a1383a 	mul	r16,r20,r2
    a22c:	b93fffcc 	andi	r4,r23,65535
    a230:	24c8b03a 	or	r4,r4,r19
    a234:	2400062e 	bgeu	r4,r16,a250 <__udivdi3+0x4d0>
    a238:	2449883a 	add	r4,r4,r17
    a23c:	10ffffc4 	addi	r3,r2,-1
    a240:	24402336 	bltu	r4,r17,a2d0 <__udivdi3+0x550>
    a244:	2400222e 	bgeu	r4,r16,a2d0 <__udivdi3+0x550>
    a248:	10bfff84 	addi	r2,r2,-2
    a24c:	2449883a 	add	r4,r4,r17
    a250:	e038943a 	slli	fp,fp,16
    a254:	2421c83a 	sub	r16,r4,r16
    a258:	e086b03a 	or	r3,fp,r2
    a25c:	003f4306 	br	9f6c <__alt_data_end+0xf8009f6c>
    a260:	2005883a 	mov	r2,r4
    a264:	003f6906 	br	a00c <__alt_data_end+0xf800a00c>
    a268:	1805883a 	mov	r2,r3
    a26c:	003f0f06 	br	9eac <__alt_data_end+0xf8009eac>
    a270:	1806943a 	slli	r3,r3,16
    a274:	9d66983a 	sll	r19,r19,r21
    a278:	39ffffcc 	andi	r7,r7,65535
    a27c:	19c7883a 	add	r3,r3,r7
    a280:	98ffc32e 	bgeu	r19,r3,a190 <__alt_data_end+0xf800a190>
    a284:	10bfffc4 	addi	r2,r2,-1
    a288:	003fc106 	br	a190 <__alt_data_end+0xf800a190>
    a28c:	00800604 	movi	r2,24
    a290:	003f1106 	br	9ed8 <__alt_data_end+0xf8009ed8>
    a294:	00800604 	movi	r2,24
    a298:	003f2706 	br	9f38 <__alt_data_end+0xf8009f38>
    a29c:	00800604 	movi	r2,24
    a2a0:	003ece06 	br	9ddc <__alt_data_end+0xf8009ddc>
    a2a4:	0007883a 	mov	r3,zero
    a2a8:	00800044 	movi	r2,1
    a2ac:	003f5c06 	br	a020 <__alt_data_end+0xf800a020>
    a2b0:	813fa12e 	bgeu	r16,r4,a138 <__alt_data_end+0xf800a138>
    a2b4:	10bfff84 	addi	r2,r2,-2
    a2b8:	85e1883a 	add	r16,r16,r23
    a2bc:	003f9f06 	br	a13c <__alt_data_end+0xf800a13c>
    a2c0:	1c7f8a2e 	bgeu	r3,r17,a0ec <__alt_data_end+0xf800a0ec>
    a2c4:	31bfff84 	addi	r6,r6,-2
    a2c8:	1dc7883a 	add	r3,r3,r23
    a2cc:	003f8806 	br	a0f0 <__alt_data_end+0xf800a0f0>
    a2d0:	1805883a 	mov	r2,r3
    a2d4:	003fde06 	br	a250 <__alt_data_end+0xf800a250>
    a2d8:	1839883a 	mov	fp,r3
    a2dc:	003fc906 	br	a204 <__alt_data_end+0xf800a204>
    a2e0:	b5bfff84 	addi	r22,r22,-2
    a2e4:	2449883a 	add	r4,r4,r17
    a2e8:	003f3406 	br	9fbc <__alt_data_end+0xf8009fbc>
    a2ec:	b5bfff84 	addi	r22,r22,-2
    a2f0:	1445883a 	add	r2,r2,r17
    a2f4:	003edb06 	br	9e64 <__alt_data_end+0xf8009e64>

0000a2f8 <__umoddi3>:
    a2f8:	defff404 	addi	sp,sp,-48
    a2fc:	df000a15 	stw	fp,40(sp)
    a300:	dc400315 	stw	r17,12(sp)
    a304:	dc000215 	stw	r16,8(sp)
    a308:	dfc00b15 	stw	ra,44(sp)
    a30c:	ddc00915 	stw	r23,36(sp)
    a310:	dd800815 	stw	r22,32(sp)
    a314:	dd400715 	stw	r21,28(sp)
    a318:	dd000615 	stw	r20,24(sp)
    a31c:	dcc00515 	stw	r19,20(sp)
    a320:	dc800415 	stw	r18,16(sp)
    a324:	2021883a 	mov	r16,r4
    a328:	2823883a 	mov	r17,r5
    a32c:	2839883a 	mov	fp,r5
    a330:	38003c1e 	bne	r7,zero,a424 <__umoddi3+0x12c>
    a334:	3027883a 	mov	r19,r6
    a338:	2029883a 	mov	r20,r4
    a33c:	2980512e 	bgeu	r5,r6,a484 <__umoddi3+0x18c>
    a340:	00bfffd4 	movui	r2,65535
    a344:	11809a36 	bltu	r2,r6,a5b0 <__umoddi3+0x2b8>
    a348:	01003fc4 	movi	r4,255
    a34c:	2189803a 	cmpltu	r4,r4,r6
    a350:	200890fa 	slli	r4,r4,3
    a354:	3104d83a 	srl	r2,r6,r4
    a358:	00c00074 	movhi	r3,1
    a35c:	18d04d04 	addi	r3,r3,16692
    a360:	1885883a 	add	r2,r3,r2
    a364:	10c00003 	ldbu	r3,0(r2)
    a368:	00800804 	movi	r2,32
    a36c:	1909883a 	add	r4,r3,r4
    a370:	1125c83a 	sub	r18,r2,r4
    a374:	90000526 	beq	r18,zero,a38c <__umoddi3+0x94>
    a378:	8ca2983a 	sll	r17,r17,r18
    a37c:	8108d83a 	srl	r4,r16,r4
    a380:	34a6983a 	sll	r19,r6,r18
    a384:	84a8983a 	sll	r20,r16,r18
    a388:	2478b03a 	or	fp,r4,r17
    a38c:	982ed43a 	srli	r23,r19,16
    a390:	e009883a 	mov	r4,fp
    a394:	9dbfffcc 	andi	r22,r19,65535
    a398:	b80b883a 	mov	r5,r23
    a39c:	000a98c0 	call	a98c <__umodsi3>
    a3a0:	e009883a 	mov	r4,fp
    a3a4:	b80b883a 	mov	r5,r23
    a3a8:	102b883a 	mov	r21,r2
    a3ac:	000a9280 	call	a928 <__udivsi3>
    a3b0:	a806943a 	slli	r3,r21,16
    a3b4:	a008d43a 	srli	r4,r20,16
    a3b8:	b085383a 	mul	r2,r22,r2
    a3bc:	20c8b03a 	or	r4,r4,r3
    a3c0:	2080032e 	bgeu	r4,r2,a3d0 <__umoddi3+0xd8>
    a3c4:	24c9883a 	add	r4,r4,r19
    a3c8:	24c00136 	bltu	r4,r19,a3d0 <__umoddi3+0xd8>
    a3cc:	20811036 	bltu	r4,r2,a810 <__umoddi3+0x518>
    a3d0:	20abc83a 	sub	r21,r4,r2
    a3d4:	b80b883a 	mov	r5,r23
    a3d8:	a809883a 	mov	r4,r21
    a3dc:	000a98c0 	call	a98c <__umodsi3>
    a3e0:	1023883a 	mov	r17,r2
    a3e4:	b80b883a 	mov	r5,r23
    a3e8:	a809883a 	mov	r4,r21
    a3ec:	000a9280 	call	a928 <__udivsi3>
    a3f0:	8822943a 	slli	r17,r17,16
    a3f4:	b085383a 	mul	r2,r22,r2
    a3f8:	a0ffffcc 	andi	r3,r20,65535
    a3fc:	1c46b03a 	or	r3,r3,r17
    a400:	1880042e 	bgeu	r3,r2,a414 <__umoddi3+0x11c>
    a404:	1cc7883a 	add	r3,r3,r19
    a408:	1cc00236 	bltu	r3,r19,a414 <__umoddi3+0x11c>
    a40c:	1880012e 	bgeu	r3,r2,a414 <__umoddi3+0x11c>
    a410:	1cc7883a 	add	r3,r3,r19
    a414:	1885c83a 	sub	r2,r3,r2
    a418:	1484d83a 	srl	r2,r2,r18
    a41c:	0007883a 	mov	r3,zero
    a420:	00004f06 	br	a560 <__umoddi3+0x268>
    a424:	29c04c36 	bltu	r5,r7,a558 <__umoddi3+0x260>
    a428:	00bfffd4 	movui	r2,65535
    a42c:	11c0582e 	bgeu	r2,r7,a590 <__umoddi3+0x298>
    a430:	00804034 	movhi	r2,256
    a434:	10bfffc4 	addi	r2,r2,-1
    a438:	11c0e736 	bltu	r2,r7,a7d8 <__umoddi3+0x4e0>
    a43c:	01000404 	movi	r4,16
    a440:	3904d83a 	srl	r2,r7,r4
    a444:	00c00074 	movhi	r3,1
    a448:	18d04d04 	addi	r3,r3,16692
    a44c:	1885883a 	add	r2,r3,r2
    a450:	14c00003 	ldbu	r19,0(r2)
    a454:	00c00804 	movi	r3,32
    a458:	9927883a 	add	r19,r19,r4
    a45c:	1ce9c83a 	sub	r20,r3,r19
    a460:	a000581e 	bne	r20,zero,a5c4 <__umoddi3+0x2cc>
    a464:	3c400136 	bltu	r7,r17,a46c <__umoddi3+0x174>
    a468:	8180eb36 	bltu	r16,r6,a818 <__umoddi3+0x520>
    a46c:	8185c83a 	sub	r2,r16,r6
    a470:	89e3c83a 	sub	r17,r17,r7
    a474:	8089803a 	cmpltu	r4,r16,r2
    a478:	8939c83a 	sub	fp,r17,r4
    a47c:	e007883a 	mov	r3,fp
    a480:	00003706 	br	a560 <__umoddi3+0x268>
    a484:	3000041e 	bne	r6,zero,a498 <__umoddi3+0x1a0>
    a488:	000b883a 	mov	r5,zero
    a48c:	01000044 	movi	r4,1
    a490:	000a9280 	call	a928 <__udivsi3>
    a494:	1027883a 	mov	r19,r2
    a498:	00bfffd4 	movui	r2,65535
    a49c:	14c0402e 	bgeu	r2,r19,a5a0 <__umoddi3+0x2a8>
    a4a0:	00804034 	movhi	r2,256
    a4a4:	10bfffc4 	addi	r2,r2,-1
    a4a8:	14c0cd36 	bltu	r2,r19,a7e0 <__umoddi3+0x4e8>
    a4ac:	00800404 	movi	r2,16
    a4b0:	9886d83a 	srl	r3,r19,r2
    a4b4:	01000074 	movhi	r4,1
    a4b8:	21104d04 	addi	r4,r4,16692
    a4bc:	20c7883a 	add	r3,r4,r3
    a4c0:	18c00003 	ldbu	r3,0(r3)
    a4c4:	1887883a 	add	r3,r3,r2
    a4c8:	00800804 	movi	r2,32
    a4cc:	10e5c83a 	sub	r18,r2,r3
    a4d0:	9000901e 	bne	r18,zero,a714 <__umoddi3+0x41c>
    a4d4:	982cd43a 	srli	r22,r19,16
    a4d8:	8ce3c83a 	sub	r17,r17,r19
    a4dc:	9d7fffcc 	andi	r21,r19,65535
    a4e0:	b00b883a 	mov	r5,r22
    a4e4:	8809883a 	mov	r4,r17
    a4e8:	000a98c0 	call	a98c <__umodsi3>
    a4ec:	8809883a 	mov	r4,r17
    a4f0:	b00b883a 	mov	r5,r22
    a4f4:	1021883a 	mov	r16,r2
    a4f8:	000a9280 	call	a928 <__udivsi3>
    a4fc:	8006943a 	slli	r3,r16,16
    a500:	a008d43a 	srli	r4,r20,16
    a504:	1545383a 	mul	r2,r2,r21
    a508:	20c8b03a 	or	r4,r4,r3
    a50c:	2080042e 	bgeu	r4,r2,a520 <__umoddi3+0x228>
    a510:	24c9883a 	add	r4,r4,r19
    a514:	24c00236 	bltu	r4,r19,a520 <__umoddi3+0x228>
    a518:	2080012e 	bgeu	r4,r2,a520 <__umoddi3+0x228>
    a51c:	24c9883a 	add	r4,r4,r19
    a520:	20a1c83a 	sub	r16,r4,r2
    a524:	b00b883a 	mov	r5,r22
    a528:	8009883a 	mov	r4,r16
    a52c:	000a98c0 	call	a98c <__umodsi3>
    a530:	1023883a 	mov	r17,r2
    a534:	b00b883a 	mov	r5,r22
    a538:	8009883a 	mov	r4,r16
    a53c:	000a9280 	call	a928 <__udivsi3>
    a540:	8822943a 	slli	r17,r17,16
    a544:	1545383a 	mul	r2,r2,r21
    a548:	a53fffcc 	andi	r20,r20,65535
    a54c:	a446b03a 	or	r3,r20,r17
    a550:	18bfb02e 	bgeu	r3,r2,a414 <__alt_data_end+0xf800a414>
    a554:	003fab06 	br	a404 <__alt_data_end+0xf800a404>
    a558:	2005883a 	mov	r2,r4
    a55c:	2807883a 	mov	r3,r5
    a560:	dfc00b17 	ldw	ra,44(sp)
    a564:	df000a17 	ldw	fp,40(sp)
    a568:	ddc00917 	ldw	r23,36(sp)
    a56c:	dd800817 	ldw	r22,32(sp)
    a570:	dd400717 	ldw	r21,28(sp)
    a574:	dd000617 	ldw	r20,24(sp)
    a578:	dcc00517 	ldw	r19,20(sp)
    a57c:	dc800417 	ldw	r18,16(sp)
    a580:	dc400317 	ldw	r17,12(sp)
    a584:	dc000217 	ldw	r16,8(sp)
    a588:	dec00c04 	addi	sp,sp,48
    a58c:	f800283a 	ret
    a590:	04c03fc4 	movi	r19,255
    a594:	99c9803a 	cmpltu	r4,r19,r7
    a598:	200890fa 	slli	r4,r4,3
    a59c:	003fa806 	br	a440 <__alt_data_end+0xf800a440>
    a5a0:	00803fc4 	movi	r2,255
    a5a4:	14c5803a 	cmpltu	r2,r2,r19
    a5a8:	100490fa 	slli	r2,r2,3
    a5ac:	003fc006 	br	a4b0 <__alt_data_end+0xf800a4b0>
    a5b0:	00804034 	movhi	r2,256
    a5b4:	10bfffc4 	addi	r2,r2,-1
    a5b8:	11808b36 	bltu	r2,r6,a7e8 <__umoddi3+0x4f0>
    a5bc:	01000404 	movi	r4,16
    a5c0:	003f6406 	br	a354 <__alt_data_end+0xf800a354>
    a5c4:	34c4d83a 	srl	r2,r6,r19
    a5c8:	3d0e983a 	sll	r7,r7,r20
    a5cc:	8cf8d83a 	srl	fp,r17,r19
    a5d0:	8d10983a 	sll	r8,r17,r20
    a5d4:	38aab03a 	or	r21,r7,r2
    a5d8:	a82cd43a 	srli	r22,r21,16
    a5dc:	84e2d83a 	srl	r17,r16,r19
    a5e0:	e009883a 	mov	r4,fp
    a5e4:	b00b883a 	mov	r5,r22
    a5e8:	8a22b03a 	or	r17,r17,r8
    a5ec:	3524983a 	sll	r18,r6,r20
    a5f0:	000a98c0 	call	a98c <__umodsi3>
    a5f4:	e009883a 	mov	r4,fp
    a5f8:	b00b883a 	mov	r5,r22
    a5fc:	102f883a 	mov	r23,r2
    a600:	000a9280 	call	a928 <__udivsi3>
    a604:	100d883a 	mov	r6,r2
    a608:	b808943a 	slli	r4,r23,16
    a60c:	aa3fffcc 	andi	r8,r21,65535
    a610:	8804d43a 	srli	r2,r17,16
    a614:	41af383a 	mul	r23,r8,r6
    a618:	8520983a 	sll	r16,r16,r20
    a61c:	1104b03a 	or	r2,r2,r4
    a620:	15c0042e 	bgeu	r2,r23,a634 <__umoddi3+0x33c>
    a624:	1545883a 	add	r2,r2,r21
    a628:	30ffffc4 	addi	r3,r6,-1
    a62c:	1540742e 	bgeu	r2,r21,a800 <__umoddi3+0x508>
    a630:	180d883a 	mov	r6,r3
    a634:	15efc83a 	sub	r23,r2,r23
    a638:	b00b883a 	mov	r5,r22
    a63c:	b809883a 	mov	r4,r23
    a640:	d9800115 	stw	r6,4(sp)
    a644:	da000015 	stw	r8,0(sp)
    a648:	000a98c0 	call	a98c <__umodsi3>
    a64c:	b00b883a 	mov	r5,r22
    a650:	b809883a 	mov	r4,r23
    a654:	1039883a 	mov	fp,r2
    a658:	000a9280 	call	a928 <__udivsi3>
    a65c:	da000017 	ldw	r8,0(sp)
    a660:	e038943a 	slli	fp,fp,16
    a664:	100b883a 	mov	r5,r2
    a668:	4089383a 	mul	r4,r8,r2
    a66c:	8a3fffcc 	andi	r8,r17,65535
    a670:	4710b03a 	or	r8,r8,fp
    a674:	d9800117 	ldw	r6,4(sp)
    a678:	4100042e 	bgeu	r8,r4,a68c <__umoddi3+0x394>
    a67c:	4551883a 	add	r8,r8,r21
    a680:	10bfffc4 	addi	r2,r2,-1
    a684:	45405a2e 	bgeu	r8,r21,a7f0 <__umoddi3+0x4f8>
    a688:	100b883a 	mov	r5,r2
    a68c:	300c943a 	slli	r6,r6,16
    a690:	91ffffcc 	andi	r7,r18,65535
    a694:	9004d43a 	srli	r2,r18,16
    a698:	314cb03a 	or	r6,r6,r5
    a69c:	317fffcc 	andi	r5,r6,65535
    a6a0:	300cd43a 	srli	r6,r6,16
    a6a4:	29d3383a 	mul	r9,r5,r7
    a6a8:	288b383a 	mul	r5,r5,r2
    a6ac:	31cf383a 	mul	r7,r6,r7
    a6b0:	4806d43a 	srli	r3,r9,16
    a6b4:	4111c83a 	sub	r8,r8,r4
    a6b8:	29cb883a 	add	r5,r5,r7
    a6bc:	194b883a 	add	r5,r3,r5
    a6c0:	3085383a 	mul	r2,r6,r2
    a6c4:	29c0022e 	bgeu	r5,r7,a6d0 <__umoddi3+0x3d8>
    a6c8:	00c00074 	movhi	r3,1
    a6cc:	10c5883a 	add	r2,r2,r3
    a6d0:	2808d43a 	srli	r4,r5,16
    a6d4:	280a943a 	slli	r5,r5,16
    a6d8:	4a7fffcc 	andi	r9,r9,65535
    a6dc:	2085883a 	add	r2,r4,r2
    a6e0:	2a4b883a 	add	r5,r5,r9
    a6e4:	40803636 	bltu	r8,r2,a7c0 <__umoddi3+0x4c8>
    a6e8:	40804d26 	beq	r8,r2,a820 <__umoddi3+0x528>
    a6ec:	4089c83a 	sub	r4,r8,r2
    a6f0:	280f883a 	mov	r7,r5
    a6f4:	81cfc83a 	sub	r7,r16,r7
    a6f8:	81c7803a 	cmpltu	r3,r16,r7
    a6fc:	20c7c83a 	sub	r3,r4,r3
    a700:	1cc4983a 	sll	r2,r3,r19
    a704:	3d0ed83a 	srl	r7,r7,r20
    a708:	1d06d83a 	srl	r3,r3,r20
    a70c:	11c4b03a 	or	r2,r2,r7
    a710:	003f9306 	br	a560 <__alt_data_end+0xf800a560>
    a714:	9ca6983a 	sll	r19,r19,r18
    a718:	88e8d83a 	srl	r20,r17,r3
    a71c:	80c4d83a 	srl	r2,r16,r3
    a720:	982cd43a 	srli	r22,r19,16
    a724:	8ca2983a 	sll	r17,r17,r18
    a728:	a009883a 	mov	r4,r20
    a72c:	b00b883a 	mov	r5,r22
    a730:	1478b03a 	or	fp,r2,r17
    a734:	000a98c0 	call	a98c <__umodsi3>
    a738:	a009883a 	mov	r4,r20
    a73c:	b00b883a 	mov	r5,r22
    a740:	1023883a 	mov	r17,r2
    a744:	000a9280 	call	a928 <__udivsi3>
    a748:	9d7fffcc 	andi	r21,r19,65535
    a74c:	880a943a 	slli	r5,r17,16
    a750:	e008d43a 	srli	r4,fp,16
    a754:	a885383a 	mul	r2,r21,r2
    a758:	84a8983a 	sll	r20,r16,r18
    a75c:	2148b03a 	or	r4,r4,r5
    a760:	2080042e 	bgeu	r4,r2,a774 <__umoddi3+0x47c>
    a764:	24c9883a 	add	r4,r4,r19
    a768:	24c00236 	bltu	r4,r19,a774 <__umoddi3+0x47c>
    a76c:	2080012e 	bgeu	r4,r2,a774 <__umoddi3+0x47c>
    a770:	24c9883a 	add	r4,r4,r19
    a774:	20a3c83a 	sub	r17,r4,r2
    a778:	b00b883a 	mov	r5,r22
    a77c:	8809883a 	mov	r4,r17
    a780:	000a98c0 	call	a98c <__umodsi3>
    a784:	102f883a 	mov	r23,r2
    a788:	8809883a 	mov	r4,r17
    a78c:	b00b883a 	mov	r5,r22
    a790:	000a9280 	call	a928 <__udivsi3>
    a794:	b82e943a 	slli	r23,r23,16
    a798:	a885383a 	mul	r2,r21,r2
    a79c:	e13fffcc 	andi	r4,fp,65535
    a7a0:	25c8b03a 	or	r4,r4,r23
    a7a4:	2080042e 	bgeu	r4,r2,a7b8 <__umoddi3+0x4c0>
    a7a8:	24c9883a 	add	r4,r4,r19
    a7ac:	24c00236 	bltu	r4,r19,a7b8 <__umoddi3+0x4c0>
    a7b0:	2080012e 	bgeu	r4,r2,a7b8 <__umoddi3+0x4c0>
    a7b4:	24c9883a 	add	r4,r4,r19
    a7b8:	20a3c83a 	sub	r17,r4,r2
    a7bc:	003f4806 	br	a4e0 <__alt_data_end+0xf800a4e0>
    a7c0:	2c8fc83a 	sub	r7,r5,r18
    a7c4:	1545c83a 	sub	r2,r2,r21
    a7c8:	29cb803a 	cmpltu	r5,r5,r7
    a7cc:	1145c83a 	sub	r2,r2,r5
    a7d0:	4089c83a 	sub	r4,r8,r2
    a7d4:	003fc706 	br	a6f4 <__alt_data_end+0xf800a6f4>
    a7d8:	01000604 	movi	r4,24
    a7dc:	003f1806 	br	a440 <__alt_data_end+0xf800a440>
    a7e0:	00800604 	movi	r2,24
    a7e4:	003f3206 	br	a4b0 <__alt_data_end+0xf800a4b0>
    a7e8:	01000604 	movi	r4,24
    a7ec:	003ed906 	br	a354 <__alt_data_end+0xf800a354>
    a7f0:	413fa52e 	bgeu	r8,r4,a688 <__alt_data_end+0xf800a688>
    a7f4:	297fff84 	addi	r5,r5,-2
    a7f8:	4551883a 	add	r8,r8,r21
    a7fc:	003fa306 	br	a68c <__alt_data_end+0xf800a68c>
    a800:	15ff8b2e 	bgeu	r2,r23,a630 <__alt_data_end+0xf800a630>
    a804:	31bfff84 	addi	r6,r6,-2
    a808:	1545883a 	add	r2,r2,r21
    a80c:	003f8906 	br	a634 <__alt_data_end+0xf800a634>
    a810:	24c9883a 	add	r4,r4,r19
    a814:	003eee06 	br	a3d0 <__alt_data_end+0xf800a3d0>
    a818:	8005883a 	mov	r2,r16
    a81c:	003f1706 	br	a47c <__alt_data_end+0xf800a47c>
    a820:	817fe736 	bltu	r16,r5,a7c0 <__alt_data_end+0xf800a7c0>
    a824:	280f883a 	mov	r7,r5
    a828:	0009883a 	mov	r4,zero
    a82c:	003fb106 	br	a6f4 <__alt_data_end+0xf800a6f4>

0000a830 <__divsi3>:
    a830:	20001b16 	blt	r4,zero,a8a0 <__divsi3+0x70>
    a834:	000f883a 	mov	r7,zero
    a838:	28001616 	blt	r5,zero,a894 <__divsi3+0x64>
    a83c:	200d883a 	mov	r6,r4
    a840:	29001a2e 	bgeu	r5,r4,a8ac <__divsi3+0x7c>
    a844:	00800804 	movi	r2,32
    a848:	00c00044 	movi	r3,1
    a84c:	00000106 	br	a854 <__divsi3+0x24>
    a850:	10000d26 	beq	r2,zero,a888 <__divsi3+0x58>
    a854:	294b883a 	add	r5,r5,r5
    a858:	10bfffc4 	addi	r2,r2,-1
    a85c:	18c7883a 	add	r3,r3,r3
    a860:	293ffb36 	bltu	r5,r4,a850 <__alt_data_end+0xf800a850>
    a864:	0005883a 	mov	r2,zero
    a868:	18000726 	beq	r3,zero,a888 <__divsi3+0x58>
    a86c:	0005883a 	mov	r2,zero
    a870:	31400236 	bltu	r6,r5,a87c <__divsi3+0x4c>
    a874:	314dc83a 	sub	r6,r6,r5
    a878:	10c4b03a 	or	r2,r2,r3
    a87c:	1806d07a 	srli	r3,r3,1
    a880:	280ad07a 	srli	r5,r5,1
    a884:	183ffa1e 	bne	r3,zero,a870 <__alt_data_end+0xf800a870>
    a888:	38000126 	beq	r7,zero,a890 <__divsi3+0x60>
    a88c:	0085c83a 	sub	r2,zero,r2
    a890:	f800283a 	ret
    a894:	014bc83a 	sub	r5,zero,r5
    a898:	39c0005c 	xori	r7,r7,1
    a89c:	003fe706 	br	a83c <__alt_data_end+0xf800a83c>
    a8a0:	0109c83a 	sub	r4,zero,r4
    a8a4:	01c00044 	movi	r7,1
    a8a8:	003fe306 	br	a838 <__alt_data_end+0xf800a838>
    a8ac:	00c00044 	movi	r3,1
    a8b0:	003fee06 	br	a86c <__alt_data_end+0xf800a86c>

0000a8b4 <__modsi3>:
    a8b4:	20001716 	blt	r4,zero,a914 <__modsi3+0x60>
    a8b8:	000f883a 	mov	r7,zero
    a8bc:	2005883a 	mov	r2,r4
    a8c0:	28001216 	blt	r5,zero,a90c <__modsi3+0x58>
    a8c4:	2900162e 	bgeu	r5,r4,a920 <__modsi3+0x6c>
    a8c8:	01800804 	movi	r6,32
    a8cc:	00c00044 	movi	r3,1
    a8d0:	00000106 	br	a8d8 <__modsi3+0x24>
    a8d4:	30000a26 	beq	r6,zero,a900 <__modsi3+0x4c>
    a8d8:	294b883a 	add	r5,r5,r5
    a8dc:	31bfffc4 	addi	r6,r6,-1
    a8e0:	18c7883a 	add	r3,r3,r3
    a8e4:	293ffb36 	bltu	r5,r4,a8d4 <__alt_data_end+0xf800a8d4>
    a8e8:	18000526 	beq	r3,zero,a900 <__modsi3+0x4c>
    a8ec:	1806d07a 	srli	r3,r3,1
    a8f0:	11400136 	bltu	r2,r5,a8f8 <__modsi3+0x44>
    a8f4:	1145c83a 	sub	r2,r2,r5
    a8f8:	280ad07a 	srli	r5,r5,1
    a8fc:	183ffb1e 	bne	r3,zero,a8ec <__alt_data_end+0xf800a8ec>
    a900:	38000126 	beq	r7,zero,a908 <__modsi3+0x54>
    a904:	0085c83a 	sub	r2,zero,r2
    a908:	f800283a 	ret
    a90c:	014bc83a 	sub	r5,zero,r5
    a910:	003fec06 	br	a8c4 <__alt_data_end+0xf800a8c4>
    a914:	0109c83a 	sub	r4,zero,r4
    a918:	01c00044 	movi	r7,1
    a91c:	003fe706 	br	a8bc <__alt_data_end+0xf800a8bc>
    a920:	00c00044 	movi	r3,1
    a924:	003ff106 	br	a8ec <__alt_data_end+0xf800a8ec>

0000a928 <__udivsi3>:
    a928:	200d883a 	mov	r6,r4
    a92c:	2900152e 	bgeu	r5,r4,a984 <__udivsi3+0x5c>
    a930:	28001416 	blt	r5,zero,a984 <__udivsi3+0x5c>
    a934:	00800804 	movi	r2,32
    a938:	00c00044 	movi	r3,1
    a93c:	00000206 	br	a948 <__udivsi3+0x20>
    a940:	10000e26 	beq	r2,zero,a97c <__udivsi3+0x54>
    a944:	28000516 	blt	r5,zero,a95c <__udivsi3+0x34>
    a948:	294b883a 	add	r5,r5,r5
    a94c:	10bfffc4 	addi	r2,r2,-1
    a950:	18c7883a 	add	r3,r3,r3
    a954:	293ffa36 	bltu	r5,r4,a940 <__alt_data_end+0xf800a940>
    a958:	18000826 	beq	r3,zero,a97c <__udivsi3+0x54>
    a95c:	0005883a 	mov	r2,zero
    a960:	31400236 	bltu	r6,r5,a96c <__udivsi3+0x44>
    a964:	314dc83a 	sub	r6,r6,r5
    a968:	10c4b03a 	or	r2,r2,r3
    a96c:	1806d07a 	srli	r3,r3,1
    a970:	280ad07a 	srli	r5,r5,1
    a974:	183ffa1e 	bne	r3,zero,a960 <__alt_data_end+0xf800a960>
    a978:	f800283a 	ret
    a97c:	0005883a 	mov	r2,zero
    a980:	f800283a 	ret
    a984:	00c00044 	movi	r3,1
    a988:	003ff406 	br	a95c <__alt_data_end+0xf800a95c>

0000a98c <__umodsi3>:
    a98c:	2005883a 	mov	r2,r4
    a990:	2900122e 	bgeu	r5,r4,a9dc <__umodsi3+0x50>
    a994:	28001116 	blt	r5,zero,a9dc <__umodsi3+0x50>
    a998:	01800804 	movi	r6,32
    a99c:	00c00044 	movi	r3,1
    a9a0:	00000206 	br	a9ac <__umodsi3+0x20>
    a9a4:	30000c26 	beq	r6,zero,a9d8 <__umodsi3+0x4c>
    a9a8:	28000516 	blt	r5,zero,a9c0 <__umodsi3+0x34>
    a9ac:	294b883a 	add	r5,r5,r5
    a9b0:	31bfffc4 	addi	r6,r6,-1
    a9b4:	18c7883a 	add	r3,r3,r3
    a9b8:	293ffa36 	bltu	r5,r4,a9a4 <__alt_data_end+0xf800a9a4>
    a9bc:	18000626 	beq	r3,zero,a9d8 <__umodsi3+0x4c>
    a9c0:	1806d07a 	srli	r3,r3,1
    a9c4:	11400136 	bltu	r2,r5,a9cc <__umodsi3+0x40>
    a9c8:	1145c83a 	sub	r2,r2,r5
    a9cc:	280ad07a 	srli	r5,r5,1
    a9d0:	183ffb1e 	bne	r3,zero,a9c0 <__alt_data_end+0xf800a9c0>
    a9d4:	f800283a 	ret
    a9d8:	f800283a 	ret
    a9dc:	00c00044 	movi	r3,1
    a9e0:	003ff706 	br	a9c0 <__alt_data_end+0xf800a9c0>

0000a9e4 <__adddf3>:
    a9e4:	02c00434 	movhi	r11,16
    a9e8:	5affffc4 	addi	r11,r11,-1
    a9ec:	2806d7fa 	srli	r3,r5,31
    a9f0:	2ad4703a 	and	r10,r5,r11
    a9f4:	3ad2703a 	and	r9,r7,r11
    a9f8:	3804d53a 	srli	r2,r7,20
    a9fc:	3018d77a 	srli	r12,r6,29
    aa00:	280ad53a 	srli	r5,r5,20
    aa04:	501490fa 	slli	r10,r10,3
    aa08:	2010d77a 	srli	r8,r4,29
    aa0c:	481290fa 	slli	r9,r9,3
    aa10:	380ed7fa 	srli	r7,r7,31
    aa14:	defffb04 	addi	sp,sp,-20
    aa18:	dc800215 	stw	r18,8(sp)
    aa1c:	dc400115 	stw	r17,4(sp)
    aa20:	dc000015 	stw	r16,0(sp)
    aa24:	dfc00415 	stw	ra,16(sp)
    aa28:	dcc00315 	stw	r19,12(sp)
    aa2c:	1c803fcc 	andi	r18,r3,255
    aa30:	2c01ffcc 	andi	r16,r5,2047
    aa34:	5210b03a 	or	r8,r10,r8
    aa38:	202290fa 	slli	r17,r4,3
    aa3c:	1081ffcc 	andi	r2,r2,2047
    aa40:	4b12b03a 	or	r9,r9,r12
    aa44:	300c90fa 	slli	r6,r6,3
    aa48:	91c07526 	beq	r18,r7,ac20 <__adddf3+0x23c>
    aa4c:	8087c83a 	sub	r3,r16,r2
    aa50:	00c0ab0e 	bge	zero,r3,ad00 <__adddf3+0x31c>
    aa54:	10002a1e 	bne	r2,zero,ab00 <__adddf3+0x11c>
    aa58:	4984b03a 	or	r2,r9,r6
    aa5c:	1000961e 	bne	r2,zero,acb8 <__adddf3+0x2d4>
    aa60:	888001cc 	andi	r2,r17,7
    aa64:	10000726 	beq	r2,zero,aa84 <__adddf3+0xa0>
    aa68:	888003cc 	andi	r2,r17,15
    aa6c:	00c00104 	movi	r3,4
    aa70:	10c00426 	beq	r2,r3,aa84 <__adddf3+0xa0>
    aa74:	88c7883a 	add	r3,r17,r3
    aa78:	1c63803a 	cmpltu	r17,r3,r17
    aa7c:	4451883a 	add	r8,r8,r17
    aa80:	1823883a 	mov	r17,r3
    aa84:	4080202c 	andhi	r2,r8,128
    aa88:	10005926 	beq	r2,zero,abf0 <__adddf3+0x20c>
    aa8c:	84000044 	addi	r16,r16,1
    aa90:	0081ffc4 	movi	r2,2047
    aa94:	8080ba26 	beq	r16,r2,ad80 <__adddf3+0x39c>
    aa98:	00bfe034 	movhi	r2,65408
    aa9c:	10bfffc4 	addi	r2,r2,-1
    aaa0:	4090703a 	and	r8,r8,r2
    aaa4:	4004977a 	slli	r2,r8,29
    aaa8:	4010927a 	slli	r8,r8,9
    aaac:	8822d0fa 	srli	r17,r17,3
    aab0:	8401ffcc 	andi	r16,r16,2047
    aab4:	4010d33a 	srli	r8,r8,12
    aab8:	9007883a 	mov	r3,r18
    aabc:	1444b03a 	or	r2,r2,r17
    aac0:	8401ffcc 	andi	r16,r16,2047
    aac4:	8020953a 	slli	r16,r16,20
    aac8:	18c03fcc 	andi	r3,r3,255
    aacc:	01000434 	movhi	r4,16
    aad0:	213fffc4 	addi	r4,r4,-1
    aad4:	180697fa 	slli	r3,r3,31
    aad8:	4110703a 	and	r8,r8,r4
    aadc:	4410b03a 	or	r8,r8,r16
    aae0:	40c6b03a 	or	r3,r8,r3
    aae4:	dfc00417 	ldw	ra,16(sp)
    aae8:	dcc00317 	ldw	r19,12(sp)
    aaec:	dc800217 	ldw	r18,8(sp)
    aaf0:	dc400117 	ldw	r17,4(sp)
    aaf4:	dc000017 	ldw	r16,0(sp)
    aaf8:	dec00504 	addi	sp,sp,20
    aafc:	f800283a 	ret
    ab00:	0081ffc4 	movi	r2,2047
    ab04:	80bfd626 	beq	r16,r2,aa60 <__alt_data_end+0xf800aa60>
    ab08:	4a402034 	orhi	r9,r9,128
    ab0c:	00800e04 	movi	r2,56
    ab10:	10c09f16 	blt	r2,r3,ad90 <__adddf3+0x3ac>
    ab14:	008007c4 	movi	r2,31
    ab18:	10c0c216 	blt	r2,r3,ae24 <__adddf3+0x440>
    ab1c:	00800804 	movi	r2,32
    ab20:	10c5c83a 	sub	r2,r2,r3
    ab24:	488a983a 	sll	r5,r9,r2
    ab28:	30c8d83a 	srl	r4,r6,r3
    ab2c:	3084983a 	sll	r2,r6,r2
    ab30:	48c6d83a 	srl	r3,r9,r3
    ab34:	290cb03a 	or	r6,r5,r4
    ab38:	1004c03a 	cmpne	r2,r2,zero
    ab3c:	308cb03a 	or	r6,r6,r2
    ab40:	898dc83a 	sub	r6,r17,r6
    ab44:	89a3803a 	cmpltu	r17,r17,r6
    ab48:	40d1c83a 	sub	r8,r8,r3
    ab4c:	4451c83a 	sub	r8,r8,r17
    ab50:	3023883a 	mov	r17,r6
    ab54:	4080202c 	andhi	r2,r8,128
    ab58:	10002326 	beq	r2,zero,abe8 <__adddf3+0x204>
    ab5c:	04c02034 	movhi	r19,128
    ab60:	9cffffc4 	addi	r19,r19,-1
    ab64:	44e6703a 	and	r19,r8,r19
    ab68:	98007626 	beq	r19,zero,ad44 <__adddf3+0x360>
    ab6c:	9809883a 	mov	r4,r19
    ab70:	000cfe80 	call	cfe8 <__clzsi2>
    ab74:	10fffe04 	addi	r3,r2,-8
    ab78:	010007c4 	movi	r4,31
    ab7c:	20c07716 	blt	r4,r3,ad5c <__adddf3+0x378>
    ab80:	00800804 	movi	r2,32
    ab84:	10c5c83a 	sub	r2,r2,r3
    ab88:	8884d83a 	srl	r2,r17,r2
    ab8c:	98d0983a 	sll	r8,r19,r3
    ab90:	88e2983a 	sll	r17,r17,r3
    ab94:	1204b03a 	or	r2,r2,r8
    ab98:	1c007416 	blt	r3,r16,ad6c <__adddf3+0x388>
    ab9c:	1c21c83a 	sub	r16,r3,r16
    aba0:	82000044 	addi	r8,r16,1
    aba4:	00c007c4 	movi	r3,31
    aba8:	1a009116 	blt	r3,r8,adf0 <__adddf3+0x40c>
    abac:	00c00804 	movi	r3,32
    abb0:	1a07c83a 	sub	r3,r3,r8
    abb4:	8a08d83a 	srl	r4,r17,r8
    abb8:	88e2983a 	sll	r17,r17,r3
    abbc:	10c6983a 	sll	r3,r2,r3
    abc0:	1210d83a 	srl	r8,r2,r8
    abc4:	8804c03a 	cmpne	r2,r17,zero
    abc8:	1906b03a 	or	r3,r3,r4
    abcc:	18a2b03a 	or	r17,r3,r2
    abd0:	0021883a 	mov	r16,zero
    abd4:	003fa206 	br	aa60 <__alt_data_end+0xf800aa60>
    abd8:	1890b03a 	or	r8,r3,r2
    abdc:	40017d26 	beq	r8,zero,b1d4 <__adddf3+0x7f0>
    abe0:	1011883a 	mov	r8,r2
    abe4:	1823883a 	mov	r17,r3
    abe8:	888001cc 	andi	r2,r17,7
    abec:	103f9e1e 	bne	r2,zero,aa68 <__alt_data_end+0xf800aa68>
    abf0:	4004977a 	slli	r2,r8,29
    abf4:	8822d0fa 	srli	r17,r17,3
    abf8:	4010d0fa 	srli	r8,r8,3
    abfc:	9007883a 	mov	r3,r18
    ac00:	1444b03a 	or	r2,r2,r17
    ac04:	0101ffc4 	movi	r4,2047
    ac08:	81002426 	beq	r16,r4,ac9c <__adddf3+0x2b8>
    ac0c:	8120703a 	and	r16,r16,r4
    ac10:	01000434 	movhi	r4,16
    ac14:	213fffc4 	addi	r4,r4,-1
    ac18:	4110703a 	and	r8,r8,r4
    ac1c:	003fa806 	br	aac0 <__alt_data_end+0xf800aac0>
    ac20:	8089c83a 	sub	r4,r16,r2
    ac24:	01005e0e 	bge	zero,r4,ada0 <__adddf3+0x3bc>
    ac28:	10002b26 	beq	r2,zero,acd8 <__adddf3+0x2f4>
    ac2c:	0081ffc4 	movi	r2,2047
    ac30:	80bf8b26 	beq	r16,r2,aa60 <__alt_data_end+0xf800aa60>
    ac34:	4a402034 	orhi	r9,r9,128
    ac38:	00800e04 	movi	r2,56
    ac3c:	1100a40e 	bge	r2,r4,aed0 <__adddf3+0x4ec>
    ac40:	498cb03a 	or	r6,r9,r6
    ac44:	300ac03a 	cmpne	r5,r6,zero
    ac48:	0013883a 	mov	r9,zero
    ac4c:	2c4b883a 	add	r5,r5,r17
    ac50:	2c63803a 	cmpltu	r17,r5,r17
    ac54:	4a11883a 	add	r8,r9,r8
    ac58:	8a11883a 	add	r8,r17,r8
    ac5c:	2823883a 	mov	r17,r5
    ac60:	4080202c 	andhi	r2,r8,128
    ac64:	103fe026 	beq	r2,zero,abe8 <__alt_data_end+0xf800abe8>
    ac68:	84000044 	addi	r16,r16,1
    ac6c:	0081ffc4 	movi	r2,2047
    ac70:	8080d226 	beq	r16,r2,afbc <__adddf3+0x5d8>
    ac74:	00bfe034 	movhi	r2,65408
    ac78:	10bfffc4 	addi	r2,r2,-1
    ac7c:	4090703a 	and	r8,r8,r2
    ac80:	880ad07a 	srli	r5,r17,1
    ac84:	400897fa 	slli	r4,r8,31
    ac88:	88c0004c 	andi	r3,r17,1
    ac8c:	28e2b03a 	or	r17,r5,r3
    ac90:	4010d07a 	srli	r8,r8,1
    ac94:	2462b03a 	or	r17,r4,r17
    ac98:	003f7106 	br	aa60 <__alt_data_end+0xf800aa60>
    ac9c:	4088b03a 	or	r4,r8,r2
    aca0:	20014526 	beq	r4,zero,b1b8 <__adddf3+0x7d4>
    aca4:	01000434 	movhi	r4,16
    aca8:	42000234 	orhi	r8,r8,8
    acac:	213fffc4 	addi	r4,r4,-1
    acb0:	4110703a 	and	r8,r8,r4
    acb4:	003f8206 	br	aac0 <__alt_data_end+0xf800aac0>
    acb8:	18ffffc4 	addi	r3,r3,-1
    acbc:	1800491e 	bne	r3,zero,ade4 <__adddf3+0x400>
    acc0:	898bc83a 	sub	r5,r17,r6
    acc4:	8963803a 	cmpltu	r17,r17,r5
    acc8:	4251c83a 	sub	r8,r8,r9
    accc:	4451c83a 	sub	r8,r8,r17
    acd0:	2823883a 	mov	r17,r5
    acd4:	003f9f06 	br	ab54 <__alt_data_end+0xf800ab54>
    acd8:	4984b03a 	or	r2,r9,r6
    acdc:	103f6026 	beq	r2,zero,aa60 <__alt_data_end+0xf800aa60>
    ace0:	213fffc4 	addi	r4,r4,-1
    ace4:	2000931e 	bne	r4,zero,af34 <__adddf3+0x550>
    ace8:	898d883a 	add	r6,r17,r6
    acec:	3463803a 	cmpltu	r17,r6,r17
    acf0:	4251883a 	add	r8,r8,r9
    acf4:	8a11883a 	add	r8,r17,r8
    acf8:	3023883a 	mov	r17,r6
    acfc:	003fd806 	br	ac60 <__alt_data_end+0xf800ac60>
    ad00:	1800541e 	bne	r3,zero,ae54 <__adddf3+0x470>
    ad04:	80800044 	addi	r2,r16,1
    ad08:	1081ffcc 	andi	r2,r2,2047
    ad0c:	00c00044 	movi	r3,1
    ad10:	1880a00e 	bge	r3,r2,af94 <__adddf3+0x5b0>
    ad14:	8989c83a 	sub	r4,r17,r6
    ad18:	8905803a 	cmpltu	r2,r17,r4
    ad1c:	4267c83a 	sub	r19,r8,r9
    ad20:	98a7c83a 	sub	r19,r19,r2
    ad24:	9880202c 	andhi	r2,r19,128
    ad28:	10006326 	beq	r2,zero,aeb8 <__adddf3+0x4d4>
    ad2c:	3463c83a 	sub	r17,r6,r17
    ad30:	4a07c83a 	sub	r3,r9,r8
    ad34:	344d803a 	cmpltu	r6,r6,r17
    ad38:	19a7c83a 	sub	r19,r3,r6
    ad3c:	3825883a 	mov	r18,r7
    ad40:	983f8a1e 	bne	r19,zero,ab6c <__alt_data_end+0xf800ab6c>
    ad44:	8809883a 	mov	r4,r17
    ad48:	000cfe80 	call	cfe8 <__clzsi2>
    ad4c:	10800804 	addi	r2,r2,32
    ad50:	10fffe04 	addi	r3,r2,-8
    ad54:	010007c4 	movi	r4,31
    ad58:	20ff890e 	bge	r4,r3,ab80 <__alt_data_end+0xf800ab80>
    ad5c:	10bff604 	addi	r2,r2,-40
    ad60:	8884983a 	sll	r2,r17,r2
    ad64:	0023883a 	mov	r17,zero
    ad68:	1c3f8c0e 	bge	r3,r16,ab9c <__alt_data_end+0xf800ab9c>
    ad6c:	023fe034 	movhi	r8,65408
    ad70:	423fffc4 	addi	r8,r8,-1
    ad74:	80e1c83a 	sub	r16,r16,r3
    ad78:	1210703a 	and	r8,r2,r8
    ad7c:	003f3806 	br	aa60 <__alt_data_end+0xf800aa60>
    ad80:	9007883a 	mov	r3,r18
    ad84:	0011883a 	mov	r8,zero
    ad88:	0005883a 	mov	r2,zero
    ad8c:	003f4c06 	br	aac0 <__alt_data_end+0xf800aac0>
    ad90:	498cb03a 	or	r6,r9,r6
    ad94:	300cc03a 	cmpne	r6,r6,zero
    ad98:	0007883a 	mov	r3,zero
    ad9c:	003f6806 	br	ab40 <__alt_data_end+0xf800ab40>
    ada0:	20009c1e 	bne	r4,zero,b014 <__adddf3+0x630>
    ada4:	80800044 	addi	r2,r16,1
    ada8:	1141ffcc 	andi	r5,r2,2047
    adac:	01000044 	movi	r4,1
    adb0:	2140670e 	bge	r4,r5,af50 <__adddf3+0x56c>
    adb4:	0101ffc4 	movi	r4,2047
    adb8:	11007f26 	beq	r2,r4,afb8 <__adddf3+0x5d4>
    adbc:	898d883a 	add	r6,r17,r6
    adc0:	4247883a 	add	r3,r8,r9
    adc4:	3451803a 	cmpltu	r8,r6,r17
    adc8:	40d1883a 	add	r8,r8,r3
    adcc:	402297fa 	slli	r17,r8,31
    add0:	300cd07a 	srli	r6,r6,1
    add4:	4010d07a 	srli	r8,r8,1
    add8:	1021883a 	mov	r16,r2
    addc:	89a2b03a 	or	r17,r17,r6
    ade0:	003f1f06 	br	aa60 <__alt_data_end+0xf800aa60>
    ade4:	0081ffc4 	movi	r2,2047
    ade8:	80bf481e 	bne	r16,r2,ab0c <__alt_data_end+0xf800ab0c>
    adec:	003f1c06 	br	aa60 <__alt_data_end+0xf800aa60>
    adf0:	843ff844 	addi	r16,r16,-31
    adf4:	01000804 	movi	r4,32
    adf8:	1406d83a 	srl	r3,r2,r16
    adfc:	41005026 	beq	r8,r4,af40 <__adddf3+0x55c>
    ae00:	01001004 	movi	r4,64
    ae04:	2211c83a 	sub	r8,r4,r8
    ae08:	1204983a 	sll	r2,r2,r8
    ae0c:	88a2b03a 	or	r17,r17,r2
    ae10:	8822c03a 	cmpne	r17,r17,zero
    ae14:	1c62b03a 	or	r17,r3,r17
    ae18:	0011883a 	mov	r8,zero
    ae1c:	0021883a 	mov	r16,zero
    ae20:	003f7106 	br	abe8 <__alt_data_end+0xf800abe8>
    ae24:	193ff804 	addi	r4,r3,-32
    ae28:	00800804 	movi	r2,32
    ae2c:	4908d83a 	srl	r4,r9,r4
    ae30:	18804526 	beq	r3,r2,af48 <__adddf3+0x564>
    ae34:	00801004 	movi	r2,64
    ae38:	10c5c83a 	sub	r2,r2,r3
    ae3c:	4886983a 	sll	r3,r9,r2
    ae40:	198cb03a 	or	r6,r3,r6
    ae44:	300cc03a 	cmpne	r6,r6,zero
    ae48:	218cb03a 	or	r6,r4,r6
    ae4c:	0007883a 	mov	r3,zero
    ae50:	003f3b06 	br	ab40 <__alt_data_end+0xf800ab40>
    ae54:	80002a26 	beq	r16,zero,af00 <__adddf3+0x51c>
    ae58:	0101ffc4 	movi	r4,2047
    ae5c:	11006826 	beq	r2,r4,b000 <__adddf3+0x61c>
    ae60:	00c7c83a 	sub	r3,zero,r3
    ae64:	42002034 	orhi	r8,r8,128
    ae68:	01000e04 	movi	r4,56
    ae6c:	20c07c16 	blt	r4,r3,b060 <__adddf3+0x67c>
    ae70:	010007c4 	movi	r4,31
    ae74:	20c0da16 	blt	r4,r3,b1e0 <__adddf3+0x7fc>
    ae78:	01000804 	movi	r4,32
    ae7c:	20c9c83a 	sub	r4,r4,r3
    ae80:	4114983a 	sll	r10,r8,r4
    ae84:	88cad83a 	srl	r5,r17,r3
    ae88:	8908983a 	sll	r4,r17,r4
    ae8c:	40c6d83a 	srl	r3,r8,r3
    ae90:	5162b03a 	or	r17,r10,r5
    ae94:	2008c03a 	cmpne	r4,r4,zero
    ae98:	8922b03a 	or	r17,r17,r4
    ae9c:	3463c83a 	sub	r17,r6,r17
    aea0:	48c7c83a 	sub	r3,r9,r3
    aea4:	344d803a 	cmpltu	r6,r6,r17
    aea8:	1991c83a 	sub	r8,r3,r6
    aeac:	1021883a 	mov	r16,r2
    aeb0:	3825883a 	mov	r18,r7
    aeb4:	003f2706 	br	ab54 <__alt_data_end+0xf800ab54>
    aeb8:	24d0b03a 	or	r8,r4,r19
    aebc:	40001b1e 	bne	r8,zero,af2c <__adddf3+0x548>
    aec0:	0005883a 	mov	r2,zero
    aec4:	0007883a 	mov	r3,zero
    aec8:	0021883a 	mov	r16,zero
    aecc:	003f4d06 	br	ac04 <__alt_data_end+0xf800ac04>
    aed0:	008007c4 	movi	r2,31
    aed4:	11003c16 	blt	r2,r4,afc8 <__adddf3+0x5e4>
    aed8:	00800804 	movi	r2,32
    aedc:	1105c83a 	sub	r2,r2,r4
    aee0:	488e983a 	sll	r7,r9,r2
    aee4:	310ad83a 	srl	r5,r6,r4
    aee8:	3084983a 	sll	r2,r6,r2
    aeec:	4912d83a 	srl	r9,r9,r4
    aef0:	394ab03a 	or	r5,r7,r5
    aef4:	1004c03a 	cmpne	r2,r2,zero
    aef8:	288ab03a 	or	r5,r5,r2
    aefc:	003f5306 	br	ac4c <__alt_data_end+0xf800ac4c>
    af00:	4448b03a 	or	r4,r8,r17
    af04:	20003e26 	beq	r4,zero,b000 <__adddf3+0x61c>
    af08:	00c6303a 	nor	r3,zero,r3
    af0c:	18003a1e 	bne	r3,zero,aff8 <__adddf3+0x614>
    af10:	3463c83a 	sub	r17,r6,r17
    af14:	4a07c83a 	sub	r3,r9,r8
    af18:	344d803a 	cmpltu	r6,r6,r17
    af1c:	1991c83a 	sub	r8,r3,r6
    af20:	1021883a 	mov	r16,r2
    af24:	3825883a 	mov	r18,r7
    af28:	003f0a06 	br	ab54 <__alt_data_end+0xf800ab54>
    af2c:	2023883a 	mov	r17,r4
    af30:	003f0d06 	br	ab68 <__alt_data_end+0xf800ab68>
    af34:	0081ffc4 	movi	r2,2047
    af38:	80bf3f1e 	bne	r16,r2,ac38 <__alt_data_end+0xf800ac38>
    af3c:	003ec806 	br	aa60 <__alt_data_end+0xf800aa60>
    af40:	0005883a 	mov	r2,zero
    af44:	003fb106 	br	ae0c <__alt_data_end+0xf800ae0c>
    af48:	0007883a 	mov	r3,zero
    af4c:	003fbc06 	br	ae40 <__alt_data_end+0xf800ae40>
    af50:	4444b03a 	or	r2,r8,r17
    af54:	8000871e 	bne	r16,zero,b174 <__adddf3+0x790>
    af58:	1000ba26 	beq	r2,zero,b244 <__adddf3+0x860>
    af5c:	4984b03a 	or	r2,r9,r6
    af60:	103ebf26 	beq	r2,zero,aa60 <__alt_data_end+0xf800aa60>
    af64:	8985883a 	add	r2,r17,r6
    af68:	4247883a 	add	r3,r8,r9
    af6c:	1451803a 	cmpltu	r8,r2,r17
    af70:	40d1883a 	add	r8,r8,r3
    af74:	40c0202c 	andhi	r3,r8,128
    af78:	1023883a 	mov	r17,r2
    af7c:	183f1a26 	beq	r3,zero,abe8 <__alt_data_end+0xf800abe8>
    af80:	00bfe034 	movhi	r2,65408
    af84:	10bfffc4 	addi	r2,r2,-1
    af88:	2021883a 	mov	r16,r4
    af8c:	4090703a 	and	r8,r8,r2
    af90:	003eb306 	br	aa60 <__alt_data_end+0xf800aa60>
    af94:	4444b03a 	or	r2,r8,r17
    af98:	8000291e 	bne	r16,zero,b040 <__adddf3+0x65c>
    af9c:	10004b1e 	bne	r2,zero,b0cc <__adddf3+0x6e8>
    afa0:	4990b03a 	or	r8,r9,r6
    afa4:	40008b26 	beq	r8,zero,b1d4 <__adddf3+0x7f0>
    afa8:	4811883a 	mov	r8,r9
    afac:	3023883a 	mov	r17,r6
    afb0:	3825883a 	mov	r18,r7
    afb4:	003eaa06 	br	aa60 <__alt_data_end+0xf800aa60>
    afb8:	1021883a 	mov	r16,r2
    afbc:	0011883a 	mov	r8,zero
    afc0:	0005883a 	mov	r2,zero
    afc4:	003f0f06 	br	ac04 <__alt_data_end+0xf800ac04>
    afc8:	217ff804 	addi	r5,r4,-32
    afcc:	00800804 	movi	r2,32
    afd0:	494ad83a 	srl	r5,r9,r5
    afd4:	20807d26 	beq	r4,r2,b1cc <__adddf3+0x7e8>
    afd8:	00801004 	movi	r2,64
    afdc:	1109c83a 	sub	r4,r2,r4
    afe0:	4912983a 	sll	r9,r9,r4
    afe4:	498cb03a 	or	r6,r9,r6
    afe8:	300cc03a 	cmpne	r6,r6,zero
    afec:	298ab03a 	or	r5,r5,r6
    aff0:	0013883a 	mov	r9,zero
    aff4:	003f1506 	br	ac4c <__alt_data_end+0xf800ac4c>
    aff8:	0101ffc4 	movi	r4,2047
    affc:	113f9a1e 	bne	r2,r4,ae68 <__alt_data_end+0xf800ae68>
    b000:	4811883a 	mov	r8,r9
    b004:	3023883a 	mov	r17,r6
    b008:	1021883a 	mov	r16,r2
    b00c:	3825883a 	mov	r18,r7
    b010:	003e9306 	br	aa60 <__alt_data_end+0xf800aa60>
    b014:	8000161e 	bne	r16,zero,b070 <__adddf3+0x68c>
    b018:	444ab03a 	or	r5,r8,r17
    b01c:	28005126 	beq	r5,zero,b164 <__adddf3+0x780>
    b020:	0108303a 	nor	r4,zero,r4
    b024:	20004d1e 	bne	r4,zero,b15c <__adddf3+0x778>
    b028:	89a3883a 	add	r17,r17,r6
    b02c:	4253883a 	add	r9,r8,r9
    b030:	898d803a 	cmpltu	r6,r17,r6
    b034:	3251883a 	add	r8,r6,r9
    b038:	1021883a 	mov	r16,r2
    b03c:	003f0806 	br	ac60 <__alt_data_end+0xf800ac60>
    b040:	1000301e 	bne	r2,zero,b104 <__adddf3+0x720>
    b044:	4984b03a 	or	r2,r9,r6
    b048:	10007126 	beq	r2,zero,b210 <__adddf3+0x82c>
    b04c:	4811883a 	mov	r8,r9
    b050:	3023883a 	mov	r17,r6
    b054:	3825883a 	mov	r18,r7
    b058:	0401ffc4 	movi	r16,2047
    b05c:	003e8006 	br	aa60 <__alt_data_end+0xf800aa60>
    b060:	4462b03a 	or	r17,r8,r17
    b064:	8822c03a 	cmpne	r17,r17,zero
    b068:	0007883a 	mov	r3,zero
    b06c:	003f8b06 	br	ae9c <__alt_data_end+0xf800ae9c>
    b070:	0141ffc4 	movi	r5,2047
    b074:	11403b26 	beq	r2,r5,b164 <__adddf3+0x780>
    b078:	0109c83a 	sub	r4,zero,r4
    b07c:	42002034 	orhi	r8,r8,128
    b080:	01400e04 	movi	r5,56
    b084:	29006716 	blt	r5,r4,b224 <__adddf3+0x840>
    b088:	014007c4 	movi	r5,31
    b08c:	29007016 	blt	r5,r4,b250 <__adddf3+0x86c>
    b090:	01400804 	movi	r5,32
    b094:	290bc83a 	sub	r5,r5,r4
    b098:	4154983a 	sll	r10,r8,r5
    b09c:	890ed83a 	srl	r7,r17,r4
    b0a0:	894a983a 	sll	r5,r17,r5
    b0a4:	4108d83a 	srl	r4,r8,r4
    b0a8:	51e2b03a 	or	r17,r10,r7
    b0ac:	280ac03a 	cmpne	r5,r5,zero
    b0b0:	8962b03a 	or	r17,r17,r5
    b0b4:	89a3883a 	add	r17,r17,r6
    b0b8:	2253883a 	add	r9,r4,r9
    b0bc:	898d803a 	cmpltu	r6,r17,r6
    b0c0:	3251883a 	add	r8,r6,r9
    b0c4:	1021883a 	mov	r16,r2
    b0c8:	003ee506 	br	ac60 <__alt_data_end+0xf800ac60>
    b0cc:	4984b03a 	or	r2,r9,r6
    b0d0:	103e6326 	beq	r2,zero,aa60 <__alt_data_end+0xf800aa60>
    b0d4:	8987c83a 	sub	r3,r17,r6
    b0d8:	88c9803a 	cmpltu	r4,r17,r3
    b0dc:	4245c83a 	sub	r2,r8,r9
    b0e0:	1105c83a 	sub	r2,r2,r4
    b0e4:	1100202c 	andhi	r4,r2,128
    b0e8:	203ebb26 	beq	r4,zero,abd8 <__alt_data_end+0xf800abd8>
    b0ec:	3463c83a 	sub	r17,r6,r17
    b0f0:	4a07c83a 	sub	r3,r9,r8
    b0f4:	344d803a 	cmpltu	r6,r6,r17
    b0f8:	1991c83a 	sub	r8,r3,r6
    b0fc:	3825883a 	mov	r18,r7
    b100:	003e5706 	br	aa60 <__alt_data_end+0xf800aa60>
    b104:	4984b03a 	or	r2,r9,r6
    b108:	10002e26 	beq	r2,zero,b1c4 <__adddf3+0x7e0>
    b10c:	4004d0fa 	srli	r2,r8,3
    b110:	8822d0fa 	srli	r17,r17,3
    b114:	4010977a 	slli	r8,r8,29
    b118:	10c0022c 	andhi	r3,r2,8
    b11c:	4462b03a 	or	r17,r8,r17
    b120:	18000826 	beq	r3,zero,b144 <__adddf3+0x760>
    b124:	4808d0fa 	srli	r4,r9,3
    b128:	20c0022c 	andhi	r3,r4,8
    b12c:	1800051e 	bne	r3,zero,b144 <__adddf3+0x760>
    b130:	300cd0fa 	srli	r6,r6,3
    b134:	4806977a 	slli	r3,r9,29
    b138:	2005883a 	mov	r2,r4
    b13c:	3825883a 	mov	r18,r7
    b140:	19a2b03a 	or	r17,r3,r6
    b144:	8810d77a 	srli	r8,r17,29
    b148:	100490fa 	slli	r2,r2,3
    b14c:	882290fa 	slli	r17,r17,3
    b150:	0401ffc4 	movi	r16,2047
    b154:	4090b03a 	or	r8,r8,r2
    b158:	003e4106 	br	aa60 <__alt_data_end+0xf800aa60>
    b15c:	0141ffc4 	movi	r5,2047
    b160:	117fc71e 	bne	r2,r5,b080 <__alt_data_end+0xf800b080>
    b164:	4811883a 	mov	r8,r9
    b168:	3023883a 	mov	r17,r6
    b16c:	1021883a 	mov	r16,r2
    b170:	003e3b06 	br	aa60 <__alt_data_end+0xf800aa60>
    b174:	10002f26 	beq	r2,zero,b234 <__adddf3+0x850>
    b178:	4984b03a 	or	r2,r9,r6
    b17c:	10001126 	beq	r2,zero,b1c4 <__adddf3+0x7e0>
    b180:	4004d0fa 	srli	r2,r8,3
    b184:	8822d0fa 	srli	r17,r17,3
    b188:	4010977a 	slli	r8,r8,29
    b18c:	10c0022c 	andhi	r3,r2,8
    b190:	4462b03a 	or	r17,r8,r17
    b194:	183feb26 	beq	r3,zero,b144 <__alt_data_end+0xf800b144>
    b198:	4808d0fa 	srli	r4,r9,3
    b19c:	20c0022c 	andhi	r3,r4,8
    b1a0:	183fe81e 	bne	r3,zero,b144 <__alt_data_end+0xf800b144>
    b1a4:	300cd0fa 	srli	r6,r6,3
    b1a8:	4806977a 	slli	r3,r9,29
    b1ac:	2005883a 	mov	r2,r4
    b1b0:	19a2b03a 	or	r17,r3,r6
    b1b4:	003fe306 	br	b144 <__alt_data_end+0xf800b144>
    b1b8:	0011883a 	mov	r8,zero
    b1bc:	0005883a 	mov	r2,zero
    b1c0:	003e3f06 	br	aac0 <__alt_data_end+0xf800aac0>
    b1c4:	0401ffc4 	movi	r16,2047
    b1c8:	003e2506 	br	aa60 <__alt_data_end+0xf800aa60>
    b1cc:	0013883a 	mov	r9,zero
    b1d0:	003f8406 	br	afe4 <__alt_data_end+0xf800afe4>
    b1d4:	0005883a 	mov	r2,zero
    b1d8:	0007883a 	mov	r3,zero
    b1dc:	003e8906 	br	ac04 <__alt_data_end+0xf800ac04>
    b1e0:	197ff804 	addi	r5,r3,-32
    b1e4:	01000804 	movi	r4,32
    b1e8:	414ad83a 	srl	r5,r8,r5
    b1ec:	19002426 	beq	r3,r4,b280 <__adddf3+0x89c>
    b1f0:	01001004 	movi	r4,64
    b1f4:	20c7c83a 	sub	r3,r4,r3
    b1f8:	40c6983a 	sll	r3,r8,r3
    b1fc:	1c46b03a 	or	r3,r3,r17
    b200:	1806c03a 	cmpne	r3,r3,zero
    b204:	28e2b03a 	or	r17,r5,r3
    b208:	0007883a 	mov	r3,zero
    b20c:	003f2306 	br	ae9c <__alt_data_end+0xf800ae9c>
    b210:	0007883a 	mov	r3,zero
    b214:	5811883a 	mov	r8,r11
    b218:	00bfffc4 	movi	r2,-1
    b21c:	0401ffc4 	movi	r16,2047
    b220:	003e7806 	br	ac04 <__alt_data_end+0xf800ac04>
    b224:	4462b03a 	or	r17,r8,r17
    b228:	8822c03a 	cmpne	r17,r17,zero
    b22c:	0009883a 	mov	r4,zero
    b230:	003fa006 	br	b0b4 <__alt_data_end+0xf800b0b4>
    b234:	4811883a 	mov	r8,r9
    b238:	3023883a 	mov	r17,r6
    b23c:	0401ffc4 	movi	r16,2047
    b240:	003e0706 	br	aa60 <__alt_data_end+0xf800aa60>
    b244:	4811883a 	mov	r8,r9
    b248:	3023883a 	mov	r17,r6
    b24c:	003e0406 	br	aa60 <__alt_data_end+0xf800aa60>
    b250:	21fff804 	addi	r7,r4,-32
    b254:	01400804 	movi	r5,32
    b258:	41ced83a 	srl	r7,r8,r7
    b25c:	21400a26 	beq	r4,r5,b288 <__adddf3+0x8a4>
    b260:	01401004 	movi	r5,64
    b264:	2909c83a 	sub	r4,r5,r4
    b268:	4108983a 	sll	r4,r8,r4
    b26c:	2448b03a 	or	r4,r4,r17
    b270:	2008c03a 	cmpne	r4,r4,zero
    b274:	3922b03a 	or	r17,r7,r4
    b278:	0009883a 	mov	r4,zero
    b27c:	003f8d06 	br	b0b4 <__alt_data_end+0xf800b0b4>
    b280:	0007883a 	mov	r3,zero
    b284:	003fdd06 	br	b1fc <__alt_data_end+0xf800b1fc>
    b288:	0009883a 	mov	r4,zero
    b28c:	003ff706 	br	b26c <__alt_data_end+0xf800b26c>

0000b290 <__divdf3>:
    b290:	defff204 	addi	sp,sp,-56
    b294:	dd400915 	stw	r21,36(sp)
    b298:	282ad53a 	srli	r21,r5,20
    b29c:	dd000815 	stw	r20,32(sp)
    b2a0:	2828d7fa 	srli	r20,r5,31
    b2a4:	dc000415 	stw	r16,16(sp)
    b2a8:	04000434 	movhi	r16,16
    b2ac:	df000c15 	stw	fp,48(sp)
    b2b0:	843fffc4 	addi	r16,r16,-1
    b2b4:	dfc00d15 	stw	ra,52(sp)
    b2b8:	ddc00b15 	stw	r23,44(sp)
    b2bc:	dd800a15 	stw	r22,40(sp)
    b2c0:	dcc00715 	stw	r19,28(sp)
    b2c4:	dc800615 	stw	r18,24(sp)
    b2c8:	dc400515 	stw	r17,20(sp)
    b2cc:	ad41ffcc 	andi	r21,r21,2047
    b2d0:	2c20703a 	and	r16,r5,r16
    b2d4:	a7003fcc 	andi	fp,r20,255
    b2d8:	a8006126 	beq	r21,zero,b460 <__divdf3+0x1d0>
    b2dc:	0081ffc4 	movi	r2,2047
    b2e0:	2025883a 	mov	r18,r4
    b2e4:	a8803726 	beq	r21,r2,b3c4 <__divdf3+0x134>
    b2e8:	80800434 	orhi	r2,r16,16
    b2ec:	100490fa 	slli	r2,r2,3
    b2f0:	2020d77a 	srli	r16,r4,29
    b2f4:	202490fa 	slli	r18,r4,3
    b2f8:	ad7f0044 	addi	r21,r21,-1023
    b2fc:	80a0b03a 	or	r16,r16,r2
    b300:	0027883a 	mov	r19,zero
    b304:	0013883a 	mov	r9,zero
    b308:	3804d53a 	srli	r2,r7,20
    b30c:	382cd7fa 	srli	r22,r7,31
    b310:	04400434 	movhi	r17,16
    b314:	8c7fffc4 	addi	r17,r17,-1
    b318:	1081ffcc 	andi	r2,r2,2047
    b31c:	3011883a 	mov	r8,r6
    b320:	3c62703a 	and	r17,r7,r17
    b324:	b5c03fcc 	andi	r23,r22,255
    b328:	10006c26 	beq	r2,zero,b4dc <__divdf3+0x24c>
    b32c:	00c1ffc4 	movi	r3,2047
    b330:	10c06426 	beq	r2,r3,b4c4 <__divdf3+0x234>
    b334:	88c00434 	orhi	r3,r17,16
    b338:	180690fa 	slli	r3,r3,3
    b33c:	3022d77a 	srli	r17,r6,29
    b340:	301090fa 	slli	r8,r6,3
    b344:	10bf0044 	addi	r2,r2,-1023
    b348:	88e2b03a 	or	r17,r17,r3
    b34c:	000f883a 	mov	r7,zero
    b350:	a58cf03a 	xor	r6,r20,r22
    b354:	3cc8b03a 	or	r4,r7,r19
    b358:	a8abc83a 	sub	r21,r21,r2
    b35c:	008003c4 	movi	r2,15
    b360:	3007883a 	mov	r3,r6
    b364:	34c03fcc 	andi	r19,r6,255
    b368:	11009036 	bltu	r2,r4,b5ac <__divdf3+0x31c>
    b36c:	200890ba 	slli	r4,r4,2
    b370:	00800074 	movhi	r2,1
    b374:	10ace104 	addi	r2,r2,-19580
    b378:	2089883a 	add	r4,r4,r2
    b37c:	20800017 	ldw	r2,0(r4)
    b380:	1000683a 	jmp	r2
    b384:	0000b5ac 	andhi	zero,zero,726
    b388:	0000b3fc 	xorhi	zero,zero,719
    b38c:	0000b59c 	xori	zero,zero,726
    b390:	0000b3f0 	cmpltui	zero,zero,719
    b394:	0000b59c 	xori	zero,zero,726
    b398:	0000b570 	cmpltui	zero,zero,725
    b39c:	0000b59c 	xori	zero,zero,726
    b3a0:	0000b3f0 	cmpltui	zero,zero,719
    b3a4:	0000b3fc 	xorhi	zero,zero,719
    b3a8:	0000b3fc 	xorhi	zero,zero,719
    b3ac:	0000b570 	cmpltui	zero,zero,725
    b3b0:	0000b3f0 	cmpltui	zero,zero,719
    b3b4:	0000b3e0 	cmpeqi	zero,zero,719
    b3b8:	0000b3e0 	cmpeqi	zero,zero,719
    b3bc:	0000b3e0 	cmpeqi	zero,zero,719
    b3c0:	0000b890 	cmplti	zero,zero,738
    b3c4:	2404b03a 	or	r2,r4,r16
    b3c8:	1000661e 	bne	r2,zero,b564 <__divdf3+0x2d4>
    b3cc:	04c00204 	movi	r19,8
    b3d0:	0021883a 	mov	r16,zero
    b3d4:	0025883a 	mov	r18,zero
    b3d8:	02400084 	movi	r9,2
    b3dc:	003fca06 	br	b308 <__alt_data_end+0xf800b308>
    b3e0:	8023883a 	mov	r17,r16
    b3e4:	9011883a 	mov	r8,r18
    b3e8:	e02f883a 	mov	r23,fp
    b3ec:	480f883a 	mov	r7,r9
    b3f0:	00800084 	movi	r2,2
    b3f4:	3881311e 	bne	r7,r2,b8bc <__divdf3+0x62c>
    b3f8:	b827883a 	mov	r19,r23
    b3fc:	98c0004c 	andi	r3,r19,1
    b400:	0081ffc4 	movi	r2,2047
    b404:	000b883a 	mov	r5,zero
    b408:	0025883a 	mov	r18,zero
    b40c:	1004953a 	slli	r2,r2,20
    b410:	18c03fcc 	andi	r3,r3,255
    b414:	04400434 	movhi	r17,16
    b418:	8c7fffc4 	addi	r17,r17,-1
    b41c:	180697fa 	slli	r3,r3,31
    b420:	2c4a703a 	and	r5,r5,r17
    b424:	288ab03a 	or	r5,r5,r2
    b428:	28c6b03a 	or	r3,r5,r3
    b42c:	9005883a 	mov	r2,r18
    b430:	dfc00d17 	ldw	ra,52(sp)
    b434:	df000c17 	ldw	fp,48(sp)
    b438:	ddc00b17 	ldw	r23,44(sp)
    b43c:	dd800a17 	ldw	r22,40(sp)
    b440:	dd400917 	ldw	r21,36(sp)
    b444:	dd000817 	ldw	r20,32(sp)
    b448:	dcc00717 	ldw	r19,28(sp)
    b44c:	dc800617 	ldw	r18,24(sp)
    b450:	dc400517 	ldw	r17,20(sp)
    b454:	dc000417 	ldw	r16,16(sp)
    b458:	dec00e04 	addi	sp,sp,56
    b45c:	f800283a 	ret
    b460:	2404b03a 	or	r2,r4,r16
    b464:	2027883a 	mov	r19,r4
    b468:	10003926 	beq	r2,zero,b550 <__divdf3+0x2c0>
    b46c:	80012e26 	beq	r16,zero,b928 <__divdf3+0x698>
    b470:	8009883a 	mov	r4,r16
    b474:	d9800315 	stw	r6,12(sp)
    b478:	d9c00215 	stw	r7,8(sp)
    b47c:	000cfe80 	call	cfe8 <__clzsi2>
    b480:	d9800317 	ldw	r6,12(sp)
    b484:	d9c00217 	ldw	r7,8(sp)
    b488:	113ffd44 	addi	r4,r2,-11
    b48c:	00c00704 	movi	r3,28
    b490:	19012116 	blt	r3,r4,b918 <__divdf3+0x688>
    b494:	00c00744 	movi	r3,29
    b498:	147ffe04 	addi	r17,r2,-8
    b49c:	1907c83a 	sub	r3,r3,r4
    b4a0:	8460983a 	sll	r16,r16,r17
    b4a4:	98c6d83a 	srl	r3,r19,r3
    b4a8:	9c64983a 	sll	r18,r19,r17
    b4ac:	1c20b03a 	or	r16,r3,r16
    b4b0:	1080fcc4 	addi	r2,r2,1011
    b4b4:	00abc83a 	sub	r21,zero,r2
    b4b8:	0027883a 	mov	r19,zero
    b4bc:	0013883a 	mov	r9,zero
    b4c0:	003f9106 	br	b308 <__alt_data_end+0xf800b308>
    b4c4:	3446b03a 	or	r3,r6,r17
    b4c8:	18001f1e 	bne	r3,zero,b548 <__divdf3+0x2b8>
    b4cc:	0023883a 	mov	r17,zero
    b4d0:	0011883a 	mov	r8,zero
    b4d4:	01c00084 	movi	r7,2
    b4d8:	003f9d06 	br	b350 <__alt_data_end+0xf800b350>
    b4dc:	3446b03a 	or	r3,r6,r17
    b4e0:	18001526 	beq	r3,zero,b538 <__divdf3+0x2a8>
    b4e4:	88011b26 	beq	r17,zero,b954 <__divdf3+0x6c4>
    b4e8:	8809883a 	mov	r4,r17
    b4ec:	d9800315 	stw	r6,12(sp)
    b4f0:	da400115 	stw	r9,4(sp)
    b4f4:	000cfe80 	call	cfe8 <__clzsi2>
    b4f8:	d9800317 	ldw	r6,12(sp)
    b4fc:	da400117 	ldw	r9,4(sp)
    b500:	113ffd44 	addi	r4,r2,-11
    b504:	00c00704 	movi	r3,28
    b508:	19010e16 	blt	r3,r4,b944 <__divdf3+0x6b4>
    b50c:	00c00744 	movi	r3,29
    b510:	123ffe04 	addi	r8,r2,-8
    b514:	1907c83a 	sub	r3,r3,r4
    b518:	8a22983a 	sll	r17,r17,r8
    b51c:	30c6d83a 	srl	r3,r6,r3
    b520:	3210983a 	sll	r8,r6,r8
    b524:	1c62b03a 	or	r17,r3,r17
    b528:	1080fcc4 	addi	r2,r2,1011
    b52c:	0085c83a 	sub	r2,zero,r2
    b530:	000f883a 	mov	r7,zero
    b534:	003f8606 	br	b350 <__alt_data_end+0xf800b350>
    b538:	0023883a 	mov	r17,zero
    b53c:	0011883a 	mov	r8,zero
    b540:	01c00044 	movi	r7,1
    b544:	003f8206 	br	b350 <__alt_data_end+0xf800b350>
    b548:	01c000c4 	movi	r7,3
    b54c:	003f8006 	br	b350 <__alt_data_end+0xf800b350>
    b550:	04c00104 	movi	r19,4
    b554:	0021883a 	mov	r16,zero
    b558:	0025883a 	mov	r18,zero
    b55c:	02400044 	movi	r9,1
    b560:	003f6906 	br	b308 <__alt_data_end+0xf800b308>
    b564:	04c00304 	movi	r19,12
    b568:	024000c4 	movi	r9,3
    b56c:	003f6606 	br	b308 <__alt_data_end+0xf800b308>
    b570:	01400434 	movhi	r5,16
    b574:	0007883a 	mov	r3,zero
    b578:	297fffc4 	addi	r5,r5,-1
    b57c:	04bfffc4 	movi	r18,-1
    b580:	0081ffc4 	movi	r2,2047
    b584:	003fa106 	br	b40c <__alt_data_end+0xf800b40c>
    b588:	00c00044 	movi	r3,1
    b58c:	1887c83a 	sub	r3,r3,r2
    b590:	01000e04 	movi	r4,56
    b594:	20c1210e 	bge	r4,r3,ba1c <__divdf3+0x78c>
    b598:	98c0004c 	andi	r3,r19,1
    b59c:	0005883a 	mov	r2,zero
    b5a0:	000b883a 	mov	r5,zero
    b5a4:	0025883a 	mov	r18,zero
    b5a8:	003f9806 	br	b40c <__alt_data_end+0xf800b40c>
    b5ac:	8c00fd36 	bltu	r17,r16,b9a4 <__divdf3+0x714>
    b5b0:	8440fb26 	beq	r16,r17,b9a0 <__divdf3+0x710>
    b5b4:	8007883a 	mov	r3,r16
    b5b8:	ad7fffc4 	addi	r21,r21,-1
    b5bc:	0021883a 	mov	r16,zero
    b5c0:	4004d63a 	srli	r2,r8,24
    b5c4:	8822923a 	slli	r17,r17,8
    b5c8:	1809883a 	mov	r4,r3
    b5cc:	402c923a 	slli	r22,r8,8
    b5d0:	88b8b03a 	or	fp,r17,r2
    b5d4:	e028d43a 	srli	r20,fp,16
    b5d8:	d8c00015 	stw	r3,0(sp)
    b5dc:	e5ffffcc 	andi	r23,fp,65535
    b5e0:	a00b883a 	mov	r5,r20
    b5e4:	000a9280 	call	a928 <__udivsi3>
    b5e8:	d8c00017 	ldw	r3,0(sp)
    b5ec:	a00b883a 	mov	r5,r20
    b5f0:	d8800315 	stw	r2,12(sp)
    b5f4:	1809883a 	mov	r4,r3
    b5f8:	000a98c0 	call	a98c <__umodsi3>
    b5fc:	d9800317 	ldw	r6,12(sp)
    b600:	1006943a 	slli	r3,r2,16
    b604:	9004d43a 	srli	r2,r18,16
    b608:	b9a3383a 	mul	r17,r23,r6
    b60c:	10c4b03a 	or	r2,r2,r3
    b610:	1440062e 	bgeu	r2,r17,b62c <__divdf3+0x39c>
    b614:	1705883a 	add	r2,r2,fp
    b618:	30ffffc4 	addi	r3,r6,-1
    b61c:	1700ee36 	bltu	r2,fp,b9d8 <__divdf3+0x748>
    b620:	1440ed2e 	bgeu	r2,r17,b9d8 <__divdf3+0x748>
    b624:	31bfff84 	addi	r6,r6,-2
    b628:	1705883a 	add	r2,r2,fp
    b62c:	1463c83a 	sub	r17,r2,r17
    b630:	a00b883a 	mov	r5,r20
    b634:	8809883a 	mov	r4,r17
    b638:	d9800315 	stw	r6,12(sp)
    b63c:	000a9280 	call	a928 <__udivsi3>
    b640:	a00b883a 	mov	r5,r20
    b644:	8809883a 	mov	r4,r17
    b648:	d8800215 	stw	r2,8(sp)
    b64c:	000a98c0 	call	a98c <__umodsi3>
    b650:	d9c00217 	ldw	r7,8(sp)
    b654:	1004943a 	slli	r2,r2,16
    b658:	94bfffcc 	andi	r18,r18,65535
    b65c:	b9d1383a 	mul	r8,r23,r7
    b660:	90a4b03a 	or	r18,r18,r2
    b664:	d9800317 	ldw	r6,12(sp)
    b668:	9200062e 	bgeu	r18,r8,b684 <__divdf3+0x3f4>
    b66c:	9725883a 	add	r18,r18,fp
    b670:	38bfffc4 	addi	r2,r7,-1
    b674:	9700d636 	bltu	r18,fp,b9d0 <__divdf3+0x740>
    b678:	9200d52e 	bgeu	r18,r8,b9d0 <__divdf3+0x740>
    b67c:	39ffff84 	addi	r7,r7,-2
    b680:	9725883a 	add	r18,r18,fp
    b684:	3004943a 	slli	r2,r6,16
    b688:	b012d43a 	srli	r9,r22,16
    b68c:	b1bfffcc 	andi	r6,r22,65535
    b690:	11e2b03a 	or	r17,r2,r7
    b694:	8806d43a 	srli	r3,r17,16
    b698:	893fffcc 	andi	r4,r17,65535
    b69c:	218b383a 	mul	r5,r4,r6
    b6a0:	30c5383a 	mul	r2,r6,r3
    b6a4:	2249383a 	mul	r4,r4,r9
    b6a8:	280ed43a 	srli	r7,r5,16
    b6ac:	9225c83a 	sub	r18,r18,r8
    b6b0:	2089883a 	add	r4,r4,r2
    b6b4:	3909883a 	add	r4,r7,r4
    b6b8:	1a47383a 	mul	r3,r3,r9
    b6bc:	2080022e 	bgeu	r4,r2,b6c8 <__divdf3+0x438>
    b6c0:	00800074 	movhi	r2,1
    b6c4:	1887883a 	add	r3,r3,r2
    b6c8:	2004d43a 	srli	r2,r4,16
    b6cc:	2008943a 	slli	r4,r4,16
    b6d0:	297fffcc 	andi	r5,r5,65535
    b6d4:	10c7883a 	add	r3,r2,r3
    b6d8:	2149883a 	add	r4,r4,r5
    b6dc:	90c0a536 	bltu	r18,r3,b974 <__divdf3+0x6e4>
    b6e0:	90c0bf26 	beq	r18,r3,b9e0 <__divdf3+0x750>
    b6e4:	90c7c83a 	sub	r3,r18,r3
    b6e8:	810fc83a 	sub	r7,r16,r4
    b6ec:	81e5803a 	cmpltu	r18,r16,r7
    b6f0:	1ca5c83a 	sub	r18,r3,r18
    b6f4:	e480c126 	beq	fp,r18,b9fc <__divdf3+0x76c>
    b6f8:	a00b883a 	mov	r5,r20
    b6fc:	9009883a 	mov	r4,r18
    b700:	d9800315 	stw	r6,12(sp)
    b704:	d9c00215 	stw	r7,8(sp)
    b708:	da400115 	stw	r9,4(sp)
    b70c:	000a9280 	call	a928 <__udivsi3>
    b710:	a00b883a 	mov	r5,r20
    b714:	9009883a 	mov	r4,r18
    b718:	d8800015 	stw	r2,0(sp)
    b71c:	000a98c0 	call	a98c <__umodsi3>
    b720:	d9c00217 	ldw	r7,8(sp)
    b724:	da000017 	ldw	r8,0(sp)
    b728:	1006943a 	slli	r3,r2,16
    b72c:	3804d43a 	srli	r2,r7,16
    b730:	ba21383a 	mul	r16,r23,r8
    b734:	d9800317 	ldw	r6,12(sp)
    b738:	10c4b03a 	or	r2,r2,r3
    b73c:	da400117 	ldw	r9,4(sp)
    b740:	1400062e 	bgeu	r2,r16,b75c <__divdf3+0x4cc>
    b744:	1705883a 	add	r2,r2,fp
    b748:	40ffffc4 	addi	r3,r8,-1
    b74c:	1700ad36 	bltu	r2,fp,ba04 <__divdf3+0x774>
    b750:	1400ac2e 	bgeu	r2,r16,ba04 <__divdf3+0x774>
    b754:	423fff84 	addi	r8,r8,-2
    b758:	1705883a 	add	r2,r2,fp
    b75c:	1421c83a 	sub	r16,r2,r16
    b760:	a00b883a 	mov	r5,r20
    b764:	8009883a 	mov	r4,r16
    b768:	d9800315 	stw	r6,12(sp)
    b76c:	d9c00215 	stw	r7,8(sp)
    b770:	da000015 	stw	r8,0(sp)
    b774:	da400115 	stw	r9,4(sp)
    b778:	000a9280 	call	a928 <__udivsi3>
    b77c:	8009883a 	mov	r4,r16
    b780:	a00b883a 	mov	r5,r20
    b784:	1025883a 	mov	r18,r2
    b788:	000a98c0 	call	a98c <__umodsi3>
    b78c:	d9c00217 	ldw	r7,8(sp)
    b790:	1004943a 	slli	r2,r2,16
    b794:	bcaf383a 	mul	r23,r23,r18
    b798:	393fffcc 	andi	r4,r7,65535
    b79c:	2088b03a 	or	r4,r4,r2
    b7a0:	d9800317 	ldw	r6,12(sp)
    b7a4:	da000017 	ldw	r8,0(sp)
    b7a8:	da400117 	ldw	r9,4(sp)
    b7ac:	25c0062e 	bgeu	r4,r23,b7c8 <__divdf3+0x538>
    b7b0:	2709883a 	add	r4,r4,fp
    b7b4:	90bfffc4 	addi	r2,r18,-1
    b7b8:	27009436 	bltu	r4,fp,ba0c <__divdf3+0x77c>
    b7bc:	25c0932e 	bgeu	r4,r23,ba0c <__divdf3+0x77c>
    b7c0:	94bfff84 	addi	r18,r18,-2
    b7c4:	2709883a 	add	r4,r4,fp
    b7c8:	4004943a 	slli	r2,r8,16
    b7cc:	25efc83a 	sub	r23,r4,r23
    b7d0:	1490b03a 	or	r8,r2,r18
    b7d4:	4008d43a 	srli	r4,r8,16
    b7d8:	40ffffcc 	andi	r3,r8,65535
    b7dc:	30c5383a 	mul	r2,r6,r3
    b7e0:	1a47383a 	mul	r3,r3,r9
    b7e4:	310d383a 	mul	r6,r6,r4
    b7e8:	100ad43a 	srli	r5,r2,16
    b7ec:	4913383a 	mul	r9,r9,r4
    b7f0:	1987883a 	add	r3,r3,r6
    b7f4:	28c7883a 	add	r3,r5,r3
    b7f8:	1980022e 	bgeu	r3,r6,b804 <__divdf3+0x574>
    b7fc:	01000074 	movhi	r4,1
    b800:	4913883a 	add	r9,r9,r4
    b804:	1808d43a 	srli	r4,r3,16
    b808:	1806943a 	slli	r3,r3,16
    b80c:	10bfffcc 	andi	r2,r2,65535
    b810:	2253883a 	add	r9,r4,r9
    b814:	1887883a 	add	r3,r3,r2
    b818:	ba403836 	bltu	r23,r9,b8fc <__divdf3+0x66c>
    b81c:	ba403626 	beq	r23,r9,b8f8 <__divdf3+0x668>
    b820:	42000054 	ori	r8,r8,1
    b824:	a880ffc4 	addi	r2,r21,1023
    b828:	00bf570e 	bge	zero,r2,b588 <__alt_data_end+0xf800b588>
    b82c:	40c001cc 	andi	r3,r8,7
    b830:	18000726 	beq	r3,zero,b850 <__divdf3+0x5c0>
    b834:	40c003cc 	andi	r3,r8,15
    b838:	01000104 	movi	r4,4
    b83c:	19000426 	beq	r3,r4,b850 <__divdf3+0x5c0>
    b840:	4107883a 	add	r3,r8,r4
    b844:	1a11803a 	cmpltu	r8,r3,r8
    b848:	8a23883a 	add	r17,r17,r8
    b84c:	1811883a 	mov	r8,r3
    b850:	88c0402c 	andhi	r3,r17,256
    b854:	18000426 	beq	r3,zero,b868 <__divdf3+0x5d8>
    b858:	00ffc034 	movhi	r3,65280
    b85c:	18ffffc4 	addi	r3,r3,-1
    b860:	a8810004 	addi	r2,r21,1024
    b864:	88e2703a 	and	r17,r17,r3
    b868:	00c1ff84 	movi	r3,2046
    b86c:	18bee316 	blt	r3,r2,b3fc <__alt_data_end+0xf800b3fc>
    b870:	8824977a 	slli	r18,r17,29
    b874:	4010d0fa 	srli	r8,r8,3
    b878:	8822927a 	slli	r17,r17,9
    b87c:	1081ffcc 	andi	r2,r2,2047
    b880:	9224b03a 	or	r18,r18,r8
    b884:	880ad33a 	srli	r5,r17,12
    b888:	98c0004c 	andi	r3,r19,1
    b88c:	003edf06 	br	b40c <__alt_data_end+0xf800b40c>
    b890:	8080022c 	andhi	r2,r16,8
    b894:	10001226 	beq	r2,zero,b8e0 <__divdf3+0x650>
    b898:	8880022c 	andhi	r2,r17,8
    b89c:	1000101e 	bne	r2,zero,b8e0 <__divdf3+0x650>
    b8a0:	00800434 	movhi	r2,16
    b8a4:	89400234 	orhi	r5,r17,8
    b8a8:	10bfffc4 	addi	r2,r2,-1
    b8ac:	b007883a 	mov	r3,r22
    b8b0:	288a703a 	and	r5,r5,r2
    b8b4:	4025883a 	mov	r18,r8
    b8b8:	003f3106 	br	b580 <__alt_data_end+0xf800b580>
    b8bc:	008000c4 	movi	r2,3
    b8c0:	3880a626 	beq	r7,r2,bb5c <__divdf3+0x8cc>
    b8c4:	00800044 	movi	r2,1
    b8c8:	3880521e 	bne	r7,r2,ba14 <__divdf3+0x784>
    b8cc:	b807883a 	mov	r3,r23
    b8d0:	0005883a 	mov	r2,zero
    b8d4:	000b883a 	mov	r5,zero
    b8d8:	0025883a 	mov	r18,zero
    b8dc:	003ecb06 	br	b40c <__alt_data_end+0xf800b40c>
    b8e0:	00800434 	movhi	r2,16
    b8e4:	81400234 	orhi	r5,r16,8
    b8e8:	10bfffc4 	addi	r2,r2,-1
    b8ec:	a007883a 	mov	r3,r20
    b8f0:	288a703a 	and	r5,r5,r2
    b8f4:	003f2206 	br	b580 <__alt_data_end+0xf800b580>
    b8f8:	183fca26 	beq	r3,zero,b824 <__alt_data_end+0xf800b824>
    b8fc:	e5ef883a 	add	r23,fp,r23
    b900:	40bfffc4 	addi	r2,r8,-1
    b904:	bf00392e 	bgeu	r23,fp,b9ec <__divdf3+0x75c>
    b908:	1011883a 	mov	r8,r2
    b90c:	ba7fc41e 	bne	r23,r9,b820 <__alt_data_end+0xf800b820>
    b910:	b0ffc31e 	bne	r22,r3,b820 <__alt_data_end+0xf800b820>
    b914:	003fc306 	br	b824 <__alt_data_end+0xf800b824>
    b918:	143ff604 	addi	r16,r2,-40
    b91c:	9c20983a 	sll	r16,r19,r16
    b920:	0025883a 	mov	r18,zero
    b924:	003ee206 	br	b4b0 <__alt_data_end+0xf800b4b0>
    b928:	d9800315 	stw	r6,12(sp)
    b92c:	d9c00215 	stw	r7,8(sp)
    b930:	000cfe80 	call	cfe8 <__clzsi2>
    b934:	10800804 	addi	r2,r2,32
    b938:	d9c00217 	ldw	r7,8(sp)
    b93c:	d9800317 	ldw	r6,12(sp)
    b940:	003ed106 	br	b488 <__alt_data_end+0xf800b488>
    b944:	147ff604 	addi	r17,r2,-40
    b948:	3462983a 	sll	r17,r6,r17
    b94c:	0011883a 	mov	r8,zero
    b950:	003ef506 	br	b528 <__alt_data_end+0xf800b528>
    b954:	3009883a 	mov	r4,r6
    b958:	d9800315 	stw	r6,12(sp)
    b95c:	da400115 	stw	r9,4(sp)
    b960:	000cfe80 	call	cfe8 <__clzsi2>
    b964:	10800804 	addi	r2,r2,32
    b968:	da400117 	ldw	r9,4(sp)
    b96c:	d9800317 	ldw	r6,12(sp)
    b970:	003ee306 	br	b500 <__alt_data_end+0xf800b500>
    b974:	85a1883a 	add	r16,r16,r22
    b978:	8585803a 	cmpltu	r2,r16,r22
    b97c:	1705883a 	add	r2,r2,fp
    b980:	14a5883a 	add	r18,r2,r18
    b984:	88bfffc4 	addi	r2,r17,-1
    b988:	e4800c2e 	bgeu	fp,r18,b9bc <__divdf3+0x72c>
    b98c:	90c03e36 	bltu	r18,r3,ba88 <__divdf3+0x7f8>
    b990:	1c806926 	beq	r3,r18,bb38 <__divdf3+0x8a8>
    b994:	90c7c83a 	sub	r3,r18,r3
    b998:	1023883a 	mov	r17,r2
    b99c:	003f5206 	br	b6e8 <__alt_data_end+0xf800b6e8>
    b9a0:	923f0436 	bltu	r18,r8,b5b4 <__alt_data_end+0xf800b5b4>
    b9a4:	800897fa 	slli	r4,r16,31
    b9a8:	9004d07a 	srli	r2,r18,1
    b9ac:	8006d07a 	srli	r3,r16,1
    b9b0:	902097fa 	slli	r16,r18,31
    b9b4:	20a4b03a 	or	r18,r4,r2
    b9b8:	003f0106 	br	b5c0 <__alt_data_end+0xf800b5c0>
    b9bc:	e4bff51e 	bne	fp,r18,b994 <__alt_data_end+0xf800b994>
    b9c0:	85bff22e 	bgeu	r16,r22,b98c <__alt_data_end+0xf800b98c>
    b9c4:	e0c7c83a 	sub	r3,fp,r3
    b9c8:	1023883a 	mov	r17,r2
    b9cc:	003f4606 	br	b6e8 <__alt_data_end+0xf800b6e8>
    b9d0:	100f883a 	mov	r7,r2
    b9d4:	003f2b06 	br	b684 <__alt_data_end+0xf800b684>
    b9d8:	180d883a 	mov	r6,r3
    b9dc:	003f1306 	br	b62c <__alt_data_end+0xf800b62c>
    b9e0:	813fe436 	bltu	r16,r4,b974 <__alt_data_end+0xf800b974>
    b9e4:	0007883a 	mov	r3,zero
    b9e8:	003f3f06 	br	b6e8 <__alt_data_end+0xf800b6e8>
    b9ec:	ba402c36 	bltu	r23,r9,baa0 <__divdf3+0x810>
    b9f0:	4dc05426 	beq	r9,r23,bb44 <__divdf3+0x8b4>
    b9f4:	1011883a 	mov	r8,r2
    b9f8:	003f8906 	br	b820 <__alt_data_end+0xf800b820>
    b9fc:	023fffc4 	movi	r8,-1
    ba00:	003f8806 	br	b824 <__alt_data_end+0xf800b824>
    ba04:	1811883a 	mov	r8,r3
    ba08:	003f5406 	br	b75c <__alt_data_end+0xf800b75c>
    ba0c:	1025883a 	mov	r18,r2
    ba10:	003f6d06 	br	b7c8 <__alt_data_end+0xf800b7c8>
    ba14:	b827883a 	mov	r19,r23
    ba18:	003f8206 	br	b824 <__alt_data_end+0xf800b824>
    ba1c:	010007c4 	movi	r4,31
    ba20:	20c02616 	blt	r4,r3,babc <__divdf3+0x82c>
    ba24:	00800804 	movi	r2,32
    ba28:	10c5c83a 	sub	r2,r2,r3
    ba2c:	888a983a 	sll	r5,r17,r2
    ba30:	40c8d83a 	srl	r4,r8,r3
    ba34:	4084983a 	sll	r2,r8,r2
    ba38:	88e2d83a 	srl	r17,r17,r3
    ba3c:	2906b03a 	or	r3,r5,r4
    ba40:	1004c03a 	cmpne	r2,r2,zero
    ba44:	1886b03a 	or	r3,r3,r2
    ba48:	188001cc 	andi	r2,r3,7
    ba4c:	10000726 	beq	r2,zero,ba6c <__divdf3+0x7dc>
    ba50:	188003cc 	andi	r2,r3,15
    ba54:	01000104 	movi	r4,4
    ba58:	11000426 	beq	r2,r4,ba6c <__divdf3+0x7dc>
    ba5c:	1805883a 	mov	r2,r3
    ba60:	10c00104 	addi	r3,r2,4
    ba64:	1885803a 	cmpltu	r2,r3,r2
    ba68:	88a3883a 	add	r17,r17,r2
    ba6c:	8880202c 	andhi	r2,r17,128
    ba70:	10002726 	beq	r2,zero,bb10 <__divdf3+0x880>
    ba74:	98c0004c 	andi	r3,r19,1
    ba78:	00800044 	movi	r2,1
    ba7c:	000b883a 	mov	r5,zero
    ba80:	0025883a 	mov	r18,zero
    ba84:	003e6106 	br	b40c <__alt_data_end+0xf800b40c>
    ba88:	85a1883a 	add	r16,r16,r22
    ba8c:	8585803a 	cmpltu	r2,r16,r22
    ba90:	1705883a 	add	r2,r2,fp
    ba94:	14a5883a 	add	r18,r2,r18
    ba98:	8c7fff84 	addi	r17,r17,-2
    ba9c:	003f1106 	br	b6e4 <__alt_data_end+0xf800b6e4>
    baa0:	b589883a 	add	r4,r22,r22
    baa4:	25ad803a 	cmpltu	r22,r4,r22
    baa8:	b739883a 	add	fp,r22,fp
    baac:	40bfff84 	addi	r2,r8,-2
    bab0:	bf2f883a 	add	r23,r23,fp
    bab4:	202d883a 	mov	r22,r4
    bab8:	003f9306 	br	b908 <__alt_data_end+0xf800b908>
    babc:	013ff844 	movi	r4,-31
    bac0:	2085c83a 	sub	r2,r4,r2
    bac4:	8888d83a 	srl	r4,r17,r2
    bac8:	00800804 	movi	r2,32
    bacc:	18802126 	beq	r3,r2,bb54 <__divdf3+0x8c4>
    bad0:	00801004 	movi	r2,64
    bad4:	10c5c83a 	sub	r2,r2,r3
    bad8:	8884983a 	sll	r2,r17,r2
    badc:	1204b03a 	or	r2,r2,r8
    bae0:	1004c03a 	cmpne	r2,r2,zero
    bae4:	2084b03a 	or	r2,r4,r2
    bae8:	144001cc 	andi	r17,r2,7
    baec:	88000d1e 	bne	r17,zero,bb24 <__divdf3+0x894>
    baf0:	000b883a 	mov	r5,zero
    baf4:	1024d0fa 	srli	r18,r2,3
    baf8:	98c0004c 	andi	r3,r19,1
    bafc:	0005883a 	mov	r2,zero
    bb00:	9464b03a 	or	r18,r18,r17
    bb04:	003e4106 	br	b40c <__alt_data_end+0xf800b40c>
    bb08:	1007883a 	mov	r3,r2
    bb0c:	0023883a 	mov	r17,zero
    bb10:	880a927a 	slli	r5,r17,9
    bb14:	1805883a 	mov	r2,r3
    bb18:	8822977a 	slli	r17,r17,29
    bb1c:	280ad33a 	srli	r5,r5,12
    bb20:	003ff406 	br	baf4 <__alt_data_end+0xf800baf4>
    bb24:	10c003cc 	andi	r3,r2,15
    bb28:	01000104 	movi	r4,4
    bb2c:	193ff626 	beq	r3,r4,bb08 <__alt_data_end+0xf800bb08>
    bb30:	0023883a 	mov	r17,zero
    bb34:	003fca06 	br	ba60 <__alt_data_end+0xf800ba60>
    bb38:	813fd336 	bltu	r16,r4,ba88 <__alt_data_end+0xf800ba88>
    bb3c:	1023883a 	mov	r17,r2
    bb40:	003fa806 	br	b9e4 <__alt_data_end+0xf800b9e4>
    bb44:	b0ffd636 	bltu	r22,r3,baa0 <__alt_data_end+0xf800baa0>
    bb48:	1011883a 	mov	r8,r2
    bb4c:	b0ff341e 	bne	r22,r3,b820 <__alt_data_end+0xf800b820>
    bb50:	003f3406 	br	b824 <__alt_data_end+0xf800b824>
    bb54:	0005883a 	mov	r2,zero
    bb58:	003fe006 	br	badc <__alt_data_end+0xf800badc>
    bb5c:	00800434 	movhi	r2,16
    bb60:	89400234 	orhi	r5,r17,8
    bb64:	10bfffc4 	addi	r2,r2,-1
    bb68:	b807883a 	mov	r3,r23
    bb6c:	288a703a 	and	r5,r5,r2
    bb70:	4025883a 	mov	r18,r8
    bb74:	003e8206 	br	b580 <__alt_data_end+0xf800b580>

0000bb78 <__eqdf2>:
    bb78:	2804d53a 	srli	r2,r5,20
    bb7c:	3806d53a 	srli	r3,r7,20
    bb80:	02000434 	movhi	r8,16
    bb84:	423fffc4 	addi	r8,r8,-1
    bb88:	1081ffcc 	andi	r2,r2,2047
    bb8c:	0281ffc4 	movi	r10,2047
    bb90:	2a12703a 	and	r9,r5,r8
    bb94:	18c1ffcc 	andi	r3,r3,2047
    bb98:	3a10703a 	and	r8,r7,r8
    bb9c:	280ad7fa 	srli	r5,r5,31
    bba0:	380ed7fa 	srli	r7,r7,31
    bba4:	12801026 	beq	r2,r10,bbe8 <__eqdf2+0x70>
    bba8:	0281ffc4 	movi	r10,2047
    bbac:	1a800a26 	beq	r3,r10,bbd8 <__eqdf2+0x60>
    bbb0:	10c00226 	beq	r2,r3,bbbc <__eqdf2+0x44>
    bbb4:	00800044 	movi	r2,1
    bbb8:	f800283a 	ret
    bbbc:	4a3ffd1e 	bne	r9,r8,bbb4 <__alt_data_end+0xf800bbb4>
    bbc0:	21bffc1e 	bne	r4,r6,bbb4 <__alt_data_end+0xf800bbb4>
    bbc4:	29c00c26 	beq	r5,r7,bbf8 <__eqdf2+0x80>
    bbc8:	103ffa1e 	bne	r2,zero,bbb4 <__alt_data_end+0xf800bbb4>
    bbcc:	2244b03a 	or	r2,r4,r9
    bbd0:	1004c03a 	cmpne	r2,r2,zero
    bbd4:	f800283a 	ret
    bbd8:	3214b03a 	or	r10,r6,r8
    bbdc:	503ff426 	beq	r10,zero,bbb0 <__alt_data_end+0xf800bbb0>
    bbe0:	00800044 	movi	r2,1
    bbe4:	f800283a 	ret
    bbe8:	2254b03a 	or	r10,r4,r9
    bbec:	503fee26 	beq	r10,zero,bba8 <__alt_data_end+0xf800bba8>
    bbf0:	00800044 	movi	r2,1
    bbf4:	f800283a 	ret
    bbf8:	0005883a 	mov	r2,zero
    bbfc:	f800283a 	ret

0000bc00 <__gedf2>:
    bc00:	2804d53a 	srli	r2,r5,20
    bc04:	3806d53a 	srli	r3,r7,20
    bc08:	02000434 	movhi	r8,16
    bc0c:	423fffc4 	addi	r8,r8,-1
    bc10:	1081ffcc 	andi	r2,r2,2047
    bc14:	0241ffc4 	movi	r9,2047
    bc18:	2a14703a 	and	r10,r5,r8
    bc1c:	18c1ffcc 	andi	r3,r3,2047
    bc20:	3a10703a 	and	r8,r7,r8
    bc24:	280ad7fa 	srli	r5,r5,31
    bc28:	380ed7fa 	srli	r7,r7,31
    bc2c:	12401d26 	beq	r2,r9,bca4 <__gedf2+0xa4>
    bc30:	0241ffc4 	movi	r9,2047
    bc34:	1a401226 	beq	r3,r9,bc80 <__gedf2+0x80>
    bc38:	1000081e 	bne	r2,zero,bc5c <__gedf2+0x5c>
    bc3c:	2296b03a 	or	r11,r4,r10
    bc40:	5813003a 	cmpeq	r9,r11,zero
    bc44:	1800091e 	bne	r3,zero,bc6c <__gedf2+0x6c>
    bc48:	3218b03a 	or	r12,r6,r8
    bc4c:	6000071e 	bne	r12,zero,bc6c <__gedf2+0x6c>
    bc50:	0005883a 	mov	r2,zero
    bc54:	5800101e 	bne	r11,zero,bc98 <__gedf2+0x98>
    bc58:	f800283a 	ret
    bc5c:	18000c1e 	bne	r3,zero,bc90 <__gedf2+0x90>
    bc60:	3212b03a 	or	r9,r6,r8
    bc64:	48000c26 	beq	r9,zero,bc98 <__gedf2+0x98>
    bc68:	0013883a 	mov	r9,zero
    bc6c:	39c03fcc 	andi	r7,r7,255
    bc70:	48000826 	beq	r9,zero,bc94 <__gedf2+0x94>
    bc74:	38000926 	beq	r7,zero,bc9c <__gedf2+0x9c>
    bc78:	00800044 	movi	r2,1
    bc7c:	f800283a 	ret
    bc80:	3212b03a 	or	r9,r6,r8
    bc84:	483fec26 	beq	r9,zero,bc38 <__alt_data_end+0xf800bc38>
    bc88:	00bfff84 	movi	r2,-2
    bc8c:	f800283a 	ret
    bc90:	39c03fcc 	andi	r7,r7,255
    bc94:	29c00626 	beq	r5,r7,bcb0 <__gedf2+0xb0>
    bc98:	283ff726 	beq	r5,zero,bc78 <__alt_data_end+0xf800bc78>
    bc9c:	00bfffc4 	movi	r2,-1
    bca0:	f800283a 	ret
    bca4:	2292b03a 	or	r9,r4,r10
    bca8:	483fe126 	beq	r9,zero,bc30 <__alt_data_end+0xf800bc30>
    bcac:	003ff606 	br	bc88 <__alt_data_end+0xf800bc88>
    bcb0:	18bff916 	blt	r3,r2,bc98 <__alt_data_end+0xf800bc98>
    bcb4:	10c00316 	blt	r2,r3,bcc4 <__gedf2+0xc4>
    bcb8:	42bff736 	bltu	r8,r10,bc98 <__alt_data_end+0xf800bc98>
    bcbc:	52000326 	beq	r10,r8,bccc <__gedf2+0xcc>
    bcc0:	5200042e 	bgeu	r10,r8,bcd4 <__gedf2+0xd4>
    bcc4:	283fec1e 	bne	r5,zero,bc78 <__alt_data_end+0xf800bc78>
    bcc8:	003ff406 	br	bc9c <__alt_data_end+0xf800bc9c>
    bccc:	313ff236 	bltu	r6,r4,bc98 <__alt_data_end+0xf800bc98>
    bcd0:	21bffc36 	bltu	r4,r6,bcc4 <__alt_data_end+0xf800bcc4>
    bcd4:	0005883a 	mov	r2,zero
    bcd8:	f800283a 	ret

0000bcdc <__ledf2>:
    bcdc:	2804d53a 	srli	r2,r5,20
    bce0:	3810d53a 	srli	r8,r7,20
    bce4:	00c00434 	movhi	r3,16
    bce8:	18ffffc4 	addi	r3,r3,-1
    bcec:	1081ffcc 	andi	r2,r2,2047
    bcf0:	0241ffc4 	movi	r9,2047
    bcf4:	28d4703a 	and	r10,r5,r3
    bcf8:	4201ffcc 	andi	r8,r8,2047
    bcfc:	38c6703a 	and	r3,r7,r3
    bd00:	280ad7fa 	srli	r5,r5,31
    bd04:	380ed7fa 	srli	r7,r7,31
    bd08:	12401f26 	beq	r2,r9,bd88 <__ledf2+0xac>
    bd0c:	0241ffc4 	movi	r9,2047
    bd10:	42401426 	beq	r8,r9,bd64 <__ledf2+0x88>
    bd14:	1000091e 	bne	r2,zero,bd3c <__ledf2+0x60>
    bd18:	2296b03a 	or	r11,r4,r10
    bd1c:	5813003a 	cmpeq	r9,r11,zero
    bd20:	29403fcc 	andi	r5,r5,255
    bd24:	40000a1e 	bne	r8,zero,bd50 <__ledf2+0x74>
    bd28:	30d8b03a 	or	r12,r6,r3
    bd2c:	6000081e 	bne	r12,zero,bd50 <__ledf2+0x74>
    bd30:	0005883a 	mov	r2,zero
    bd34:	5800111e 	bne	r11,zero,bd7c <__ledf2+0xa0>
    bd38:	f800283a 	ret
    bd3c:	29403fcc 	andi	r5,r5,255
    bd40:	40000c1e 	bne	r8,zero,bd74 <__ledf2+0x98>
    bd44:	30d2b03a 	or	r9,r6,r3
    bd48:	48000c26 	beq	r9,zero,bd7c <__ledf2+0xa0>
    bd4c:	0013883a 	mov	r9,zero
    bd50:	39c03fcc 	andi	r7,r7,255
    bd54:	48000826 	beq	r9,zero,bd78 <__ledf2+0x9c>
    bd58:	38001126 	beq	r7,zero,bda0 <__ledf2+0xc4>
    bd5c:	00800044 	movi	r2,1
    bd60:	f800283a 	ret
    bd64:	30d2b03a 	or	r9,r6,r3
    bd68:	483fea26 	beq	r9,zero,bd14 <__alt_data_end+0xf800bd14>
    bd6c:	00800084 	movi	r2,2
    bd70:	f800283a 	ret
    bd74:	39c03fcc 	andi	r7,r7,255
    bd78:	39400726 	beq	r7,r5,bd98 <__ledf2+0xbc>
    bd7c:	2800081e 	bne	r5,zero,bda0 <__ledf2+0xc4>
    bd80:	00800044 	movi	r2,1
    bd84:	f800283a 	ret
    bd88:	2292b03a 	or	r9,r4,r10
    bd8c:	483fdf26 	beq	r9,zero,bd0c <__alt_data_end+0xf800bd0c>
    bd90:	00800084 	movi	r2,2
    bd94:	f800283a 	ret
    bd98:	4080030e 	bge	r8,r2,bda8 <__ledf2+0xcc>
    bd9c:	383fef26 	beq	r7,zero,bd5c <__alt_data_end+0xf800bd5c>
    bda0:	00bfffc4 	movi	r2,-1
    bda4:	f800283a 	ret
    bda8:	123feb16 	blt	r2,r8,bd58 <__alt_data_end+0xf800bd58>
    bdac:	1abff336 	bltu	r3,r10,bd7c <__alt_data_end+0xf800bd7c>
    bdb0:	50c00326 	beq	r10,r3,bdc0 <__ledf2+0xe4>
    bdb4:	50c0042e 	bgeu	r10,r3,bdc8 <__ledf2+0xec>
    bdb8:	283fe81e 	bne	r5,zero,bd5c <__alt_data_end+0xf800bd5c>
    bdbc:	003ff806 	br	bda0 <__alt_data_end+0xf800bda0>
    bdc0:	313fee36 	bltu	r6,r4,bd7c <__alt_data_end+0xf800bd7c>
    bdc4:	21bffc36 	bltu	r4,r6,bdb8 <__alt_data_end+0xf800bdb8>
    bdc8:	0005883a 	mov	r2,zero
    bdcc:	f800283a 	ret

0000bdd0 <__muldf3>:
    bdd0:	defff304 	addi	sp,sp,-52
    bdd4:	2804d53a 	srli	r2,r5,20
    bdd8:	dd800915 	stw	r22,36(sp)
    bddc:	282cd7fa 	srli	r22,r5,31
    bde0:	dc000315 	stw	r16,12(sp)
    bde4:	04000434 	movhi	r16,16
    bde8:	dd400815 	stw	r21,32(sp)
    bdec:	dc800515 	stw	r18,20(sp)
    bdf0:	843fffc4 	addi	r16,r16,-1
    bdf4:	dfc00c15 	stw	ra,48(sp)
    bdf8:	df000b15 	stw	fp,44(sp)
    bdfc:	ddc00a15 	stw	r23,40(sp)
    be00:	dd000715 	stw	r20,28(sp)
    be04:	dcc00615 	stw	r19,24(sp)
    be08:	dc400415 	stw	r17,16(sp)
    be0c:	1481ffcc 	andi	r18,r2,2047
    be10:	2c20703a 	and	r16,r5,r16
    be14:	b02b883a 	mov	r21,r22
    be18:	b2403fcc 	andi	r9,r22,255
    be1c:	90006026 	beq	r18,zero,bfa0 <__muldf3+0x1d0>
    be20:	0081ffc4 	movi	r2,2047
    be24:	2029883a 	mov	r20,r4
    be28:	90803626 	beq	r18,r2,bf04 <__muldf3+0x134>
    be2c:	80800434 	orhi	r2,r16,16
    be30:	100490fa 	slli	r2,r2,3
    be34:	2020d77a 	srli	r16,r4,29
    be38:	202890fa 	slli	r20,r4,3
    be3c:	94bf0044 	addi	r18,r18,-1023
    be40:	80a0b03a 	or	r16,r16,r2
    be44:	0027883a 	mov	r19,zero
    be48:	0039883a 	mov	fp,zero
    be4c:	3804d53a 	srli	r2,r7,20
    be50:	382ed7fa 	srli	r23,r7,31
    be54:	04400434 	movhi	r17,16
    be58:	8c7fffc4 	addi	r17,r17,-1
    be5c:	1081ffcc 	andi	r2,r2,2047
    be60:	3011883a 	mov	r8,r6
    be64:	3c62703a 	and	r17,r7,r17
    be68:	ba803fcc 	andi	r10,r23,255
    be6c:	10006d26 	beq	r2,zero,c024 <__muldf3+0x254>
    be70:	00c1ffc4 	movi	r3,2047
    be74:	10c06526 	beq	r2,r3,c00c <__muldf3+0x23c>
    be78:	88c00434 	orhi	r3,r17,16
    be7c:	180690fa 	slli	r3,r3,3
    be80:	3022d77a 	srli	r17,r6,29
    be84:	301090fa 	slli	r8,r6,3
    be88:	10bf0044 	addi	r2,r2,-1023
    be8c:	88e2b03a 	or	r17,r17,r3
    be90:	000b883a 	mov	r5,zero
    be94:	9085883a 	add	r2,r18,r2
    be98:	2cc8b03a 	or	r4,r5,r19
    be9c:	00c003c4 	movi	r3,15
    bea0:	bdacf03a 	xor	r22,r23,r22
    bea4:	12c00044 	addi	r11,r2,1
    bea8:	19009936 	bltu	r3,r4,c110 <__muldf3+0x340>
    beac:	200890ba 	slli	r4,r4,2
    beb0:	00c00074 	movhi	r3,1
    beb4:	18efb104 	addi	r3,r3,-16700
    beb8:	20c9883a 	add	r4,r4,r3
    bebc:	20c00017 	ldw	r3,0(r4)
    bec0:	1800683a 	jmp	r3
    bec4:	0000c110 	cmplti	zero,zero,772
    bec8:	0000bf24 	muli	zero,zero,764
    becc:	0000bf24 	muli	zero,zero,764
    bed0:	0000bf20 	cmpeqi	zero,zero,764
    bed4:	0000c0ec 	andhi	zero,zero,771
    bed8:	0000c0ec 	andhi	zero,zero,771
    bedc:	0000c0d4 	movui	zero,771
    bee0:	0000bf20 	cmpeqi	zero,zero,764
    bee4:	0000c0ec 	andhi	zero,zero,771
    bee8:	0000c0d4 	movui	zero,771
    beec:	0000c0ec 	andhi	zero,zero,771
    bef0:	0000bf20 	cmpeqi	zero,zero,764
    bef4:	0000c0fc 	xorhi	zero,zero,771
    bef8:	0000c0fc 	xorhi	zero,zero,771
    befc:	0000c0fc 	xorhi	zero,zero,771
    bf00:	0000c318 	cmpnei	zero,zero,780
    bf04:	2404b03a 	or	r2,r4,r16
    bf08:	10006f1e 	bne	r2,zero,c0c8 <__muldf3+0x2f8>
    bf0c:	04c00204 	movi	r19,8
    bf10:	0021883a 	mov	r16,zero
    bf14:	0029883a 	mov	r20,zero
    bf18:	07000084 	movi	fp,2
    bf1c:	003fcb06 	br	be4c <__alt_data_end+0xf800be4c>
    bf20:	502d883a 	mov	r22,r10
    bf24:	00800084 	movi	r2,2
    bf28:	28805726 	beq	r5,r2,c088 <__muldf3+0x2b8>
    bf2c:	008000c4 	movi	r2,3
    bf30:	28816626 	beq	r5,r2,c4cc <__muldf3+0x6fc>
    bf34:	00800044 	movi	r2,1
    bf38:	2881411e 	bne	r5,r2,c440 <__muldf3+0x670>
    bf3c:	b02b883a 	mov	r21,r22
    bf40:	0005883a 	mov	r2,zero
    bf44:	000b883a 	mov	r5,zero
    bf48:	0029883a 	mov	r20,zero
    bf4c:	1004953a 	slli	r2,r2,20
    bf50:	a8c03fcc 	andi	r3,r21,255
    bf54:	04400434 	movhi	r17,16
    bf58:	8c7fffc4 	addi	r17,r17,-1
    bf5c:	180697fa 	slli	r3,r3,31
    bf60:	2c4a703a 	and	r5,r5,r17
    bf64:	288ab03a 	or	r5,r5,r2
    bf68:	28c6b03a 	or	r3,r5,r3
    bf6c:	a005883a 	mov	r2,r20
    bf70:	dfc00c17 	ldw	ra,48(sp)
    bf74:	df000b17 	ldw	fp,44(sp)
    bf78:	ddc00a17 	ldw	r23,40(sp)
    bf7c:	dd800917 	ldw	r22,36(sp)
    bf80:	dd400817 	ldw	r21,32(sp)
    bf84:	dd000717 	ldw	r20,28(sp)
    bf88:	dcc00617 	ldw	r19,24(sp)
    bf8c:	dc800517 	ldw	r18,20(sp)
    bf90:	dc400417 	ldw	r17,16(sp)
    bf94:	dc000317 	ldw	r16,12(sp)
    bf98:	dec00d04 	addi	sp,sp,52
    bf9c:	f800283a 	ret
    bfa0:	2404b03a 	or	r2,r4,r16
    bfa4:	2027883a 	mov	r19,r4
    bfa8:	10004226 	beq	r2,zero,c0b4 <__muldf3+0x2e4>
    bfac:	8000fc26 	beq	r16,zero,c3a0 <__muldf3+0x5d0>
    bfb0:	8009883a 	mov	r4,r16
    bfb4:	d9800215 	stw	r6,8(sp)
    bfb8:	d9c00015 	stw	r7,0(sp)
    bfbc:	da400115 	stw	r9,4(sp)
    bfc0:	000cfe80 	call	cfe8 <__clzsi2>
    bfc4:	d9800217 	ldw	r6,8(sp)
    bfc8:	d9c00017 	ldw	r7,0(sp)
    bfcc:	da400117 	ldw	r9,4(sp)
    bfd0:	113ffd44 	addi	r4,r2,-11
    bfd4:	00c00704 	movi	r3,28
    bfd8:	1900ed16 	blt	r3,r4,c390 <__muldf3+0x5c0>
    bfdc:	00c00744 	movi	r3,29
    bfe0:	147ffe04 	addi	r17,r2,-8
    bfe4:	1907c83a 	sub	r3,r3,r4
    bfe8:	8460983a 	sll	r16,r16,r17
    bfec:	98c6d83a 	srl	r3,r19,r3
    bff0:	9c68983a 	sll	r20,r19,r17
    bff4:	1c20b03a 	or	r16,r3,r16
    bff8:	1080fcc4 	addi	r2,r2,1011
    bffc:	00a5c83a 	sub	r18,zero,r2
    c000:	0027883a 	mov	r19,zero
    c004:	0039883a 	mov	fp,zero
    c008:	003f9006 	br	be4c <__alt_data_end+0xf800be4c>
    c00c:	3446b03a 	or	r3,r6,r17
    c010:	1800261e 	bne	r3,zero,c0ac <__muldf3+0x2dc>
    c014:	0023883a 	mov	r17,zero
    c018:	0011883a 	mov	r8,zero
    c01c:	01400084 	movi	r5,2
    c020:	003f9c06 	br	be94 <__alt_data_end+0xf800be94>
    c024:	3446b03a 	or	r3,r6,r17
    c028:	18001c26 	beq	r3,zero,c09c <__muldf3+0x2cc>
    c02c:	8800ce26 	beq	r17,zero,c368 <__muldf3+0x598>
    c030:	8809883a 	mov	r4,r17
    c034:	d9800215 	stw	r6,8(sp)
    c038:	da400115 	stw	r9,4(sp)
    c03c:	da800015 	stw	r10,0(sp)
    c040:	000cfe80 	call	cfe8 <__clzsi2>
    c044:	d9800217 	ldw	r6,8(sp)
    c048:	da400117 	ldw	r9,4(sp)
    c04c:	da800017 	ldw	r10,0(sp)
    c050:	113ffd44 	addi	r4,r2,-11
    c054:	00c00704 	movi	r3,28
    c058:	1900bf16 	blt	r3,r4,c358 <__muldf3+0x588>
    c05c:	00c00744 	movi	r3,29
    c060:	123ffe04 	addi	r8,r2,-8
    c064:	1907c83a 	sub	r3,r3,r4
    c068:	8a22983a 	sll	r17,r17,r8
    c06c:	30c6d83a 	srl	r3,r6,r3
    c070:	3210983a 	sll	r8,r6,r8
    c074:	1c62b03a 	or	r17,r3,r17
    c078:	1080fcc4 	addi	r2,r2,1011
    c07c:	0085c83a 	sub	r2,zero,r2
    c080:	000b883a 	mov	r5,zero
    c084:	003f8306 	br	be94 <__alt_data_end+0xf800be94>
    c088:	b02b883a 	mov	r21,r22
    c08c:	0081ffc4 	movi	r2,2047
    c090:	000b883a 	mov	r5,zero
    c094:	0029883a 	mov	r20,zero
    c098:	003fac06 	br	bf4c <__alt_data_end+0xf800bf4c>
    c09c:	0023883a 	mov	r17,zero
    c0a0:	0011883a 	mov	r8,zero
    c0a4:	01400044 	movi	r5,1
    c0a8:	003f7a06 	br	be94 <__alt_data_end+0xf800be94>
    c0ac:	014000c4 	movi	r5,3
    c0b0:	003f7806 	br	be94 <__alt_data_end+0xf800be94>
    c0b4:	04c00104 	movi	r19,4
    c0b8:	0021883a 	mov	r16,zero
    c0bc:	0029883a 	mov	r20,zero
    c0c0:	07000044 	movi	fp,1
    c0c4:	003f6106 	br	be4c <__alt_data_end+0xf800be4c>
    c0c8:	04c00304 	movi	r19,12
    c0cc:	070000c4 	movi	fp,3
    c0d0:	003f5e06 	br	be4c <__alt_data_end+0xf800be4c>
    c0d4:	01400434 	movhi	r5,16
    c0d8:	002b883a 	mov	r21,zero
    c0dc:	297fffc4 	addi	r5,r5,-1
    c0e0:	053fffc4 	movi	r20,-1
    c0e4:	0081ffc4 	movi	r2,2047
    c0e8:	003f9806 	br	bf4c <__alt_data_end+0xf800bf4c>
    c0ec:	8023883a 	mov	r17,r16
    c0f0:	a011883a 	mov	r8,r20
    c0f4:	e00b883a 	mov	r5,fp
    c0f8:	003f8a06 	br	bf24 <__alt_data_end+0xf800bf24>
    c0fc:	8023883a 	mov	r17,r16
    c100:	a011883a 	mov	r8,r20
    c104:	482d883a 	mov	r22,r9
    c108:	e00b883a 	mov	r5,fp
    c10c:	003f8506 	br	bf24 <__alt_data_end+0xf800bf24>
    c110:	a00ad43a 	srli	r5,r20,16
    c114:	401ad43a 	srli	r13,r8,16
    c118:	a53fffcc 	andi	r20,r20,65535
    c11c:	423fffcc 	andi	r8,r8,65535
    c120:	4519383a 	mul	r12,r8,r20
    c124:	4147383a 	mul	r3,r8,r5
    c128:	6d09383a 	mul	r4,r13,r20
    c12c:	600cd43a 	srli	r6,r12,16
    c130:	2b5d383a 	mul	r14,r5,r13
    c134:	20c9883a 	add	r4,r4,r3
    c138:	310d883a 	add	r6,r6,r4
    c13c:	30c0022e 	bgeu	r6,r3,c148 <__muldf3+0x378>
    c140:	00c00074 	movhi	r3,1
    c144:	70dd883a 	add	r14,r14,r3
    c148:	8826d43a 	srli	r19,r17,16
    c14c:	8bffffcc 	andi	r15,r17,65535
    c150:	7d23383a 	mul	r17,r15,r20
    c154:	7949383a 	mul	r4,r15,r5
    c158:	9d29383a 	mul	r20,r19,r20
    c15c:	8814d43a 	srli	r10,r17,16
    c160:	3012943a 	slli	r9,r6,16
    c164:	a129883a 	add	r20,r20,r4
    c168:	633fffcc 	andi	r12,r12,65535
    c16c:	5515883a 	add	r10,r10,r20
    c170:	3006d43a 	srli	r3,r6,16
    c174:	4b13883a 	add	r9,r9,r12
    c178:	2ccb383a 	mul	r5,r5,r19
    c17c:	5100022e 	bgeu	r10,r4,c188 <__muldf3+0x3b8>
    c180:	01000074 	movhi	r4,1
    c184:	290b883a 	add	r5,r5,r4
    c188:	802ad43a 	srli	r21,r16,16
    c18c:	843fffcc 	andi	r16,r16,65535
    c190:	440d383a 	mul	r6,r8,r16
    c194:	4565383a 	mul	r18,r8,r21
    c198:	8349383a 	mul	r4,r16,r13
    c19c:	500e943a 	slli	r7,r10,16
    c1a0:	3010d43a 	srli	r8,r6,16
    c1a4:	5028d43a 	srli	r20,r10,16
    c1a8:	2489883a 	add	r4,r4,r18
    c1ac:	8abfffcc 	andi	r10,r17,65535
    c1b0:	3a95883a 	add	r10,r7,r10
    c1b4:	4119883a 	add	r12,r8,r4
    c1b8:	a169883a 	add	r20,r20,r5
    c1bc:	1a87883a 	add	r3,r3,r10
    c1c0:	6d5b383a 	mul	r13,r13,r21
    c1c4:	6480022e 	bgeu	r12,r18,c1d0 <__muldf3+0x400>
    c1c8:	01000074 	movhi	r4,1
    c1cc:	691b883a 	add	r13,r13,r4
    c1d0:	7c25383a 	mul	r18,r15,r16
    c1d4:	7d4b383a 	mul	r5,r15,r21
    c1d8:	84cf383a 	mul	r7,r16,r19
    c1dc:	901ed43a 	srli	r15,r18,16
    c1e0:	6008d43a 	srli	r4,r12,16
    c1e4:	6010943a 	slli	r8,r12,16
    c1e8:	394f883a 	add	r7,r7,r5
    c1ec:	333fffcc 	andi	r12,r6,65535
    c1f0:	79df883a 	add	r15,r15,r7
    c1f4:	235b883a 	add	r13,r4,r13
    c1f8:	9d63383a 	mul	r17,r19,r21
    c1fc:	4309883a 	add	r4,r8,r12
    c200:	7940022e 	bgeu	r15,r5,c20c <__muldf3+0x43c>
    c204:	01400074 	movhi	r5,1
    c208:	8963883a 	add	r17,r17,r5
    c20c:	780a943a 	slli	r5,r15,16
    c210:	91bfffcc 	andi	r6,r18,65535
    c214:	70c7883a 	add	r3,r14,r3
    c218:	298d883a 	add	r6,r5,r6
    c21c:	1a8f803a 	cmpltu	r7,r3,r10
    c220:	350b883a 	add	r5,r6,r20
    c224:	20c7883a 	add	r3,r4,r3
    c228:	3955883a 	add	r10,r7,r5
    c22c:	1909803a 	cmpltu	r4,r3,r4
    c230:	6a91883a 	add	r8,r13,r10
    c234:	780cd43a 	srli	r6,r15,16
    c238:	2219883a 	add	r12,r4,r8
    c23c:	2d0b803a 	cmpltu	r5,r5,r20
    c240:	51cf803a 	cmpltu	r7,r10,r7
    c244:	29ceb03a 	or	r7,r5,r7
    c248:	4351803a 	cmpltu	r8,r8,r13
    c24c:	610b803a 	cmpltu	r5,r12,r4
    c250:	4148b03a 	or	r4,r8,r5
    c254:	398f883a 	add	r7,r7,r6
    c258:	3909883a 	add	r4,r7,r4
    c25c:	1810927a 	slli	r8,r3,9
    c260:	2449883a 	add	r4,r4,r17
    c264:	2008927a 	slli	r4,r4,9
    c268:	6022d5fa 	srli	r17,r12,23
    c26c:	1806d5fa 	srli	r3,r3,23
    c270:	4252b03a 	or	r9,r8,r9
    c274:	600a927a 	slli	r5,r12,9
    c278:	4810c03a 	cmpne	r8,r9,zero
    c27c:	2462b03a 	or	r17,r4,r17
    c280:	40c6b03a 	or	r3,r8,r3
    c284:	8900402c 	andhi	r4,r17,256
    c288:	1950b03a 	or	r8,r3,r5
    c28c:	20000726 	beq	r4,zero,c2ac <__muldf3+0x4dc>
    c290:	4006d07a 	srli	r3,r8,1
    c294:	880497fa 	slli	r2,r17,31
    c298:	4200004c 	andi	r8,r8,1
    c29c:	8822d07a 	srli	r17,r17,1
    c2a0:	1a10b03a 	or	r8,r3,r8
    c2a4:	1210b03a 	or	r8,r2,r8
    c2a8:	5805883a 	mov	r2,r11
    c2ac:	1140ffc4 	addi	r5,r2,1023
    c2b0:	0140440e 	bge	zero,r5,c3c4 <__muldf3+0x5f4>
    c2b4:	40c001cc 	andi	r3,r8,7
    c2b8:	18000726 	beq	r3,zero,c2d8 <__muldf3+0x508>
    c2bc:	40c003cc 	andi	r3,r8,15
    c2c0:	01000104 	movi	r4,4
    c2c4:	19000426 	beq	r3,r4,c2d8 <__muldf3+0x508>
    c2c8:	4107883a 	add	r3,r8,r4
    c2cc:	1a11803a 	cmpltu	r8,r3,r8
    c2d0:	8a23883a 	add	r17,r17,r8
    c2d4:	1811883a 	mov	r8,r3
    c2d8:	88c0402c 	andhi	r3,r17,256
    c2dc:	18000426 	beq	r3,zero,c2f0 <__muldf3+0x520>
    c2e0:	11410004 	addi	r5,r2,1024
    c2e4:	00bfc034 	movhi	r2,65280
    c2e8:	10bfffc4 	addi	r2,r2,-1
    c2ec:	88a2703a 	and	r17,r17,r2
    c2f0:	0081ff84 	movi	r2,2046
    c2f4:	117f6416 	blt	r2,r5,c088 <__alt_data_end+0xf800c088>
    c2f8:	8828977a 	slli	r20,r17,29
    c2fc:	4010d0fa 	srli	r8,r8,3
    c300:	8822927a 	slli	r17,r17,9
    c304:	2881ffcc 	andi	r2,r5,2047
    c308:	a228b03a 	or	r20,r20,r8
    c30c:	880ad33a 	srli	r5,r17,12
    c310:	b02b883a 	mov	r21,r22
    c314:	003f0d06 	br	bf4c <__alt_data_end+0xf800bf4c>
    c318:	8080022c 	andhi	r2,r16,8
    c31c:	10000926 	beq	r2,zero,c344 <__muldf3+0x574>
    c320:	8880022c 	andhi	r2,r17,8
    c324:	1000071e 	bne	r2,zero,c344 <__muldf3+0x574>
    c328:	00800434 	movhi	r2,16
    c32c:	89400234 	orhi	r5,r17,8
    c330:	10bfffc4 	addi	r2,r2,-1
    c334:	b82b883a 	mov	r21,r23
    c338:	288a703a 	and	r5,r5,r2
    c33c:	4029883a 	mov	r20,r8
    c340:	003f6806 	br	c0e4 <__alt_data_end+0xf800c0e4>
    c344:	00800434 	movhi	r2,16
    c348:	81400234 	orhi	r5,r16,8
    c34c:	10bfffc4 	addi	r2,r2,-1
    c350:	288a703a 	and	r5,r5,r2
    c354:	003f6306 	br	c0e4 <__alt_data_end+0xf800c0e4>
    c358:	147ff604 	addi	r17,r2,-40
    c35c:	3462983a 	sll	r17,r6,r17
    c360:	0011883a 	mov	r8,zero
    c364:	003f4406 	br	c078 <__alt_data_end+0xf800c078>
    c368:	3009883a 	mov	r4,r6
    c36c:	d9800215 	stw	r6,8(sp)
    c370:	da400115 	stw	r9,4(sp)
    c374:	da800015 	stw	r10,0(sp)
    c378:	000cfe80 	call	cfe8 <__clzsi2>
    c37c:	10800804 	addi	r2,r2,32
    c380:	da800017 	ldw	r10,0(sp)
    c384:	da400117 	ldw	r9,4(sp)
    c388:	d9800217 	ldw	r6,8(sp)
    c38c:	003f3006 	br	c050 <__alt_data_end+0xf800c050>
    c390:	143ff604 	addi	r16,r2,-40
    c394:	9c20983a 	sll	r16,r19,r16
    c398:	0029883a 	mov	r20,zero
    c39c:	003f1606 	br	bff8 <__alt_data_end+0xf800bff8>
    c3a0:	d9800215 	stw	r6,8(sp)
    c3a4:	d9c00015 	stw	r7,0(sp)
    c3a8:	da400115 	stw	r9,4(sp)
    c3ac:	000cfe80 	call	cfe8 <__clzsi2>
    c3b0:	10800804 	addi	r2,r2,32
    c3b4:	da400117 	ldw	r9,4(sp)
    c3b8:	d9c00017 	ldw	r7,0(sp)
    c3bc:	d9800217 	ldw	r6,8(sp)
    c3c0:	003f0306 	br	bfd0 <__alt_data_end+0xf800bfd0>
    c3c4:	00c00044 	movi	r3,1
    c3c8:	1947c83a 	sub	r3,r3,r5
    c3cc:	00800e04 	movi	r2,56
    c3d0:	10feda16 	blt	r2,r3,bf3c <__alt_data_end+0xf800bf3c>
    c3d4:	008007c4 	movi	r2,31
    c3d8:	10c01b16 	blt	r2,r3,c448 <__muldf3+0x678>
    c3dc:	00800804 	movi	r2,32
    c3e0:	10c5c83a 	sub	r2,r2,r3
    c3e4:	888a983a 	sll	r5,r17,r2
    c3e8:	40c8d83a 	srl	r4,r8,r3
    c3ec:	4084983a 	sll	r2,r8,r2
    c3f0:	88e2d83a 	srl	r17,r17,r3
    c3f4:	2906b03a 	or	r3,r5,r4
    c3f8:	1004c03a 	cmpne	r2,r2,zero
    c3fc:	1886b03a 	or	r3,r3,r2
    c400:	188001cc 	andi	r2,r3,7
    c404:	10000726 	beq	r2,zero,c424 <__muldf3+0x654>
    c408:	188003cc 	andi	r2,r3,15
    c40c:	01000104 	movi	r4,4
    c410:	11000426 	beq	r2,r4,c424 <__muldf3+0x654>
    c414:	1805883a 	mov	r2,r3
    c418:	10c00104 	addi	r3,r2,4
    c41c:	1885803a 	cmpltu	r2,r3,r2
    c420:	88a3883a 	add	r17,r17,r2
    c424:	8880202c 	andhi	r2,r17,128
    c428:	10001c26 	beq	r2,zero,c49c <__muldf3+0x6cc>
    c42c:	b02b883a 	mov	r21,r22
    c430:	00800044 	movi	r2,1
    c434:	000b883a 	mov	r5,zero
    c438:	0029883a 	mov	r20,zero
    c43c:	003ec306 	br	bf4c <__alt_data_end+0xf800bf4c>
    c440:	5805883a 	mov	r2,r11
    c444:	003f9906 	br	c2ac <__alt_data_end+0xf800c2ac>
    c448:	00bff844 	movi	r2,-31
    c44c:	1145c83a 	sub	r2,r2,r5
    c450:	8888d83a 	srl	r4,r17,r2
    c454:	00800804 	movi	r2,32
    c458:	18801a26 	beq	r3,r2,c4c4 <__muldf3+0x6f4>
    c45c:	00801004 	movi	r2,64
    c460:	10c5c83a 	sub	r2,r2,r3
    c464:	8884983a 	sll	r2,r17,r2
    c468:	1204b03a 	or	r2,r2,r8
    c46c:	1004c03a 	cmpne	r2,r2,zero
    c470:	2084b03a 	or	r2,r4,r2
    c474:	144001cc 	andi	r17,r2,7
    c478:	88000d1e 	bne	r17,zero,c4b0 <__muldf3+0x6e0>
    c47c:	000b883a 	mov	r5,zero
    c480:	1028d0fa 	srli	r20,r2,3
    c484:	b02b883a 	mov	r21,r22
    c488:	0005883a 	mov	r2,zero
    c48c:	a468b03a 	or	r20,r20,r17
    c490:	003eae06 	br	bf4c <__alt_data_end+0xf800bf4c>
    c494:	1007883a 	mov	r3,r2
    c498:	0023883a 	mov	r17,zero
    c49c:	880a927a 	slli	r5,r17,9
    c4a0:	1805883a 	mov	r2,r3
    c4a4:	8822977a 	slli	r17,r17,29
    c4a8:	280ad33a 	srli	r5,r5,12
    c4ac:	003ff406 	br	c480 <__alt_data_end+0xf800c480>
    c4b0:	10c003cc 	andi	r3,r2,15
    c4b4:	01000104 	movi	r4,4
    c4b8:	193ff626 	beq	r3,r4,c494 <__alt_data_end+0xf800c494>
    c4bc:	0023883a 	mov	r17,zero
    c4c0:	003fd506 	br	c418 <__alt_data_end+0xf800c418>
    c4c4:	0005883a 	mov	r2,zero
    c4c8:	003fe706 	br	c468 <__alt_data_end+0xf800c468>
    c4cc:	00800434 	movhi	r2,16
    c4d0:	89400234 	orhi	r5,r17,8
    c4d4:	10bfffc4 	addi	r2,r2,-1
    c4d8:	b02b883a 	mov	r21,r22
    c4dc:	288a703a 	and	r5,r5,r2
    c4e0:	4029883a 	mov	r20,r8
    c4e4:	003eff06 	br	c0e4 <__alt_data_end+0xf800c0e4>

0000c4e8 <__subdf3>:
    c4e8:	02000434 	movhi	r8,16
    c4ec:	423fffc4 	addi	r8,r8,-1
    c4f0:	defffb04 	addi	sp,sp,-20
    c4f4:	2a14703a 	and	r10,r5,r8
    c4f8:	3812d53a 	srli	r9,r7,20
    c4fc:	3a10703a 	and	r8,r7,r8
    c500:	2006d77a 	srli	r3,r4,29
    c504:	3004d77a 	srli	r2,r6,29
    c508:	dc000015 	stw	r16,0(sp)
    c50c:	501490fa 	slli	r10,r10,3
    c510:	2820d53a 	srli	r16,r5,20
    c514:	401090fa 	slli	r8,r8,3
    c518:	dc800215 	stw	r18,8(sp)
    c51c:	dc400115 	stw	r17,4(sp)
    c520:	dfc00415 	stw	ra,16(sp)
    c524:	202290fa 	slli	r17,r4,3
    c528:	dcc00315 	stw	r19,12(sp)
    c52c:	4a41ffcc 	andi	r9,r9,2047
    c530:	0101ffc4 	movi	r4,2047
    c534:	2824d7fa 	srli	r18,r5,31
    c538:	8401ffcc 	andi	r16,r16,2047
    c53c:	50c6b03a 	or	r3,r10,r3
    c540:	380ed7fa 	srli	r7,r7,31
    c544:	408ab03a 	or	r5,r8,r2
    c548:	300c90fa 	slli	r6,r6,3
    c54c:	49009626 	beq	r9,r4,c7a8 <__subdf3+0x2c0>
    c550:	39c0005c 	xori	r7,r7,1
    c554:	8245c83a 	sub	r2,r16,r9
    c558:	3c807426 	beq	r7,r18,c72c <__subdf3+0x244>
    c55c:	0080af0e 	bge	zero,r2,c81c <__subdf3+0x334>
    c560:	48002a1e 	bne	r9,zero,c60c <__subdf3+0x124>
    c564:	2988b03a 	or	r4,r5,r6
    c568:	20009a1e 	bne	r4,zero,c7d4 <__subdf3+0x2ec>
    c56c:	888001cc 	andi	r2,r17,7
    c570:	10000726 	beq	r2,zero,c590 <__subdf3+0xa8>
    c574:	888003cc 	andi	r2,r17,15
    c578:	01000104 	movi	r4,4
    c57c:	11000426 	beq	r2,r4,c590 <__subdf3+0xa8>
    c580:	890b883a 	add	r5,r17,r4
    c584:	2c63803a 	cmpltu	r17,r5,r17
    c588:	1c47883a 	add	r3,r3,r17
    c58c:	2823883a 	mov	r17,r5
    c590:	1880202c 	andhi	r2,r3,128
    c594:	10005926 	beq	r2,zero,c6fc <__subdf3+0x214>
    c598:	84000044 	addi	r16,r16,1
    c59c:	0081ffc4 	movi	r2,2047
    c5a0:	8080be26 	beq	r16,r2,c89c <__subdf3+0x3b4>
    c5a4:	017fe034 	movhi	r5,65408
    c5a8:	297fffc4 	addi	r5,r5,-1
    c5ac:	1946703a 	and	r3,r3,r5
    c5b0:	1804977a 	slli	r2,r3,29
    c5b4:	1806927a 	slli	r3,r3,9
    c5b8:	8822d0fa 	srli	r17,r17,3
    c5bc:	8401ffcc 	andi	r16,r16,2047
    c5c0:	180ad33a 	srli	r5,r3,12
    c5c4:	9100004c 	andi	r4,r18,1
    c5c8:	1444b03a 	or	r2,r2,r17
    c5cc:	80c1ffcc 	andi	r3,r16,2047
    c5d0:	1820953a 	slli	r16,r3,20
    c5d4:	20c03fcc 	andi	r3,r4,255
    c5d8:	180897fa 	slli	r4,r3,31
    c5dc:	00c00434 	movhi	r3,16
    c5e0:	18ffffc4 	addi	r3,r3,-1
    c5e4:	28c6703a 	and	r3,r5,r3
    c5e8:	1c06b03a 	or	r3,r3,r16
    c5ec:	1906b03a 	or	r3,r3,r4
    c5f0:	dfc00417 	ldw	ra,16(sp)
    c5f4:	dcc00317 	ldw	r19,12(sp)
    c5f8:	dc800217 	ldw	r18,8(sp)
    c5fc:	dc400117 	ldw	r17,4(sp)
    c600:	dc000017 	ldw	r16,0(sp)
    c604:	dec00504 	addi	sp,sp,20
    c608:	f800283a 	ret
    c60c:	0101ffc4 	movi	r4,2047
    c610:	813fd626 	beq	r16,r4,c56c <__alt_data_end+0xf800c56c>
    c614:	29402034 	orhi	r5,r5,128
    c618:	01000e04 	movi	r4,56
    c61c:	2080a316 	blt	r4,r2,c8ac <__subdf3+0x3c4>
    c620:	010007c4 	movi	r4,31
    c624:	2080c616 	blt	r4,r2,c940 <__subdf3+0x458>
    c628:	01000804 	movi	r4,32
    c62c:	2089c83a 	sub	r4,r4,r2
    c630:	2910983a 	sll	r8,r5,r4
    c634:	308ed83a 	srl	r7,r6,r2
    c638:	3108983a 	sll	r4,r6,r4
    c63c:	2884d83a 	srl	r2,r5,r2
    c640:	41ccb03a 	or	r6,r8,r7
    c644:	2008c03a 	cmpne	r4,r4,zero
    c648:	310cb03a 	or	r6,r6,r4
    c64c:	898dc83a 	sub	r6,r17,r6
    c650:	89a3803a 	cmpltu	r17,r17,r6
    c654:	1887c83a 	sub	r3,r3,r2
    c658:	1c47c83a 	sub	r3,r3,r17
    c65c:	3023883a 	mov	r17,r6
    c660:	1880202c 	andhi	r2,r3,128
    c664:	10002326 	beq	r2,zero,c6f4 <__subdf3+0x20c>
    c668:	04c02034 	movhi	r19,128
    c66c:	9cffffc4 	addi	r19,r19,-1
    c670:	1ce6703a 	and	r19,r3,r19
    c674:	98007a26 	beq	r19,zero,c860 <__subdf3+0x378>
    c678:	9809883a 	mov	r4,r19
    c67c:	000cfe80 	call	cfe8 <__clzsi2>
    c680:	113ffe04 	addi	r4,r2,-8
    c684:	00c007c4 	movi	r3,31
    c688:	19007b16 	blt	r3,r4,c878 <__subdf3+0x390>
    c68c:	00800804 	movi	r2,32
    c690:	1105c83a 	sub	r2,r2,r4
    c694:	8884d83a 	srl	r2,r17,r2
    c698:	9906983a 	sll	r3,r19,r4
    c69c:	8922983a 	sll	r17,r17,r4
    c6a0:	10c4b03a 	or	r2,r2,r3
    c6a4:	24007816 	blt	r4,r16,c888 <__subdf3+0x3a0>
    c6a8:	2421c83a 	sub	r16,r4,r16
    c6ac:	80c00044 	addi	r3,r16,1
    c6b0:	010007c4 	movi	r4,31
    c6b4:	20c09516 	blt	r4,r3,c90c <__subdf3+0x424>
    c6b8:	01400804 	movi	r5,32
    c6bc:	28cbc83a 	sub	r5,r5,r3
    c6c0:	88c8d83a 	srl	r4,r17,r3
    c6c4:	8962983a 	sll	r17,r17,r5
    c6c8:	114a983a 	sll	r5,r2,r5
    c6cc:	10c6d83a 	srl	r3,r2,r3
    c6d0:	8804c03a 	cmpne	r2,r17,zero
    c6d4:	290ab03a 	or	r5,r5,r4
    c6d8:	28a2b03a 	or	r17,r5,r2
    c6dc:	0021883a 	mov	r16,zero
    c6e0:	003fa206 	br	c56c <__alt_data_end+0xf800c56c>
    c6e4:	2090b03a 	or	r8,r4,r2
    c6e8:	40018e26 	beq	r8,zero,cd24 <__subdf3+0x83c>
    c6ec:	1007883a 	mov	r3,r2
    c6f0:	2023883a 	mov	r17,r4
    c6f4:	888001cc 	andi	r2,r17,7
    c6f8:	103f9e1e 	bne	r2,zero,c574 <__alt_data_end+0xf800c574>
    c6fc:	1804977a 	slli	r2,r3,29
    c700:	8822d0fa 	srli	r17,r17,3
    c704:	1810d0fa 	srli	r8,r3,3
    c708:	9100004c 	andi	r4,r18,1
    c70c:	1444b03a 	or	r2,r2,r17
    c710:	00c1ffc4 	movi	r3,2047
    c714:	80c02826 	beq	r16,r3,c7b8 <__subdf3+0x2d0>
    c718:	01400434 	movhi	r5,16
    c71c:	297fffc4 	addi	r5,r5,-1
    c720:	80e0703a 	and	r16,r16,r3
    c724:	414a703a 	and	r5,r8,r5
    c728:	003fa806 	br	c5cc <__alt_data_end+0xf800c5cc>
    c72c:	0080630e 	bge	zero,r2,c8bc <__subdf3+0x3d4>
    c730:	48003026 	beq	r9,zero,c7f4 <__subdf3+0x30c>
    c734:	0101ffc4 	movi	r4,2047
    c738:	813f8c26 	beq	r16,r4,c56c <__alt_data_end+0xf800c56c>
    c73c:	29402034 	orhi	r5,r5,128
    c740:	01000e04 	movi	r4,56
    c744:	2080a90e 	bge	r4,r2,c9ec <__subdf3+0x504>
    c748:	298cb03a 	or	r6,r5,r6
    c74c:	3012c03a 	cmpne	r9,r6,zero
    c750:	0005883a 	mov	r2,zero
    c754:	4c53883a 	add	r9,r9,r17
    c758:	4c63803a 	cmpltu	r17,r9,r17
    c75c:	10c7883a 	add	r3,r2,r3
    c760:	88c7883a 	add	r3,r17,r3
    c764:	4823883a 	mov	r17,r9
    c768:	1880202c 	andhi	r2,r3,128
    c76c:	1000d026 	beq	r2,zero,cab0 <__subdf3+0x5c8>
    c770:	84000044 	addi	r16,r16,1
    c774:	0081ffc4 	movi	r2,2047
    c778:	8080fe26 	beq	r16,r2,cb74 <__subdf3+0x68c>
    c77c:	00bfe034 	movhi	r2,65408
    c780:	10bfffc4 	addi	r2,r2,-1
    c784:	1886703a 	and	r3,r3,r2
    c788:	880ad07a 	srli	r5,r17,1
    c78c:	180497fa 	slli	r2,r3,31
    c790:	8900004c 	andi	r4,r17,1
    c794:	2922b03a 	or	r17,r5,r4
    c798:	1806d07a 	srli	r3,r3,1
    c79c:	1462b03a 	or	r17,r2,r17
    c7a0:	3825883a 	mov	r18,r7
    c7a4:	003f7106 	br	c56c <__alt_data_end+0xf800c56c>
    c7a8:	2984b03a 	or	r2,r5,r6
    c7ac:	103f6826 	beq	r2,zero,c550 <__alt_data_end+0xf800c550>
    c7b0:	39c03fcc 	andi	r7,r7,255
    c7b4:	003f6706 	br	c554 <__alt_data_end+0xf800c554>
    c7b8:	4086b03a 	or	r3,r8,r2
    c7bc:	18015226 	beq	r3,zero,cd08 <__subdf3+0x820>
    c7c0:	00c00434 	movhi	r3,16
    c7c4:	41400234 	orhi	r5,r8,8
    c7c8:	18ffffc4 	addi	r3,r3,-1
    c7cc:	28ca703a 	and	r5,r5,r3
    c7d0:	003f7e06 	br	c5cc <__alt_data_end+0xf800c5cc>
    c7d4:	10bfffc4 	addi	r2,r2,-1
    c7d8:	1000491e 	bne	r2,zero,c900 <__subdf3+0x418>
    c7dc:	898fc83a 	sub	r7,r17,r6
    c7e0:	89e3803a 	cmpltu	r17,r17,r7
    c7e4:	1947c83a 	sub	r3,r3,r5
    c7e8:	1c47c83a 	sub	r3,r3,r17
    c7ec:	3823883a 	mov	r17,r7
    c7f0:	003f9b06 	br	c660 <__alt_data_end+0xf800c660>
    c7f4:	2988b03a 	or	r4,r5,r6
    c7f8:	203f5c26 	beq	r4,zero,c56c <__alt_data_end+0xf800c56c>
    c7fc:	10bfffc4 	addi	r2,r2,-1
    c800:	1000931e 	bne	r2,zero,ca50 <__subdf3+0x568>
    c804:	898d883a 	add	r6,r17,r6
    c808:	3463803a 	cmpltu	r17,r6,r17
    c80c:	1947883a 	add	r3,r3,r5
    c810:	88c7883a 	add	r3,r17,r3
    c814:	3023883a 	mov	r17,r6
    c818:	003fd306 	br	c768 <__alt_data_end+0xf800c768>
    c81c:	1000541e 	bne	r2,zero,c970 <__subdf3+0x488>
    c820:	80800044 	addi	r2,r16,1
    c824:	1081ffcc 	andi	r2,r2,2047
    c828:	01000044 	movi	r4,1
    c82c:	2080a20e 	bge	r4,r2,cab8 <__subdf3+0x5d0>
    c830:	8989c83a 	sub	r4,r17,r6
    c834:	8905803a 	cmpltu	r2,r17,r4
    c838:	1967c83a 	sub	r19,r3,r5
    c83c:	98a7c83a 	sub	r19,r19,r2
    c840:	9880202c 	andhi	r2,r19,128
    c844:	10006326 	beq	r2,zero,c9d4 <__subdf3+0x4ec>
    c848:	3463c83a 	sub	r17,r6,r17
    c84c:	28c7c83a 	sub	r3,r5,r3
    c850:	344d803a 	cmpltu	r6,r6,r17
    c854:	19a7c83a 	sub	r19,r3,r6
    c858:	3825883a 	mov	r18,r7
    c85c:	983f861e 	bne	r19,zero,c678 <__alt_data_end+0xf800c678>
    c860:	8809883a 	mov	r4,r17
    c864:	000cfe80 	call	cfe8 <__clzsi2>
    c868:	10800804 	addi	r2,r2,32
    c86c:	113ffe04 	addi	r4,r2,-8
    c870:	00c007c4 	movi	r3,31
    c874:	193f850e 	bge	r3,r4,c68c <__alt_data_end+0xf800c68c>
    c878:	10bff604 	addi	r2,r2,-40
    c87c:	8884983a 	sll	r2,r17,r2
    c880:	0023883a 	mov	r17,zero
    c884:	243f880e 	bge	r4,r16,c6a8 <__alt_data_end+0xf800c6a8>
    c888:	00ffe034 	movhi	r3,65408
    c88c:	18ffffc4 	addi	r3,r3,-1
    c890:	8121c83a 	sub	r16,r16,r4
    c894:	10c6703a 	and	r3,r2,r3
    c898:	003f3406 	br	c56c <__alt_data_end+0xf800c56c>
    c89c:	9100004c 	andi	r4,r18,1
    c8a0:	000b883a 	mov	r5,zero
    c8a4:	0005883a 	mov	r2,zero
    c8a8:	003f4806 	br	c5cc <__alt_data_end+0xf800c5cc>
    c8ac:	298cb03a 	or	r6,r5,r6
    c8b0:	300cc03a 	cmpne	r6,r6,zero
    c8b4:	0005883a 	mov	r2,zero
    c8b8:	003f6406 	br	c64c <__alt_data_end+0xf800c64c>
    c8bc:	10009a1e 	bne	r2,zero,cb28 <__subdf3+0x640>
    c8c0:	82400044 	addi	r9,r16,1
    c8c4:	4881ffcc 	andi	r2,r9,2047
    c8c8:	02800044 	movi	r10,1
    c8cc:	5080670e 	bge	r10,r2,ca6c <__subdf3+0x584>
    c8d0:	0081ffc4 	movi	r2,2047
    c8d4:	4880af26 	beq	r9,r2,cb94 <__subdf3+0x6ac>
    c8d8:	898d883a 	add	r6,r17,r6
    c8dc:	1945883a 	add	r2,r3,r5
    c8e0:	3447803a 	cmpltu	r3,r6,r17
    c8e4:	1887883a 	add	r3,r3,r2
    c8e8:	182297fa 	slli	r17,r3,31
    c8ec:	300cd07a 	srli	r6,r6,1
    c8f0:	1806d07a 	srli	r3,r3,1
    c8f4:	4821883a 	mov	r16,r9
    c8f8:	89a2b03a 	or	r17,r17,r6
    c8fc:	003f1b06 	br	c56c <__alt_data_end+0xf800c56c>
    c900:	0101ffc4 	movi	r4,2047
    c904:	813f441e 	bne	r16,r4,c618 <__alt_data_end+0xf800c618>
    c908:	003f1806 	br	c56c <__alt_data_end+0xf800c56c>
    c90c:	843ff844 	addi	r16,r16,-31
    c910:	01400804 	movi	r5,32
    c914:	1408d83a 	srl	r4,r2,r16
    c918:	19405026 	beq	r3,r5,ca5c <__subdf3+0x574>
    c91c:	01401004 	movi	r5,64
    c920:	28c7c83a 	sub	r3,r5,r3
    c924:	10c4983a 	sll	r2,r2,r3
    c928:	88a2b03a 	or	r17,r17,r2
    c92c:	8822c03a 	cmpne	r17,r17,zero
    c930:	2462b03a 	or	r17,r4,r17
    c934:	0007883a 	mov	r3,zero
    c938:	0021883a 	mov	r16,zero
    c93c:	003f6d06 	br	c6f4 <__alt_data_end+0xf800c6f4>
    c940:	11fff804 	addi	r7,r2,-32
    c944:	01000804 	movi	r4,32
    c948:	29ced83a 	srl	r7,r5,r7
    c94c:	11004526 	beq	r2,r4,ca64 <__subdf3+0x57c>
    c950:	01001004 	movi	r4,64
    c954:	2089c83a 	sub	r4,r4,r2
    c958:	2904983a 	sll	r2,r5,r4
    c95c:	118cb03a 	or	r6,r2,r6
    c960:	300cc03a 	cmpne	r6,r6,zero
    c964:	398cb03a 	or	r6,r7,r6
    c968:	0005883a 	mov	r2,zero
    c96c:	003f3706 	br	c64c <__alt_data_end+0xf800c64c>
    c970:	80002a26 	beq	r16,zero,ca1c <__subdf3+0x534>
    c974:	0101ffc4 	movi	r4,2047
    c978:	49006626 	beq	r9,r4,cb14 <__subdf3+0x62c>
    c97c:	0085c83a 	sub	r2,zero,r2
    c980:	18c02034 	orhi	r3,r3,128
    c984:	01000e04 	movi	r4,56
    c988:	20807e16 	blt	r4,r2,cb84 <__subdf3+0x69c>
    c98c:	010007c4 	movi	r4,31
    c990:	2080e716 	blt	r4,r2,cd30 <__subdf3+0x848>
    c994:	01000804 	movi	r4,32
    c998:	2089c83a 	sub	r4,r4,r2
    c99c:	1914983a 	sll	r10,r3,r4
    c9a0:	8890d83a 	srl	r8,r17,r2
    c9a4:	8908983a 	sll	r4,r17,r4
    c9a8:	1884d83a 	srl	r2,r3,r2
    c9ac:	5222b03a 	or	r17,r10,r8
    c9b0:	2006c03a 	cmpne	r3,r4,zero
    c9b4:	88e2b03a 	or	r17,r17,r3
    c9b8:	3463c83a 	sub	r17,r6,r17
    c9bc:	2885c83a 	sub	r2,r5,r2
    c9c0:	344d803a 	cmpltu	r6,r6,r17
    c9c4:	1187c83a 	sub	r3,r2,r6
    c9c8:	4821883a 	mov	r16,r9
    c9cc:	3825883a 	mov	r18,r7
    c9d0:	003f2306 	br	c660 <__alt_data_end+0xf800c660>
    c9d4:	24d0b03a 	or	r8,r4,r19
    c9d8:	40001b1e 	bne	r8,zero,ca48 <__subdf3+0x560>
    c9dc:	0005883a 	mov	r2,zero
    c9e0:	0009883a 	mov	r4,zero
    c9e4:	0021883a 	mov	r16,zero
    c9e8:	003f4906 	br	c710 <__alt_data_end+0xf800c710>
    c9ec:	010007c4 	movi	r4,31
    c9f0:	20803a16 	blt	r4,r2,cadc <__subdf3+0x5f4>
    c9f4:	01000804 	movi	r4,32
    c9f8:	2089c83a 	sub	r4,r4,r2
    c9fc:	2912983a 	sll	r9,r5,r4
    ca00:	3090d83a 	srl	r8,r6,r2
    ca04:	3108983a 	sll	r4,r6,r4
    ca08:	2884d83a 	srl	r2,r5,r2
    ca0c:	4a12b03a 	or	r9,r9,r8
    ca10:	2008c03a 	cmpne	r4,r4,zero
    ca14:	4912b03a 	or	r9,r9,r4
    ca18:	003f4e06 	br	c754 <__alt_data_end+0xf800c754>
    ca1c:	1c48b03a 	or	r4,r3,r17
    ca20:	20003c26 	beq	r4,zero,cb14 <__subdf3+0x62c>
    ca24:	0084303a 	nor	r2,zero,r2
    ca28:	1000381e 	bne	r2,zero,cb0c <__subdf3+0x624>
    ca2c:	3463c83a 	sub	r17,r6,r17
    ca30:	28c5c83a 	sub	r2,r5,r3
    ca34:	344d803a 	cmpltu	r6,r6,r17
    ca38:	1187c83a 	sub	r3,r2,r6
    ca3c:	4821883a 	mov	r16,r9
    ca40:	3825883a 	mov	r18,r7
    ca44:	003f0606 	br	c660 <__alt_data_end+0xf800c660>
    ca48:	2023883a 	mov	r17,r4
    ca4c:	003f0906 	br	c674 <__alt_data_end+0xf800c674>
    ca50:	0101ffc4 	movi	r4,2047
    ca54:	813f3a1e 	bne	r16,r4,c740 <__alt_data_end+0xf800c740>
    ca58:	003ec406 	br	c56c <__alt_data_end+0xf800c56c>
    ca5c:	0005883a 	mov	r2,zero
    ca60:	003fb106 	br	c928 <__alt_data_end+0xf800c928>
    ca64:	0005883a 	mov	r2,zero
    ca68:	003fbc06 	br	c95c <__alt_data_end+0xf800c95c>
    ca6c:	1c44b03a 	or	r2,r3,r17
    ca70:	80008e1e 	bne	r16,zero,ccac <__subdf3+0x7c4>
    ca74:	1000c826 	beq	r2,zero,cd98 <__subdf3+0x8b0>
    ca78:	2984b03a 	or	r2,r5,r6
    ca7c:	103ebb26 	beq	r2,zero,c56c <__alt_data_end+0xf800c56c>
    ca80:	8989883a 	add	r4,r17,r6
    ca84:	1945883a 	add	r2,r3,r5
    ca88:	2447803a 	cmpltu	r3,r4,r17
    ca8c:	1887883a 	add	r3,r3,r2
    ca90:	1880202c 	andhi	r2,r3,128
    ca94:	2023883a 	mov	r17,r4
    ca98:	103f1626 	beq	r2,zero,c6f4 <__alt_data_end+0xf800c6f4>
    ca9c:	00bfe034 	movhi	r2,65408
    caa0:	10bfffc4 	addi	r2,r2,-1
    caa4:	5021883a 	mov	r16,r10
    caa8:	1886703a 	and	r3,r3,r2
    caac:	003eaf06 	br	c56c <__alt_data_end+0xf800c56c>
    cab0:	3825883a 	mov	r18,r7
    cab4:	003f0f06 	br	c6f4 <__alt_data_end+0xf800c6f4>
    cab8:	1c44b03a 	or	r2,r3,r17
    cabc:	8000251e 	bne	r16,zero,cb54 <__subdf3+0x66c>
    cac0:	1000661e 	bne	r2,zero,cc5c <__subdf3+0x774>
    cac4:	2990b03a 	or	r8,r5,r6
    cac8:	40009626 	beq	r8,zero,cd24 <__subdf3+0x83c>
    cacc:	2807883a 	mov	r3,r5
    cad0:	3023883a 	mov	r17,r6
    cad4:	3825883a 	mov	r18,r7
    cad8:	003ea406 	br	c56c <__alt_data_end+0xf800c56c>
    cadc:	127ff804 	addi	r9,r2,-32
    cae0:	01000804 	movi	r4,32
    cae4:	2a52d83a 	srl	r9,r5,r9
    cae8:	11008c26 	beq	r2,r4,cd1c <__subdf3+0x834>
    caec:	01001004 	movi	r4,64
    caf0:	2085c83a 	sub	r2,r4,r2
    caf4:	2884983a 	sll	r2,r5,r2
    caf8:	118cb03a 	or	r6,r2,r6
    cafc:	300cc03a 	cmpne	r6,r6,zero
    cb00:	4992b03a 	or	r9,r9,r6
    cb04:	0005883a 	mov	r2,zero
    cb08:	003f1206 	br	c754 <__alt_data_end+0xf800c754>
    cb0c:	0101ffc4 	movi	r4,2047
    cb10:	493f9c1e 	bne	r9,r4,c984 <__alt_data_end+0xf800c984>
    cb14:	2807883a 	mov	r3,r5
    cb18:	3023883a 	mov	r17,r6
    cb1c:	4821883a 	mov	r16,r9
    cb20:	3825883a 	mov	r18,r7
    cb24:	003e9106 	br	c56c <__alt_data_end+0xf800c56c>
    cb28:	80001f1e 	bne	r16,zero,cba8 <__subdf3+0x6c0>
    cb2c:	1c48b03a 	or	r4,r3,r17
    cb30:	20005a26 	beq	r4,zero,cc9c <__subdf3+0x7b4>
    cb34:	0084303a 	nor	r2,zero,r2
    cb38:	1000561e 	bne	r2,zero,cc94 <__subdf3+0x7ac>
    cb3c:	89a3883a 	add	r17,r17,r6
    cb40:	1945883a 	add	r2,r3,r5
    cb44:	898d803a 	cmpltu	r6,r17,r6
    cb48:	3087883a 	add	r3,r6,r2
    cb4c:	4821883a 	mov	r16,r9
    cb50:	003f0506 	br	c768 <__alt_data_end+0xf800c768>
    cb54:	10002b1e 	bne	r2,zero,cc04 <__subdf3+0x71c>
    cb58:	2984b03a 	or	r2,r5,r6
    cb5c:	10008026 	beq	r2,zero,cd60 <__subdf3+0x878>
    cb60:	2807883a 	mov	r3,r5
    cb64:	3023883a 	mov	r17,r6
    cb68:	3825883a 	mov	r18,r7
    cb6c:	0401ffc4 	movi	r16,2047
    cb70:	003e7e06 	br	c56c <__alt_data_end+0xf800c56c>
    cb74:	3809883a 	mov	r4,r7
    cb78:	0011883a 	mov	r8,zero
    cb7c:	0005883a 	mov	r2,zero
    cb80:	003ee306 	br	c710 <__alt_data_end+0xf800c710>
    cb84:	1c62b03a 	or	r17,r3,r17
    cb88:	8822c03a 	cmpne	r17,r17,zero
    cb8c:	0005883a 	mov	r2,zero
    cb90:	003f8906 	br	c9b8 <__alt_data_end+0xf800c9b8>
    cb94:	3809883a 	mov	r4,r7
    cb98:	4821883a 	mov	r16,r9
    cb9c:	0011883a 	mov	r8,zero
    cba0:	0005883a 	mov	r2,zero
    cba4:	003eda06 	br	c710 <__alt_data_end+0xf800c710>
    cba8:	0101ffc4 	movi	r4,2047
    cbac:	49003b26 	beq	r9,r4,cc9c <__subdf3+0x7b4>
    cbb0:	0085c83a 	sub	r2,zero,r2
    cbb4:	18c02034 	orhi	r3,r3,128
    cbb8:	01000e04 	movi	r4,56
    cbbc:	20806e16 	blt	r4,r2,cd78 <__subdf3+0x890>
    cbc0:	010007c4 	movi	r4,31
    cbc4:	20807716 	blt	r4,r2,cda4 <__subdf3+0x8bc>
    cbc8:	01000804 	movi	r4,32
    cbcc:	2089c83a 	sub	r4,r4,r2
    cbd0:	1914983a 	sll	r10,r3,r4
    cbd4:	8890d83a 	srl	r8,r17,r2
    cbd8:	8908983a 	sll	r4,r17,r4
    cbdc:	1884d83a 	srl	r2,r3,r2
    cbe0:	5222b03a 	or	r17,r10,r8
    cbe4:	2006c03a 	cmpne	r3,r4,zero
    cbe8:	88e2b03a 	or	r17,r17,r3
    cbec:	89a3883a 	add	r17,r17,r6
    cbf0:	1145883a 	add	r2,r2,r5
    cbf4:	898d803a 	cmpltu	r6,r17,r6
    cbf8:	3087883a 	add	r3,r6,r2
    cbfc:	4821883a 	mov	r16,r9
    cc00:	003ed906 	br	c768 <__alt_data_end+0xf800c768>
    cc04:	2984b03a 	or	r2,r5,r6
    cc08:	10004226 	beq	r2,zero,cd14 <__subdf3+0x82c>
    cc0c:	1808d0fa 	srli	r4,r3,3
    cc10:	8822d0fa 	srli	r17,r17,3
    cc14:	1806977a 	slli	r3,r3,29
    cc18:	2080022c 	andhi	r2,r4,8
    cc1c:	1c62b03a 	or	r17,r3,r17
    cc20:	10000826 	beq	r2,zero,cc44 <__subdf3+0x75c>
    cc24:	2812d0fa 	srli	r9,r5,3
    cc28:	4880022c 	andhi	r2,r9,8
    cc2c:	1000051e 	bne	r2,zero,cc44 <__subdf3+0x75c>
    cc30:	300cd0fa 	srli	r6,r6,3
    cc34:	2804977a 	slli	r2,r5,29
    cc38:	4809883a 	mov	r4,r9
    cc3c:	3825883a 	mov	r18,r7
    cc40:	11a2b03a 	or	r17,r2,r6
    cc44:	8806d77a 	srli	r3,r17,29
    cc48:	200890fa 	slli	r4,r4,3
    cc4c:	882290fa 	slli	r17,r17,3
    cc50:	0401ffc4 	movi	r16,2047
    cc54:	1906b03a 	or	r3,r3,r4
    cc58:	003e4406 	br	c56c <__alt_data_end+0xf800c56c>
    cc5c:	2984b03a 	or	r2,r5,r6
    cc60:	103e4226 	beq	r2,zero,c56c <__alt_data_end+0xf800c56c>
    cc64:	8989c83a 	sub	r4,r17,r6
    cc68:	8911803a 	cmpltu	r8,r17,r4
    cc6c:	1945c83a 	sub	r2,r3,r5
    cc70:	1205c83a 	sub	r2,r2,r8
    cc74:	1200202c 	andhi	r8,r2,128
    cc78:	403e9a26 	beq	r8,zero,c6e4 <__alt_data_end+0xf800c6e4>
    cc7c:	3463c83a 	sub	r17,r6,r17
    cc80:	28c5c83a 	sub	r2,r5,r3
    cc84:	344d803a 	cmpltu	r6,r6,r17
    cc88:	1187c83a 	sub	r3,r2,r6
    cc8c:	3825883a 	mov	r18,r7
    cc90:	003e3606 	br	c56c <__alt_data_end+0xf800c56c>
    cc94:	0101ffc4 	movi	r4,2047
    cc98:	493fc71e 	bne	r9,r4,cbb8 <__alt_data_end+0xf800cbb8>
    cc9c:	2807883a 	mov	r3,r5
    cca0:	3023883a 	mov	r17,r6
    cca4:	4821883a 	mov	r16,r9
    cca8:	003e3006 	br	c56c <__alt_data_end+0xf800c56c>
    ccac:	10003626 	beq	r2,zero,cd88 <__subdf3+0x8a0>
    ccb0:	2984b03a 	or	r2,r5,r6
    ccb4:	10001726 	beq	r2,zero,cd14 <__subdf3+0x82c>
    ccb8:	1808d0fa 	srli	r4,r3,3
    ccbc:	8822d0fa 	srli	r17,r17,3
    ccc0:	1806977a 	slli	r3,r3,29
    ccc4:	2080022c 	andhi	r2,r4,8
    ccc8:	1c62b03a 	or	r17,r3,r17
    cccc:	10000726 	beq	r2,zero,ccec <__subdf3+0x804>
    ccd0:	2812d0fa 	srli	r9,r5,3
    ccd4:	4880022c 	andhi	r2,r9,8
    ccd8:	1000041e 	bne	r2,zero,ccec <__subdf3+0x804>
    ccdc:	300cd0fa 	srli	r6,r6,3
    cce0:	2804977a 	slli	r2,r5,29
    cce4:	4809883a 	mov	r4,r9
    cce8:	11a2b03a 	or	r17,r2,r6
    ccec:	8806d77a 	srli	r3,r17,29
    ccf0:	200890fa 	slli	r4,r4,3
    ccf4:	882290fa 	slli	r17,r17,3
    ccf8:	3825883a 	mov	r18,r7
    ccfc:	1906b03a 	or	r3,r3,r4
    cd00:	0401ffc4 	movi	r16,2047
    cd04:	003e1906 	br	c56c <__alt_data_end+0xf800c56c>
    cd08:	000b883a 	mov	r5,zero
    cd0c:	0005883a 	mov	r2,zero
    cd10:	003e2e06 	br	c5cc <__alt_data_end+0xf800c5cc>
    cd14:	0401ffc4 	movi	r16,2047
    cd18:	003e1406 	br	c56c <__alt_data_end+0xf800c56c>
    cd1c:	0005883a 	mov	r2,zero
    cd20:	003f7506 	br	caf8 <__alt_data_end+0xf800caf8>
    cd24:	0005883a 	mov	r2,zero
    cd28:	0009883a 	mov	r4,zero
    cd2c:	003e7806 	br	c710 <__alt_data_end+0xf800c710>
    cd30:	123ff804 	addi	r8,r2,-32
    cd34:	01000804 	movi	r4,32
    cd38:	1a10d83a 	srl	r8,r3,r8
    cd3c:	11002526 	beq	r2,r4,cdd4 <__subdf3+0x8ec>
    cd40:	01001004 	movi	r4,64
    cd44:	2085c83a 	sub	r2,r4,r2
    cd48:	1884983a 	sll	r2,r3,r2
    cd4c:	1444b03a 	or	r2,r2,r17
    cd50:	1004c03a 	cmpne	r2,r2,zero
    cd54:	40a2b03a 	or	r17,r8,r2
    cd58:	0005883a 	mov	r2,zero
    cd5c:	003f1606 	br	c9b8 <__alt_data_end+0xf800c9b8>
    cd60:	02000434 	movhi	r8,16
    cd64:	0009883a 	mov	r4,zero
    cd68:	423fffc4 	addi	r8,r8,-1
    cd6c:	00bfffc4 	movi	r2,-1
    cd70:	0401ffc4 	movi	r16,2047
    cd74:	003e6606 	br	c710 <__alt_data_end+0xf800c710>
    cd78:	1c62b03a 	or	r17,r3,r17
    cd7c:	8822c03a 	cmpne	r17,r17,zero
    cd80:	0005883a 	mov	r2,zero
    cd84:	003f9906 	br	cbec <__alt_data_end+0xf800cbec>
    cd88:	2807883a 	mov	r3,r5
    cd8c:	3023883a 	mov	r17,r6
    cd90:	0401ffc4 	movi	r16,2047
    cd94:	003df506 	br	c56c <__alt_data_end+0xf800c56c>
    cd98:	2807883a 	mov	r3,r5
    cd9c:	3023883a 	mov	r17,r6
    cda0:	003df206 	br	c56c <__alt_data_end+0xf800c56c>
    cda4:	123ff804 	addi	r8,r2,-32
    cda8:	01000804 	movi	r4,32
    cdac:	1a10d83a 	srl	r8,r3,r8
    cdb0:	11000a26 	beq	r2,r4,cddc <__subdf3+0x8f4>
    cdb4:	01001004 	movi	r4,64
    cdb8:	2085c83a 	sub	r2,r4,r2
    cdbc:	1884983a 	sll	r2,r3,r2
    cdc0:	1444b03a 	or	r2,r2,r17
    cdc4:	1004c03a 	cmpne	r2,r2,zero
    cdc8:	40a2b03a 	or	r17,r8,r2
    cdcc:	0005883a 	mov	r2,zero
    cdd0:	003f8606 	br	cbec <__alt_data_end+0xf800cbec>
    cdd4:	0005883a 	mov	r2,zero
    cdd8:	003fdc06 	br	cd4c <__alt_data_end+0xf800cd4c>
    cddc:	0005883a 	mov	r2,zero
    cde0:	003ff706 	br	cdc0 <__alt_data_end+0xf800cdc0>

0000cde4 <__fixdfsi>:
    cde4:	280cd53a 	srli	r6,r5,20
    cde8:	00c00434 	movhi	r3,16
    cdec:	18ffffc4 	addi	r3,r3,-1
    cdf0:	3181ffcc 	andi	r6,r6,2047
    cdf4:	01c0ff84 	movi	r7,1022
    cdf8:	28c6703a 	and	r3,r5,r3
    cdfc:	280ad7fa 	srli	r5,r5,31
    ce00:	3980120e 	bge	r7,r6,ce4c <__fixdfsi+0x68>
    ce04:	00810744 	movi	r2,1053
    ce08:	11800c16 	blt	r2,r6,ce3c <__fixdfsi+0x58>
    ce0c:	00810cc4 	movi	r2,1075
    ce10:	1185c83a 	sub	r2,r2,r6
    ce14:	01c007c4 	movi	r7,31
    ce18:	18c00434 	orhi	r3,r3,16
    ce1c:	38800d16 	blt	r7,r2,ce54 <__fixdfsi+0x70>
    ce20:	31befb44 	addi	r6,r6,-1043
    ce24:	2084d83a 	srl	r2,r4,r2
    ce28:	1986983a 	sll	r3,r3,r6
    ce2c:	1884b03a 	or	r2,r3,r2
    ce30:	28000726 	beq	r5,zero,ce50 <__fixdfsi+0x6c>
    ce34:	0085c83a 	sub	r2,zero,r2
    ce38:	f800283a 	ret
    ce3c:	00a00034 	movhi	r2,32768
    ce40:	10bfffc4 	addi	r2,r2,-1
    ce44:	2885883a 	add	r2,r5,r2
    ce48:	f800283a 	ret
    ce4c:	0005883a 	mov	r2,zero
    ce50:	f800283a 	ret
    ce54:	008104c4 	movi	r2,1043
    ce58:	1185c83a 	sub	r2,r2,r6
    ce5c:	1884d83a 	srl	r2,r3,r2
    ce60:	003ff306 	br	ce30 <__alt_data_end+0xf800ce30>

0000ce64 <__floatsidf>:
    ce64:	defffd04 	addi	sp,sp,-12
    ce68:	dfc00215 	stw	ra,8(sp)
    ce6c:	dc400115 	stw	r17,4(sp)
    ce70:	dc000015 	stw	r16,0(sp)
    ce74:	20002b26 	beq	r4,zero,cf24 <__floatsidf+0xc0>
    ce78:	2023883a 	mov	r17,r4
    ce7c:	2020d7fa 	srli	r16,r4,31
    ce80:	20002d16 	blt	r4,zero,cf38 <__floatsidf+0xd4>
    ce84:	8809883a 	mov	r4,r17
    ce88:	000cfe80 	call	cfe8 <__clzsi2>
    ce8c:	01410784 	movi	r5,1054
    ce90:	288bc83a 	sub	r5,r5,r2
    ce94:	01010cc4 	movi	r4,1075
    ce98:	2149c83a 	sub	r4,r4,r5
    ce9c:	00c007c4 	movi	r3,31
    cea0:	1900160e 	bge	r3,r4,cefc <__floatsidf+0x98>
    cea4:	00c104c4 	movi	r3,1043
    cea8:	1947c83a 	sub	r3,r3,r5
    ceac:	88c6983a 	sll	r3,r17,r3
    ceb0:	00800434 	movhi	r2,16
    ceb4:	10bfffc4 	addi	r2,r2,-1
    ceb8:	1886703a 	and	r3,r3,r2
    cebc:	2941ffcc 	andi	r5,r5,2047
    cec0:	800d883a 	mov	r6,r16
    cec4:	0005883a 	mov	r2,zero
    cec8:	280a953a 	slli	r5,r5,20
    cecc:	31803fcc 	andi	r6,r6,255
    ced0:	01000434 	movhi	r4,16
    ced4:	300c97fa 	slli	r6,r6,31
    ced8:	213fffc4 	addi	r4,r4,-1
    cedc:	1906703a 	and	r3,r3,r4
    cee0:	1946b03a 	or	r3,r3,r5
    cee4:	1986b03a 	or	r3,r3,r6
    cee8:	dfc00217 	ldw	ra,8(sp)
    ceec:	dc400117 	ldw	r17,4(sp)
    cef0:	dc000017 	ldw	r16,0(sp)
    cef4:	dec00304 	addi	sp,sp,12
    cef8:	f800283a 	ret
    cefc:	00c002c4 	movi	r3,11
    cf00:	1887c83a 	sub	r3,r3,r2
    cf04:	88c6d83a 	srl	r3,r17,r3
    cf08:	8904983a 	sll	r2,r17,r4
    cf0c:	01000434 	movhi	r4,16
    cf10:	213fffc4 	addi	r4,r4,-1
    cf14:	2941ffcc 	andi	r5,r5,2047
    cf18:	1906703a 	and	r3,r3,r4
    cf1c:	800d883a 	mov	r6,r16
    cf20:	003fe906 	br	cec8 <__alt_data_end+0xf800cec8>
    cf24:	000d883a 	mov	r6,zero
    cf28:	000b883a 	mov	r5,zero
    cf2c:	0007883a 	mov	r3,zero
    cf30:	0005883a 	mov	r2,zero
    cf34:	003fe406 	br	cec8 <__alt_data_end+0xf800cec8>
    cf38:	0123c83a 	sub	r17,zero,r4
    cf3c:	003fd106 	br	ce84 <__alt_data_end+0xf800ce84>

0000cf40 <__floatunsidf>:
    cf40:	defffe04 	addi	sp,sp,-8
    cf44:	dc000015 	stw	r16,0(sp)
    cf48:	dfc00115 	stw	ra,4(sp)
    cf4c:	2021883a 	mov	r16,r4
    cf50:	20002226 	beq	r4,zero,cfdc <__floatunsidf+0x9c>
    cf54:	000cfe80 	call	cfe8 <__clzsi2>
    cf58:	01010784 	movi	r4,1054
    cf5c:	2089c83a 	sub	r4,r4,r2
    cf60:	01810cc4 	movi	r6,1075
    cf64:	310dc83a 	sub	r6,r6,r4
    cf68:	00c007c4 	movi	r3,31
    cf6c:	1980120e 	bge	r3,r6,cfb8 <__floatunsidf+0x78>
    cf70:	00c104c4 	movi	r3,1043
    cf74:	1907c83a 	sub	r3,r3,r4
    cf78:	80ca983a 	sll	r5,r16,r3
    cf7c:	00800434 	movhi	r2,16
    cf80:	10bfffc4 	addi	r2,r2,-1
    cf84:	2101ffcc 	andi	r4,r4,2047
    cf88:	0021883a 	mov	r16,zero
    cf8c:	288a703a 	and	r5,r5,r2
    cf90:	2008953a 	slli	r4,r4,20
    cf94:	00c00434 	movhi	r3,16
    cf98:	18ffffc4 	addi	r3,r3,-1
    cf9c:	28c6703a 	and	r3,r5,r3
    cfa0:	8005883a 	mov	r2,r16
    cfa4:	1906b03a 	or	r3,r3,r4
    cfa8:	dfc00117 	ldw	ra,4(sp)
    cfac:	dc000017 	ldw	r16,0(sp)
    cfb0:	dec00204 	addi	sp,sp,8
    cfb4:	f800283a 	ret
    cfb8:	00c002c4 	movi	r3,11
    cfbc:	188bc83a 	sub	r5,r3,r2
    cfc0:	814ad83a 	srl	r5,r16,r5
    cfc4:	00c00434 	movhi	r3,16
    cfc8:	18ffffc4 	addi	r3,r3,-1
    cfcc:	81a0983a 	sll	r16,r16,r6
    cfd0:	2101ffcc 	andi	r4,r4,2047
    cfd4:	28ca703a 	and	r5,r5,r3
    cfd8:	003fed06 	br	cf90 <__alt_data_end+0xf800cf90>
    cfdc:	0009883a 	mov	r4,zero
    cfe0:	000b883a 	mov	r5,zero
    cfe4:	003fea06 	br	cf90 <__alt_data_end+0xf800cf90>

0000cfe8 <__clzsi2>:
    cfe8:	00bfffd4 	movui	r2,65535
    cfec:	11000536 	bltu	r2,r4,d004 <__clzsi2+0x1c>
    cff0:	00803fc4 	movi	r2,255
    cff4:	11000f36 	bltu	r2,r4,d034 <__clzsi2+0x4c>
    cff8:	00800804 	movi	r2,32
    cffc:	0007883a 	mov	r3,zero
    d000:	00000506 	br	d018 <__clzsi2+0x30>
    d004:	00804034 	movhi	r2,256
    d008:	10bfffc4 	addi	r2,r2,-1
    d00c:	11000c2e 	bgeu	r2,r4,d040 <__clzsi2+0x58>
    d010:	00800204 	movi	r2,8
    d014:	00c00604 	movi	r3,24
    d018:	20c8d83a 	srl	r4,r4,r3
    d01c:	00c00074 	movhi	r3,1
    d020:	18d04d04 	addi	r3,r3,16692
    d024:	1909883a 	add	r4,r3,r4
    d028:	20c00003 	ldbu	r3,0(r4)
    d02c:	10c5c83a 	sub	r2,r2,r3
    d030:	f800283a 	ret
    d034:	00800604 	movi	r2,24
    d038:	00c00204 	movi	r3,8
    d03c:	003ff606 	br	d018 <__alt_data_end+0xf800d018>
    d040:	00800404 	movi	r2,16
    d044:	1007883a 	mov	r3,r2
    d048:	003ff306 	br	d018 <__alt_data_end+0xf800d018>

0000d04c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d04c:	defffe04 	addi	sp,sp,-8
    d050:	dfc00115 	stw	ra,4(sp)
    d054:	df000015 	stw	fp,0(sp)
    d058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d05c:	d0a00b17 	ldw	r2,-32724(gp)
    d060:	10000326 	beq	r2,zero,d070 <alt_get_errno+0x24>
    d064:	d0a00b17 	ldw	r2,-32724(gp)
    d068:	103ee83a 	callr	r2
    d06c:	00000106 	br	d074 <alt_get_errno+0x28>
    d070:	d0a6fc04 	addi	r2,gp,-25616
}
    d074:	e037883a 	mov	sp,fp
    d078:	dfc00117 	ldw	ra,4(sp)
    d07c:	df000017 	ldw	fp,0(sp)
    d080:	dec00204 	addi	sp,sp,8
    d084:	f800283a 	ret

0000d088 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d088:	defffb04 	addi	sp,sp,-20
    d08c:	dfc00415 	stw	ra,16(sp)
    d090:	df000315 	stw	fp,12(sp)
    d094:	df000304 	addi	fp,sp,12
    d098:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d09c:	e0bfff17 	ldw	r2,-4(fp)
    d0a0:	10000616 	blt	r2,zero,d0bc <close+0x34>
    d0a4:	e0bfff17 	ldw	r2,-4(fp)
    d0a8:	10c00324 	muli	r3,r2,12
    d0ac:	00800074 	movhi	r2,1
    d0b0:	1092df04 	addi	r2,r2,19324
    d0b4:	1885883a 	add	r2,r3,r2
    d0b8:	00000106 	br	d0c0 <close+0x38>
    d0bc:	0005883a 	mov	r2,zero
    d0c0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d0c4:	e0bffd17 	ldw	r2,-12(fp)
    d0c8:	10001926 	beq	r2,zero,d130 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d0cc:	e0bffd17 	ldw	r2,-12(fp)
    d0d0:	10800017 	ldw	r2,0(r2)
    d0d4:	10800417 	ldw	r2,16(r2)
    d0d8:	10000626 	beq	r2,zero,d0f4 <close+0x6c>
    d0dc:	e0bffd17 	ldw	r2,-12(fp)
    d0e0:	10800017 	ldw	r2,0(r2)
    d0e4:	10800417 	ldw	r2,16(r2)
    d0e8:	e13ffd17 	ldw	r4,-12(fp)
    d0ec:	103ee83a 	callr	r2
    d0f0:	00000106 	br	d0f8 <close+0x70>
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d0fc:	e13fff17 	ldw	r4,-4(fp)
    d100:	000d7480 	call	d748 <alt_release_fd>
    if (rval < 0)
    d104:	e0bffe17 	ldw	r2,-8(fp)
    d108:	1000070e 	bge	r2,zero,d128 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d10c:	000d04c0 	call	d04c <alt_get_errno>
    d110:	1007883a 	mov	r3,r2
    d114:	e0bffe17 	ldw	r2,-8(fp)
    d118:	0085c83a 	sub	r2,zero,r2
    d11c:	18800015 	stw	r2,0(r3)
      return -1;
    d120:	00bfffc4 	movi	r2,-1
    d124:	00000706 	br	d144 <close+0xbc>
    }
    return 0;
    d128:	0005883a 	mov	r2,zero
    d12c:	00000506 	br	d144 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d130:	000d04c0 	call	d04c <alt_get_errno>
    d134:	1007883a 	mov	r3,r2
    d138:	00801444 	movi	r2,81
    d13c:	18800015 	stw	r2,0(r3)
    return -1;
    d140:	00bfffc4 	movi	r2,-1
  }
}
    d144:	e037883a 	mov	sp,fp
    d148:	dfc00117 	ldw	ra,4(sp)
    d14c:	df000017 	ldw	fp,0(sp)
    d150:	dec00204 	addi	sp,sp,8
    d154:	f800283a 	ret

0000d158 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d158:	defffc04 	addi	sp,sp,-16
    d15c:	df000315 	stw	fp,12(sp)
    d160:	df000304 	addi	fp,sp,12
    d164:	e13ffd15 	stw	r4,-12(fp)
    d168:	e17ffe15 	stw	r5,-8(fp)
    d16c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d170:	e0bfff17 	ldw	r2,-4(fp)
}
    d174:	e037883a 	mov	sp,fp
    d178:	df000017 	ldw	fp,0(sp)
    d17c:	dec00104 	addi	sp,sp,4
    d180:	f800283a 	ret

0000d184 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d184:	defffe04 	addi	sp,sp,-8
    d188:	dfc00115 	stw	ra,4(sp)
    d18c:	df000015 	stw	fp,0(sp)
    d190:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d194:	d0a00b17 	ldw	r2,-32724(gp)
    d198:	10000326 	beq	r2,zero,d1a8 <alt_get_errno+0x24>
    d19c:	d0a00b17 	ldw	r2,-32724(gp)
    d1a0:	103ee83a 	callr	r2
    d1a4:	00000106 	br	d1ac <alt_get_errno+0x28>
    d1a8:	d0a6fc04 	addi	r2,gp,-25616
}
    d1ac:	e037883a 	mov	sp,fp
    d1b0:	dfc00117 	ldw	ra,4(sp)
    d1b4:	df000017 	ldw	fp,0(sp)
    d1b8:	dec00204 	addi	sp,sp,8
    d1bc:	f800283a 	ret

0000d1c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d1c0:	defffb04 	addi	sp,sp,-20
    d1c4:	dfc00415 	stw	ra,16(sp)
    d1c8:	df000315 	stw	fp,12(sp)
    d1cc:	df000304 	addi	fp,sp,12
    d1d0:	e13ffe15 	stw	r4,-8(fp)
    d1d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	10000616 	blt	r2,zero,d1f8 <fstat+0x38>
    d1e0:	e0bffe17 	ldw	r2,-8(fp)
    d1e4:	10c00324 	muli	r3,r2,12
    d1e8:	00800074 	movhi	r2,1
    d1ec:	1092df04 	addi	r2,r2,19324
    d1f0:	1885883a 	add	r2,r3,r2
    d1f4:	00000106 	br	d1fc <fstat+0x3c>
    d1f8:	0005883a 	mov	r2,zero
    d1fc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d200:	e0bffd17 	ldw	r2,-12(fp)
    d204:	10001026 	beq	r2,zero,d248 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d208:	e0bffd17 	ldw	r2,-12(fp)
    d20c:	10800017 	ldw	r2,0(r2)
    d210:	10800817 	ldw	r2,32(r2)
    d214:	10000726 	beq	r2,zero,d234 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d218:	e0bffd17 	ldw	r2,-12(fp)
    d21c:	10800017 	ldw	r2,0(r2)
    d220:	10800817 	ldw	r2,32(r2)
    d224:	e17fff17 	ldw	r5,-4(fp)
    d228:	e13ffd17 	ldw	r4,-12(fp)
    d22c:	103ee83a 	callr	r2
    d230:	00000a06 	br	d25c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d234:	e0bfff17 	ldw	r2,-4(fp)
    d238:	00c80004 	movi	r3,8192
    d23c:	10c00115 	stw	r3,4(r2)
      return 0;
    d240:	0005883a 	mov	r2,zero
    d244:	00000506 	br	d25c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d248:	000d1840 	call	d184 <alt_get_errno>
    d24c:	1007883a 	mov	r3,r2
    d250:	00801444 	movi	r2,81
    d254:	18800015 	stw	r2,0(r3)
    return -1;
    d258:	00bfffc4 	movi	r2,-1
  }
}
    d25c:	e037883a 	mov	sp,fp
    d260:	dfc00117 	ldw	ra,4(sp)
    d264:	df000017 	ldw	fp,0(sp)
    d268:	dec00204 	addi	sp,sp,8
    d26c:	f800283a 	ret

0000d270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d270:	defffe04 	addi	sp,sp,-8
    d274:	dfc00115 	stw	ra,4(sp)
    d278:	df000015 	stw	fp,0(sp)
    d27c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d280:	d0a00b17 	ldw	r2,-32724(gp)
    d284:	10000326 	beq	r2,zero,d294 <alt_get_errno+0x24>
    d288:	d0a00b17 	ldw	r2,-32724(gp)
    d28c:	103ee83a 	callr	r2
    d290:	00000106 	br	d298 <alt_get_errno+0x28>
    d294:	d0a6fc04 	addi	r2,gp,-25616
}
    d298:	e037883a 	mov	sp,fp
    d29c:	dfc00117 	ldw	ra,4(sp)
    d2a0:	df000017 	ldw	fp,0(sp)
    d2a4:	dec00204 	addi	sp,sp,8
    d2a8:	f800283a 	ret

0000d2ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d2ac:	deffed04 	addi	sp,sp,-76
    d2b0:	dfc01215 	stw	ra,72(sp)
    d2b4:	df001115 	stw	fp,68(sp)
    d2b8:	df001104 	addi	fp,sp,68
    d2bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d2c0:	e0bfff17 	ldw	r2,-4(fp)
    d2c4:	10000616 	blt	r2,zero,d2e0 <isatty+0x34>
    d2c8:	e0bfff17 	ldw	r2,-4(fp)
    d2cc:	10c00324 	muli	r3,r2,12
    d2d0:	00800074 	movhi	r2,1
    d2d4:	1092df04 	addi	r2,r2,19324
    d2d8:	1885883a 	add	r2,r3,r2
    d2dc:	00000106 	br	d2e4 <isatty+0x38>
    d2e0:	0005883a 	mov	r2,zero
    d2e4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d2e8:	e0bfef17 	ldw	r2,-68(fp)
    d2ec:	10000e26 	beq	r2,zero,d328 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d2f0:	e0bfef17 	ldw	r2,-68(fp)
    d2f4:	10800017 	ldw	r2,0(r2)
    d2f8:	10800817 	ldw	r2,32(r2)
    d2fc:	1000021e 	bne	r2,zero,d308 <isatty+0x5c>
    {
      return 1;
    d300:	00800044 	movi	r2,1
    d304:	00000d06 	br	d33c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d308:	e0bff004 	addi	r2,fp,-64
    d30c:	100b883a 	mov	r5,r2
    d310:	e13fff17 	ldw	r4,-4(fp)
    d314:	000d1c00 	call	d1c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d318:	e0bff117 	ldw	r2,-60(fp)
    d31c:	10880020 	cmpeqi	r2,r2,8192
    d320:	10803fcc 	andi	r2,r2,255
    d324:	00000506 	br	d33c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d328:	000d2700 	call	d270 <alt_get_errno>
    d32c:	1007883a 	mov	r3,r2
    d330:	00801444 	movi	r2,81
    d334:	18800015 	stw	r2,0(r3)
    return 0;
    d338:	0005883a 	mov	r2,zero
  }
}
    d33c:	e037883a 	mov	sp,fp
    d340:	dfc00117 	ldw	ra,4(sp)
    d344:	df000017 	ldw	fp,0(sp)
    d348:	dec00204 	addi	sp,sp,8
    d34c:	f800283a 	ret

0000d350 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d350:	defffc04 	addi	sp,sp,-16
    d354:	df000315 	stw	fp,12(sp)
    d358:	df000304 	addi	fp,sp,12
    d35c:	e13ffd15 	stw	r4,-12(fp)
    d360:	e17ffe15 	stw	r5,-8(fp)
    d364:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d368:	e0fffe17 	ldw	r3,-8(fp)
    d36c:	e0bffd17 	ldw	r2,-12(fp)
    d370:	18800c26 	beq	r3,r2,d3a4 <alt_load_section+0x54>
  {
    while( to != end )
    d374:	00000806 	br	d398 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d378:	e0bffe17 	ldw	r2,-8(fp)
    d37c:	10c00104 	addi	r3,r2,4
    d380:	e0fffe15 	stw	r3,-8(fp)
    d384:	e0fffd17 	ldw	r3,-12(fp)
    d388:	19000104 	addi	r4,r3,4
    d38c:	e13ffd15 	stw	r4,-12(fp)
    d390:	18c00017 	ldw	r3,0(r3)
    d394:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d398:	e0fffe17 	ldw	r3,-8(fp)
    d39c:	e0bfff17 	ldw	r2,-4(fp)
    d3a0:	18bff51e 	bne	r3,r2,d378 <__alt_data_end+0xf800d378>
    {
      *to++ = *from++;
    }
  }
}
    d3a4:	0001883a 	nop
    d3a8:	e037883a 	mov	sp,fp
    d3ac:	df000017 	ldw	fp,0(sp)
    d3b0:	dec00104 	addi	sp,sp,4
    d3b4:	f800283a 	ret

0000d3b8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d3b8:	defffe04 	addi	sp,sp,-8
    d3bc:	dfc00115 	stw	ra,4(sp)
    d3c0:	df000015 	stw	fp,0(sp)
    d3c4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d3c8:	01800074 	movhi	r6,1
    d3cc:	31979504 	addi	r6,r6,24148
    d3d0:	01400074 	movhi	r5,1
    d3d4:	2950ac04 	addi	r5,r5,17072
    d3d8:	01000074 	movhi	r4,1
    d3dc:	21179504 	addi	r4,r4,24148
    d3e0:	000d3500 	call	d350 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d3e4:	01800034 	movhi	r6,0
    d3e8:	31809204 	addi	r6,r6,584
    d3ec:	01400034 	movhi	r5,0
    d3f0:	29400804 	addi	r5,r5,32
    d3f4:	01000034 	movhi	r4,0
    d3f8:	21000804 	addi	r4,r4,32
    d3fc:	000d3500 	call	d350 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d400:	01800074 	movhi	r6,1
    d404:	3190ac04 	addi	r6,r6,17072
    d408:	01400074 	movhi	r5,1
    d40c:	294fa704 	addi	r5,r5,16028
    d410:	01000074 	movhi	r4,1
    d414:	210fa704 	addi	r4,r4,16028
    d418:	000d3500 	call	d350 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d41c:	0012ed00 	call	12ed0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d420:	00131200 	call	13120 <alt_icache_flush_all>
}
    d424:	0001883a 	nop
    d428:	e037883a 	mov	sp,fp
    d42c:	dfc00117 	ldw	ra,4(sp)
    d430:	df000017 	ldw	fp,0(sp)
    d434:	dec00204 	addi	sp,sp,8
    d438:	f800283a 	ret

0000d43c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d43c:	defffe04 	addi	sp,sp,-8
    d440:	dfc00115 	stw	ra,4(sp)
    d444:	df000015 	stw	fp,0(sp)
    d448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d44c:	d0a00b17 	ldw	r2,-32724(gp)
    d450:	10000326 	beq	r2,zero,d460 <alt_get_errno+0x24>
    d454:	d0a00b17 	ldw	r2,-32724(gp)
    d458:	103ee83a 	callr	r2
    d45c:	00000106 	br	d464 <alt_get_errno+0x28>
    d460:	d0a6fc04 	addi	r2,gp,-25616
}
    d464:	e037883a 	mov	sp,fp
    d468:	dfc00117 	ldw	ra,4(sp)
    d46c:	df000017 	ldw	fp,0(sp)
    d470:	dec00204 	addi	sp,sp,8
    d474:	f800283a 	ret

0000d478 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d478:	defff904 	addi	sp,sp,-28
    d47c:	dfc00615 	stw	ra,24(sp)
    d480:	df000515 	stw	fp,20(sp)
    d484:	df000504 	addi	fp,sp,20
    d488:	e13ffd15 	stw	r4,-12(fp)
    d48c:	e17ffe15 	stw	r5,-8(fp)
    d490:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d494:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d498:	e0bffd17 	ldw	r2,-12(fp)
    d49c:	10000616 	blt	r2,zero,d4b8 <lseek+0x40>
    d4a0:	e0bffd17 	ldw	r2,-12(fp)
    d4a4:	10c00324 	muli	r3,r2,12
    d4a8:	00800074 	movhi	r2,1
    d4ac:	1092df04 	addi	r2,r2,19324
    d4b0:	1885883a 	add	r2,r3,r2
    d4b4:	00000106 	br	d4bc <lseek+0x44>
    d4b8:	0005883a 	mov	r2,zero
    d4bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d4c0:	e0bffc17 	ldw	r2,-16(fp)
    d4c4:	10001026 	beq	r2,zero,d508 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d4c8:	e0bffc17 	ldw	r2,-16(fp)
    d4cc:	10800017 	ldw	r2,0(r2)
    d4d0:	10800717 	ldw	r2,28(r2)
    d4d4:	10000926 	beq	r2,zero,d4fc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d4d8:	e0bffc17 	ldw	r2,-16(fp)
    d4dc:	10800017 	ldw	r2,0(r2)
    d4e0:	10800717 	ldw	r2,28(r2)
    d4e4:	e1bfff17 	ldw	r6,-4(fp)
    d4e8:	e17ffe17 	ldw	r5,-8(fp)
    d4ec:	e13ffc17 	ldw	r4,-16(fp)
    d4f0:	103ee83a 	callr	r2
    d4f4:	e0bffb15 	stw	r2,-20(fp)
    d4f8:	00000506 	br	d510 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d4fc:	00bfde84 	movi	r2,-134
    d500:	e0bffb15 	stw	r2,-20(fp)
    d504:	00000206 	br	d510 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d508:	00bfebc4 	movi	r2,-81
    d50c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d510:	e0bffb17 	ldw	r2,-20(fp)
    d514:	1000070e 	bge	r2,zero,d534 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d518:	000d43c0 	call	d43c <alt_get_errno>
    d51c:	1007883a 	mov	r3,r2
    d520:	e0bffb17 	ldw	r2,-20(fp)
    d524:	0085c83a 	sub	r2,zero,r2
    d528:	18800015 	stw	r2,0(r3)
    rc = -1;
    d52c:	00bfffc4 	movi	r2,-1
    d530:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d534:	e0bffb17 	ldw	r2,-20(fp)
}
    d538:	e037883a 	mov	sp,fp
    d53c:	dfc00117 	ldw	ra,4(sp)
    d540:	df000017 	ldw	fp,0(sp)
    d544:	dec00204 	addi	sp,sp,8
    d548:	f800283a 	ret

0000d54c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d54c:	defffd04 	addi	sp,sp,-12
    d550:	dfc00215 	stw	ra,8(sp)
    d554:	df000115 	stw	fp,4(sp)
    d558:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d55c:	0009883a 	mov	r4,zero
    d560:	000d9c40 	call	d9c4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d564:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d568:	000d9fc0 	call	d9fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d56c:	01800074 	movhi	r6,1
    d570:	31909004 	addi	r6,r6,16960
    d574:	01400074 	movhi	r5,1
    d578:	29509004 	addi	r5,r5,16960
    d57c:	01000074 	movhi	r4,1
    d580:	21109004 	addi	r4,r4,16960
    d584:	00132180 	call	13218 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d588:	0012fd00 	call	12fd0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d58c:	01000074 	movhi	r4,1
    d590:	210c0c04 	addi	r4,r4,12336
    d594:	0013b080 	call	13b08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d598:	d0a70017 	ldw	r2,-25600(gp)
    d59c:	d0e70117 	ldw	r3,-25596(gp)
    d5a0:	d1270217 	ldw	r4,-25592(gp)
    d5a4:	200d883a 	mov	r6,r4
    d5a8:	180b883a 	mov	r5,r3
    d5ac:	1009883a 	mov	r4,r2
    d5b0:	00005380 	call	538 <main>
    d5b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d5b8:	01000044 	movi	r4,1
    d5bc:	000d0880 	call	d088 <close>
  exit (result);
    d5c0:	e13fff17 	ldw	r4,-4(fp)
    d5c4:	0013b1c0 	call	13b1c <exit>

0000d5c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d5c8:	defffe04 	addi	sp,sp,-8
    d5cc:	df000115 	stw	fp,4(sp)
    d5d0:	df000104 	addi	fp,sp,4
    d5d4:	e13fff15 	stw	r4,-4(fp)
}
    d5d8:	0001883a 	nop
    d5dc:	e037883a 	mov	sp,fp
    d5e0:	df000017 	ldw	fp,0(sp)
    d5e4:	dec00104 	addi	sp,sp,4
    d5e8:	f800283a 	ret

0000d5ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d5ec:	defffe04 	addi	sp,sp,-8
    d5f0:	df000115 	stw	fp,4(sp)
    d5f4:	df000104 	addi	fp,sp,4
    d5f8:	e13fff15 	stw	r4,-4(fp)
}
    d5fc:	0001883a 	nop
    d600:	e037883a 	mov	sp,fp
    d604:	df000017 	ldw	fp,0(sp)
    d608:	dec00104 	addi	sp,sp,4
    d60c:	f800283a 	ret

0000d610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d610:	defffe04 	addi	sp,sp,-8
    d614:	dfc00115 	stw	ra,4(sp)
    d618:	df000015 	stw	fp,0(sp)
    d61c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d620:	d0a00b17 	ldw	r2,-32724(gp)
    d624:	10000326 	beq	r2,zero,d634 <alt_get_errno+0x24>
    d628:	d0a00b17 	ldw	r2,-32724(gp)
    d62c:	103ee83a 	callr	r2
    d630:	00000106 	br	d638 <alt_get_errno+0x28>
    d634:	d0a6fc04 	addi	r2,gp,-25616
}
    d638:	e037883a 	mov	sp,fp
    d63c:	dfc00117 	ldw	ra,4(sp)
    d640:	df000017 	ldw	fp,0(sp)
    d644:	dec00204 	addi	sp,sp,8
    d648:	f800283a 	ret

0000d64c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d64c:	defff904 	addi	sp,sp,-28
    d650:	dfc00615 	stw	ra,24(sp)
    d654:	df000515 	stw	fp,20(sp)
    d658:	df000504 	addi	fp,sp,20
    d65c:	e13ffd15 	stw	r4,-12(fp)
    d660:	e17ffe15 	stw	r5,-8(fp)
    d664:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d668:	e0bffd17 	ldw	r2,-12(fp)
    d66c:	10000616 	blt	r2,zero,d688 <read+0x3c>
    d670:	e0bffd17 	ldw	r2,-12(fp)
    d674:	10c00324 	muli	r3,r2,12
    d678:	00800074 	movhi	r2,1
    d67c:	1092df04 	addi	r2,r2,19324
    d680:	1885883a 	add	r2,r3,r2
    d684:	00000106 	br	d68c <read+0x40>
    d688:	0005883a 	mov	r2,zero
    d68c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d690:	e0bffb17 	ldw	r2,-20(fp)
    d694:	10002226 	beq	r2,zero,d720 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d698:	e0bffb17 	ldw	r2,-20(fp)
    d69c:	10800217 	ldw	r2,8(r2)
    d6a0:	108000cc 	andi	r2,r2,3
    d6a4:	10800060 	cmpeqi	r2,r2,1
    d6a8:	1000181e 	bne	r2,zero,d70c <read+0xc0>
        (fd->dev->read))
    d6ac:	e0bffb17 	ldw	r2,-20(fp)
    d6b0:	10800017 	ldw	r2,0(r2)
    d6b4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d6b8:	10001426 	beq	r2,zero,d70c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d6bc:	e0bffb17 	ldw	r2,-20(fp)
    d6c0:	10800017 	ldw	r2,0(r2)
    d6c4:	10800517 	ldw	r2,20(r2)
    d6c8:	e0ffff17 	ldw	r3,-4(fp)
    d6cc:	180d883a 	mov	r6,r3
    d6d0:	e17ffe17 	ldw	r5,-8(fp)
    d6d4:	e13ffb17 	ldw	r4,-20(fp)
    d6d8:	103ee83a 	callr	r2
    d6dc:	e0bffc15 	stw	r2,-16(fp)
    d6e0:	e0bffc17 	ldw	r2,-16(fp)
    d6e4:	1000070e 	bge	r2,zero,d704 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d6e8:	000d6100 	call	d610 <alt_get_errno>
    d6ec:	1007883a 	mov	r3,r2
    d6f0:	e0bffc17 	ldw	r2,-16(fp)
    d6f4:	0085c83a 	sub	r2,zero,r2
    d6f8:	18800015 	stw	r2,0(r3)
          return -1;
    d6fc:	00bfffc4 	movi	r2,-1
    d700:	00000c06 	br	d734 <read+0xe8>
        }
        return rval;
    d704:	e0bffc17 	ldw	r2,-16(fp)
    d708:	00000a06 	br	d734 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d70c:	000d6100 	call	d610 <alt_get_errno>
    d710:	1007883a 	mov	r3,r2
    d714:	00800344 	movi	r2,13
    d718:	18800015 	stw	r2,0(r3)
    d71c:	00000406 	br	d730 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d720:	000d6100 	call	d610 <alt_get_errno>
    d724:	1007883a 	mov	r3,r2
    d728:	00801444 	movi	r2,81
    d72c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d730:	00bfffc4 	movi	r2,-1
}
    d734:	e037883a 	mov	sp,fp
    d738:	dfc00117 	ldw	ra,4(sp)
    d73c:	df000017 	ldw	fp,0(sp)
    d740:	dec00204 	addi	sp,sp,8
    d744:	f800283a 	ret

0000d748 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d748:	defffe04 	addi	sp,sp,-8
    d74c:	df000115 	stw	fp,4(sp)
    d750:	df000104 	addi	fp,sp,4
    d754:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d758:	e0bfff17 	ldw	r2,-4(fp)
    d75c:	108000d0 	cmplti	r2,r2,3
    d760:	10000d1e 	bne	r2,zero,d798 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d764:	00800074 	movhi	r2,1
    d768:	1092df04 	addi	r2,r2,19324
    d76c:	e0ffff17 	ldw	r3,-4(fp)
    d770:	18c00324 	muli	r3,r3,12
    d774:	10c5883a 	add	r2,r2,r3
    d778:	10800204 	addi	r2,r2,8
    d77c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d780:	00800074 	movhi	r2,1
    d784:	1092df04 	addi	r2,r2,19324
    d788:	e0ffff17 	ldw	r3,-4(fp)
    d78c:	18c00324 	muli	r3,r3,12
    d790:	10c5883a 	add	r2,r2,r3
    d794:	10000015 	stw	zero,0(r2)
  }
}
    d798:	0001883a 	nop
    d79c:	e037883a 	mov	sp,fp
    d7a0:	df000017 	ldw	fp,0(sp)
    d7a4:	dec00104 	addi	sp,sp,4
    d7a8:	f800283a 	ret

0000d7ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d7ac:	defff904 	addi	sp,sp,-28
    d7b0:	df000615 	stw	fp,24(sp)
    d7b4:	df000604 	addi	fp,sp,24
    d7b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d7bc:	0005303a 	rdctl	r2,status
    d7c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d7c4:	e0fffe17 	ldw	r3,-8(fp)
    d7c8:	00bfff84 	movi	r2,-2
    d7cc:	1884703a 	and	r2,r3,r2
    d7d0:	1001703a 	wrctl	status,r2
  
  return context;
    d7d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d7d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d7dc:	d0a00c17 	ldw	r2,-32720(gp)
    d7e0:	10c000c4 	addi	r3,r2,3
    d7e4:	00bfff04 	movi	r2,-4
    d7e8:	1884703a 	and	r2,r3,r2
    d7ec:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d7f0:	d0e00c17 	ldw	r3,-32720(gp)
    d7f4:	e0bfff17 	ldw	r2,-4(fp)
    d7f8:	1887883a 	add	r3,r3,r2
    d7fc:	00820034 	movhi	r2,2048
    d800:	10800004 	addi	r2,r2,0
    d804:	10c0062e 	bgeu	r2,r3,d820 <sbrk+0x74>
    d808:	e0bffb17 	ldw	r2,-20(fp)
    d80c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d810:	e0bffa17 	ldw	r2,-24(fp)
    d814:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d818:	00bfffc4 	movi	r2,-1
    d81c:	00000b06 	br	d84c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d820:	d0a00c17 	ldw	r2,-32720(gp)
    d824:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d828:	d0e00c17 	ldw	r3,-32720(gp)
    d82c:	e0bfff17 	ldw	r2,-4(fp)
    d830:	1885883a 	add	r2,r3,r2
    d834:	d0a00c15 	stw	r2,-32720(gp)
    d838:	e0bffb17 	ldw	r2,-20(fp)
    d83c:	e0bffc15 	stw	r2,-16(fp)
    d840:	e0bffc17 	ldw	r2,-16(fp)
    d844:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d848:	e0bffd17 	ldw	r2,-12(fp)
} 
    d84c:	e037883a 	mov	sp,fp
    d850:	df000017 	ldw	fp,0(sp)
    d854:	dec00104 	addi	sp,sp,4
    d858:	f800283a 	ret

0000d85c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d85c:	defffe04 	addi	sp,sp,-8
    d860:	dfc00115 	stw	ra,4(sp)
    d864:	df000015 	stw	fp,0(sp)
    d868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d86c:	d0a00b17 	ldw	r2,-32724(gp)
    d870:	10000326 	beq	r2,zero,d880 <alt_get_errno+0x24>
    d874:	d0a00b17 	ldw	r2,-32724(gp)
    d878:	103ee83a 	callr	r2
    d87c:	00000106 	br	d884 <alt_get_errno+0x28>
    d880:	d0a6fc04 	addi	r2,gp,-25616
}
    d884:	e037883a 	mov	sp,fp
    d888:	dfc00117 	ldw	ra,4(sp)
    d88c:	df000017 	ldw	fp,0(sp)
    d890:	dec00204 	addi	sp,sp,8
    d894:	f800283a 	ret

0000d898 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d898:	defff904 	addi	sp,sp,-28
    d89c:	dfc00615 	stw	ra,24(sp)
    d8a0:	df000515 	stw	fp,20(sp)
    d8a4:	df000504 	addi	fp,sp,20
    d8a8:	e13ffd15 	stw	r4,-12(fp)
    d8ac:	e17ffe15 	stw	r5,-8(fp)
    d8b0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d8b4:	e0bffd17 	ldw	r2,-12(fp)
    d8b8:	10000616 	blt	r2,zero,d8d4 <write+0x3c>
    d8bc:	e0bffd17 	ldw	r2,-12(fp)
    d8c0:	10c00324 	muli	r3,r2,12
    d8c4:	00800074 	movhi	r2,1
    d8c8:	1092df04 	addi	r2,r2,19324
    d8cc:	1885883a 	add	r2,r3,r2
    d8d0:	00000106 	br	d8d8 <write+0x40>
    d8d4:	0005883a 	mov	r2,zero
    d8d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d8dc:	e0bffb17 	ldw	r2,-20(fp)
    d8e0:	10002126 	beq	r2,zero,d968 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d8e4:	e0bffb17 	ldw	r2,-20(fp)
    d8e8:	10800217 	ldw	r2,8(r2)
    d8ec:	108000cc 	andi	r2,r2,3
    d8f0:	10001826 	beq	r2,zero,d954 <write+0xbc>
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10800017 	ldw	r2,0(r2)
    d8fc:	10800617 	ldw	r2,24(r2)
    d900:	10001426 	beq	r2,zero,d954 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d904:	e0bffb17 	ldw	r2,-20(fp)
    d908:	10800017 	ldw	r2,0(r2)
    d90c:	10800617 	ldw	r2,24(r2)
    d910:	e0ffff17 	ldw	r3,-4(fp)
    d914:	180d883a 	mov	r6,r3
    d918:	e17ffe17 	ldw	r5,-8(fp)
    d91c:	e13ffb17 	ldw	r4,-20(fp)
    d920:	103ee83a 	callr	r2
    d924:	e0bffc15 	stw	r2,-16(fp)
    d928:	e0bffc17 	ldw	r2,-16(fp)
    d92c:	1000070e 	bge	r2,zero,d94c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d930:	000d85c0 	call	d85c <alt_get_errno>
    d934:	1007883a 	mov	r3,r2
    d938:	e0bffc17 	ldw	r2,-16(fp)
    d93c:	0085c83a 	sub	r2,zero,r2
    d940:	18800015 	stw	r2,0(r3)
        return -1;
    d944:	00bfffc4 	movi	r2,-1
    d948:	00000c06 	br	d97c <write+0xe4>
      }
      return rval;
    d94c:	e0bffc17 	ldw	r2,-16(fp)
    d950:	00000a06 	br	d97c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d954:	000d85c0 	call	d85c <alt_get_errno>
    d958:	1007883a 	mov	r3,r2
    d95c:	00800344 	movi	r2,13
    d960:	18800015 	stw	r2,0(r3)
    d964:	00000406 	br	d978 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d968:	000d85c0 	call	d85c <alt_get_errno>
    d96c:	1007883a 	mov	r3,r2
    d970:	00801444 	movi	r2,81
    d974:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d978:	00bfffc4 	movi	r2,-1
}
    d97c:	e037883a 	mov	sp,fp
    d980:	dfc00117 	ldw	ra,4(sp)
    d984:	df000017 	ldw	fp,0(sp)
    d988:	dec00204 	addi	sp,sp,8
    d98c:	f800283a 	ret

0000d990 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d990:	defffd04 	addi	sp,sp,-12
    d994:	dfc00215 	stw	ra,8(sp)
    d998:	df000115 	stw	fp,4(sp)
    d99c:	df000104 	addi	fp,sp,4
    d9a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d9a4:	d1600804 	addi	r5,gp,-32736
    d9a8:	e13fff17 	ldw	r4,-4(fp)
    d9ac:	0012f2c0 	call	12f2c <alt_dev_llist_insert>
}
    d9b0:	e037883a 	mov	sp,fp
    d9b4:	dfc00117 	ldw	ra,4(sp)
    d9b8:	df000017 	ldw	fp,0(sp)
    d9bc:	dec00204 	addi	sp,sp,8
    d9c0:	f800283a 	ret

0000d9c4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d9c4:	defffd04 	addi	sp,sp,-12
    d9c8:	dfc00215 	stw	ra,8(sp)
    d9cc:	df000115 	stw	fp,4(sp)
    d9d0:	df000104 	addi	fp,sp,4
    d9d4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
    d9d8:	001380c0 	call	1380c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d9dc:	00800044 	movi	r2,1
    d9e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d9e4:	0001883a 	nop
    d9e8:	e037883a 	mov	sp,fp
    d9ec:	dfc00117 	ldw	ra,4(sp)
    d9f0:	df000017 	ldw	fp,0(sp)
    d9f4:	dec00204 	addi	sp,sp,8
    d9f8:	f800283a 	ret

0000d9fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d9fc:	defffe04 	addi	sp,sp,-8
    da00:	dfc00115 	stw	ra,4(sp)
    da04:	df000015 	stw	fp,0(sp)
    da08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
    da0c:	01c00204 	movi	r7,8
    da10:	000d883a 	mov	r6,zero
    da14:	000b883a 	mov	r5,zero
    da18:	013fc834 	movhi	r4,65312
    da1c:	21080004 	addi	r4,r4,8192
    da20:	001283c0 	call	1283c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER_2, Interval_Timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    da24:	01800204 	movi	r6,8
    da28:	000b883a 	mov	r5,zero
    da2c:	01000074 	movhi	r4,1
    da30:	21134904 	addi	r4,r4,19748
    da34:	0011ec40 	call	11ec4 <altera_avalon_jtag_uart_init>
    da38:	01000074 	movhi	r4,1
    da3c:	21133f04 	addi	r4,r4,19708
    da40:	000d9900 	call	d990 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    da44:	01000074 	movhi	r4,1
    da48:	21175704 	addi	r4,r4,23900
    da4c:	000d9900 	call	d990 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
    da50:	01000074 	movhi	r4,1
    da54:	21176304 	addi	r4,r4,23948
    da58:	000d9900 	call	d990 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
    da5c:	01000074 	movhi	r4,1
    da60:	21176f04 	addi	r4,r4,23996
    da64:	00129640 	call	12964 <alt_up_character_lcd_init>
    da68:	01000074 	movhi	r4,1
    da6c:	21176f04 	addi	r4,r4,23996
    da70:	000d9900 	call	d990 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
    da74:	01000074 	movhi	r4,1
    da78:	21177a04 	addi	r4,r4,24040
    da7c:	000d9900 	call	d990 <alt_dev_reg>
}
    da80:	0001883a 	nop
    da84:	e037883a 	mov	sp,fp
    da88:	dfc00117 	ldw	ra,4(sp)
    da8c:	df000017 	ldw	fp,0(sp)
    da90:	dec00204 	addi	sp,sp,8
    da94:	f800283a 	ret

0000da98 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
    da98:	defffa04 	addi	sp,sp,-24
    da9c:	dfc00515 	stw	ra,20(sp)
    daa0:	df000415 	stw	fp,16(sp)
    daa4:	df000404 	addi	fp,sp,16
    daa8:	e13ffe15 	stw	r4,-8(fp)
    daac:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    dab0:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
    dab4:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
    dab8:	10001e26 	beq	r2,zero,db34 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
    dabc:	00803fc4 	movi	r2,255
    dac0:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    dac4:	d0a70917 	ldw	r2,-25564(gp)
    dac8:	e13ffe17 	ldw	r4,-8(fp)
    dacc:	e0ffff17 	ldw	r3,-4(fp)
    dad0:	20c7883a 	add	r3,r4,r3
    dad4:	1806927a 	slli	r3,r3,9
    dad8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
    dadc:	d0a70817 	ldw	r2,-25568(gp)
    dae0:	00c00604 	movi	r3,24
    dae4:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    dae8:	d0a70517 	ldw	r2,-25580(gp)
    daec:	1080002b 	ldhuio	r2,0(r2)
    daf0:	10bfffcc 	andi	r2,r2,65535
    daf4:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
    daf8:	e0bffd0b 	ldhu	r2,-12(fp)
    dafc:	10bfffcc 	andi	r2,r2,65535
    db00:	1080010c 	andi	r2,r2,4
    db04:	103ff81e 	bne	r2,zero,dae8 <__alt_data_end+0xf800dae8>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
    db08:	e0bffd0b 	ldhu	r2,-12(fp)
    db0c:	10bfffcc 	andi	r2,r2,65535
    db10:	1080040c 	andi	r2,r2,16
    db14:	1000071e 	bne	r2,zero,db34 <Write_Sector_Data+0x9c>
        {
            result = true;
    db18:	00800044 	movi	r2,1
    db1c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    db20:	d0270e15 	stw	zero,-25544(gp)
            current_sector_index = sector_index+partition_offset;
    db24:	e0fffe17 	ldw	r3,-8(fp)
    db28:	e0bfff17 	ldw	r2,-4(fp)
    db2c:	1885883a 	add	r2,r3,r2
    db30:	d0a70f15 	stw	r2,-25540(gp)
        }
    }
    return result;
    db34:	e0bffc17 	ldw	r2,-16(fp)
}
    db38:	e037883a 	mov	sp,fp
    db3c:	dfc00117 	ldw	ra,4(sp)
    db40:	df000017 	ldw	fp,0(sp)
    db44:	dec00204 	addi	sp,sp,8
    db48:	f800283a 	ret

0000db4c <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
    db4c:	defffd04 	addi	sp,sp,-12
    db50:	dfc00215 	stw	ra,8(sp)
    db54:	df000115 	stw	fp,4(sp)
    db58:	df000104 	addi	fp,sp,4
    bool result = true;
    db5c:	00800044 	movi	r2,1
    db60:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
    db64:	d0a70e17 	ldw	r2,-25544(gp)
    db68:	10000526 	beq	r2,zero,db80 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
    db6c:	d0a70f17 	ldw	r2,-25540(gp)
    db70:	000b883a 	mov	r5,zero
    db74:	1009883a 	mov	r4,r2
    db78:	000da980 	call	da98 <Write_Sector_Data>
    db7c:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
    db80:	e0bfff17 	ldw	r2,-4(fp)
}
    db84:	e037883a 	mov	sp,fp
    db88:	dfc00117 	ldw	ra,4(sp)
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00204 	addi	sp,sp,8
    db94:	f800283a 	ret

0000db98 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
    db98:	defffa04 	addi	sp,sp,-24
    db9c:	dfc00515 	stw	ra,20(sp)
    dba0:	df000415 	stw	fp,16(sp)
    dba4:	df000404 	addi	fp,sp,16
    dba8:	e13ffe15 	stw	r4,-8(fp)
    dbac:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
    dbb0:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
    dbb4:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
    dbb8:	10002726 	beq	r2,zero,dc58 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
    dbbc:	00803fc4 	movi	r2,255
    dbc0:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
    dbc4:	d0a70e17 	ldw	r2,-25544(gp)
    dbc8:	10000726 	beq	r2,zero,dbe8 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
    dbcc:	d0a70f17 	ldw	r2,-25540(gp)
    dbd0:	000b883a 	mov	r5,zero
    dbd4:	1009883a 	mov	r4,r2
    dbd8:	000da980 	call	da98 <Write_Sector_Data>
    dbdc:	1000021e 	bne	r2,zero,dbe8 <Read_Sector_Data+0x50>
            {
                return false;
    dbe0:	0005883a 	mov	r2,zero
    dbe4:	00001d06 	br	dc5c <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
    dbe8:	d0a70917 	ldw	r2,-25564(gp)
    dbec:	e13ffe17 	ldw	r4,-8(fp)
    dbf0:	e0ffff17 	ldw	r3,-4(fp)
    dbf4:	20c7883a 	add	r3,r4,r3
    dbf8:	1806927a 	slli	r3,r3,9
    dbfc:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
    dc00:	d0a70817 	ldw	r2,-25568(gp)
    dc04:	00c00444 	movi	r3,17
    dc08:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
    dc0c:	d0a70517 	ldw	r2,-25580(gp)
    dc10:	1080002b 	ldhuio	r2,0(r2)
    dc14:	10bfffcc 	andi	r2,r2,65535
    dc18:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
    dc1c:	e0bffd0b 	ldhu	r2,-12(fp)
    dc20:	10bfffcc 	andi	r2,r2,65535
    dc24:	1080010c 	andi	r2,r2,4
    dc28:	103ff81e 	bne	r2,zero,dc0c <__alt_data_end+0xf800dc0c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
    dc2c:	e0bffd0b 	ldhu	r2,-12(fp)
    dc30:	10bfffcc 	andi	r2,r2,65535
    dc34:	1080040c 	andi	r2,r2,16
    dc38:	1000071e 	bne	r2,zero,dc58 <Read_Sector_Data+0xc0>
		{
			result = true;
    dc3c:	00800044 	movi	r2,1
    dc40:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
    dc44:	d0270e15 	stw	zero,-25544(gp)
            current_sector_index = sector_index+partition_offset;
    dc48:	e0fffe17 	ldw	r3,-8(fp)
    dc4c:	e0bfff17 	ldw	r2,-4(fp)
    dc50:	1885883a 	add	r2,r3,r2
    dc54:	d0a70f15 	stw	r2,-25540(gp)
		}
	}
	return result;
    dc58:	e0bffc17 	ldw	r2,-16(fp)
}
    dc5c:	e037883a 	mov	sp,fp
    dc60:	dfc00117 	ldw	ra,4(sp)
    dc64:	df000017 	ldw	fp,0(sp)
    dc68:	dec00204 	addi	sp,sp,8
    dc6c:	f800283a 	ret

0000dc70 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
    dc70:	defffb04 	addi	sp,sp,-20
    dc74:	dfc00415 	stw	ra,16(sp)
    dc78:	df000315 	stw	fp,12(sp)
    dc7c:	df000304 	addi	fp,sp,12
    dc80:	e13ffe15 	stw	r4,-8(fp)
    dc84:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
    dc88:	e0bffe17 	ldw	r2,-8(fp)
    dc8c:	1004d23a 	srli	r2,r2,8
    dc90:	d0e70b17 	ldw	r3,-25556(gp)
    dc94:	10c5883a 	add	r2,r2,r3
    dc98:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    dc9c:	00800074 	movhi	r2,1
    dca0:	109ea804 	addi	r2,r2,31392
    dca4:	10801117 	ldw	r2,68(r2)
    dca8:	e0fffd17 	ldw	r3,-12(fp)
    dcac:	1885883a 	add	r2,r3,r2
    dcb0:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
    dcb4:	d0a70f17 	ldw	r2,-25540(gp)
    dcb8:	e0fffd17 	ldw	r3,-12(fp)
    dcbc:	18800726 	beq	r3,r2,dcdc <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    dcc0:	e0bffd17 	ldw	r2,-12(fp)
    dcc4:	000b883a 	mov	r5,zero
    dcc8:	1009883a 	mov	r4,r2
    dccc:	000db980 	call	db98 <Read_Sector_Data>
    dcd0:	1000021e 	bne	r2,zero,dcdc <get_cluster_flag+0x6c>
        {
            return false;
    dcd4:	0005883a 	mov	r2,zero
    dcd8:	00000d06 	br	dd10 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
    dcdc:	e0bffe17 	ldw	r2,-8(fp)
    dce0:	10803fcc 	andi	r2,r2,255
    dce4:	1085883a 	add	r2,r2,r2
    dce8:	1007883a 	mov	r3,r2
    dcec:	d0a70d17 	ldw	r2,-25548(gp)
    dcf0:	10800a17 	ldw	r2,40(r2)
    dcf4:	1885883a 	add	r2,r3,r2
    dcf8:	1080002b 	ldhuio	r2,0(r2)
    dcfc:	10bfffcc 	andi	r2,r2,65535
    dd00:	1007883a 	mov	r3,r2
    dd04:	e0bfff17 	ldw	r2,-4(fp)
    dd08:	10c0000d 	sth	r3,0(r2)
    return true;
    dd0c:	00800044 	movi	r2,1
}
    dd10:	e037883a 	mov	sp,fp
    dd14:	dfc00117 	ldw	ra,4(sp)
    dd18:	df000017 	ldw	fp,0(sp)
    dd1c:	dec00204 	addi	sp,sp,8
    dd20:	f800283a 	ret

0000dd24 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
    dd24:	defffa04 	addi	sp,sp,-24
    dd28:	dfc00515 	stw	ra,20(sp)
    dd2c:	df000415 	stw	fp,16(sp)
    dd30:	df000404 	addi	fp,sp,16
    dd34:	e13ffd15 	stw	r4,-12(fp)
    dd38:	2805883a 	mov	r2,r5
    dd3c:	e1bfff15 	stw	r6,-4(fp)
    dd40:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
    dd44:	e0bffd17 	ldw	r2,-12(fp)
    dd48:	1004d23a 	srli	r2,r2,8
    dd4c:	d0e70b17 	ldw	r3,-25556(gp)
    dd50:	10c5883a 	add	r2,r2,r3
    dd54:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
    dd58:	e0bfff17 	ldw	r2,-4(fp)
    dd5c:	10000726 	beq	r2,zero,dd7c <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
    dd60:	00800074 	movhi	r2,1
    dd64:	109ea804 	addi	r2,r2,31392
    dd68:	10801117 	ldw	r2,68(r2)
    dd6c:	e0fffc17 	ldw	r3,-16(fp)
    dd70:	1885883a 	add	r2,r3,r2
    dd74:	e0bffc15 	stw	r2,-16(fp)
    dd78:	00000606 	br	dd94 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
    dd7c:	00800074 	movhi	r2,1
    dd80:	109ea804 	addi	r2,r2,31392
    dd84:	10801217 	ldw	r2,72(r2)
    dd88:	e0fffc17 	ldw	r3,-16(fp)
    dd8c:	1885883a 	add	r2,r3,r2
    dd90:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
    dd94:	d0a70f17 	ldw	r2,-25540(gp)
    dd98:	e0fffc17 	ldw	r3,-16(fp)
    dd9c:	18800726 	beq	r3,r2,ddbc <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
    dda0:	e0bffc17 	ldw	r2,-16(fp)
    dda4:	000b883a 	mov	r5,zero
    dda8:	1009883a 	mov	r4,r2
    ddac:	000db980 	call	db98 <Read_Sector_Data>
    ddb0:	1000021e 	bne	r2,zero,ddbc <mark_cluster+0x98>
        {
            return false;
    ddb4:	0005883a 	mov	r2,zero
    ddb8:	00000d06 	br	ddf0 <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
    ddbc:	e0bffd17 	ldw	r2,-12(fp)
    ddc0:	10803fcc 	andi	r2,r2,255
    ddc4:	1085883a 	add	r2,r2,r2
    ddc8:	1007883a 	mov	r3,r2
    ddcc:	d0a70d17 	ldw	r2,-25548(gp)
    ddd0:	10800a17 	ldw	r2,40(r2)
    ddd4:	1885883a 	add	r2,r3,r2
    ddd8:	1007883a 	mov	r3,r2
    dddc:	e0bffe0f 	ldh	r2,-8(fp)
    dde0:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
    dde4:	00800044 	movi	r2,1
    dde8:	d0a70e15 	stw	r2,-25544(gp)
    return true;
    ddec:	00800044 	movi	r2,1
}
    ddf0:	e037883a 	mov	sp,fp
    ddf4:	dfc00117 	ldw	ra,4(sp)
    ddf8:	df000017 	ldw	fp,0(sp)
    ddfc:	dec00204 	addi	sp,sp,8
    de00:	f800283a 	ret

0000de04 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
    de04:	defff704 	addi	sp,sp,-36
    de08:	dfc00815 	stw	ra,32(sp)
    de0c:	df000715 	stw	fp,28(sp)
    de10:	df000704 	addi	fp,sp,28
	bool result = false;
    de14:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
    de18:	000b883a 	mov	r5,zero
    de1c:	0009883a 	mov	r4,zero
    de20:	000db980 	call	db98 <Read_Sector_Data>
    de24:	10005a26 	beq	r2,zero,df90 <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
    de28:	d0a70d17 	ldw	r2,-25548(gp)
    de2c:	10800a17 	ldw	r2,40(r2)
    de30:	10807f84 	addi	r2,r2,510
    de34:	1080002b 	ldhuio	r2,0(r2)
    de38:	10bfffcc 	andi	r2,r2,65535
    de3c:	10bfffcc 	andi	r2,r2,65535
    de40:	10a0001c 	xori	r2,r2,32768
    de44:	10a00004 	addi	r2,r2,-32768
    de48:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
    de4c:	e0bffb17 	ldw	r2,-20(fp)
    de50:	10ffffcc 	andi	r3,r2,65535
    de54:	00aa9554 	movui	r2,43605
    de58:	18804d1e 	bne	r3,r2,df90 <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    de5c:	e03ffa15 	stw	zero,-24(fp)
    de60:	00004806 	br	df84 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
    de64:	e0bffa17 	ldw	r2,-24(fp)
    de68:	1004913a 	slli	r2,r2,4
    de6c:	10806f84 	addi	r2,r2,446
    de70:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
    de74:	d0a70d17 	ldw	r2,-25548(gp)
    de78:	10c00a17 	ldw	r3,40(r2)
    de7c:	e0bffc17 	ldw	r2,-16(fp)
    de80:	1885883a 	add	r2,r3,r2
    de84:	10800104 	addi	r2,r2,4
    de88:	10800023 	ldbuio	r2,0(r2)
    de8c:	10803fcc 	andi	r2,r2,255
    de90:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
    de94:	e0bffd07 	ldb	r2,-12(fp)
    de98:	10800060 	cmpeqi	r2,r2,1
    de9c:	1000091e 	bne	r2,zero,dec4 <Check_for_Master_Boot_Record+0xc0>
    dea0:	e0bffd07 	ldb	r2,-12(fp)
    dea4:	10800120 	cmpeqi	r2,r2,4
    dea8:	1000061e 	bne	r2,zero,dec4 <Check_for_Master_Boot_Record+0xc0>
    deac:	e0bffd07 	ldb	r2,-12(fp)
    deb0:	108001a0 	cmpeqi	r2,r2,6
    deb4:	1000031e 	bne	r2,zero,dec4 <Check_for_Master_Boot_Record+0xc0>
    deb8:	e0bffd07 	ldb	r2,-12(fp)
    debc:	10800398 	cmpnei	r2,r2,14
    dec0:	10002d1e 	bne	r2,zero,df78 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
    dec4:	d0a70d17 	ldw	r2,-25548(gp)
    dec8:	10c00a17 	ldw	r3,40(r2)
    decc:	e0bffc17 	ldw	r2,-16(fp)
    ded0:	1885883a 	add	r2,r3,r2
    ded4:	10800284 	addi	r2,r2,10
    ded8:	1080002b 	ldhuio	r2,0(r2)
    dedc:	10bfffcc 	andi	r2,r2,65535
    dee0:	1006943a 	slli	r3,r2,16
    dee4:	d0a70d17 	ldw	r2,-25548(gp)
    dee8:	11000a17 	ldw	r4,40(r2)
    deec:	e0bffc17 	ldw	r2,-16(fp)
    def0:	2085883a 	add	r2,r4,r2
    def4:	10800204 	addi	r2,r2,8
    def8:	1080002b 	ldhuio	r2,0(r2)
    defc:	10bfffcc 	andi	r2,r2,65535
    df00:	10bfffcc 	andi	r2,r2,65535
    df04:	1884b03a 	or	r2,r3,r2
    df08:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
    df0c:	d0a70d17 	ldw	r2,-25548(gp)
    df10:	10c00a17 	ldw	r3,40(r2)
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	1885883a 	add	r2,r3,r2
    df1c:	10800384 	addi	r2,r2,14
    df20:	1080002b 	ldhuio	r2,0(r2)
    df24:	10bfffcc 	andi	r2,r2,65535
    df28:	1006943a 	slli	r3,r2,16
    df2c:	d0a70d17 	ldw	r2,-25548(gp)
    df30:	11000a17 	ldw	r4,40(r2)
    df34:	e0bffc17 	ldw	r2,-16(fp)
    df38:	2085883a 	add	r2,r4,r2
    df3c:	10800304 	addi	r2,r2,12
    df40:	1080002b 	ldhuio	r2,0(r2)
    df44:	10bfffcc 	andi	r2,r2,65535
    df48:	10bfffcc 	andi	r2,r2,65535
    df4c:	1884b03a 	or	r2,r3,r2
    df50:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
    df54:	e0bfff17 	ldw	r2,-4(fp)
    df58:	0080070e 	bge	zero,r2,df78 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
    df5c:	00800044 	movi	r2,1
    df60:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
    df64:	e0bfff17 	ldw	r2,-4(fp)
    df68:	d0a70c15 	stw	r2,-25552(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
    df6c:	e0bffe17 	ldw	r2,-8(fp)
    df70:	d0a70b15 	stw	r2,-25556(gp)
						break;
    df74:	00000606 	br	df90 <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
    df78:	e0bffa17 	ldw	r2,-24(fp)
    df7c:	10800044 	addi	r2,r2,1
    df80:	e0bffa15 	stw	r2,-24(fp)
    df84:	e0bffa17 	ldw	r2,-24(fp)
    df88:	10800110 	cmplti	r2,r2,4
    df8c:	103fb51e 	bne	r2,zero,de64 <__alt_data_end+0xf800de64>
				}
			}
		}
	}

	return result;
    df90:	e0bff917 	ldw	r2,-28(fp)
}
    df94:	e037883a 	mov	sp,fp
    df98:	dfc00117 	ldw	ra,4(sp)
    df9c:	df000017 	ldw	fp,0(sp)
    dfa0:	dec00204 	addi	sp,sp,8
    dfa4:	f800283a 	ret

0000dfa8 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
    dfa8:	defff804 	addi	sp,sp,-32
    dfac:	dfc00715 	stw	ra,28(sp)
    dfb0:	df000615 	stw	fp,24(sp)
    dfb4:	df000604 	addi	fp,sp,24
    dfb8:	e13ffc15 	stw	r4,-16(fp)
    dfbc:	e17ffd15 	stw	r5,-12(fp)
    dfc0:	e1bffe15 	stw	r6,-8(fp)
    dfc4:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
    dfc8:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    dfcc:	e0bffc17 	ldw	r2,-16(fp)
    dfd0:	108007cc 	andi	r2,r2,31
    dfd4:	10008d1e 	bne	r2,zero,e20c <Read_File_Record_At_Offset+0x264>
    dfd8:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
    dfdc:	10008b26 	beq	r2,zero,e20c <Read_File_Record_At_Offset+0x264>
    dfe0:	d0a70417 	ldw	r2,-25584(gp)
    dfe4:	10008926 	beq	r2,zero,e20c <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    dfe8:	e03ffb15 	stw	zero,-20(fp)
    dfec:	00001106 	br	e034 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
    dff0:	e0fffc17 	ldw	r3,-16(fp)
    dff4:	e0bffb17 	ldw	r2,-20(fp)
    dff8:	1885883a 	add	r2,r3,r2
    dffc:	1007883a 	mov	r3,r2
    e000:	d0a70d17 	ldw	r2,-25548(gp)
    e004:	10800a17 	ldw	r2,40(r2)
    e008:	1885883a 	add	r2,r3,r2
    e00c:	10800023 	ldbuio	r2,0(r2)
    e010:	10803fcc 	andi	r2,r2,255
    e014:	1009883a 	mov	r4,r2
    e018:	e0fffd17 	ldw	r3,-12(fp)
    e01c:	e0bffb17 	ldw	r2,-20(fp)
    e020:	1885883a 	add	r2,r3,r2
    e024:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
    e028:	e0bffb17 	ldw	r2,-20(fp)
    e02c:	10800044 	addi	r2,r2,1
    e030:	e0bffb15 	stw	r2,-20(fp)
    e034:	e0bffb17 	ldw	r2,-20(fp)
    e038:	10800210 	cmplti	r2,r2,8
    e03c:	103fec1e 	bne	r2,zero,dff0 <__alt_data_end+0xf800dff0>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    e040:	e03ffb15 	stw	zero,-20(fp)
    e044:	00001306 	br	e094 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
    e048:	e0fffc17 	ldw	r3,-16(fp)
    e04c:	e0bffb17 	ldw	r2,-20(fp)
    e050:	1885883a 	add	r2,r3,r2
    e054:	1007883a 	mov	r3,r2
    e058:	d0a70d17 	ldw	r2,-25548(gp)
    e05c:	10800a17 	ldw	r2,40(r2)
    e060:	1885883a 	add	r2,r3,r2
    e064:	10800204 	addi	r2,r2,8
    e068:	10800023 	ldbuio	r2,0(r2)
    e06c:	10803fcc 	andi	r2,r2,255
    e070:	1009883a 	mov	r4,r2
    e074:	e0fffd17 	ldw	r3,-12(fp)
    e078:	e0bffb17 	ldw	r2,-20(fp)
    e07c:	1885883a 	add	r2,r3,r2
    e080:	10800204 	addi	r2,r2,8
    e084:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
    e088:	e0bffb17 	ldw	r2,-20(fp)
    e08c:	10800044 	addi	r2,r2,1
    e090:	e0bffb15 	stw	r2,-20(fp)
    e094:	e0bffb17 	ldw	r2,-20(fp)
    e098:	108000d0 	cmplti	r2,r2,3
    e09c:	103fea1e 	bne	r2,zero,e048 <__alt_data_end+0xf800e048>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
    e0a0:	d0a70d17 	ldw	r2,-25548(gp)
    e0a4:	10c00a17 	ldw	r3,40(r2)
    e0a8:	e0bffc17 	ldw	r2,-16(fp)
    e0ac:	1885883a 	add	r2,r3,r2
    e0b0:	108002c4 	addi	r2,r2,11
    e0b4:	10800023 	ldbuio	r2,0(r2)
    e0b8:	10803fcc 	andi	r2,r2,255
    e0bc:	1007883a 	mov	r3,r2
    e0c0:	e0bffd17 	ldw	r2,-12(fp)
    e0c4:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
    e0c8:	d0a70d17 	ldw	r2,-25548(gp)
    e0cc:	10c00a17 	ldw	r3,40(r2)
    e0d0:	e0bffc17 	ldw	r2,-16(fp)
    e0d4:	1885883a 	add	r2,r3,r2
    e0d8:	10800384 	addi	r2,r2,14
    e0dc:	1080002b 	ldhuio	r2,0(r2)
    e0e0:	10bfffcc 	andi	r2,r2,65535
    e0e4:	1007883a 	mov	r3,r2
    e0e8:	e0bffd17 	ldw	r2,-12(fp)
    e0ec:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
    e0f0:	d0a70d17 	ldw	r2,-25548(gp)
    e0f4:	10c00a17 	ldw	r3,40(r2)
    e0f8:	e0bffc17 	ldw	r2,-16(fp)
    e0fc:	1885883a 	add	r2,r3,r2
    e100:	10800404 	addi	r2,r2,16
    e104:	1080002b 	ldhuio	r2,0(r2)
    e108:	10bfffcc 	andi	r2,r2,65535
    e10c:	1007883a 	mov	r3,r2
    e110:	e0bffd17 	ldw	r2,-12(fp)
    e114:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
    e118:	d0a70d17 	ldw	r2,-25548(gp)
    e11c:	10c00a17 	ldw	r3,40(r2)
    e120:	e0bffc17 	ldw	r2,-16(fp)
    e124:	1885883a 	add	r2,r3,r2
    e128:	10800484 	addi	r2,r2,18
    e12c:	1080002b 	ldhuio	r2,0(r2)
    e130:	10bfffcc 	andi	r2,r2,65535
    e134:	1007883a 	mov	r3,r2
    e138:	e0bffd17 	ldw	r2,-12(fp)
    e13c:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
    e140:	d0a70d17 	ldw	r2,-25548(gp)
    e144:	10c00a17 	ldw	r3,40(r2)
    e148:	e0bffc17 	ldw	r2,-16(fp)
    e14c:	1885883a 	add	r2,r3,r2
    e150:	10800584 	addi	r2,r2,22
    e154:	1080002b 	ldhuio	r2,0(r2)
    e158:	10bfffcc 	andi	r2,r2,65535
    e15c:	1007883a 	mov	r3,r2
    e160:	e0bffd17 	ldw	r2,-12(fp)
    e164:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
    e168:	d0a70d17 	ldw	r2,-25548(gp)
    e16c:	10c00a17 	ldw	r3,40(r2)
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	1885883a 	add	r2,r3,r2
    e178:	10800604 	addi	r2,r2,24
    e17c:	1080002b 	ldhuio	r2,0(r2)
    e180:	10bfffcc 	andi	r2,r2,65535
    e184:	1007883a 	mov	r3,r2
    e188:	e0bffd17 	ldw	r2,-12(fp)
    e18c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
    e190:	d0a70d17 	ldw	r2,-25548(gp)
    e194:	10c00a17 	ldw	r3,40(r2)
    e198:	e0bffc17 	ldw	r2,-16(fp)
    e19c:	1885883a 	add	r2,r3,r2
    e1a0:	10800684 	addi	r2,r2,26
    e1a4:	1080002b 	ldhuio	r2,0(r2)
    e1a8:	10bfffcc 	andi	r2,r2,65535
    e1ac:	1007883a 	mov	r3,r2
    e1b0:	e0bffd17 	ldw	r2,-12(fp)
    e1b4:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
    e1b8:	d0a70d17 	ldw	r2,-25548(gp)
    e1bc:	10c00a17 	ldw	r3,40(r2)
    e1c0:	e0bffc17 	ldw	r2,-16(fp)
    e1c4:	1885883a 	add	r2,r3,r2
    e1c8:	10800704 	addi	r2,r2,28
    e1cc:	10800037 	ldwio	r2,0(r2)
    e1d0:	1007883a 	mov	r3,r2
    e1d4:	e0bffd17 	ldw	r2,-12(fp)
    e1d8:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
    e1dc:	e0bffd17 	ldw	r2,-12(fp)
    e1e0:	e0fffe17 	ldw	r3,-8(fp)
    e1e4:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
    e1e8:	e0bffd17 	ldw	r2,-12(fp)
    e1ec:	e0ffff17 	ldw	r3,-4(fp)
    e1f0:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
    e1f4:	e0bffc17 	ldw	r2,-16(fp)
    e1f8:	1007883a 	mov	r3,r2
    e1fc:	e0bffd17 	ldw	r2,-12(fp)
    e200:	10c00c0d 	sth	r3,48(r2)
		result = true;
    e204:	00800044 	movi	r2,1
    e208:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
    e20c:	e0bffa17 	ldw	r2,-24(fp)
}
    e210:	e037883a 	mov	sp,fp
    e214:	dfc00117 	ldw	ra,4(sp)
    e218:	df000017 	ldw	fp,0(sp)
    e21c:	dec00204 	addi	sp,sp,8
    e220:	f800283a 	ret

0000e224 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
    e224:	defff904 	addi	sp,sp,-28
    e228:	dfc00615 	stw	ra,24(sp)
    e22c:	df000515 	stw	fp,20(sp)
    e230:	df000504 	addi	fp,sp,20
    e234:	e13ffe15 	stw	r4,-8(fp)
    e238:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
    e23c:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    e240:	e0bffe17 	ldw	r2,-8(fp)
    e244:	108007cc 	andi	r2,r2,31
    e248:	1000931e 	bne	r2,zero,e498 <Write_File_Record_At_Offset+0x274>
    e24c:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
    e250:	10009126 	beq	r2,zero,e498 <Write_File_Record_At_Offset+0x274>
    e254:	d0a70417 	ldw	r2,-25584(gp)
    e258:	10008f26 	beq	r2,zero,e498 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    e25c:	e03ffc15 	stw	zero,-16(fp)
    e260:	00001f06 	br	e2e0 <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	10800044 	addi	r2,r2,1
    e26c:	e0ffff17 	ldw	r3,-4(fp)
    e270:	1885883a 	add	r2,r3,r2
    e274:	10800003 	ldbu	r2,0(r2)
    e278:	10803fcc 	andi	r2,r2,255
    e27c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
    e280:	e0bffd0f 	ldh	r2,-12(fp)
    e284:	1004923a 	slli	r2,r2,8
    e288:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
    e28c:	e0ffff17 	ldw	r3,-4(fp)
    e290:	e0bffc17 	ldw	r2,-16(fp)
    e294:	1885883a 	add	r2,r3,r2
    e298:	10800003 	ldbu	r2,0(r2)
    e29c:	10c03fcc 	andi	r3,r2,255
    e2a0:	e0bffd0b 	ldhu	r2,-12(fp)
    e2a4:	1884b03a 	or	r2,r3,r2
    e2a8:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
    e2ac:	e0fffe17 	ldw	r3,-8(fp)
    e2b0:	e0bffc17 	ldw	r2,-16(fp)
    e2b4:	1885883a 	add	r2,r3,r2
    e2b8:	1007883a 	mov	r3,r2
    e2bc:	d0a70d17 	ldw	r2,-25548(gp)
    e2c0:	10800a17 	ldw	r2,40(r2)
    e2c4:	1885883a 	add	r2,r3,r2
    e2c8:	1007883a 	mov	r3,r2
    e2cc:	e0bffd0f 	ldh	r2,-12(fp)
    e2d0:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
    e2d4:	e0bffc17 	ldw	r2,-16(fp)
    e2d8:	10800084 	addi	r2,r2,2
    e2dc:	e0bffc15 	stw	r2,-16(fp)
    e2e0:	e0bffc17 	ldw	r2,-16(fp)
    e2e4:	10800210 	cmplti	r2,r2,8
    e2e8:	103fde1e 	bne	r2,zero,e264 <__alt_data_end+0xf800e264>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    e2ec:	e03ffc15 	stw	zero,-16(fp)
    e2f0:	00001306 	br	e340 <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
    e2f4:	e0fffe17 	ldw	r3,-8(fp)
    e2f8:	e0bffc17 	ldw	r2,-16(fp)
    e2fc:	1885883a 	add	r2,r3,r2
    e300:	1007883a 	mov	r3,r2
    e304:	d0a70d17 	ldw	r2,-25548(gp)
    e308:	10800a17 	ldw	r2,40(r2)
    e30c:	1885883a 	add	r2,r3,r2
    e310:	10800204 	addi	r2,r2,8
    e314:	1009883a 	mov	r4,r2
    e318:	e0ffff17 	ldw	r3,-4(fp)
    e31c:	e0bffc17 	ldw	r2,-16(fp)
    e320:	1885883a 	add	r2,r3,r2
    e324:	10800204 	addi	r2,r2,8
    e328:	10800003 	ldbu	r2,0(r2)
    e32c:	10803fcc 	andi	r2,r2,255
    e330:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
    e334:	e0bffc17 	ldw	r2,-16(fp)
    e338:	10800044 	addi	r2,r2,1
    e33c:	e0bffc15 	stw	r2,-16(fp)
    e340:	e0bffc17 	ldw	r2,-16(fp)
    e344:	108000d0 	cmplti	r2,r2,3
    e348:	103fea1e 	bne	r2,zero,e2f4 <__alt_data_end+0xf800e2f4>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
    e34c:	d0a70d17 	ldw	r2,-25548(gp)
    e350:	10c00a17 	ldw	r3,40(r2)
    e354:	e0bffe17 	ldw	r2,-8(fp)
    e358:	1885883a 	add	r2,r3,r2
    e35c:	108002c4 	addi	r2,r2,11
    e360:	1007883a 	mov	r3,r2
    e364:	e0bfff17 	ldw	r2,-4(fp)
    e368:	108002c3 	ldbu	r2,11(r2)
    e36c:	10803fcc 	andi	r2,r2,255
    e370:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
    e374:	d0a70d17 	ldw	r2,-25548(gp)
    e378:	10c00a17 	ldw	r3,40(r2)
    e37c:	e0bffe17 	ldw	r2,-8(fp)
    e380:	1885883a 	add	r2,r3,r2
    e384:	10800384 	addi	r2,r2,14
    e388:	1007883a 	mov	r3,r2
    e38c:	e0bfff17 	ldw	r2,-4(fp)
    e390:	1080030b 	ldhu	r2,12(r2)
    e394:	10bfffcc 	andi	r2,r2,65535
    e398:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
    e39c:	d0a70d17 	ldw	r2,-25548(gp)
    e3a0:	10c00a17 	ldw	r3,40(r2)
    e3a4:	e0bffe17 	ldw	r2,-8(fp)
    e3a8:	1885883a 	add	r2,r3,r2
    e3ac:	10800404 	addi	r2,r2,16
    e3b0:	1007883a 	mov	r3,r2
    e3b4:	e0bfff17 	ldw	r2,-4(fp)
    e3b8:	1080038b 	ldhu	r2,14(r2)
    e3bc:	10bfffcc 	andi	r2,r2,65535
    e3c0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
    e3c4:	d0a70d17 	ldw	r2,-25548(gp)
    e3c8:	10c00a17 	ldw	r3,40(r2)
    e3cc:	e0bffe17 	ldw	r2,-8(fp)
    e3d0:	1885883a 	add	r2,r3,r2
    e3d4:	10800484 	addi	r2,r2,18
    e3d8:	1007883a 	mov	r3,r2
    e3dc:	e0bfff17 	ldw	r2,-4(fp)
    e3e0:	1080040b 	ldhu	r2,16(r2)
    e3e4:	10bfffcc 	andi	r2,r2,65535
    e3e8:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
    e3ec:	d0a70d17 	ldw	r2,-25548(gp)
    e3f0:	10c00a17 	ldw	r3,40(r2)
    e3f4:	e0bffe17 	ldw	r2,-8(fp)
    e3f8:	1885883a 	add	r2,r3,r2
    e3fc:	10800584 	addi	r2,r2,22
    e400:	1007883a 	mov	r3,r2
    e404:	e0bfff17 	ldw	r2,-4(fp)
    e408:	1080048b 	ldhu	r2,18(r2)
    e40c:	10bfffcc 	andi	r2,r2,65535
    e410:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
    e414:	d0a70d17 	ldw	r2,-25548(gp)
    e418:	10c00a17 	ldw	r3,40(r2)
    e41c:	e0bffe17 	ldw	r2,-8(fp)
    e420:	1885883a 	add	r2,r3,r2
    e424:	10800604 	addi	r2,r2,24
    e428:	1007883a 	mov	r3,r2
    e42c:	e0bfff17 	ldw	r2,-4(fp)
    e430:	1080050b 	ldhu	r2,20(r2)
    e434:	10bfffcc 	andi	r2,r2,65535
    e438:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
    e43c:	d0a70d17 	ldw	r2,-25548(gp)
    e440:	10c00a17 	ldw	r3,40(r2)
    e444:	e0bffe17 	ldw	r2,-8(fp)
    e448:	1885883a 	add	r2,r3,r2
    e44c:	10800684 	addi	r2,r2,26
    e450:	1007883a 	mov	r3,r2
    e454:	e0bfff17 	ldw	r2,-4(fp)
    e458:	1080058b 	ldhu	r2,22(r2)
    e45c:	10bfffcc 	andi	r2,r2,65535
    e460:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
    e464:	d0a70d17 	ldw	r2,-25548(gp)
    e468:	10c00a17 	ldw	r3,40(r2)
    e46c:	e0bffe17 	ldw	r2,-8(fp)
    e470:	1885883a 	add	r2,r3,r2
    e474:	10800704 	addi	r2,r2,28
    e478:	1007883a 	mov	r3,r2
    e47c:	e0bfff17 	ldw	r2,-4(fp)
    e480:	10800617 	ldw	r2,24(r2)
    e484:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
    e488:	00800044 	movi	r2,1
    e48c:	d0a70e15 	stw	r2,-25544(gp)
        result = true;
    e490:	00800044 	movi	r2,1
    e494:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
    e498:	e0bffb17 	ldw	r2,-20(fp)
}
    e49c:	e037883a 	mov	sp,fp
    e4a0:	dfc00117 	ldw	ra,4(sp)
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00204 	addi	sp,sp,8
    e4ac:	f800283a 	ret

0000e4b0 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
    e4b0:	defff904 	addi	sp,sp,-28
    e4b4:	dfc00615 	stw	ra,24(sp)
    e4b8:	df000515 	stw	fp,20(sp)
    e4bc:	df000504 	addi	fp,sp,20
    e4c0:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
    e4c4:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
    e4c8:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
    e4cc:	e17fff17 	ldw	r5,-4(fp)
    e4d0:	0009883a 	mov	r4,zero
    e4d4:	000db980 	call	db98 <Read_Sector_Data>
    e4d8:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
    e4dc:	d0a70d17 	ldw	r2,-25548(gp)
    e4e0:	10800a17 	ldw	r2,40(r2)
    e4e4:	10807f84 	addi	r2,r2,510
    e4e8:	1080002b 	ldhuio	r2,0(r2)
    e4ec:	10bfffcc 	andi	r2,r2,65535
    e4f0:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
    e4f4:	e0bffe0f 	ldh	r2,-8(fp)
    e4f8:	10ffffcc 	andi	r3,r2,65535
    e4fc:	00aa9554 	movui	r2,43605
    e500:	1881841e 	bne	r3,r2,eb14 <Check_for_DOS_FAT+0x664>
    e504:	e0bffb17 	ldw	r2,-20(fp)
    e508:	10018226 	beq	r2,zero,eb14 <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
    e50c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
    e510:	d0a70d17 	ldw	r2,-25548(gp)
    e514:	10800a17 	ldw	r2,40(r2)
    e518:	10800023 	ldbuio	r2,0(r2)
    e51c:	10803fcc 	andi	r2,r2,255
    e520:	1007883a 	mov	r3,r2
    e524:	00800074 	movhi	r2,1
    e528:	109ea804 	addi	r2,r2,31392
    e52c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
    e530:	d0a70d17 	ldw	r2,-25548(gp)
    e534:	10800a17 	ldw	r2,40(r2)
    e538:	10800044 	addi	r2,r2,1
    e53c:	10800023 	ldbuio	r2,0(r2)
    e540:	10803fcc 	andi	r2,r2,255
    e544:	1007883a 	mov	r3,r2
    e548:	00800074 	movhi	r2,1
    e54c:	109ea804 	addi	r2,r2,31392
    e550:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
    e554:	d0a70d17 	ldw	r2,-25548(gp)
    e558:	10800a17 	ldw	r2,40(r2)
    e55c:	10800084 	addi	r2,r2,2
    e560:	10800023 	ldbuio	r2,0(r2)
    e564:	10803fcc 	andi	r2,r2,255
    e568:	1007883a 	mov	r3,r2
    e56c:	00800074 	movhi	r2,1
    e570:	109ea804 	addi	r2,r2,31392
    e574:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
    e578:	e03ffc15 	stw	zero,-16(fp)
    e57c:	00001106 	br	e5c4 <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
    e580:	d0a70d17 	ldw	r2,-25548(gp)
    e584:	10c00a17 	ldw	r3,40(r2)
    e588:	e0bffc17 	ldw	r2,-16(fp)
    e58c:	1885883a 	add	r2,r3,r2
    e590:	108000c4 	addi	r2,r2,3
    e594:	10800023 	ldbuio	r2,0(r2)
    e598:	10803fcc 	andi	r2,r2,255
    e59c:	1009883a 	mov	r4,r2
    e5a0:	00800074 	movhi	r2,1
    e5a4:	109ea804 	addi	r2,r2,31392
    e5a8:	e0fffc17 	ldw	r3,-16(fp)
    e5ac:	10c5883a 	add	r2,r2,r3
    e5b0:	108000c4 	addi	r2,r2,3
    e5b4:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
    e5b8:	e0bffc17 	ldw	r2,-16(fp)
    e5bc:	10800044 	addi	r2,r2,1
    e5c0:	e0bffc15 	stw	r2,-16(fp)
    e5c4:	e0bffc17 	ldw	r2,-16(fp)
    e5c8:	10800210 	cmplti	r2,r2,8
    e5cc:	103fec1e 	bne	r2,zero,e580 <__alt_data_end+0xf800e580>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
    e5d0:	d0a70d17 	ldw	r2,-25548(gp)
    e5d4:	10800a17 	ldw	r2,40(r2)
    e5d8:	10800304 	addi	r2,r2,12
    e5dc:	10800023 	ldbuio	r2,0(r2)
    e5e0:	10803fcc 	andi	r2,r2,255
    e5e4:	1004923a 	slli	r2,r2,8
    e5e8:	1007883a 	mov	r3,r2
    e5ec:	d0a70d17 	ldw	r2,-25548(gp)
    e5f0:	10800a17 	ldw	r2,40(r2)
    e5f4:	108002c4 	addi	r2,r2,11
    e5f8:	10800023 	ldbuio	r2,0(r2)
    e5fc:	10803fcc 	andi	r2,r2,255
    e600:	10803fcc 	andi	r2,r2,255
    e604:	1080201c 	xori	r2,r2,128
    e608:	10bfe004 	addi	r2,r2,-128
    e60c:	1884b03a 	or	r2,r3,r2
    e610:	1007883a 	mov	r3,r2
    e614:	00800074 	movhi	r2,1
    e618:	109ea804 	addi	r2,r2,31392
    e61c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
    e620:	d0a70d17 	ldw	r2,-25548(gp)
    e624:	10800a17 	ldw	r2,40(r2)
    e628:	10800344 	addi	r2,r2,13
    e62c:	10800023 	ldbuio	r2,0(r2)
    e630:	10803fcc 	andi	r2,r2,255
    e634:	1007883a 	mov	r3,r2
    e638:	00800074 	movhi	r2,1
    e63c:	109ea804 	addi	r2,r2,31392
    e640:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
    e644:	d0a70d17 	ldw	r2,-25548(gp)
    e648:	10800a17 	ldw	r2,40(r2)
    e64c:	10800384 	addi	r2,r2,14
    e650:	1080002b 	ldhuio	r2,0(r2)
    e654:	10bfffcc 	andi	r2,r2,65535
    e658:	1007883a 	mov	r3,r2
    e65c:	00800074 	movhi	r2,1
    e660:	109ea804 	addi	r2,r2,31392
    e664:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
    e668:	d0a70d17 	ldw	r2,-25548(gp)
    e66c:	10800a17 	ldw	r2,40(r2)
    e670:	10800404 	addi	r2,r2,16
    e674:	10800023 	ldbuio	r2,0(r2)
    e678:	10803fcc 	andi	r2,r2,255
    e67c:	1007883a 	mov	r3,r2
    e680:	00800074 	movhi	r2,1
    e684:	109ea804 	addi	r2,r2,31392
    e688:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
    e68c:	d0a70d17 	ldw	r2,-25548(gp)
    e690:	10800a17 	ldw	r2,40(r2)
    e694:	10800484 	addi	r2,r2,18
    e698:	10800023 	ldbuio	r2,0(r2)
    e69c:	10803fcc 	andi	r2,r2,255
    e6a0:	1004923a 	slli	r2,r2,8
    e6a4:	1007883a 	mov	r3,r2
    e6a8:	d0a70d17 	ldw	r2,-25548(gp)
    e6ac:	10800a17 	ldw	r2,40(r2)
    e6b0:	10800444 	addi	r2,r2,17
    e6b4:	10800023 	ldbuio	r2,0(r2)
    e6b8:	10803fcc 	andi	r2,r2,255
    e6bc:	10803fcc 	andi	r2,r2,255
    e6c0:	1884b03a 	or	r2,r3,r2
    e6c4:	1007883a 	mov	r3,r2
    e6c8:	00800074 	movhi	r2,1
    e6cc:	109ea804 	addi	r2,r2,31392
    e6d0:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
    e6d4:	d0a70d17 	ldw	r2,-25548(gp)
    e6d8:	10800a17 	ldw	r2,40(r2)
    e6dc:	10800504 	addi	r2,r2,20
    e6e0:	10800023 	ldbuio	r2,0(r2)
    e6e4:	10803fcc 	andi	r2,r2,255
    e6e8:	1004923a 	slli	r2,r2,8
    e6ec:	1007883a 	mov	r3,r2
    e6f0:	d0a70d17 	ldw	r2,-25548(gp)
    e6f4:	10800a17 	ldw	r2,40(r2)
    e6f8:	108004c4 	addi	r2,r2,19
    e6fc:	10800023 	ldbuio	r2,0(r2)
    e700:	10803fcc 	andi	r2,r2,255
    e704:	10803fcc 	andi	r2,r2,255
    e708:	1884b03a 	or	r2,r3,r2
    e70c:	1007883a 	mov	r3,r2
    e710:	00800074 	movhi	r2,1
    e714:	109ea804 	addi	r2,r2,31392
    e718:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
    e71c:	d0a70d17 	ldw	r2,-25548(gp)
    e720:	10800a17 	ldw	r2,40(r2)
    e724:	10800544 	addi	r2,r2,21
    e728:	10800023 	ldbuio	r2,0(r2)
    e72c:	10803fcc 	andi	r2,r2,255
    e730:	1007883a 	mov	r3,r2
    e734:	00800074 	movhi	r2,1
    e738:	109ea804 	addi	r2,r2,31392
    e73c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
    e740:	d0a70d17 	ldw	r2,-25548(gp)
    e744:	10800a17 	ldw	r2,40(r2)
    e748:	10800584 	addi	r2,r2,22
    e74c:	1080002b 	ldhuio	r2,0(r2)
    e750:	10bfffcc 	andi	r2,r2,65535
    e754:	1007883a 	mov	r3,r2
    e758:	00800074 	movhi	r2,1
    e75c:	109ea804 	addi	r2,r2,31392
    e760:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
    e764:	d0a70d17 	ldw	r2,-25548(gp)
    e768:	10800a17 	ldw	r2,40(r2)
    e76c:	10800604 	addi	r2,r2,24
    e770:	1080002b 	ldhuio	r2,0(r2)
    e774:	10bfffcc 	andi	r2,r2,65535
    e778:	1007883a 	mov	r3,r2
    e77c:	00800074 	movhi	r2,1
    e780:	109ea804 	addi	r2,r2,31392
    e784:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
    e788:	d0a70d17 	ldw	r2,-25548(gp)
    e78c:	10800a17 	ldw	r2,40(r2)
    e790:	10800684 	addi	r2,r2,26
    e794:	1080002b 	ldhuio	r2,0(r2)
    e798:	10bfffcc 	andi	r2,r2,65535
    e79c:	1007883a 	mov	r3,r2
    e7a0:	00800074 	movhi	r2,1
    e7a4:	109ea804 	addi	r2,r2,31392
    e7a8:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
    e7ac:	d0a70d17 	ldw	r2,-25548(gp)
    e7b0:	10800a17 	ldw	r2,40(r2)
    e7b4:	10800704 	addi	r2,r2,28
    e7b8:	10800037 	ldwio	r2,0(r2)
    e7bc:	1007883a 	mov	r3,r2
    e7c0:	00800074 	movhi	r2,1
    e7c4:	109ea804 	addi	r2,r2,31392
    e7c8:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
    e7cc:	d0a70d17 	ldw	r2,-25548(gp)
    e7d0:	10800a17 	ldw	r2,40(r2)
    e7d4:	10800804 	addi	r2,r2,32
    e7d8:	10800037 	ldwio	r2,0(r2)
    e7dc:	1007883a 	mov	r3,r2
    e7e0:	00800074 	movhi	r2,1
    e7e4:	109ea804 	addi	r2,r2,31392
    e7e8:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
    e7ec:	d0a70d17 	ldw	r2,-25548(gp)
    e7f0:	10800a17 	ldw	r2,40(r2)
    e7f4:	10800904 	addi	r2,r2,36
    e7f8:	10800023 	ldbuio	r2,0(r2)
    e7fc:	10803fcc 	andi	r2,r2,255
    e800:	1007883a 	mov	r3,r2
    e804:	00800074 	movhi	r2,1
    e808:	109ea804 	addi	r2,r2,31392
    e80c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
    e810:	d0a70d17 	ldw	r2,-25548(gp)
    e814:	10800a17 	ldw	r2,40(r2)
    e818:	10800944 	addi	r2,r2,37
    e81c:	10800023 	ldbuio	r2,0(r2)
    e820:	10803fcc 	andi	r2,r2,255
    e824:	1007883a 	mov	r3,r2
    e828:	00800074 	movhi	r2,1
    e82c:	109ea804 	addi	r2,r2,31392
    e830:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
    e834:	d0a70d17 	ldw	r2,-25548(gp)
    e838:	10800a17 	ldw	r2,40(r2)
    e83c:	10800984 	addi	r2,r2,38
    e840:	10800023 	ldbuio	r2,0(r2)
    e844:	10803fcc 	andi	r2,r2,255
    e848:	1007883a 	mov	r3,r2
    e84c:	00800074 	movhi	r2,1
    e850:	109ea804 	addi	r2,r2,31392
    e854:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
    e858:	00800074 	movhi	r2,1
    e85c:	109ea804 	addi	r2,r2,31392
    e860:	1080040b 	ldhu	r2,16(r2)
    e864:	10ffffcc 	andi	r3,r2,65535
    e868:	00800074 	movhi	r2,1
    e86c:	109ea804 	addi	r2,r2,31392
    e870:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
    e874:	00800074 	movhi	r2,1
    e878:	109ea804 	addi	r2,r2,31392
    e87c:	10c01117 	ldw	r3,68(r2)
    e880:	00800074 	movhi	r2,1
    e884:	109ea804 	addi	r2,r2,31392
    e888:	1080068b 	ldhu	r2,26(r2)
    e88c:	10bfffcc 	andi	r2,r2,65535
    e890:	1887883a 	add	r3,r3,r2
    e894:	00800074 	movhi	r2,1
    e898:	109ea804 	addi	r2,r2,31392
    e89c:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
    e8a0:	00800074 	movhi	r2,1
    e8a4:	109ea804 	addi	r2,r2,31392
    e8a8:	10c01217 	ldw	r3,72(r2)
    e8ac:	00800074 	movhi	r2,1
    e8b0:	109ea804 	addi	r2,r2,31392
    e8b4:	1080068b 	ldhu	r2,26(r2)
    e8b8:	10bfffcc 	andi	r2,r2,65535
    e8bc:	1887883a 	add	r3,r3,r2
    e8c0:	00800074 	movhi	r2,1
    e8c4:	109ea804 	addi	r2,r2,31392
    e8c8:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
    e8cc:	00800074 	movhi	r2,1
    e8d0:	109ea804 	addi	r2,r2,31392
    e8d4:	10c01317 	ldw	r3,76(r2)
    e8d8:	00800074 	movhi	r2,1
    e8dc:	109ea804 	addi	r2,r2,31392
    e8e0:	1080050b 	ldhu	r2,20(r2)
    e8e4:	10bfffcc 	andi	r2,r2,65535
    e8e8:	1008917a 	slli	r4,r2,5
    e8ec:	00800074 	movhi	r2,1
    e8f0:	109ea804 	addi	r2,r2,31392
    e8f4:	1080030b 	ldhu	r2,12(r2)
    e8f8:	10bfffcc 	andi	r2,r2,65535
    e8fc:	2085283a 	div	r2,r4,r2
    e900:	1887883a 	add	r3,r3,r2
    e904:	00800074 	movhi	r2,1
    e908:	109ea804 	addi	r2,r2,31392
    e90c:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
    e910:	00800074 	movhi	r2,1
    e914:	109ea804 	addi	r2,r2,31392
    e918:	1080058b 	ldhu	r2,22(r2)
    e91c:	10bfffcc 	andi	r2,r2,65535
    e920:	10000b26 	beq	r2,zero,e950 <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
    e924:	00800074 	movhi	r2,1
    e928:	109ea804 	addi	r2,r2,31392
    e92c:	1080058b 	ldhu	r2,22(r2)
    e930:	10ffffcc 	andi	r3,r2,65535
    e934:	00800074 	movhi	r2,1
    e938:	109ea804 	addi	r2,r2,31392
    e93c:	10800383 	ldbu	r2,14(r2)
    e940:	10803fcc 	andi	r2,r2,255
    e944:	1885283a 	div	r2,r3,r2
    e948:	e0bffd15 	stw	r2,-12(fp)
    e94c:	00000906 	br	e974 <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
    e950:	00800074 	movhi	r2,1
    e954:	109ea804 	addi	r2,r2,31392
    e958:	10c00917 	ldw	r3,36(r2)
    e95c:	00800074 	movhi	r2,1
    e960:	109ea804 	addi	r2,r2,31392
    e964:	10800383 	ldbu	r2,14(r2)
    e968:	10803fcc 	andi	r2,r2,255
    e96c:	1885203a 	divu	r2,r3,r2
    e970:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
    e974:	e0bffd17 	ldw	r2,-12(fp)
    e978:	1083fdc8 	cmpgei	r2,r2,4087
    e97c:	1000051e 	bne	r2,zero,e994 <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
    e980:	00800074 	movhi	r2,1
    e984:	109ea804 	addi	r2,r2,31392
    e988:	00c00304 	movi	r3,12
    e98c:	10c01085 	stb	r3,66(r2)
    e990:	00000c06 	br	e9c4 <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	00fffb54 	movui	r3,65517
    e99c:	18800516 	blt	r3,r2,e9b4 <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
    e9a0:	00800074 	movhi	r2,1
    e9a4:	109ea804 	addi	r2,r2,31392
    e9a8:	00c00404 	movi	r3,16
    e9ac:	10c01085 	stb	r3,66(r2)
    e9b0:	00000406 	br	e9c4 <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
    e9b4:	00800074 	movhi	r2,1
    e9b8:	109ea804 	addi	r2,r2,31392
    e9bc:	00c00804 	movi	r3,32
    e9c0:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
    e9c4:	e03ffc15 	stw	zero,-16(fp)
    e9c8:	00001106 	br	ea10 <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
    e9cc:	d0a70d17 	ldw	r2,-25548(gp)
    e9d0:	10c00a17 	ldw	r3,40(r2)
    e9d4:	e0bffc17 	ldw	r2,-16(fp)
    e9d8:	1885883a 	add	r2,r3,r2
    e9dc:	108009c4 	addi	r2,r2,39
    e9e0:	10800023 	ldbuio	r2,0(r2)
    e9e4:	10803fcc 	andi	r2,r2,255
    e9e8:	1009883a 	mov	r4,r2
    e9ec:	00800074 	movhi	r2,1
    e9f0:	109ea804 	addi	r2,r2,31392
    e9f4:	e0fffc17 	ldw	r3,-16(fp)
    e9f8:	10c5883a 	add	r2,r2,r3
    e9fc:	10800ac4 	addi	r2,r2,43
    ea00:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
    ea04:	e0bffc17 	ldw	r2,-16(fp)
    ea08:	10800044 	addi	r2,r2,1
    ea0c:	e0bffc15 	stw	r2,-16(fp)
    ea10:	e0bffc17 	ldw	r2,-16(fp)
    ea14:	10800110 	cmplti	r2,r2,4
    ea18:	103fec1e 	bne	r2,zero,e9cc <__alt_data_end+0xf800e9cc>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    ea1c:	e03ffc15 	stw	zero,-16(fp)
    ea20:	00001106 	br	ea68 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
    ea24:	d0a70d17 	ldw	r2,-25548(gp)
    ea28:	10c00a17 	ldw	r3,40(r2)
    ea2c:	e0bffc17 	ldw	r2,-16(fp)
    ea30:	1885883a 	add	r2,r3,r2
    ea34:	10800ac4 	addi	r2,r2,43
    ea38:	10800023 	ldbuio	r2,0(r2)
    ea3c:	10803fcc 	andi	r2,r2,255
    ea40:	1009883a 	mov	r4,r2
    ea44:	00800074 	movhi	r2,1
    ea48:	109ea804 	addi	r2,r2,31392
    ea4c:	e0fffc17 	ldw	r3,-16(fp)
    ea50:	10c5883a 	add	r2,r2,r3
    ea54:	10800bc4 	addi	r2,r2,47
    ea58:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
    ea5c:	e0bffc17 	ldw	r2,-16(fp)
    ea60:	10800044 	addi	r2,r2,1
    ea64:	e0bffc15 	stw	r2,-16(fp)
    ea68:	e0bffc17 	ldw	r2,-16(fp)
    ea6c:	108002d0 	cmplti	r2,r2,11
    ea70:	103fec1e 	bne	r2,zero,ea24 <__alt_data_end+0xf800ea24>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    ea74:	e03ffc15 	stw	zero,-16(fp)
    ea78:	00001106 	br	eac0 <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
    ea7c:	d0a70d17 	ldw	r2,-25548(gp)
    ea80:	10c00a17 	ldw	r3,40(r2)
    ea84:	e0bffc17 	ldw	r2,-16(fp)
    ea88:	1885883a 	add	r2,r3,r2
    ea8c:	10800d84 	addi	r2,r2,54
    ea90:	10800023 	ldbuio	r2,0(r2)
    ea94:	10803fcc 	andi	r2,r2,255
    ea98:	1009883a 	mov	r4,r2
    ea9c:	00800074 	movhi	r2,1
    eaa0:	109ea804 	addi	r2,r2,31392
    eaa4:	e0fffc17 	ldw	r3,-16(fp)
    eaa8:	10c5883a 	add	r2,r2,r3
    eaac:	10800e84 	addi	r2,r2,58
    eab0:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
    eab4:	e0bffc17 	ldw	r2,-16(fp)
    eab8:	10800044 	addi	r2,r2,1
    eabc:	e0bffc15 	stw	r2,-16(fp)
    eac0:	e0bffc17 	ldw	r2,-16(fp)
    eac4:	10800210 	cmplti	r2,r2,8
    eac8:	103fec1e 	bne	r2,zero,ea7c <__alt_data_end+0xf800ea7c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    eacc:	e03ffc15 	stw	zero,-16(fp)
    ead0:	00000a06 	br	eafc <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
    ead4:	00800074 	movhi	r2,1
    ead8:	109ebd04 	addi	r2,r2,31476
    eadc:	e0fffc17 	ldw	r3,-16(fp)
    eae0:	180691ba 	slli	r3,r3,6
    eae4:	10c5883a 	add	r2,r2,r3
    eae8:	10800f04 	addi	r2,r2,60
    eaec:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
    eaf0:	e0bffc17 	ldw	r2,-16(fp)
    eaf4:	10800044 	addi	r2,r2,1
    eaf8:	e0bffc15 	stw	r2,-16(fp)
    eafc:	e0bffc17 	ldw	r2,-16(fp)
    eb00:	10800510 	cmplti	r2,r2,20
    eb04:	103ff31e 	bne	r2,zero,ead4 <__alt_data_end+0xf800ead4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
    eb08:	00800044 	movi	r2,1
    eb0c:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
    eb10:	00000106 	br	eb18 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
    eb14:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
    eb18:	e0bffb17 	ldw	r2,-20(fp)
}
    eb1c:	e037883a 	mov	sp,fp
    eb20:	dfc00117 	ldw	ra,4(sp)
    eb24:	df000017 	ldw	fp,0(sp)
    eb28:	dec00204 	addi	sp,sp,8
    eb2c:	f800283a 	ret

0000eb30 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
    eb30:	defffc04 	addi	sp,sp,-16
    eb34:	dfc00315 	stw	ra,12(sp)
    eb38:	df000215 	stw	fp,8(sp)
    eb3c:	df000204 	addi	fp,sp,8
	bool result = false;
    eb40:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
    eb44:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
    eb48:	10002e26 	beq	r2,zero,ec04 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
    eb4c:	d0a70717 	ldw	r2,-25572(gp)
    eb50:	1080000b 	ldhu	r2,0(r2)
    eb54:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
    eb58:	d0270b15 	stw	zero,-25556(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
    eb5c:	d0270c15 	stw	zero,-25552(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
    eb60:	e0bfff0f 	ldh	r2,-4(fp)
    eb64:	10002716 	blt	r2,zero,ec04 <Look_for_FAT16+0xd4>
    eb68:	e0bfff0b 	ldhu	r2,-4(fp)
    eb6c:	10bfffcc 	andi	r2,r2,65535
    eb70:	1083000c 	andi	r2,r2,3072
    eb74:	10830020 	cmpeqi	r2,r2,3072
    eb78:	1000221e 	bne	r2,zero,ec04 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
    eb7c:	e0bfff0b 	ldhu	r2,-4(fp)
    eb80:	10bfffcc 	andi	r2,r2,65535
    eb84:	1083000c 	andi	r2,r2,3072
    eb88:	10810018 	cmpnei	r2,r2,1024
    eb8c:	1000031e 	bne	r2,zero,eb9c <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
    eb90:	0009883a 	mov	r4,zero
    eb94:	000e4b00 	call	e4b0 <Check_for_DOS_FAT>
    eb98:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
    eb9c:	e0bfff0b 	ldhu	r2,-4(fp)
    eba0:	10bfffcc 	andi	r2,r2,65535
    eba4:	1083000c 	andi	r2,r2,3072
    eba8:	1000061e 	bne	r2,zero,ebc4 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
    ebac:	000de040 	call	de04 <Check_for_Master_Boot_Record>
    ebb0:	10000426 	beq	r2,zero,ebc4 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
    ebb4:	d0a70b17 	ldw	r2,-25556(gp)
    ebb8:	1009883a 	mov	r4,r2
    ebbc:	000e4b00 	call	e4b0 <Check_for_DOS_FAT>
    ebc0:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
    ebc4:	e0bffe17 	ldw	r2,-8(fp)
    ebc8:	10800058 	cmpnei	r2,r2,1
    ebcc:	10000d1e 	bne	r2,zero,ec04 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
    ebd0:	00800074 	movhi	r2,1
    ebd4:	109ea804 	addi	r2,r2,31392
    ebd8:	10801083 	ldbu	r2,66(r2)
    ebdc:	10803fcc 	andi	r2,r2,255
    ebe0:	10800420 	cmpeqi	r2,r2,16
    ebe4:	1000021e 	bne	r2,zero,ebf0 <Look_for_FAT16+0xc0>
				{
					result = false;
    ebe8:	e03ffe15 	stw	zero,-8(fp)
    ebec:	00000506 	br	ec04 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
    ebf0:	00800074 	movhi	r2,1
    ebf4:	109ea804 	addi	r2,r2,31392
    ebf8:	1080058b 	ldhu	r2,22(r2)
    ebfc:	10bfffcc 	andi	r2,r2,65535
    ec00:	d0a70c15 	stw	r2,-25552(gp)
				}
			}
		}
	}
	return result;
    ec04:	e0bffe17 	ldw	r2,-8(fp)
}
    ec08:	e037883a 	mov	sp,fp
    ec0c:	dfc00117 	ldw	ra,4(sp)
    ec10:	df000017 	ldw	fp,0(sp)
    ec14:	dec00204 	addi	sp,sp,8
    ec18:	f800283a 	ret

0000ec1c <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
    ec1c:	defffb04 	addi	sp,sp,-20
    ec20:	dfc00415 	stw	ra,16(sp)
    ec24:	df000315 	stw	fp,12(sp)
    ec28:	df000304 	addi	fp,sp,12
    ec2c:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
    ec30:	e13fff17 	ldw	r4,-4(fp)
    ec34:	00010cc0 	call	10cc <strlen>
    ec38:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
    ec3c:	e03ffd15 	stw	zero,-12(fp)
    ec40:	00001e06 	br	ecbc <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
    ec44:	e0bffd17 	ldw	r2,-12(fp)
    ec48:	e0ffff17 	ldw	r3,-4(fp)
    ec4c:	1885883a 	add	r2,r3,r2
    ec50:	10800003 	ldbu	r2,0(r2)
    ec54:	10803fcc 	andi	r2,r2,255
    ec58:	1080201c 	xori	r2,r2,128
    ec5c:	10bfe004 	addi	r2,r2,-128
    ec60:	10801850 	cmplti	r2,r2,97
    ec64:	1000121e 	bne	r2,zero,ecb0 <filename_to_upper_case+0x94>
    ec68:	e0bffd17 	ldw	r2,-12(fp)
    ec6c:	e0ffff17 	ldw	r3,-4(fp)
    ec70:	1885883a 	add	r2,r3,r2
    ec74:	10800003 	ldbu	r2,0(r2)
    ec78:	10803fcc 	andi	r2,r2,255
    ec7c:	1080201c 	xori	r2,r2,128
    ec80:	10bfe004 	addi	r2,r2,-128
    ec84:	10801ec8 	cmpgei	r2,r2,123
    ec88:	1000091e 	bne	r2,zero,ecb0 <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
    ec8c:	e0bffd17 	ldw	r2,-12(fp)
    ec90:	e0ffff17 	ldw	r3,-4(fp)
    ec94:	1885883a 	add	r2,r3,r2
    ec98:	e0fffd17 	ldw	r3,-12(fp)
    ec9c:	e13fff17 	ldw	r4,-4(fp)
    eca0:	20c7883a 	add	r3,r4,r3
    eca4:	18c00003 	ldbu	r3,0(r3)
    eca8:	18fff804 	addi	r3,r3,-32
    ecac:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
    ecb0:	e0bffd17 	ldw	r2,-12(fp)
    ecb4:	10800044 	addi	r2,r2,1
    ecb8:	e0bffd15 	stw	r2,-12(fp)
    ecbc:	e0fffd17 	ldw	r3,-12(fp)
    ecc0:	e0bffe17 	ldw	r2,-8(fp)
    ecc4:	18bfdf16 	blt	r3,r2,ec44 <__alt_data_end+0xf800ec44>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
    ecc8:	0001883a 	nop
    eccc:	e037883a 	mov	sp,fp
    ecd0:	dfc00117 	ldw	ra,4(sp)
    ecd4:	df000017 	ldw	fp,0(sp)
    ecd8:	dec00204 	addi	sp,sp,8
    ecdc:	f800283a 	ret

0000ece0 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
    ece0:	defff804 	addi	sp,sp,-32
    ece4:	dfc00715 	stw	ra,28(sp)
    ece8:	df000615 	stw	fp,24(sp)
    ecec:	df000604 	addi	fp,sp,24
    ecf0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
    ecf4:	e13fff17 	ldw	r4,-4(fp)
    ecf8:	00010cc0 	call	10cc <strlen>
    ecfc:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
    ed00:	00bfffc4 	movi	r2,-1
    ed04:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
    ed08:	00bfffc4 	movi	r2,-1
    ed0c:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
    ed10:	00800044 	movi	r2,1
    ed14:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
    ed18:	e03ffa15 	stw	zero,-24(fp)
    ed1c:	00006d06 	br	eed4 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
    ed20:	e0bffa17 	ldw	r2,-24(fp)
    ed24:	e0ffff17 	ldw	r3,-4(fp)
    ed28:	1885883a 	add	r2,r3,r2
    ed2c:	10800003 	ldbu	r2,0(r2)
    ed30:	10803fcc 	andi	r2,r2,255
    ed34:	1080201c 	xori	r2,r2,128
    ed38:	10bfe004 	addi	r2,r2,-128
    ed3c:	10800820 	cmpeqi	r2,r2,32
    ed40:	10003e1e 	bne	r2,zero,ee3c <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    ed44:	e0bffa17 	ldw	r2,-24(fp)
    ed48:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
    ed4c:	e0bffb17 	ldw	r2,-20(fp)
    ed50:	1880121e 	bne	r3,r2,ed9c <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    ed54:	e0bffa17 	ldw	r2,-24(fp)
    ed58:	e0ffff17 	ldw	r3,-4(fp)
    ed5c:	1885883a 	add	r2,r3,r2
    ed60:	10800003 	ldbu	r2,0(r2)
    ed64:	10803fcc 	andi	r2,r2,255
    ed68:	1080201c 	xori	r2,r2,128
    ed6c:	10bfe004 	addi	r2,r2,-128
    ed70:	10801720 	cmpeqi	r2,r2,92
    ed74:	1000311e 	bne	r2,zero,ee3c <check_file_name_for_FAT16_compliance+0x15c>
    ed78:	e0bffa17 	ldw	r2,-24(fp)
    ed7c:	e0ffff17 	ldw	r3,-4(fp)
    ed80:	1885883a 	add	r2,r3,r2
    ed84:	10800003 	ldbu	r2,0(r2)
    ed88:	10803fcc 	andi	r2,r2,255
    ed8c:	1080201c 	xori	r2,r2,128
    ed90:	10bfe004 	addi	r2,r2,-128
    ed94:	10800be0 	cmpeqi	r2,r2,47
    ed98:	1000281e 	bne	r2,zero,ee3c <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    ed9c:	e0fffa17 	ldw	r3,-24(fp)
    eda0:	e0bffc17 	ldw	r2,-16(fp)
    eda4:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
    eda8:	10800258 	cmpnei	r2,r2,9
    edac:	1000091e 	bne	r2,zero,edd4 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
    edb0:	e0bffa17 	ldw	r2,-24(fp)
    edb4:	e0ffff17 	ldw	r3,-4(fp)
    edb8:	1885883a 	add	r2,r3,r2
    edbc:	10800003 	ldbu	r2,0(r2)
    edc0:	10803fcc 	andi	r2,r2,255
    edc4:	1080201c 	xori	r2,r2,128
    edc8:	10bfe004 	addi	r2,r2,-128
    edcc:	10800b98 	cmpnei	r2,r2,46
    edd0:	10001a1e 	bne	r2,zero,ee3c <check_file_name_for_FAT16_compliance+0x15c>
    edd4:	e0fffb17 	ldw	r3,-20(fp)
    edd8:	e0bffc17 	ldw	r2,-16(fp)
    eddc:	18801926 	beq	r3,r2,ee44 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    ede0:	e0fffa17 	ldw	r3,-24(fp)
    ede4:	e0bffc17 	ldw	r2,-16(fp)
    ede8:	1885c83a 	sub	r2,r3,r2
    edec:	10800110 	cmplti	r2,r2,4
    edf0:	1000141e 	bne	r2,zero,ee44 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    edf4:	e0bffa17 	ldw	r2,-24(fp)
    edf8:	e0ffff17 	ldw	r3,-4(fp)
    edfc:	1885883a 	add	r2,r3,r2
    ee00:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
    ee04:	10803fcc 	andi	r2,r2,255
    ee08:	1080201c 	xori	r2,r2,128
    ee0c:	10bfe004 	addi	r2,r2,-128
    ee10:	10801720 	cmpeqi	r2,r2,92
    ee14:	10000b1e 	bne	r2,zero,ee44 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
    ee18:	e0bffa17 	ldw	r2,-24(fp)
    ee1c:	e0ffff17 	ldw	r3,-4(fp)
    ee20:	1885883a 	add	r2,r3,r2
    ee24:	10800003 	ldbu	r2,0(r2)
    ee28:	10803fcc 	andi	r2,r2,255
    ee2c:	1080201c 	xori	r2,r2,128
    ee30:	10bfe004 	addi	r2,r2,-128
    ee34:	10800be0 	cmpeqi	r2,r2,47
    ee38:	1000021e 	bne	r2,zero,ee44 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
    ee3c:	e03ffd15 	stw	zero,-12(fp)
            break;
    ee40:	00002706 	br	eee0 <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
    ee44:	e0bffa17 	ldw	r2,-24(fp)
    ee48:	e0ffff17 	ldw	r3,-4(fp)
    ee4c:	1885883a 	add	r2,r3,r2
    ee50:	10800003 	ldbu	r2,0(r2)
    ee54:	10803fcc 	andi	r2,r2,255
    ee58:	1080201c 	xori	r2,r2,128
    ee5c:	10bfe004 	addi	r2,r2,-128
    ee60:	10801720 	cmpeqi	r2,r2,92
    ee64:	1000091e 	bne	r2,zero,ee8c <check_file_name_for_FAT16_compliance+0x1ac>
    ee68:	e0bffa17 	ldw	r2,-24(fp)
    ee6c:	e0ffff17 	ldw	r3,-4(fp)
    ee70:	1885883a 	add	r2,r3,r2
    ee74:	10800003 	ldbu	r2,0(r2)
    ee78:	10803fcc 	andi	r2,r2,255
    ee7c:	1080201c 	xori	r2,r2,128
    ee80:	10bfe004 	addi	r2,r2,-128
    ee84:	10800bd8 	cmpnei	r2,r2,47
    ee88:	1000041e 	bne	r2,zero,ee9c <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
    ee8c:	e0bffa17 	ldw	r2,-24(fp)
    ee90:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
    ee94:	e0bffa17 	ldw	r2,-24(fp)
    ee98:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
    ee9c:	e0bffa17 	ldw	r2,-24(fp)
    eea0:	e0ffff17 	ldw	r3,-4(fp)
    eea4:	1885883a 	add	r2,r3,r2
    eea8:	10800003 	ldbu	r2,0(r2)
    eeac:	10803fcc 	andi	r2,r2,255
    eeb0:	1080201c 	xori	r2,r2,128
    eeb4:	10bfe004 	addi	r2,r2,-128
    eeb8:	10800b98 	cmpnei	r2,r2,46
    eebc:	1000021e 	bne	r2,zero,eec8 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
    eec0:	e0bffa17 	ldw	r2,-24(fp)
    eec4:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    eec8:	e0bffa17 	ldw	r2,-24(fp)
    eecc:	10800044 	addi	r2,r2,1
    eed0:	e0bffa15 	stw	r2,-24(fp)
    eed4:	e0fffa17 	ldw	r3,-24(fp)
    eed8:	e0bffe17 	ldw	r2,-8(fp)
    eedc:	18bf9016 	blt	r3,r2,ed20 <__alt_data_end+0xf800ed20>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
    eee0:	e0bffe17 	ldw	r2,-8(fp)
    eee4:	10bfffc4 	addi	r2,r2,-1
    eee8:	e0ffff17 	ldw	r3,-4(fp)
    eeec:	1885883a 	add	r2,r3,r2
    eef0:	10800003 	ldbu	r2,0(r2)
    eef4:	10803fcc 	andi	r2,r2,255
    eef8:	1080201c 	xori	r2,r2,128
    eefc:	10bfe004 	addi	r2,r2,-128
    ef00:	10801720 	cmpeqi	r2,r2,92
    ef04:	10000a1e 	bne	r2,zero,ef30 <check_file_name_for_FAT16_compliance+0x250>
    ef08:	e0bffe17 	ldw	r2,-8(fp)
    ef0c:	10bfffc4 	addi	r2,r2,-1
    ef10:	e0ffff17 	ldw	r3,-4(fp)
    ef14:	1885883a 	add	r2,r3,r2
    ef18:	10800003 	ldbu	r2,0(r2)
    ef1c:	10803fcc 	andi	r2,r2,255
    ef20:	1080201c 	xori	r2,r2,128
    ef24:	10bfe004 	addi	r2,r2,-128
    ef28:	10800bd8 	cmpnei	r2,r2,47
    ef2c:	1000011e 	bne	r2,zero,ef34 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
    ef30:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
    ef34:	e0bffd17 	ldw	r2,-12(fp)
}
    ef38:	e037883a 	mov	sp,fp
    ef3c:	dfc00117 	ldw	ra,4(sp)
    ef40:	df000017 	ldw	fp,0(sp)
    ef44:	dec00204 	addi	sp,sp,8
    ef48:	f800283a 	ret

0000ef4c <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
    ef4c:	defffb04 	addi	sp,sp,-20
    ef50:	dfc00415 	stw	ra,16(sp)
    ef54:	df000315 	stw	fp,12(sp)
    ef58:	df000304 	addi	fp,sp,12
    ef5c:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
    ef60:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
    ef64:	e13fff17 	ldw	r4,-4(fp)
    ef68:	00010cc0 	call	10cc <strlen>
    ef6c:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
    ef70:	e03ffd15 	stw	zero,-12(fp)
    ef74:	00001506 	br	efcc <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
    ef78:	e0bffd17 	ldw	r2,-12(fp)
    ef7c:	e0ffff17 	ldw	r3,-4(fp)
    ef80:	1885883a 	add	r2,r3,r2
    ef84:	10800003 	ldbu	r2,0(r2)
    ef88:	10803fcc 	andi	r2,r2,255
    ef8c:	1080201c 	xori	r2,r2,128
    ef90:	10bfe004 	addi	r2,r2,-128
    ef94:	10801720 	cmpeqi	r2,r2,92
    ef98:	10000f1e 	bne	r2,zero,efd8 <get_dir_divider_location+0x8c>
    ef9c:	e0bffd17 	ldw	r2,-12(fp)
    efa0:	e0ffff17 	ldw	r3,-4(fp)
    efa4:	1885883a 	add	r2,r3,r2
    efa8:	10800003 	ldbu	r2,0(r2)
    efac:	10803fcc 	andi	r2,r2,255
    efb0:	1080201c 	xori	r2,r2,128
    efb4:	10bfe004 	addi	r2,r2,-128
    efb8:	10800be0 	cmpeqi	r2,r2,47
    efbc:	1000061e 	bne	r2,zero,efd8 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
    efc0:	e0bffd17 	ldw	r2,-12(fp)
    efc4:	10800044 	addi	r2,r2,1
    efc8:	e0bffd15 	stw	r2,-12(fp)
    efcc:	e0fffd17 	ldw	r3,-12(fp)
    efd0:	e0bffe17 	ldw	r2,-8(fp)
    efd4:	18bfe816 	blt	r3,r2,ef78 <__alt_data_end+0xf800ef78>
        {
            break;
        }
    }
    
    if (index == length)
    efd8:	e0fffd17 	ldw	r3,-12(fp)
    efdc:	e0bffe17 	ldw	r2,-8(fp)
    efe0:	1880021e 	bne	r3,r2,efec <get_dir_divider_location+0xa0>
    {
        index = -1;
    efe4:	00bfffc4 	movi	r2,-1
    efe8:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
    efec:	e0bffd17 	ldw	r2,-12(fp)
}
    eff0:	e037883a 	mov	sp,fp
    eff4:	dfc00117 	ldw	ra,4(sp)
    eff8:	df000017 	ldw	fp,0(sp)
    effc:	dec00204 	addi	sp,sp,8
    f000:	f800283a 	ret

0000f004 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    f004:	defffa04 	addi	sp,sp,-24
    f008:	df000515 	stw	fp,20(sp)
    f00c:	df000504 	addi	fp,sp,20
    f010:	e13ffd15 	stw	r4,-12(fp)
    f014:	e17ffe15 	stw	r5,-8(fp)
    f018:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
    f01c:	00800044 	movi	r2,1
    f020:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
    f024:	e03ffc15 	stw	zero,-16(fp)
    f028:	00004606 	br	f144 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
    f02c:	e0fffd17 	ldw	r3,-12(fp)
    f030:	e0bffc17 	ldw	r2,-16(fp)
    f034:	1885883a 	add	r2,r3,r2
    f038:	10800003 	ldbu	r2,0(r2)
    f03c:	10803fcc 	andi	r2,r2,255
    f040:	10801870 	cmpltui	r2,r2,97
    f044:	1000101e 	bne	r2,zero,f088 <match_file_record_to_name_ext+0x84>
    f048:	e0fffd17 	ldw	r3,-12(fp)
    f04c:	e0bffc17 	ldw	r2,-16(fp)
    f050:	1885883a 	add	r2,r3,r2
    f054:	10800003 	ldbu	r2,0(r2)
    f058:	10803fcc 	andi	r2,r2,255
    f05c:	10801ee8 	cmpgeui	r2,r2,123
    f060:	1000091e 	bne	r2,zero,f088 <match_file_record_to_name_ext+0x84>
    f064:	e0fffd17 	ldw	r3,-12(fp)
    f068:	e0bffc17 	ldw	r2,-16(fp)
    f06c:	1885883a 	add	r2,r3,r2
    f070:	10800003 	ldbu	r2,0(r2)
    f074:	10bff804 	addi	r2,r2,-32
    f078:	10c03fcc 	andi	r3,r2,255
    f07c:	18c0201c 	xori	r3,r3,128
    f080:	18ffe004 	addi	r3,r3,-128
    f084:	00000706 	br	f0a4 <match_file_record_to_name_ext+0xa0>
    f088:	e0fffd17 	ldw	r3,-12(fp)
    f08c:	e0bffc17 	ldw	r2,-16(fp)
    f090:	1885883a 	add	r2,r3,r2
    f094:	10800003 	ldbu	r2,0(r2)
    f098:	10c03fcc 	andi	r3,r2,255
    f09c:	18c0201c 	xori	r3,r3,128
    f0a0:	18ffe004 	addi	r3,r3,-128
    f0a4:	e0bffc17 	ldw	r2,-16(fp)
    f0a8:	e13ffe17 	ldw	r4,-8(fp)
    f0ac:	2085883a 	add	r2,r4,r2
    f0b0:	10800003 	ldbu	r2,0(r2)
    f0b4:	10803fcc 	andi	r2,r2,255
    f0b8:	1080201c 	xori	r2,r2,128
    f0bc:	10bfe004 	addi	r2,r2,-128
    f0c0:	10801850 	cmplti	r2,r2,97
    f0c4:	1000121e 	bne	r2,zero,f110 <match_file_record_to_name_ext+0x10c>
    f0c8:	e0bffc17 	ldw	r2,-16(fp)
    f0cc:	e13ffe17 	ldw	r4,-8(fp)
    f0d0:	2085883a 	add	r2,r4,r2
    f0d4:	10800003 	ldbu	r2,0(r2)
    f0d8:	10803fcc 	andi	r2,r2,255
    f0dc:	1080201c 	xori	r2,r2,128
    f0e0:	10bfe004 	addi	r2,r2,-128
    f0e4:	10801ec8 	cmpgei	r2,r2,123
    f0e8:	1000091e 	bne	r2,zero,f110 <match_file_record_to_name_ext+0x10c>
    f0ec:	e0bffc17 	ldw	r2,-16(fp)
    f0f0:	e13ffe17 	ldw	r4,-8(fp)
    f0f4:	2085883a 	add	r2,r4,r2
    f0f8:	10800003 	ldbu	r2,0(r2)
    f0fc:	10bff804 	addi	r2,r2,-32
    f100:	10803fcc 	andi	r2,r2,255
    f104:	1080201c 	xori	r2,r2,128
    f108:	10bfe004 	addi	r2,r2,-128
    f10c:	00000706 	br	f12c <match_file_record_to_name_ext+0x128>
    f110:	e0bffc17 	ldw	r2,-16(fp)
    f114:	e13ffe17 	ldw	r4,-8(fp)
    f118:	2085883a 	add	r2,r4,r2
    f11c:	10800003 	ldbu	r2,0(r2)
    f120:	10803fcc 	andi	r2,r2,255
    f124:	1080201c 	xori	r2,r2,128
    f128:	10bfe004 	addi	r2,r2,-128
    f12c:	18800226 	beq	r3,r2,f138 <match_file_record_to_name_ext+0x134>
        {
            match = false;
    f130:	e03ffb15 	stw	zero,-20(fp)
			break;
    f134:	00000606 	br	f150 <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
    f138:	e0bffc17 	ldw	r2,-16(fp)
    f13c:	10800044 	addi	r2,r2,1
    f140:	e0bffc15 	stw	r2,-16(fp)
    f144:	e0bffc17 	ldw	r2,-16(fp)
    f148:	10800210 	cmplti	r2,r2,8
    f14c:	103fb71e 	bne	r2,zero,f02c <__alt_data_end+0xf800f02c>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    f150:	e03ffc15 	stw	zero,-16(fp)
    f154:	00004a06 	br	f280 <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
    f158:	e0fffd17 	ldw	r3,-12(fp)
    f15c:	e0bffc17 	ldw	r2,-16(fp)
    f160:	1885883a 	add	r2,r3,r2
    f164:	10800204 	addi	r2,r2,8
    f168:	10800003 	ldbu	r2,0(r2)
    f16c:	10803fcc 	andi	r2,r2,255
    f170:	10801870 	cmpltui	r2,r2,97
    f174:	1000121e 	bne	r2,zero,f1c0 <match_file_record_to_name_ext+0x1bc>
    f178:	e0fffd17 	ldw	r3,-12(fp)
    f17c:	e0bffc17 	ldw	r2,-16(fp)
    f180:	1885883a 	add	r2,r3,r2
    f184:	10800204 	addi	r2,r2,8
    f188:	10800003 	ldbu	r2,0(r2)
    f18c:	10803fcc 	andi	r2,r2,255
    f190:	10801ee8 	cmpgeui	r2,r2,123
    f194:	10000a1e 	bne	r2,zero,f1c0 <match_file_record_to_name_ext+0x1bc>
    f198:	e0fffd17 	ldw	r3,-12(fp)
    f19c:	e0bffc17 	ldw	r2,-16(fp)
    f1a0:	1885883a 	add	r2,r3,r2
    f1a4:	10800204 	addi	r2,r2,8
    f1a8:	10800003 	ldbu	r2,0(r2)
    f1ac:	10bff804 	addi	r2,r2,-32
    f1b0:	10c03fcc 	andi	r3,r2,255
    f1b4:	18c0201c 	xori	r3,r3,128
    f1b8:	18ffe004 	addi	r3,r3,-128
    f1bc:	00000806 	br	f1e0 <match_file_record_to_name_ext+0x1dc>
    f1c0:	e0fffd17 	ldw	r3,-12(fp)
    f1c4:	e0bffc17 	ldw	r2,-16(fp)
    f1c8:	1885883a 	add	r2,r3,r2
    f1cc:	10800204 	addi	r2,r2,8
    f1d0:	10800003 	ldbu	r2,0(r2)
    f1d4:	10c03fcc 	andi	r3,r2,255
    f1d8:	18c0201c 	xori	r3,r3,128
    f1dc:	18ffe004 	addi	r3,r3,-128
    f1e0:	e0bffc17 	ldw	r2,-16(fp)
    f1e4:	e13fff17 	ldw	r4,-4(fp)
    f1e8:	2085883a 	add	r2,r4,r2
    f1ec:	10800003 	ldbu	r2,0(r2)
    f1f0:	10803fcc 	andi	r2,r2,255
    f1f4:	1080201c 	xori	r2,r2,128
    f1f8:	10bfe004 	addi	r2,r2,-128
    f1fc:	10801850 	cmplti	r2,r2,97
    f200:	1000121e 	bne	r2,zero,f24c <match_file_record_to_name_ext+0x248>
    f204:	e0bffc17 	ldw	r2,-16(fp)
    f208:	e13fff17 	ldw	r4,-4(fp)
    f20c:	2085883a 	add	r2,r4,r2
    f210:	10800003 	ldbu	r2,0(r2)
    f214:	10803fcc 	andi	r2,r2,255
    f218:	1080201c 	xori	r2,r2,128
    f21c:	10bfe004 	addi	r2,r2,-128
    f220:	10801ec8 	cmpgei	r2,r2,123
    f224:	1000091e 	bne	r2,zero,f24c <match_file_record_to_name_ext+0x248>
    f228:	e0bffc17 	ldw	r2,-16(fp)
    f22c:	e13fff17 	ldw	r4,-4(fp)
    f230:	2085883a 	add	r2,r4,r2
    f234:	10800003 	ldbu	r2,0(r2)
    f238:	10bff804 	addi	r2,r2,-32
    f23c:	10803fcc 	andi	r2,r2,255
    f240:	1080201c 	xori	r2,r2,128
    f244:	10bfe004 	addi	r2,r2,-128
    f248:	00000706 	br	f268 <match_file_record_to_name_ext+0x264>
    f24c:	e0bffc17 	ldw	r2,-16(fp)
    f250:	e13fff17 	ldw	r4,-4(fp)
    f254:	2085883a 	add	r2,r4,r2
    f258:	10800003 	ldbu	r2,0(r2)
    f25c:	10803fcc 	andi	r2,r2,255
    f260:	1080201c 	xori	r2,r2,128
    f264:	10bfe004 	addi	r2,r2,-128
    f268:	18800226 	beq	r3,r2,f274 <match_file_record_to_name_ext+0x270>
        {
            match = false;
    f26c:	e03ffb15 	stw	zero,-20(fp)
			break;
    f270:	00000606 	br	f28c <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
    f274:	e0bffc17 	ldw	r2,-16(fp)
    f278:	10800044 	addi	r2,r2,1
    f27c:	e0bffc15 	stw	r2,-16(fp)
    f280:	e0bffc17 	ldw	r2,-16(fp)
    f284:	108000d0 	cmplti	r2,r2,3
    f288:	103fb31e 	bne	r2,zero,f158 <__alt_data_end+0xf800f158>
        {
            match = false;
			break;
        }
    }
	return match;
    f28c:	e0bffb17 	ldw	r2,-20(fp)
}
    f290:	e037883a 	mov	sp,fp
    f294:	df000017 	ldw	fp,0(sp)
    f298:	dec00104 	addi	sp,sp,4
    f29c:	f800283a 	ret

0000f2a0 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
    f2a0:	deffe704 	addi	sp,sp,-100
    f2a4:	dfc01815 	stw	ra,96(sp)
    f2a8:	df001715 	stw	fp,92(sp)
    f2ac:	df001704 	addi	fp,sp,92
    f2b0:	e13ffd15 	stw	r4,-12(fp)
    f2b4:	e17ffe15 	stw	r5,-8(fp)
    f2b8:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
    f2bc:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
    f2c0:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
    f2c4:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    f2c8:	e13ffd17 	ldw	r4,-12(fp)
    f2cc:	000ef4c0 	call	ef4c <get_dir_divider_location>
    f2d0:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
    f2d4:	00012f06 	br	f794 <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    f2d8:	00800804 	movi	r2,32
    f2dc:	e0bff905 	stb	r2,-28(fp)
    f2e0:	00800804 	movi	r2,32
    f2e4:	e0bff945 	stb	r2,-27(fp)
    f2e8:	00800804 	movi	r2,32
    f2ec:	e0bff985 	stb	r2,-26(fp)
    f2f0:	00800804 	movi	r2,32
    f2f4:	e0bff9c5 	stb	r2,-25(fp)
    f2f8:	00800804 	movi	r2,32
    f2fc:	e0bffa05 	stb	r2,-24(fp)
    f300:	00800804 	movi	r2,32
    f304:	e0bffa45 	stb	r2,-23(fp)
    f308:	00800804 	movi	r2,32
    f30c:	e0bffa85 	stb	r2,-22(fp)
    f310:	00800804 	movi	r2,32
    f314:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
    f318:	00800804 	movi	r2,32
    f31c:	e0bffb05 	stb	r2,-20(fp)
    f320:	00800804 	movi	r2,32
    f324:	e0bffb45 	stb	r2,-19(fp)
    f328:	00800804 	movi	r2,32
    f32c:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
    f330:	00bfffc4 	movi	r2,-1
    f334:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
    f338:	e0bfea17 	ldw	r2,-88(fp)
    f33c:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    f340:	e03fec15 	stw	zero,-80(fp)
    f344:	00002d06 	br	f3fc <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
    f348:	e0ffec17 	ldw	r3,-80(fp)
    f34c:	e0bfed17 	ldw	r2,-76(fp)
    f350:	1885883a 	add	r2,r3,r2
    f354:	1007883a 	mov	r3,r2
    f358:	e0bffd17 	ldw	r2,-12(fp)
    f35c:	10c5883a 	add	r2,r2,r3
    f360:	10800003 	ldbu	r2,0(r2)
    f364:	10803fcc 	andi	r2,r2,255
    f368:	1080201c 	xori	r2,r2,128
    f36c:	10bfe004 	addi	r2,r2,-128
    f370:	10800b98 	cmpnei	r2,r2,46
    f374:	1000031e 	bne	r2,zero,f384 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
    f378:	e0bfec17 	ldw	r2,-80(fp)
    f37c:	e0bfee15 	stw	r2,-72(fp)
    f380:	00001b06 	br	f3f0 <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
    f384:	e0bfee17 	ldw	r2,-72(fp)
    f388:	10000c0e 	bge	r2,zero,f3bc <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
    f38c:	e0ffec17 	ldw	r3,-80(fp)
    f390:	e0bfed17 	ldw	r2,-76(fp)
    f394:	1885883a 	add	r2,r3,r2
    f398:	1007883a 	mov	r3,r2
    f39c:	e0bffd17 	ldw	r2,-12(fp)
    f3a0:	10c5883a 	add	r2,r2,r3
    f3a4:	10c00003 	ldbu	r3,0(r2)
    f3a8:	e13ff904 	addi	r4,fp,-28
    f3ac:	e0bfec17 	ldw	r2,-80(fp)
    f3b0:	2085883a 	add	r2,r4,r2
    f3b4:	10c00005 	stb	r3,0(r2)
    f3b8:	00000d06 	br	f3f0 <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
    f3bc:	e0ffec17 	ldw	r3,-80(fp)
    f3c0:	e0bfee17 	ldw	r2,-72(fp)
    f3c4:	1885c83a 	sub	r2,r3,r2
    f3c8:	e13fec17 	ldw	r4,-80(fp)
    f3cc:	e0ffed17 	ldw	r3,-76(fp)
    f3d0:	20c7883a 	add	r3,r4,r3
    f3d4:	1809883a 	mov	r4,r3
    f3d8:	e0fffd17 	ldw	r3,-12(fp)
    f3dc:	1907883a 	add	r3,r3,r4
    f3e0:	18c00003 	ldbu	r3,0(r3)
    f3e4:	e13ffb04 	addi	r4,fp,-20
    f3e8:	2085883a 	add	r2,r4,r2
    f3ec:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
    f3f0:	e0bfec17 	ldw	r2,-80(fp)
    f3f4:	10800044 	addi	r2,r2,1
    f3f8:	e0bfec15 	stw	r2,-80(fp)
    f3fc:	e0ffec17 	ldw	r3,-80(fp)
    f400:	e0bfeb17 	ldw	r2,-84(fp)
    f404:	18bfd016 	blt	r3,r2,f348 <__alt_data_end+0xf800f348>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
    f408:	e0bfea17 	ldw	r2,-88(fp)
    f40c:	10005c1e 	bne	r2,zero,f580 <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    f410:	00800074 	movhi	r2,1
    f414:	109ea804 	addi	r2,r2,31392
    f418:	1080050b 	ldhu	r2,20(r2)
    f41c:	10bfffcc 	andi	r2,r2,65535
    f420:	1006917a 	slli	r3,r2,5
    f424:	00800074 	movhi	r2,1
    f428:	109ea804 	addi	r2,r2,31392
    f42c:	1080030b 	ldhu	r2,12(r2)
    f430:	10bfffcc 	andi	r2,r2,65535
    f434:	1885283a 	div	r2,r3,r2
    f438:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    f43c:	e03ff015 	stw	zero,-64(fp)
    f440:	00003b06 	br	f530 <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
    f444:	00800074 	movhi	r2,1
    f448:	109ea804 	addi	r2,r2,31392
    f44c:	10c01317 	ldw	r3,76(r2)
    f450:	e0bff017 	ldw	r2,-64(fp)
    f454:	1885883a 	add	r2,r3,r2
    f458:	1007883a 	mov	r3,r2
    f45c:	d0a70b17 	ldw	r2,-25556(gp)
    f460:	100b883a 	mov	r5,r2
    f464:	1809883a 	mov	r4,r3
    f468:	000db980 	call	db98 <Read_Sector_Data>
    f46c:	10003426 	beq	r2,zero,f540 <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    f470:	e03ff115 	stw	zero,-60(fp)
    f474:	00002506 	br	f50c <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    f478:	e0bff117 	ldw	r2,-60(fp)
    f47c:	1004917a 	slli	r2,r2,5
    f480:	e0fff017 	ldw	r3,-64(fp)
    f484:	180f883a 	mov	r7,r3
    f488:	000d883a 	mov	r6,zero
    f48c:	e17fff17 	ldw	r5,-4(fp)
    f490:	1009883a 	mov	r4,r2
    f494:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    f498:	e0bfff17 	ldw	r2,-4(fp)
    f49c:	10800003 	ldbu	r2,0(r2)
    f4a0:	10803fcc 	andi	r2,r2,255
    f4a4:	10803960 	cmpeqi	r2,r2,229
    f4a8:	1000151e 	bne	r2,zero,f500 <get_home_directory_cluster_for_file+0x260>
    f4ac:	e0bfff17 	ldw	r2,-4(fp)
    f4b0:	10800003 	ldbu	r2,0(r2)
    f4b4:	10803fcc 	andi	r2,r2,255
    f4b8:	10001126 	beq	r2,zero,f500 <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    f4bc:	e0fffb04 	addi	r3,fp,-20
    f4c0:	e0bff904 	addi	r2,fp,-28
    f4c4:	180d883a 	mov	r6,r3
    f4c8:	100b883a 	mov	r5,r2
    f4cc:	e13fff17 	ldw	r4,-4(fp)
    f4d0:	000f0040 	call	f004 <match_file_record_to_name_ext>
    f4d4:	e0bff815 	stw	r2,-32(fp)
                            if (match)
    f4d8:	e0bff817 	ldw	r2,-32(fp)
    f4dc:	10000826 	beq	r2,zero,f500 <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
    f4e0:	e0bfff17 	ldw	r2,-4(fp)
    f4e4:	1080058b 	ldhu	r2,22(r2)
    f4e8:	10bfffcc 	andi	r2,r2,65535
    f4ec:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
    f4f0:	e0bfff17 	ldw	r2,-4(fp)
    f4f4:	00c00044 	movi	r3,1
    f4f8:	10c00a15 	stw	r3,40(r2)
                                break;
    f4fc:	00000606 	br	f518 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    f500:	e0bff117 	ldw	r2,-60(fp)
    f504:	10800044 	addi	r2,r2,1
    f508:	e0bff115 	stw	r2,-60(fp)
    f50c:	e0bff117 	ldw	r2,-60(fp)
    f510:	10800410 	cmplti	r2,r2,16
    f514:	103fd81e 	bne	r2,zero,f478 <__alt_data_end+0xf800f478>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
    f518:	e0ffef17 	ldw	r3,-68(fp)
    f51c:	e0bfea17 	ldw	r2,-88(fp)
    f520:	1880091e 	bne	r3,r2,f548 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    f524:	e0bff017 	ldw	r2,-64(fp)
    f528:	10800044 	addi	r2,r2,1
    f52c:	e0bff015 	stw	r2,-64(fp)
    f530:	e0fff017 	ldw	r3,-64(fp)
    f534:	e0bff717 	ldw	r2,-36(fp)
    f538:	18bfc216 	blt	r3,r2,f444 <__alt_data_end+0xf800f444>
    f53c:	00000306 	br	f54c <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
    f540:	0001883a 	nop
    f544:	00000106 	br	f54c <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
    f548:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
    f54c:	e0ffef17 	ldw	r3,-68(fp)
    f550:	e0bfea17 	ldw	r2,-88(fp)
    f554:	18800826 	beq	r3,r2,f578 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    f558:	e0bfef17 	ldw	r2,-68(fp)
    f55c:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    f560:	e0ffed17 	ldw	r3,-76(fp)
    f564:	e0bfeb17 	ldw	r2,-84(fp)
    f568:	1885883a 	add	r2,r3,r2
    f56c:	10800044 	addi	r2,r2,1
    f570:	e0bfed15 	stw	r2,-76(fp)
    f574:	00007d06 	br	f76c <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    f578:	0005883a 	mov	r2,zero
    f57c:	00009106 	br	f7c4 <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
    f580:	e0bfea17 	ldw	r2,-88(fp)
    f584:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    f588:	e0bff417 	ldw	r2,-48(fp)
    f58c:	10ffff84 	addi	r3,r2,-2
    f590:	00800074 	movhi	r2,1
    f594:	109ea804 	addi	r2,r2,31392
    f598:	10800383 	ldbu	r2,14(r2)
    f59c:	10803fcc 	andi	r2,r2,255
    f5a0:	1885383a 	mul	r2,r3,r2
    f5a4:	1007883a 	mov	r3,r2
    f5a8:	00800074 	movhi	r2,1
    f5ac:	109ea804 	addi	r2,r2,31392
    f5b0:	10801417 	ldw	r2,80(r2)
    f5b4:	1885883a 	add	r2,r3,r2
    f5b8:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    f5bc:	e03ff215 	stw	zero,-56(fp)
    f5c0:	00003606 	br	f69c <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    f5c4:	e0fff217 	ldw	r3,-56(fp)
    f5c8:	e0bff517 	ldw	r2,-44(fp)
    f5cc:	1885883a 	add	r2,r3,r2
    f5d0:	d0e70b17 	ldw	r3,-25556(gp)
    f5d4:	180b883a 	mov	r5,r3
    f5d8:	1009883a 	mov	r4,r2
    f5dc:	000db980 	call	db98 <Read_Sector_Data>
    f5e0:	10003526 	beq	r2,zero,f6b8 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    f5e4:	e03ff315 	stw	zero,-52(fp)
    f5e8:	00002306 	br	f678 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    f5ec:	e0bff317 	ldw	r2,-52(fp)
    f5f0:	1004917a 	slli	r2,r2,5
    f5f4:	e0fff417 	ldw	r3,-48(fp)
    f5f8:	e13ff217 	ldw	r4,-56(fp)
    f5fc:	200f883a 	mov	r7,r4
    f600:	180d883a 	mov	r6,r3
    f604:	e17fff17 	ldw	r5,-4(fp)
    f608:	1009883a 	mov	r4,r2
    f60c:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    f610:	e0bfff17 	ldw	r2,-4(fp)
    f614:	10800003 	ldbu	r2,0(r2)
    f618:	10803fcc 	andi	r2,r2,255
    f61c:	10803960 	cmpeqi	r2,r2,229
    f620:	1000121e 	bne	r2,zero,f66c <get_home_directory_cluster_for_file+0x3cc>
    f624:	e0bfff17 	ldw	r2,-4(fp)
    f628:	10800003 	ldbu	r2,0(r2)
    f62c:	10803fcc 	andi	r2,r2,255
    f630:	10000e26 	beq	r2,zero,f66c <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
    f634:	e0fffb04 	addi	r3,fp,-20
    f638:	e0bff904 	addi	r2,fp,-28
    f63c:	180d883a 	mov	r6,r3
    f640:	100b883a 	mov	r5,r2
    f644:	e13fff17 	ldw	r4,-4(fp)
    f648:	000f0040 	call	f004 <match_file_record_to_name_ext>
    f64c:	e0bff615 	stw	r2,-40(fp)
                                if (match)
    f650:	e0bff617 	ldw	r2,-40(fp)
    f654:	10000526 	beq	r2,zero,f66c <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
    f658:	e0bfff17 	ldw	r2,-4(fp)
    f65c:	1080058b 	ldhu	r2,22(r2)
    f660:	10bfffcc 	andi	r2,r2,65535
    f664:	e0bfef15 	stw	r2,-68(fp)
                                    break;
    f668:	00000606 	br	f684 <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
    f66c:	e0bff317 	ldw	r2,-52(fp)
    f670:	10800044 	addi	r2,r2,1
    f674:	e0bff315 	stw	r2,-52(fp)
    f678:	e0bff317 	ldw	r2,-52(fp)
    f67c:	10800410 	cmplti	r2,r2,16
    f680:	103fda1e 	bne	r2,zero,f5ec <__alt_data_end+0xf800f5ec>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
    f684:	e0ffef17 	ldw	r3,-68(fp)
    f688:	e0bfea17 	ldw	r2,-88(fp)
    f68c:	18800c1e 	bne	r3,r2,f6c0 <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    f690:	e0bff217 	ldw	r2,-56(fp)
    f694:	10800044 	addi	r2,r2,1
    f698:	e0bff215 	stw	r2,-56(fp)
    f69c:	00800074 	movhi	r2,1
    f6a0:	109ea804 	addi	r2,r2,31392
    f6a4:	10800383 	ldbu	r2,14(r2)
    f6a8:	10803fcc 	andi	r2,r2,255
    f6ac:	e0fff217 	ldw	r3,-56(fp)
    f6b0:	18bfc416 	blt	r3,r2,f5c4 <__alt_data_end+0xf800f5c4>
    f6b4:	00000306 	br	f6c4 <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
    f6b8:	0001883a 	nop
    f6bc:	00000106 	br	f6c4 <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
    f6c0:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
    f6c4:	e0ffef17 	ldw	r3,-68(fp)
    f6c8:	e0bfea17 	ldw	r2,-88(fp)
    f6cc:	1880141e 	bne	r3,r2,f720 <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
    f6d0:	e0bfef17 	ldw	r2,-68(fp)
    f6d4:	e0fffc04 	addi	r3,fp,-16
    f6d8:	180b883a 	mov	r5,r3
    f6dc:	1009883a 	mov	r4,r2
    f6e0:	000dc700 	call	dc70 <get_cluster_flag>
    f6e4:	10000c26 	beq	r2,zero,f718 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
    f6e8:	e0bffc0b 	ldhu	r2,-16(fp)
    f6ec:	10bfffcc 	andi	r2,r2,65535
    f6f0:	10fffe0c 	andi	r3,r2,65528
    f6f4:	00bffe14 	movui	r2,65528
    f6f8:	1880021e 	bne	r3,r2,f704 <get_home_directory_cluster_for_file+0x464>
						{
							return false;
    f6fc:	0005883a 	mov	r2,zero
    f700:	00003006 	br	f7c4 <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
    f704:	e0bffc0b 	ldhu	r2,-16(fp)
    f708:	10bfffcc 	andi	r2,r2,65535
    f70c:	10bffe0c 	andi	r2,r2,65528
    f710:	e0bfef15 	stw	r2,-68(fp)
    f714:	00000206 	br	f720 <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
    f718:	0005883a 	mov	r2,zero
    f71c:	00002906 	br	f7c4 <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
    f720:	e0bff417 	ldw	r2,-48(fp)
    f724:	00fffdd4 	movui	r3,65527
    f728:	18800316 	blt	r3,r2,f738 <get_home_directory_cluster_for_file+0x498>
    f72c:	e0ffef17 	ldw	r3,-68(fp)
    f730:	e0bfea17 	ldw	r2,-88(fp)
    f734:	18bf9426 	beq	r3,r2,f588 <__alt_data_end+0xf800f588>
            if (new_cluster != home_dir_cluster)
    f738:	e0ffef17 	ldw	r3,-68(fp)
    f73c:	e0bfea17 	ldw	r2,-88(fp)
    f740:	18800826 	beq	r3,r2,f764 <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
    f744:	e0bfef17 	ldw	r2,-68(fp)
    f748:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
    f74c:	e0ffed17 	ldw	r3,-76(fp)
    f750:	e0bfeb17 	ldw	r2,-84(fp)
    f754:	1885883a 	add	r2,r3,r2
    f758:	10800044 	addi	r2,r2,1
    f75c:	e0bfed15 	stw	r2,-76(fp)
    f760:	00000206 	br	f76c <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
    f764:	0005883a 	mov	r2,zero
    f768:	00001606 	br	f7c4 <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
    f76c:	e0bfed17 	ldw	r2,-76(fp)
    f770:	e0fffd17 	ldw	r3,-12(fp)
    f774:	1885883a 	add	r2,r3,r2
    f778:	1009883a 	mov	r4,r2
    f77c:	000ef4c0 	call	ef4c <get_dir_divider_location>
    f780:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
    f784:	e0bfeb17 	ldw	r2,-84(fp)
    f788:	1000020e 	bge	r2,zero,f794 <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
    f78c:	00800044 	movi	r2,1
    f790:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
    f794:	e0bfeb17 	ldw	r2,-84(fp)
    f798:	00becf16 	blt	zero,r2,f2d8 <__alt_data_end+0xf800f2d8>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
    f79c:	e0bffe17 	ldw	r2,-8(fp)
    f7a0:	e0ffea17 	ldw	r3,-88(fp)
    f7a4:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
    f7a8:	e0bfea17 	ldw	r2,-88(fp)
    f7ac:	1000041e 	bne	r2,zero,f7c0 <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
    f7b0:	e0bfff17 	ldw	r2,-4(fp)
    f7b4:	10000a15 	stw	zero,40(r2)
		result = true;
    f7b8:	00800044 	movi	r2,1
    f7bc:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
    f7c0:	e0bfe917 	ldw	r2,-92(fp)
}
    f7c4:	e037883a 	mov	sp,fp
    f7c8:	dfc00117 	ldw	ra,4(sp)
    f7cc:	df000017 	ldw	fp,0(sp)
    f7d0:	dec00204 	addi	sp,sp,8
    f7d4:	f800283a 	ret

0000f7d8 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
    f7d8:	deffe804 	addi	sp,sp,-96
    f7dc:	dfc01715 	stw	ra,92(sp)
    f7e0:	df001615 	stw	fp,88(sp)
    f7e4:	df001604 	addi	fp,sp,88
    f7e8:	e13ffd15 	stw	r4,-12(fp)
    f7ec:	e17ffe15 	stw	r5,-8(fp)
    f7f0:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
    f7f4:	e13ffe17 	ldw	r4,-8(fp)
    f7f8:	000ef4c0 	call	ef4c <get_dir_divider_location>
    f7fc:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
    f800:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
    f804:	00800804 	movi	r2,32
    f808:	e0bff905 	stb	r2,-28(fp)
    f80c:	00800804 	movi	r2,32
    f810:	e0bff945 	stb	r2,-27(fp)
    f814:	00800804 	movi	r2,32
    f818:	e0bff985 	stb	r2,-26(fp)
    f81c:	00800804 	movi	r2,32
    f820:	e0bff9c5 	stb	r2,-25(fp)
    f824:	00800804 	movi	r2,32
    f828:	e0bffa05 	stb	r2,-24(fp)
    f82c:	00800804 	movi	r2,32
    f830:	e0bffa45 	stb	r2,-23(fp)
    f834:	00800804 	movi	r2,32
    f838:	e0bffa85 	stb	r2,-22(fp)
    f83c:	00800804 	movi	r2,32
    f840:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
    f844:	00800804 	movi	r2,32
    f848:	e0bffb05 	stb	r2,-20(fp)
    f84c:	00800804 	movi	r2,32
    f850:	e0bffb45 	stb	r2,-19(fp)
    f854:	00800804 	movi	r2,32
    f858:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
    f85c:	00bfffc4 	movi	r2,-1
    f860:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
    f864:	e0bffd17 	ldw	r2,-12(fp)
    f868:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
    f86c:	e13ffe17 	ldw	r4,-8(fp)
    f870:	00010cc0 	call	10cc <strlen>
    f874:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
    f878:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
    f87c:	00000b06 	br	f8ac <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
    f880:	e0ffeb17 	ldw	r3,-84(fp)
    f884:	e0bfea17 	ldw	r2,-88(fp)
    f888:	1885883a 	add	r2,r3,r2
    f88c:	10800044 	addi	r2,r2,1
    f890:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    f894:	e0bfeb17 	ldw	r2,-84(fp)
    f898:	e0fffe17 	ldw	r3,-8(fp)
    f89c:	1885883a 	add	r2,r3,r2
    f8a0:	1009883a 	mov	r4,r2
    f8a4:	000ef4c0 	call	ef4c <get_dir_divider_location>
    f8a8:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
    f8ac:	e0bfea17 	ldw	r2,-88(fp)
    f8b0:	00bff316 	blt	zero,r2,f880 <__alt_data_end+0xf800f880>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    f8b4:	e0bfeb17 	ldw	r2,-84(fp)
    f8b8:	e0bfee15 	stw	r2,-72(fp)
    f8bc:	00002706 	br	f95c <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
    f8c0:	e0bfee17 	ldw	r2,-72(fp)
    f8c4:	e0fffe17 	ldw	r3,-8(fp)
    f8c8:	1885883a 	add	r2,r3,r2
    f8cc:	10800003 	ldbu	r2,0(r2)
    f8d0:	10803fcc 	andi	r2,r2,255
    f8d4:	1080201c 	xori	r2,r2,128
    f8d8:	10bfe004 	addi	r2,r2,-128
    f8dc:	10800b98 	cmpnei	r2,r2,46
    f8e0:	1000031e 	bne	r2,zero,f8f0 <find_file_in_directory+0x118>
        {
            ext_index = index;
    f8e4:	e0bfee17 	ldw	r2,-72(fp)
    f8e8:	e0bfec15 	stw	r2,-80(fp)
    f8ec:	00001806 	br	f950 <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
    f8f0:	e0bfec17 	ldw	r2,-80(fp)
    f8f4:	10000b0e 	bge	r2,zero,f924 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
    f8f8:	e0ffee17 	ldw	r3,-72(fp)
    f8fc:	e0bfeb17 	ldw	r2,-84(fp)
    f900:	1885c83a 	sub	r2,r3,r2
    f904:	e0ffee17 	ldw	r3,-72(fp)
    f908:	e13ffe17 	ldw	r4,-8(fp)
    f90c:	20c7883a 	add	r3,r4,r3
    f910:	18c00003 	ldbu	r3,0(r3)
    f914:	e13ff904 	addi	r4,fp,-28
    f918:	2085883a 	add	r2,r4,r2
    f91c:	10c00005 	stb	r3,0(r2)
    f920:	00000b06 	br	f950 <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
    f924:	e0ffee17 	ldw	r3,-72(fp)
    f928:	e0bfec17 	ldw	r2,-80(fp)
    f92c:	1885c83a 	sub	r2,r3,r2
    f930:	10bfffc4 	addi	r2,r2,-1
    f934:	e0ffee17 	ldw	r3,-72(fp)
    f938:	e13ffe17 	ldw	r4,-8(fp)
    f93c:	20c7883a 	add	r3,r4,r3
    f940:	18c00003 	ldbu	r3,0(r3)
    f944:	e13ffb04 	addi	r4,fp,-20
    f948:	2085883a 	add	r2,r4,r2
    f94c:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
    f950:	e0bfee17 	ldw	r2,-72(fp)
    f954:	10800044 	addi	r2,r2,1
    f958:	e0bfee15 	stw	r2,-72(fp)
    f95c:	e0ffee17 	ldw	r3,-72(fp)
    f960:	e0bff417 	ldw	r2,-48(fp)
    f964:	18bfd616 	blt	r3,r2,f8c0 <__alt_data_end+0xf800f8c0>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
    f968:	e0bffd17 	ldw	r2,-12(fp)
    f96c:	1000461e 	bne	r2,zero,fa88 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    f970:	00800074 	movhi	r2,1
    f974:	109ea804 	addi	r2,r2,31392
    f978:	1080050b 	ldhu	r2,20(r2)
    f97c:	10bfffcc 	andi	r2,r2,65535
    f980:	1006917a 	slli	r3,r2,5
    f984:	00800074 	movhi	r2,1
    f988:	109ea804 	addi	r2,r2,31392
    f98c:	1080030b 	ldhu	r2,12(r2)
    f990:	10bfffcc 	andi	r2,r2,65535
    f994:	1885283a 	div	r2,r3,r2
    f998:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    f99c:	e03ff015 	stw	zero,-64(fp)
    f9a0:	00003506 	br	fa78 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
    f9a4:	00800074 	movhi	r2,1
    f9a8:	109ea804 	addi	r2,r2,31392
    f9ac:	10c01317 	ldw	r3,76(r2)
    f9b0:	e0bff017 	ldw	r2,-64(fp)
    f9b4:	1885883a 	add	r2,r3,r2
    f9b8:	1007883a 	mov	r3,r2
    f9bc:	d0a70b17 	ldw	r2,-25556(gp)
    f9c0:	100b883a 	mov	r5,r2
    f9c4:	1809883a 	mov	r4,r3
    f9c8:	000db980 	call	db98 <Read_Sector_Data>
    f9cc:	10009626 	beq	r2,zero,fc28 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    f9d0:	e03ff115 	stw	zero,-60(fp)
    f9d4:	00002006 	br	fa58 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
    f9d8:	e0bff117 	ldw	r2,-60(fp)
    f9dc:	1004917a 	slli	r2,r2,5
    f9e0:	e0fff017 	ldw	r3,-64(fp)
    f9e4:	180f883a 	mov	r7,r3
    f9e8:	000d883a 	mov	r6,zero
    f9ec:	e17fff17 	ldw	r5,-4(fp)
    f9f0:	1009883a 	mov	r4,r2
    f9f4:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    f9f8:	e0bfff17 	ldw	r2,-4(fp)
    f9fc:	10800003 	ldbu	r2,0(r2)
    fa00:	10803fcc 	andi	r2,r2,255
    fa04:	10803960 	cmpeqi	r2,r2,229
    fa08:	1000101e 	bne	r2,zero,fa4c <find_file_in_directory+0x274>
    fa0c:	e0bfff17 	ldw	r2,-4(fp)
    fa10:	10800003 	ldbu	r2,0(r2)
    fa14:	10803fcc 	andi	r2,r2,255
    fa18:	10000c26 	beq	r2,zero,fa4c <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
    fa1c:	e0fffb04 	addi	r3,fp,-20
    fa20:	e0bff904 	addi	r2,fp,-28
    fa24:	180d883a 	mov	r6,r3
    fa28:	100b883a 	mov	r5,r2
    fa2c:	e13fff17 	ldw	r4,-4(fp)
    fa30:	000f0040 	call	f004 <match_file_record_to_name_ext>
    fa34:	e0bff815 	stw	r2,-32(fp)

                        if (match)
    fa38:	e0bff817 	ldw	r2,-32(fp)
    fa3c:	10000326 	beq	r2,zero,fa4c <find_file_in_directory+0x274>
                        {
                            result = true;
    fa40:	00800044 	movi	r2,1
    fa44:	e0bfef15 	stw	r2,-68(fp)
                            break;
    fa48:	00000606 	br	fa64 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    fa4c:	e0bff117 	ldw	r2,-60(fp)
    fa50:	10800044 	addi	r2,r2,1
    fa54:	e0bff115 	stw	r2,-60(fp)
    fa58:	e0bff117 	ldw	r2,-60(fp)
    fa5c:	10800410 	cmplti	r2,r2,16
    fa60:	103fdd1e 	bne	r2,zero,f9d8 <__alt_data_end+0xf800f9d8>
            }
            else
            {
                break;
            }
            if (result)
    fa64:	e0bfef17 	ldw	r2,-68(fp)
    fa68:	1000711e 	bne	r2,zero,fc30 <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
    fa6c:	e0bff017 	ldw	r2,-64(fp)
    fa70:	10800044 	addi	r2,r2,1
    fa74:	e0bff015 	stw	r2,-64(fp)
    fa78:	e0fff017 	ldw	r3,-64(fp)
    fa7c:	e0bff717 	ldw	r2,-36(fp)
    fa80:	18bfc816 	blt	r3,r2,f9a4 <__alt_data_end+0xf800f9a4>
    fa84:	00006b06 	br	fc34 <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    fa88:	e0bfed17 	ldw	r2,-76(fp)
    fa8c:	10ffff84 	addi	r3,r2,-2
    fa90:	00800074 	movhi	r2,1
    fa94:	109ea804 	addi	r2,r2,31392
    fa98:	10800383 	ldbu	r2,14(r2)
    fa9c:	10803fcc 	andi	r2,r2,255
    faa0:	1885383a 	mul	r2,r3,r2
    faa4:	1007883a 	mov	r3,r2
    faa8:	00800074 	movhi	r2,1
    faac:	109ea804 	addi	r2,r2,31392
    fab0:	10801417 	ldw	r2,80(r2)
    fab4:	1885883a 	add	r2,r3,r2
    fab8:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fabc:	e03ff215 	stw	zero,-56(fp)
    fac0:	00003306 	br	fb90 <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    fac4:	e0fff217 	ldw	r3,-56(fp)
    fac8:	e0bff517 	ldw	r2,-44(fp)
    facc:	1885883a 	add	r2,r3,r2
    fad0:	d0e70b17 	ldw	r3,-25556(gp)
    fad4:	180b883a 	mov	r5,r3
    fad8:	1009883a 	mov	r4,r2
    fadc:	000db980 	call	db98 <Read_Sector_Data>
    fae0:	10003226 	beq	r2,zero,fbac <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    fae4:	e03ff315 	stw	zero,-52(fp)
    fae8:	00002106 	br	fb70 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
    faec:	e0bff317 	ldw	r2,-52(fp)
    faf0:	1004917a 	slli	r2,r2,5
    faf4:	e0ffed17 	ldw	r3,-76(fp)
    faf8:	e13ff217 	ldw	r4,-56(fp)
    fafc:	200f883a 	mov	r7,r4
    fb00:	180d883a 	mov	r6,r3
    fb04:	e17fff17 	ldw	r5,-4(fp)
    fb08:	1009883a 	mov	r4,r2
    fb0c:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
    fb10:	e0bfff17 	ldw	r2,-4(fp)
    fb14:	10800003 	ldbu	r2,0(r2)
    fb18:	10803fcc 	andi	r2,r2,255
    fb1c:	10803960 	cmpeqi	r2,r2,229
    fb20:	1000101e 	bne	r2,zero,fb64 <find_file_in_directory+0x38c>
    fb24:	e0bfff17 	ldw	r2,-4(fp)
    fb28:	10800003 	ldbu	r2,0(r2)
    fb2c:	10803fcc 	andi	r2,r2,255
    fb30:	10000c26 	beq	r2,zero,fb64 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
    fb34:	e0fffb04 	addi	r3,fp,-20
    fb38:	e0bff904 	addi	r2,fp,-28
    fb3c:	180d883a 	mov	r6,r3
    fb40:	100b883a 	mov	r5,r2
    fb44:	e13fff17 	ldw	r4,-4(fp)
    fb48:	000f0040 	call	f004 <match_file_record_to_name_ext>
    fb4c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
    fb50:	e0bff617 	ldw	r2,-40(fp)
    fb54:	10000326 	beq	r2,zero,fb64 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
    fb58:	00800044 	movi	r2,1
    fb5c:	e0bfef15 	stw	r2,-68(fp)
                                break;
    fb60:	00000606 	br	fb7c <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
    fb64:	e0bff317 	ldw	r2,-52(fp)
    fb68:	10800044 	addi	r2,r2,1
    fb6c:	e0bff315 	stw	r2,-52(fp)
    fb70:	e0bff317 	ldw	r2,-52(fp)
    fb74:	10800410 	cmplti	r2,r2,16
    fb78:	103fdc1e 	bne	r2,zero,faec <__alt_data_end+0xf800faec>
                }
                else
                {
                    break;
                }
                if (result)
    fb7c:	e0bfef17 	ldw	r2,-68(fp)
    fb80:	10000c1e 	bne	r2,zero,fbb4 <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fb84:	e0bff217 	ldw	r2,-56(fp)
    fb88:	10800044 	addi	r2,r2,1
    fb8c:	e0bff215 	stw	r2,-56(fp)
    fb90:	00800074 	movhi	r2,1
    fb94:	109ea804 	addi	r2,r2,31392
    fb98:	10800383 	ldbu	r2,14(r2)
    fb9c:	10803fcc 	andi	r2,r2,255
    fba0:	e0fff217 	ldw	r3,-56(fp)
    fba4:	18bfc716 	blt	r3,r2,fac4 <__alt_data_end+0xf800fac4>
    fba8:	00000306 	br	fbb8 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
    fbac:	0001883a 	nop
    fbb0:	00000106 	br	fbb8 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
    fbb4:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
    fbb8:	e0bfef17 	ldw	r2,-68(fp)
    fbbc:	1000141e 	bne	r2,zero,fc10 <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
    fbc0:	e0bfed17 	ldw	r2,-76(fp)
    fbc4:	e0fffc04 	addi	r3,fp,-16
    fbc8:	180b883a 	mov	r5,r3
    fbcc:	1009883a 	mov	r4,r2
    fbd0:	000dc700 	call	dc70 <get_cluster_flag>
    fbd4:	10000c26 	beq	r2,zero,fc08 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    fbd8:	e0bffc0b 	ldhu	r2,-16(fp)
    fbdc:	10bfffcc 	andi	r2,r2,65535
    fbe0:	10fffe0c 	andi	r3,r2,65528
    fbe4:	00bffe14 	movui	r2,65528
    fbe8:	1880021e 	bne	r3,r2,fbf4 <find_file_in_directory+0x41c>
					{
						return false;
    fbec:	0005883a 	mov	r2,zero
    fbf0:	00001106 	br	fc38 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
    fbf4:	e0bffc0b 	ldhu	r2,-16(fp)
    fbf8:	10bfffcc 	andi	r2,r2,65535
    fbfc:	10bffe0c 	andi	r2,r2,65528
    fc00:	e0bfed15 	stw	r2,-76(fp)
    fc04:	00000206 	br	fc10 <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
    fc08:	0005883a 	mov	r2,zero
    fc0c:	00000a06 	br	fc38 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    fc10:	e0bfed17 	ldw	r2,-76(fp)
    fc14:	00fffdd4 	movui	r3,65527
    fc18:	18800616 	blt	r3,r2,fc34 <find_file_in_directory+0x45c>
    fc1c:	e0bfef17 	ldw	r2,-68(fp)
    fc20:	103f9926 	beq	r2,zero,fa88 <__alt_data_end+0xf800fa88>
    fc24:	00000306 	br	fc34 <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
    fc28:	0001883a 	nop
    fc2c:	00000106 	br	fc34 <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
    fc30:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
    fc34:	e0bfef17 	ldw	r2,-68(fp)
}
    fc38:	e037883a 	mov	sp,fp
    fc3c:	dfc00117 	ldw	ra,4(sp)
    fc40:	df000017 	ldw	fp,0(sp)
    fc44:	dec00204 	addi	sp,sp,8
    fc48:	f800283a 	ret

0000fc4c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
    fc4c:	defff504 	addi	sp,sp,-44
    fc50:	dfc00a15 	stw	ra,40(sp)
    fc54:	df000915 	stw	fp,36(sp)
    fc58:	df000904 	addi	fp,sp,36
    fc5c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
    fc60:	00800074 	movhi	r2,1
    fc64:	109ea804 	addi	r2,r2,31392
    fc68:	10801117 	ldw	r2,68(r2)
    fc6c:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
    fc70:	00800084 	movi	r2,2
    fc74:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
    fc78:	00bfffc4 	movi	r2,-1
    fc7c:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
    fc80:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
    fc84:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
    fc88:	00800074 	movhi	r2,1
    fc8c:	109ea804 	addi	r2,r2,31392
    fc90:	10801417 	ldw	r2,80(r2)
    fc94:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
    fc98:	00800074 	movhi	r2,1
    fc9c:	109ea804 	addi	r2,r2,31392
    fca0:	1080058b 	ldhu	r2,22(r2)
    fca4:	10bfffcc 	andi	r2,r2,65535
    fca8:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
    fcac:	00800074 	movhi	r2,1
    fcb0:	109ea804 	addi	r2,r2,31392
    fcb4:	10800917 	ldw	r2,36(r2)
    fcb8:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
    fcbc:	e0bffd17 	ldw	r2,-12(fp)
    fcc0:	e0fffe17 	ldw	r3,-8(fp)
    fcc4:	18800b2e 	bgeu	r3,r2,fcf4 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
    fcc8:	e0fffd17 	ldw	r3,-12(fp)
    fccc:	e0bffc17 	ldw	r2,-16(fp)
    fcd0:	1887c83a 	sub	r3,r3,r2
    fcd4:	00800074 	movhi	r2,1
    fcd8:	109ea804 	addi	r2,r2,31392
    fcdc:	10800383 	ldbu	r2,14(r2)
    fce0:	10803fcc 	andi	r2,r2,255
    fce4:	1885203a 	divu	r2,r3,r2
    fce8:	10800044 	addi	r2,r2,1
    fcec:	e0bffb15 	stw	r2,-20(fp)
    fcf0:	00002a06 	br	fd9c <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
    fcf4:	e0fffe17 	ldw	r3,-8(fp)
    fcf8:	e0bffc17 	ldw	r2,-16(fp)
    fcfc:	1887c83a 	sub	r3,r3,r2
    fd00:	00800074 	movhi	r2,1
    fd04:	109ea804 	addi	r2,r2,31392
    fd08:	10800383 	ldbu	r2,14(r2)
    fd0c:	10803fcc 	andi	r2,r2,255
    fd10:	1885203a 	divu	r2,r3,r2
    fd14:	10800044 	addi	r2,r2,1
    fd18:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
    fd1c:	00001f06 	br	fd9c <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
    fd20:	e0bff717 	ldw	r2,-36(fp)
    fd24:	d0e70b17 	ldw	r3,-25556(gp)
    fd28:	180b883a 	mov	r5,r3
    fd2c:	1009883a 	mov	r4,r2
    fd30:	000db980 	call	db98 <Read_Sector_Data>
    fd34:	10001426 	beq	r2,zero,fd88 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
    fd38:	e0bff817 	ldw	r2,-32(fp)
    fd3c:	10803fcc 	andi	r2,r2,255
    fd40:	1085883a 	add	r2,r2,r2
    fd44:	1007883a 	mov	r3,r2
    fd48:	d0a70d17 	ldw	r2,-25548(gp)
    fd4c:	10800a17 	ldw	r2,40(r2)
    fd50:	1885883a 	add	r2,r3,r2
    fd54:	1080002b 	ldhuio	r2,0(r2)
    fd58:	10bfffcc 	andi	r2,r2,65535
    fd5c:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
    fd60:	e0bff90f 	ldh	r2,-28(fp)
    fd64:	10000726 	beq	r2,zero,fd84 <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
    fd68:	e0bff817 	ldw	r2,-32(fp)
    fd6c:	10800044 	addi	r2,r2,1
    fd70:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
    fd74:	e0bff817 	ldw	r2,-32(fp)
    fd78:	10803fcc 	andi	r2,r2,255
    fd7c:	103fee1e 	bne	r2,zero,fd38 <__alt_data_end+0xf800fd38>
    fd80:	00000106 	br	fd88 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
    fd84:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
    fd88:	e0bff90f 	ldh	r2,-28(fp)
    fd8c:	10000926 	beq	r2,zero,fdb4 <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
    fd90:	e0bff717 	ldw	r2,-36(fp)
    fd94:	10800044 	addi	r2,r2,1
    fd98:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
    fd9c:	00800074 	movhi	r2,1
    fda0:	109ea804 	addi	r2,r2,31392
    fda4:	10c01217 	ldw	r3,72(r2)
    fda8:	e0bff717 	ldw	r2,-36(fp)
    fdac:	18bfdc1e 	bne	r3,r2,fd20 <__alt_data_end+0xf800fd20>
    fdb0:	00000106 	br	fdb8 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
    fdb4:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
    fdb8:	e0bff90f 	ldh	r2,-28(fp)
    fdbc:	1000081e 	bne	r2,zero,fde0 <find_first_empty_cluster+0x194>
    fdc0:	e0bff90f 	ldh	r2,-28(fp)
    fdc4:	e0fffb17 	ldw	r3,-20(fp)
    fdc8:	18800536 	bltu	r3,r2,fde0 <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
    fdcc:	e0bfff17 	ldw	r2,-4(fp)
    fdd0:	e0fff817 	ldw	r3,-32(fp)
    fdd4:	10c00015 	stw	r3,0(r2)
		result = true;
    fdd8:	00800044 	movi	r2,1
    fddc:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
    fde0:	e0bffa17 	ldw	r2,-24(fp)
}
    fde4:	e037883a 	mov	sp,fp
    fde8:	dfc00117 	ldw	ra,4(sp)
    fdec:	df000017 	ldw	fp,0(sp)
    fdf0:	dec00204 	addi	sp,sp,8
    fdf4:	f800283a 	ret

0000fdf8 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
    fdf8:	defff604 	addi	sp,sp,-40
    fdfc:	dfc00915 	stw	ra,36(sp)
    fe00:	df000815 	stw	fp,32(sp)
    fe04:	df000804 	addi	fp,sp,32
    fe08:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
    fe0c:	00bfffc4 	movi	r2,-1
    fe10:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
    fe14:	e0bfff17 	ldw	r2,-4(fp)
    fe18:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
    fe1c:	e0bff917 	ldw	r2,-28(fp)
    fe20:	10ffff84 	addi	r3,r2,-2
    fe24:	00800074 	movhi	r2,1
    fe28:	109ea804 	addi	r2,r2,31392
    fe2c:	10800383 	ldbu	r2,14(r2)
    fe30:	10803fcc 	andi	r2,r2,255
    fe34:	1885383a 	mul	r2,r3,r2
    fe38:	1007883a 	mov	r3,r2
    fe3c:	00800074 	movhi	r2,1
    fe40:	109ea804 	addi	r2,r2,31392
    fe44:	10801417 	ldw	r2,80(r2)
    fe48:	1885883a 	add	r2,r3,r2
    fe4c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fe50:	e03ffa15 	stw	zero,-24(fp)
    fe54:	00002c06 	br	ff08 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
    fe58:	e0fffa17 	ldw	r3,-24(fp)
    fe5c:	e0bffc17 	ldw	r2,-16(fp)
    fe60:	1885883a 	add	r2,r3,r2
    fe64:	d0e70b17 	ldw	r3,-25556(gp)
    fe68:	180b883a 	mov	r5,r3
    fe6c:	1009883a 	mov	r4,r2
    fe70:	000db980 	call	db98 <Read_Sector_Data>
    fe74:	10002b26 	beq	r2,zero,ff24 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    fe78:	e03ffb15 	stw	zero,-20(fp)
    fe7c:	00001c06 	br	fef0 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
    fe80:	e0bffb17 	ldw	r2,-20(fp)
    fe84:	1004917a 	slli	r2,r2,5
    fe88:	1007883a 	mov	r3,r2
    fe8c:	d0a70d17 	ldw	r2,-25548(gp)
    fe90:	10800a17 	ldw	r2,40(r2)
    fe94:	1885883a 	add	r2,r3,r2
    fe98:	10800023 	ldbuio	r2,0(r2)
    fe9c:	10803fcc 	andi	r2,r2,255
    fea0:	10803fcc 	andi	r2,r2,255
    fea4:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
    fea8:	e0bffd0b 	ldhu	r2,-12(fp)
    feac:	10803960 	cmpeqi	r2,r2,229
    feb0:	1000021e 	bne	r2,zero,febc <find_first_empty_record_in_a_subdirectory+0xc4>
    feb4:	e0bffd0b 	ldhu	r2,-12(fp)
    feb8:	10000a1e 	bne	r2,zero,fee4 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
    febc:	e0bffa17 	ldw	r2,-24(fp)
    fec0:	1006913a 	slli	r3,r2,4
    fec4:	e0bffb17 	ldw	r2,-20(fp)
    fec8:	1885883a 	add	r2,r3,r2
    fecc:	1006943a 	slli	r3,r2,16
    fed0:	e0bff917 	ldw	r2,-28(fp)
    fed4:	1884b03a 	or	r2,r3,r2
    fed8:	e0bff815 	stw	r2,-32(fp)
                        return result;
    fedc:	e0bff817 	ldw	r2,-32(fp)
    fee0:	00005306 	br	10030 <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
    fee4:	e0bffb17 	ldw	r2,-20(fp)
    fee8:	10800044 	addi	r2,r2,1
    feec:	e0bffb15 	stw	r2,-20(fp)
    fef0:	e0bffb17 	ldw	r2,-20(fp)
    fef4:	10800410 	cmplti	r2,r2,16
    fef8:	103fe11e 	bne	r2,zero,fe80 <__alt_data_end+0xf800fe80>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
    fefc:	e0bffa17 	ldw	r2,-24(fp)
    ff00:	10800044 	addi	r2,r2,1
    ff04:	e0bffa15 	stw	r2,-24(fp)
    ff08:	00800074 	movhi	r2,1
    ff0c:	109ea804 	addi	r2,r2,31392
    ff10:	10800383 	ldbu	r2,14(r2)
    ff14:	10803fcc 	andi	r2,r2,255
    ff18:	e0fffa17 	ldw	r3,-24(fp)
    ff1c:	18bfce16 	blt	r3,r2,fe58 <__alt_data_end+0xf800fe58>
    ff20:	00000106 	br	ff28 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
    ff24:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
    ff28:	e0bff817 	ldw	r2,-32(fp)
    ff2c:	1000390e 	bge	r2,zero,10014 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
    ff30:	e0bff917 	ldw	r2,-28(fp)
    ff34:	e0fffd84 	addi	r3,fp,-10
    ff38:	180b883a 	mov	r5,r3
    ff3c:	1009883a 	mov	r4,r2
    ff40:	000dc700 	call	dc70 <get_cluster_flag>
    ff44:	10003126 	beq	r2,zero,1000c <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
    ff48:	e0bffd8b 	ldhu	r2,-10(fp)
    ff4c:	10bfffcc 	andi	r2,r2,65535
    ff50:	10fffe0c 	andi	r3,r2,65528
    ff54:	00bffe14 	movui	r2,65528
    ff58:	18802e1e 	bne	r3,r2,10014 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
    ff5c:	e0bffe04 	addi	r2,fp,-8
    ff60:	1009883a 	mov	r4,r2
    ff64:	000fc4c0 	call	fc4c <find_first_empty_cluster>
    ff68:	10002326 	beq	r2,zero,fff8 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
    ff6c:	e0bff917 	ldw	r2,-28(fp)
    ff70:	e0fffe17 	ldw	r3,-8(fp)
    ff74:	18ffffcc 	andi	r3,r3,65535
    ff78:	18e0001c 	xori	r3,r3,32768
    ff7c:	18e00004 	addi	r3,r3,-32768
    ff80:	01800044 	movi	r6,1
    ff84:	180b883a 	mov	r5,r3
    ff88:	1009883a 	mov	r4,r2
    ff8c:	000dd240 	call	dd24 <mark_cluster>
    ff90:	10001926 	beq	r2,zero,fff8 <find_first_empty_record_in_a_subdirectory+0x200>
    ff94:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
    ff98:	01800044 	movi	r6,1
    ff9c:	017fffc4 	movi	r5,-1
    ffa0:	1009883a 	mov	r4,r2
    ffa4:	000dd240 	call	dd24 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
    ffa8:	10001326 	beq	r2,zero,fff8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    ffac:	e0bff917 	ldw	r2,-28(fp)
    ffb0:	e0fffe17 	ldw	r3,-8(fp)
    ffb4:	18ffffcc 	andi	r3,r3,65535
    ffb8:	18e0001c 	xori	r3,r3,32768
    ffbc:	18e00004 	addi	r3,r3,-32768
    ffc0:	000d883a 	mov	r6,zero
    ffc4:	180b883a 	mov	r5,r3
    ffc8:	1009883a 	mov	r4,r2
    ffcc:	000dd240 	call	dd24 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
    ffd0:	10000926 	beq	r2,zero,fff8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    ffd4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
    ffd8:	000d883a 	mov	r6,zero
    ffdc:	017fffc4 	movi	r5,-1
    ffe0:	1009883a 	mov	r4,r2
    ffe4:	000dd240 	call	dd24 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
    ffe8:	10000326 	beq	r2,zero,fff8 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
    ffec:	000db4c0 	call	db4c <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
    fff0:	e0bffe17 	ldw	r2,-8(fp)
    fff4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
    fff8:	e0bffd8b 	ldhu	r2,-10(fp)
    fffc:	10bfffcc 	andi	r2,r2,65535
   10000:	10bffe0c 	andi	r2,r2,65528
   10004:	e0bff915 	stw	r2,-28(fp)
   10008:	00000206 	br	10014 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
   1000c:	00bfffc4 	movi	r2,-1
   10010:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
   10014:	e0bff917 	ldw	r2,-28(fp)
   10018:	00fffdd4 	movui	r3,65527
   1001c:	18800316 	blt	r3,r2,1002c <find_first_empty_record_in_a_subdirectory+0x234>
   10020:	e0bff817 	ldw	r2,-32(fp)
   10024:	10bfffe0 	cmpeqi	r2,r2,-1
   10028:	103f7c1e 	bne	r2,zero,fe1c <__alt_data_end+0xf800fe1c>
    return result; 
   1002c:	e0bff817 	ldw	r2,-32(fp)
}
   10030:	e037883a 	mov	sp,fp
   10034:	dfc00117 	ldw	ra,4(sp)
   10038:	df000017 	ldw	fp,0(sp)
   1003c:	dec00204 	addi	sp,sp,8
   10040:	f800283a 	ret

00010044 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
   10044:	defff904 	addi	sp,sp,-28
   10048:	dfc00615 	stw	ra,24(sp)
   1004c:	df000515 	stw	fp,20(sp)
   10050:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   10054:	00800074 	movhi	r2,1
   10058:	109ea804 	addi	r2,r2,31392
   1005c:	1080050b 	ldhu	r2,20(r2)
   10060:	10bfffcc 	andi	r2,r2,65535
   10064:	1006917a 	slli	r3,r2,5
   10068:	00800074 	movhi	r2,1
   1006c:	109ea804 	addi	r2,r2,31392
   10070:	1080030b 	ldhu	r2,12(r2)
   10074:	10bfffcc 	andi	r2,r2,65535
   10078:	1885283a 	div	r2,r3,r2
   1007c:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
   10080:	00bfffc4 	movi	r2,-1
   10084:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10088:	e03ffb15 	stw	zero,-20(fp)
   1008c:	00002d06 	br	10144 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   10090:	00800074 	movhi	r2,1
   10094:	109ea804 	addi	r2,r2,31392
   10098:	10c01317 	ldw	r3,76(r2)
   1009c:	e0bffb17 	ldw	r2,-20(fp)
   100a0:	1885883a 	add	r2,r3,r2
   100a4:	1007883a 	mov	r3,r2
   100a8:	d0a70b17 	ldw	r2,-25556(gp)
   100ac:	100b883a 	mov	r5,r2
   100b0:	1809883a 	mov	r4,r3
   100b4:	000db980 	call	db98 <Read_Sector_Data>
   100b8:	10002626 	beq	r2,zero,10154 <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   100bc:	e03ffc15 	stw	zero,-16(fp)
   100c0:	00001a06 	br	1012c <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
   100c4:	e0bffc17 	ldw	r2,-16(fp)
   100c8:	1004917a 	slli	r2,r2,5
   100cc:	1007883a 	mov	r3,r2
   100d0:	d0a70d17 	ldw	r2,-25548(gp)
   100d4:	10800a17 	ldw	r2,40(r2)
   100d8:	1885883a 	add	r2,r3,r2
   100dc:	10800023 	ldbuio	r2,0(r2)
   100e0:	10803fcc 	andi	r2,r2,255
   100e4:	10803fcc 	andi	r2,r2,255
   100e8:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
   100ec:	e0bfff0b 	ldhu	r2,-4(fp)
   100f0:	10803960 	cmpeqi	r2,r2,229
   100f4:	1000021e 	bne	r2,zero,10100 <find_first_empty_record_in_root_directory+0xbc>
   100f8:	e0bfff0b 	ldhu	r2,-4(fp)
   100fc:	1000081e 	bne	r2,zero,10120 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
   10100:	e0bffb17 	ldw	r2,-20(fp)
   10104:	1006913a 	slli	r3,r2,4
   10108:	e0bffc17 	ldw	r2,-16(fp)
   1010c:	1885883a 	add	r2,r3,r2
   10110:	1004943a 	slli	r2,r2,16
   10114:	e0bffe15 	stw	r2,-8(fp)
                    return result;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   1011c:	00000f06 	br	1015c <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
   10120:	e0bffc17 	ldw	r2,-16(fp)
   10124:	10800044 	addi	r2,r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
   1012c:	e0bffc17 	ldw	r2,-16(fp)
   10130:	10800410 	cmplti	r2,r2,16
   10134:	103fe31e 	bne	r2,zero,100c4 <__alt_data_end+0xf80100c4>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
   10138:	e0bffb17 	ldw	r2,-20(fp)
   1013c:	10800044 	addi	r2,r2,1
   10140:	e0bffb15 	stw	r2,-20(fp)
   10144:	e0fffb17 	ldw	r3,-20(fp)
   10148:	e0bffd17 	ldw	r2,-12(fp)
   1014c:	18bfd016 	blt	r3,r2,10090 <__alt_data_end+0xf8010090>
   10150:	00000106 	br	10158 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
   10154:	0001883a 	nop
        }
    }
    return result;
   10158:	e0bffe17 	ldw	r2,-8(fp)
}
   1015c:	e037883a 	mov	sp,fp
   10160:	dfc00117 	ldw	ra,4(sp)
   10164:	df000017 	ldw	fp,0(sp)
   10168:	dec00204 	addi	sp,sp,8
   1016c:	f800283a 	ret

00010170 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
   10170:	defffa04 	addi	sp,sp,-24
   10174:	df000515 	stw	fp,20(sp)
   10178:	df000504 	addi	fp,sp,20
   1017c:	e13ffd15 	stw	r4,-12(fp)
   10180:	e17ffe15 	stw	r5,-8(fp)
   10184:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
   10188:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
   1018c:	e03ffb15 	stw	zero,-20(fp)
   10190:	00002506 	br	10228 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
   10194:	e0bffc17 	ldw	r2,-16(fp)
   10198:	e0fffd17 	ldw	r3,-12(fp)
   1019c:	1885883a 	add	r2,r3,r2
   101a0:	10800003 	ldbu	r2,0(r2)
   101a4:	10803fcc 	andi	r2,r2,255
   101a8:	1080201c 	xori	r2,r2,128
   101ac:	10bfe004 	addi	r2,r2,-128
   101b0:	10800ba0 	cmpeqi	r2,r2,46
   101b4:	1000141e 	bne	r2,zero,10208 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
   101b8:	e0bffb17 	ldw	r2,-20(fp)
   101bc:	e0fffe17 	ldw	r3,-8(fp)
   101c0:	1885883a 	add	r2,r3,r2
   101c4:	e0fffc17 	ldw	r3,-16(fp)
   101c8:	e13ffd17 	ldw	r4,-12(fp)
   101cc:	20c7883a 	add	r3,r4,r3
   101d0:	18c00003 	ldbu	r3,0(r3)
   101d4:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
   101d8:	e0bffc17 	ldw	r2,-16(fp)
   101dc:	e0fffd17 	ldw	r3,-12(fp)
   101e0:	1885883a 	add	r2,r3,r2
   101e4:	10800003 	ldbu	r2,0(r2)
   101e8:	10803fcc 	andi	r2,r2,255
   101ec:	1080201c 	xori	r2,r2,128
   101f0:	10bfe004 	addi	r2,r2,-128
   101f4:	10000926 	beq	r2,zero,1021c <convert_filename_to_name_extension+0xac>
   101f8:	e0bffc17 	ldw	r2,-16(fp)
   101fc:	10800044 	addi	r2,r2,1
   10200:	e0bffc15 	stw	r2,-16(fp)
   10204:	00000506 	br	1021c <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
   10208:	e0bffb17 	ldw	r2,-20(fp)
   1020c:	e0fffe17 	ldw	r3,-8(fp)
   10210:	1885883a 	add	r2,r3,r2
   10214:	00c00804 	movi	r3,32
   10218:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
   1021c:	e0bffb17 	ldw	r2,-20(fp)
   10220:	10800044 	addi	r2,r2,1
   10224:	e0bffb15 	stw	r2,-20(fp)
   10228:	e0bffb17 	ldw	r2,-20(fp)
   1022c:	10800210 	cmplti	r2,r2,8
   10230:	103fd81e 	bne	r2,zero,10194 <__alt_data_end+0xf8010194>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
   10234:	e0bffc17 	ldw	r2,-16(fp)
   10238:	e0fffd17 	ldw	r3,-12(fp)
   1023c:	1885883a 	add	r2,r3,r2
   10240:	10800003 	ldbu	r2,0(r2)
   10244:	10803fcc 	andi	r2,r2,255
   10248:	1080201c 	xori	r2,r2,128
   1024c:	10bfe004 	addi	r2,r2,-128
   10250:	10800b98 	cmpnei	r2,r2,46
   10254:	1000031e 	bne	r2,zero,10264 <convert_filename_to_name_extension+0xf4>
   10258:	e0bffc17 	ldw	r2,-16(fp)
   1025c:	10800044 	addi	r2,r2,1
   10260:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
   10264:	e03ffb15 	stw	zero,-20(fp)
   10268:	00001c06 	br	102dc <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
   1026c:	e0bffc17 	ldw	r2,-16(fp)
   10270:	e0fffd17 	ldw	r3,-12(fp)
   10274:	1885883a 	add	r2,r3,r2
   10278:	10800003 	ldbu	r2,0(r2)
   1027c:	10803fcc 	andi	r2,r2,255
   10280:	1080201c 	xori	r2,r2,128
   10284:	10bfe004 	addi	r2,r2,-128
   10288:	10000c26 	beq	r2,zero,102bc <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
   1028c:	e0bffb17 	ldw	r2,-20(fp)
   10290:	e0ffff17 	ldw	r3,-4(fp)
   10294:	1885883a 	add	r2,r3,r2
   10298:	e0fffc17 	ldw	r3,-16(fp)
   1029c:	e13ffd17 	ldw	r4,-12(fp)
   102a0:	20c7883a 	add	r3,r4,r3
   102a4:	18c00003 	ldbu	r3,0(r3)
   102a8:	10c00005 	stb	r3,0(r2)
            local++;
   102ac:	e0bffc17 	ldw	r2,-16(fp)
   102b0:	10800044 	addi	r2,r2,1
   102b4:	e0bffc15 	stw	r2,-16(fp)
   102b8:	00000506 	br	102d0 <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
   102bc:	e0bffb17 	ldw	r2,-20(fp)
   102c0:	e0ffff17 	ldw	r3,-4(fp)
   102c4:	1885883a 	add	r2,r3,r2
   102c8:	00c00804 	movi	r3,32
   102cc:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
   102d0:	e0bffb17 	ldw	r2,-20(fp)
   102d4:	10800044 	addi	r2,r2,1
   102d8:	e0bffb15 	stw	r2,-20(fp)
   102dc:	e0bffb17 	ldw	r2,-20(fp)
   102e0:	108000d0 	cmplti	r2,r2,3
   102e4:	103fe11e 	bne	r2,zero,1026c <__alt_data_end+0xf801026c>
        {
            extension[counter] = ' ';
        }
    }

}
   102e8:	0001883a 	nop
   102ec:	e037883a 	mov	sp,fp
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00104 	addi	sp,sp,4
   102f8:	f800283a 	ret

000102fc <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
   102fc:	defff504 	addi	sp,sp,-44
   10300:	dfc00a15 	stw	ra,40(sp)
   10304:	df000915 	stw	fp,36(sp)
   10308:	df000904 	addi	fp,sp,36
   1030c:	e13ffd15 	stw	r4,-12(fp)
   10310:	e17ffe15 	stw	r5,-8(fp)
   10314:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
   10318:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
   1031c:	e0bffc04 	addi	r2,fp,-16
   10320:	1009883a 	mov	r4,r2
   10324:	000fc4c0 	call	fc4c <find_first_empty_cluster>
   10328:	1000a026 	beq	r2,zero,105ac <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
   1032c:	e0bfff17 	ldw	r2,-4(fp)
   10330:	10800a17 	ldw	r2,40(r2)
   10334:	1000031e 	bne	r2,zero,10344 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
   10338:	00100440 	call	10044 <find_first_empty_record_in_root_directory>
   1033c:	e0bff815 	stw	r2,-32(fp)
   10340:	00000606 	br	1035c <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
   10344:	e0bfff17 	ldw	r2,-4(fp)
   10348:	1080058b 	ldhu	r2,22(r2)
   1034c:	10bfffcc 	andi	r2,r2,65535
   10350:	1009883a 	mov	r4,r2
   10354:	000fdf80 	call	fdf8 <find_first_empty_record_in_a_subdirectory>
   10358:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
   1035c:	e0bff817 	ldw	r2,-32(fp)
   10360:	10009216 	blt	r2,zero,105ac <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
   10364:	e13ffd17 	ldw	r4,-12(fp)
   10368:	000ef4c0 	call	ef4c <get_dir_divider_location>
   1036c:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
   10370:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
   10374:	00000b06 	br	103a4 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
   10378:	e0fffa17 	ldw	r3,-24(fp)
   1037c:	e0bff917 	ldw	r2,-28(fp)
   10380:	1885883a 	add	r2,r3,r2
   10384:	10800044 	addi	r2,r2,1
   10388:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
   1038c:	e0bffa17 	ldw	r2,-24(fp)
   10390:	e0fffd17 	ldw	r3,-12(fp)
   10394:	1885883a 	add	r2,r3,r2
   10398:	1009883a 	mov	r4,r2
   1039c:	000ef4c0 	call	ef4c <get_dir_divider_location>
   103a0:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
   103a4:	e0bff917 	ldw	r2,-28(fp)
   103a8:	00bff316 	blt	zero,r2,10378 <__alt_data_end+0xf8010378>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
   103ac:	e0bffa17 	ldw	r2,-24(fp)
   103b0:	e0fffd17 	ldw	r3,-12(fp)
   103b4:	1887883a 	add	r3,r3,r2
   103b8:	e13ffe17 	ldw	r4,-8(fp)
   103bc:	e0bffe17 	ldw	r2,-8(fp)
   103c0:	10800204 	addi	r2,r2,8
   103c4:	100d883a 	mov	r6,r2
   103c8:	200b883a 	mov	r5,r4
   103cc:	1809883a 	mov	r4,r3
   103d0:	00101700 	call	10170 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
   103d4:	e0bffe17 	ldw	r2,-8(fp)
   103d8:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
   103dc:	e0bffe17 	ldw	r2,-8(fp)
   103e0:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
   103e4:	e0bffe17 	ldw	r2,-8(fp)
   103e8:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
   103ec:	e0bffe17 	ldw	r2,-8(fp)
   103f0:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
   103f4:	e0bffe17 	ldw	r2,-8(fp)
   103f8:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
   103fc:	e0bffe17 	ldw	r2,-8(fp)
   10400:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	1007883a 	mov	r3,r2
   1040c:	e0bffe17 	ldw	r2,-8(fp)
   10410:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
   10414:	e0bffe17 	ldw	r2,-8(fp)
   10418:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
   1041c:	e0fffc17 	ldw	r3,-16(fp)
   10420:	e0bffe17 	ldw	r2,-8(fp)
   10424:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
   10428:	e0bffe17 	ldw	r2,-8(fp)
   1042c:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
   10430:	e0bffe17 	ldw	r2,-8(fp)
   10434:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
   10438:	e0bff817 	ldw	r2,-32(fp)
   1043c:	10ffffcc 	andi	r3,r2,65535
   10440:	e0bffe17 	ldw	r2,-8(fp)
   10444:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
   10448:	e0bff817 	ldw	r2,-32(fp)
   1044c:	1004d43a 	srli	r2,r2,16
   10450:	1000010e 	bge	r2,zero,10458 <create_file+0x15c>
   10454:	108003c4 	addi	r2,r2,15
   10458:	1005d13a 	srai	r2,r2,4
   1045c:	1007883a 	mov	r3,r2
   10460:	e0bffe17 	ldw	r2,-8(fp)
   10464:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
   10468:	e0bff817 	ldw	r2,-32(fp)
   1046c:	1004d43a 	srli	r2,r2,16
   10470:	1007883a 	mov	r3,r2
   10474:	00a00034 	movhi	r2,32768
   10478:	108003c4 	addi	r2,r2,15
   1047c:	1884703a 	and	r2,r3,r2
   10480:	1000040e 	bge	r2,zero,10494 <create_file+0x198>
   10484:	10bfffc4 	addi	r2,r2,-1
   10488:	00fffc04 	movi	r3,-16
   1048c:	10c4b03a 	or	r2,r2,r3
   10490:	10800044 	addi	r2,r2,1
   10494:	1004917a 	slli	r2,r2,5
   10498:	1007883a 	mov	r3,r2
   1049c:	e0bffe17 	ldw	r2,-8(fp)
   104a0:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
   104a4:	e0bfff17 	ldw	r2,-4(fp)
   104a8:	1080058b 	ldhu	r2,22(r2)
   104ac:	10ffffcc 	andi	r3,r2,65535
   104b0:	e0bffe17 	ldw	r2,-8(fp)
   104b4:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
   104b8:	e0bffe17 	ldw	r2,-8(fp)
   104bc:	00c00044 	movi	r3,1
   104c0:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
   104c4:	e0bffe17 	ldw	r2,-8(fp)
   104c8:	00c00044 	movi	r3,1
   104cc:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   104d0:	e0bffe17 	ldw	r2,-8(fp)
   104d4:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   104d8:	1000071e 	bne	r2,zero,104f8 <create_file+0x1fc>
   104dc:	00800074 	movhi	r2,1
   104e0:	109ea804 	addi	r2,r2,31392
   104e4:	10c01317 	ldw	r3,76(r2)
   104e8:	e0bffe17 	ldw	r2,-8(fp)
   104ec:	10800b17 	ldw	r2,44(r2)
   104f0:	1885883a 	add	r2,r3,r2
   104f4:	00000f06 	br	10534 <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
   104f8:	00800074 	movhi	r2,1
   104fc:	109ea804 	addi	r2,r2,31392
   10500:	10c01417 	ldw	r3,80(r2)
   10504:	e0bffe17 	ldw	r2,-8(fp)
   10508:	10800a17 	ldw	r2,40(r2)
   1050c:	113fff84 	addi	r4,r2,-2
   10510:	00800074 	movhi	r2,1
   10514:	109ea804 	addi	r2,r2,31392
   10518:	10800383 	ldbu	r2,14(r2)
   1051c:	10803fcc 	andi	r2,r2,255
   10520:	2085383a 	mul	r2,r4,r2
   10524:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
   10528:	e0bffe17 	ldw	r2,-8(fp)
   1052c:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
   10530:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
   10534:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
   10538:	e0bffb17 	ldw	r2,-20(fp)
   1053c:	d0e70b17 	ldw	r3,-25556(gp)
   10540:	180b883a 	mov	r5,r3
   10544:	1009883a 	mov	r4,r2
   10548:	000db980 	call	db98 <Read_Sector_Data>
   1054c:	10001726 	beq	r2,zero,105ac <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
   10550:	e0bffe17 	ldw	r2,-8(fp)
   10554:	10800c0b 	ldhu	r2,48(r2)
   10558:	10bfffcc 	andi	r2,r2,65535
   1055c:	10a0001c 	xori	r2,r2,32768
   10560:	10a00004 	addi	r2,r2,-32768
   10564:	e17ffe17 	ldw	r5,-8(fp)
   10568:	1009883a 	mov	r4,r2
   1056c:	000e2240 	call	e224 <Write_File_Record_At_Offset>
   10570:	10000e26 	beq	r2,zero,105ac <create_file+0x2b0>
                {
                    Save_Modified_Sector();
   10574:	000db4c0 	call	db4c <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
   10578:	e0bffc17 	ldw	r2,-16(fp)
   1057c:	01800044 	movi	r6,1
   10580:	017fffc4 	movi	r5,-1
   10584:	1009883a 	mov	r4,r2
   10588:	000dd240 	call	dd24 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
   1058c:	e0bffc17 	ldw	r2,-16(fp)
   10590:	000d883a 	mov	r6,zero
   10594:	017fffc4 	movi	r5,-1
   10598:	1009883a 	mov	r4,r2
   1059c:	000dd240 	call	dd24 <mark_cluster>
   105a0:	10000226 	beq	r2,zero,105ac <create_file+0x2b0>
                    {
                        result = true;
   105a4:	00800044 	movi	r2,1
   105a8:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
   105ac:	e0bff717 	ldw	r2,-36(fp)
}
   105b0:	e037883a 	mov	sp,fp
   105b4:	dfc00117 	ldw	ra,4(sp)
   105b8:	df000017 	ldw	fp,0(sp)
   105bc:	dec00204 	addi	sp,sp,8
   105c0:	f800283a 	ret

000105c4 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
   105c4:	defffb04 	addi	sp,sp,-20
   105c8:	df000415 	stw	fp,16(sp)
   105cc:	df000404 	addi	fp,sp,16
   105d0:	e13ffe15 	stw	r4,-8(fp)
   105d4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
   105d8:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   105dc:	e03ffc15 	stw	zero,-16(fp)
   105e0:	00001506 	br	10638 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
   105e4:	e0fffe17 	ldw	r3,-8(fp)
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	1885883a 	add	r2,r3,r2
   105f0:	10800003 	ldbu	r2,0(r2)
   105f4:	10803fcc 	andi	r2,r2,255
   105f8:	10800820 	cmpeqi	r2,r2,32
   105fc:	10000b1e 	bne	r2,zero,1062c <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
   10600:	e0bffd17 	ldw	r2,-12(fp)
   10604:	e0ffff17 	ldw	r3,-4(fp)
   10608:	1885883a 	add	r2,r3,r2
   1060c:	e13ffe17 	ldw	r4,-8(fp)
   10610:	e0fffc17 	ldw	r3,-16(fp)
   10614:	20c7883a 	add	r3,r4,r3
   10618:	18c00003 	ldbu	r3,0(r3)
   1061c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
   10620:	e0bffd17 	ldw	r2,-12(fp)
   10624:	10800044 	addi	r2,r2,1
   10628:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
   1062c:	e0bffc17 	ldw	r2,-16(fp)
   10630:	10800044 	addi	r2,r2,1
   10634:	e0bffc15 	stw	r2,-16(fp)
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	10800210 	cmplti	r2,r2,8
   10640:	103fe81e 	bne	r2,zero,105e4 <__alt_data_end+0xf80105e4>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
   10644:	e0bffe17 	ldw	r2,-8(fp)
   10648:	10800203 	ldbu	r2,8(r2)
   1064c:	10803fcc 	andi	r2,r2,255
   10650:	10800820 	cmpeqi	r2,r2,32
   10654:	1000241e 	bne	r2,zero,106e8 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
   10658:	e0bffd17 	ldw	r2,-12(fp)
   1065c:	e0ffff17 	ldw	r3,-4(fp)
   10660:	1885883a 	add	r2,r3,r2
   10664:	00c00b84 	movi	r3,46
   10668:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
   1066c:	e0bffd17 	ldw	r2,-12(fp)
   10670:	10800044 	addi	r2,r2,1
   10674:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
   10678:	e03ffc15 	stw	zero,-16(fp)
   1067c:	00001706 	br	106dc <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
   10680:	e0fffe17 	ldw	r3,-8(fp)
   10684:	e0bffc17 	ldw	r2,-16(fp)
   10688:	1885883a 	add	r2,r3,r2
   1068c:	10800204 	addi	r2,r2,8
   10690:	10800003 	ldbu	r2,0(r2)
   10694:	10803fcc 	andi	r2,r2,255
   10698:	10800820 	cmpeqi	r2,r2,32
   1069c:	10000c1e 	bne	r2,zero,106d0 <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
   106a0:	e0bffd17 	ldw	r2,-12(fp)
   106a4:	e0ffff17 	ldw	r3,-4(fp)
   106a8:	1885883a 	add	r2,r3,r2
   106ac:	e13ffe17 	ldw	r4,-8(fp)
   106b0:	e0fffc17 	ldw	r3,-16(fp)
   106b4:	20c7883a 	add	r3,r4,r3
   106b8:	18c00204 	addi	r3,r3,8
   106bc:	18c00003 	ldbu	r3,0(r3)
   106c0:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
   106c4:	e0bffd17 	ldw	r2,-12(fp)
   106c8:	10800044 	addi	r2,r2,1
   106cc:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
   106d0:	e0bffc17 	ldw	r2,-16(fp)
   106d4:	10800044 	addi	r2,r2,1
   106d8:	e0bffc15 	stw	r2,-16(fp)
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	108000d0 	cmplti	r2,r2,3
   106e4:	103fe61e 	bne	r2,zero,10680 <__alt_data_end+0xf8010680>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
   106e8:	e0bffd17 	ldw	r2,-12(fp)
   106ec:	e0ffff17 	ldw	r3,-4(fp)
   106f0:	1885883a 	add	r2,r3,r2
   106f4:	10000005 	stb	zero,0(r2)
}
   106f8:	0001883a 	nop
   106fc:	e037883a 	mov	sp,fp
   10700:	df000017 	ldw	fp,0(sp)
   10704:	dec00104 	addi	sp,sp,4
   10708:	f800283a 	ret

0001070c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
   1070c:	defffc04 	addi	sp,sp,-16
   10710:	dfc00315 	stw	ra,12(sp)
   10714:	df000215 	stw	fp,8(sp)
   10718:	df000204 	addi	fp,sp,8
   1071c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
   10720:	d1600804 	addi	r5,gp,-32736
   10724:	e13fff17 	ldw	r4,-4(fp)
   10728:	00130900 	call	13090 <alt_find_dev>
   1072c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
   10730:	e0bffe17 	ldw	r2,-8(fp)
   10734:	10001e26 	beq	r2,zero,107b0 <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	10800a17 	ldw	r2,40(r2)
   10740:	10808d04 	addi	r2,r2,564
   10744:	d0a70515 	stw	r2,-25580(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	10800a17 	ldw	r2,40(r2)
   10750:	10808904 	addi	r2,r2,548
   10754:	d0a70615 	stw	r2,-25576(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
   10758:	e0bffe17 	ldw	r2,-8(fp)
   1075c:	10800a17 	ldw	r2,40(r2)
   10760:	10808404 	addi	r2,r2,528
   10764:	d0a70715 	stw	r2,-25572(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
   10768:	e0bffe17 	ldw	r2,-8(fp)
   1076c:	10800a17 	ldw	r2,40(r2)
   10770:	10808c04 	addi	r2,r2,560
   10774:	d0a70815 	stw	r2,-25568(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
   10778:	e0bffe17 	ldw	r2,-8(fp)
   1077c:	10800a17 	ldw	r2,40(r2)
   10780:	10808b04 	addi	r2,r2,556
   10784:	d0a70915 	stw	r2,-25564(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
   10788:	e0bffe17 	ldw	r2,-8(fp)
   1078c:	10800a17 	ldw	r2,40(r2)
   10790:	d0a70a15 	stw	r2,-25560(gp)
		device_pointer = dev;
   10794:	e0bffe17 	ldw	r2,-8(fp)
   10798:	d0a70d15 	stw	r2,-25548(gp)
		initialized = false;
   1079c:	d0270315 	stw	zero,-25588(gp)
		is_sd_card_formated_as_FAT16 = false;
   107a0:	d0270415 	stw	zero,-25584(gp)
		search_data.valid = false;
   107a4:	00800074 	movhi	r2,1
   107a8:	109ea304 	addi	r2,r2,31372
   107ac:	10000415 	stw	zero,16(r2)
	}
	return dev;
   107b0:	e0bffe17 	ldw	r2,-8(fp)
}
   107b4:	e037883a 	mov	sp,fp
   107b8:	dfc00117 	ldw	ra,4(sp)
   107bc:	df000017 	ldw	fp,0(sp)
   107c0:	dec00204 	addi	sp,sp,8
   107c4:	f800283a 	ret

000107c8 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
   107c8:	defffd04 	addi	sp,sp,-12
   107cc:	df000215 	stw	fp,8(sp)
   107d0:	df000204 	addi	fp,sp,8
    bool result = false;
   107d4:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
   107d8:	d0a70d17 	ldw	r2,-25548(gp)
   107dc:	10000826 	beq	r2,zero,10800 <alt_up_sd_card_is_Present+0x38>
   107e0:	d0a70517 	ldw	r2,-25580(gp)
   107e4:	1080002b 	ldhuio	r2,0(r2)
   107e8:	10bfffcc 	andi	r2,r2,65535
   107ec:	1080008c 	andi	r2,r2,2
   107f0:	10000326 	beq	r2,zero,10800 <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
   107f4:	00800044 	movi	r2,1
   107f8:	e0bffe15 	stw	r2,-8(fp)
   107fc:	00001e06 	br	10878 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
   10800:	d0a70317 	ldw	r2,-25588(gp)
   10804:	10800058 	cmpnei	r2,r2,1
   10808:	10001b1e 	bne	r2,zero,10878 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
   1080c:	d0270315 	stw	zero,-25588(gp)
		search_data.valid = false;
   10810:	00800074 	movhi	r2,1
   10814:	109ea304 	addi	r2,r2,31372
   10818:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
   1081c:	d0270415 	stw	zero,-25584(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
   10820:	e03fff15 	stw	zero,-4(fp)
   10824:	00001106 	br	1086c <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
   10828:	00800074 	movhi	r2,1
   1082c:	109ebd04 	addi	r2,r2,31476
   10830:	e0ffff17 	ldw	r3,-4(fp)
   10834:	180691ba 	slli	r3,r3,6
   10838:	10c5883a 	add	r2,r2,r3
   1083c:	10800f04 	addi	r2,r2,60
   10840:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
   10844:	00800074 	movhi	r2,1
   10848:	109ebd04 	addi	r2,r2,31476
   1084c:	e0ffff17 	ldw	r3,-4(fp)
   10850:	180691ba 	slli	r3,r3,6
   10854:	10c5883a 	add	r2,r2,r3
   10858:	10800e04 	addi	r2,r2,56
   1085c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
   10860:	e0bfff17 	ldw	r2,-4(fp)
   10864:	10800044 	addi	r2,r2,1
   10868:	e0bfff15 	stw	r2,-4(fp)
   1086c:	e0bfff17 	ldw	r2,-4(fp)
   10870:	10800510 	cmplti	r2,r2,20
   10874:	103fec1e 	bne	r2,zero,10828 <__alt_data_end+0xf8010828>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
   10878:	e0bffe17 	ldw	r2,-8(fp)
}
   1087c:	e037883a 	mov	sp,fp
   10880:	df000017 	ldw	fp,0(sp)
   10884:	dec00104 	addi	sp,sp,4
   10888:	f800283a 	ret

0001088c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
   1088c:	defffd04 	addi	sp,sp,-12
   10890:	dfc00215 	stw	ra,8(sp)
   10894:	df000115 	stw	fp,4(sp)
   10898:	df000104 	addi	fp,sp,4
	bool result = false;
   1089c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
   108a0:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
   108a4:	10000c26 	beq	r2,zero,108d8 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
   108a8:	d0a70317 	ldw	r2,-25588(gp)
   108ac:	1000071e 	bne	r2,zero,108cc <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
   108b0:	000eb300 	call	eb30 <Look_for_FAT16>
   108b4:	d0a70415 	stw	r2,-25584(gp)
			initialized = is_sd_card_formated_as_FAT16;
   108b8:	d0a70417 	ldw	r2,-25584(gp)
   108bc:	d0a70315 	stw	r2,-25588(gp)
			search_data.valid = false;
   108c0:	00800074 	movhi	r2,1
   108c4:	109ea304 	addi	r2,r2,31372
   108c8:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
   108cc:	d0a70417 	ldw	r2,-25584(gp)
   108d0:	e0bfff15 	stw	r2,-4(fp)
   108d4:	00000206 	br	108e0 <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
   108d8:	d0270315 	stw	zero,-25588(gp)
		is_sd_card_formated_as_FAT16 = false;
   108dc:	d0270415 	stw	zero,-25584(gp)
	}

	return result;
   108e0:	e0bfff17 	ldw	r2,-4(fp)
}
   108e4:	e037883a 	mov	sp,fp
   108e8:	dfc00117 	ldw	ra,4(sp)
   108ec:	df000017 	ldw	fp,0(sp)
   108f0:	dec00204 	addi	sp,sp,8
   108f4:	f800283a 	ret

000108f8 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
   108f8:	deffea04 	addi	sp,sp,-88
   108fc:	dfc01515 	stw	ra,84(sp)
   10900:	df001415 	stw	fp,80(sp)
   10904:	df001404 	addi	fp,sp,80
   10908:	e13ffe15 	stw	r4,-8(fp)
   1090c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
   10910:	00800084 	movi	r2,2
   10914:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   10918:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
   1091c:	10002426 	beq	r2,zero,109b0 <alt_up_sd_card_find_first+0xb8>
   10920:	d0a70417 	ldw	r2,-25584(gp)
   10924:	10002226 	beq	r2,zero,109b0 <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
   10928:	e0ffee04 	addi	r3,fp,-72
   1092c:	e0bfed04 	addi	r2,fp,-76
   10930:	180d883a 	mov	r6,r3
   10934:	100b883a 	mov	r5,r2
   10938:	e13ffe17 	ldw	r4,-8(fp)
   1093c:	000f2a00 	call	f2a0 <get_home_directory_cluster_for_file>
   10940:	10001926 	beq	r2,zero,109a8 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
   10944:	e0bfed17 	ldw	r2,-76(fp)
   10948:	1007883a 	mov	r3,r2
   1094c:	00800074 	movhi	r2,1
   10950:	109ea304 	addi	r2,r2,31372
   10954:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
   10958:	e0bfed17 	ldw	r2,-76(fp)
   1095c:	1007883a 	mov	r3,r2
   10960:	00800074 	movhi	r2,1
   10964:	109ea304 	addi	r2,r2,31372
   10968:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
   1096c:	00800074 	movhi	r2,1
   10970:	109ea304 	addi	r2,r2,31372
   10974:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
   10978:	00800074 	movhi	r2,1
   1097c:	109ea304 	addi	r2,r2,31372
   10980:	00ffffc4 	movi	r3,-1
   10984:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
   10988:	00800074 	movhi	r2,1
   1098c:	109ea304 	addi	r2,r2,31372
   10990:	00c00044 	movi	r3,1
   10994:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
   10998:	e13fff17 	ldw	r4,-4(fp)
   1099c:	00109c80 	call	109c8 <alt_up_sd_card_find_next>
   109a0:	e0bfec0d 	sth	r2,-80(fp)
   109a4:	00000206 	br	109b0 <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
   109a8:	00800044 	movi	r2,1
   109ac:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
   109b0:	e0bfec0b 	ldhu	r2,-80(fp)
}
   109b4:	e037883a 	mov	sp,fp
   109b8:	dfc00117 	ldw	ra,4(sp)
   109bc:	df000017 	ldw	fp,0(sp)
   109c0:	dec00204 	addi	sp,sp,8
   109c4:	f800283a 	ret

000109c8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
   109c8:	deffe404 	addi	sp,sp,-112
   109cc:	dfc01b15 	stw	ra,108(sp)
   109d0:	df001a15 	stw	fp,104(sp)
   109d4:	df001a04 	addi	fp,sp,104
   109d8:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
   109dc:	00800084 	movi	r2,2
   109e0:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   109e4:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
   109e8:	1000df26 	beq	r2,zero,10d68 <alt_up_sd_card_find_next+0x3a0>
   109ec:	d0a70417 	ldw	r2,-25584(gp)
   109f0:	1000dd26 	beq	r2,zero,10d68 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
   109f4:	00800074 	movhi	r2,1
   109f8:	109ea304 	addi	r2,r2,31372
   109fc:	10800417 	ldw	r2,16(r2)
   10a00:	1000d726 	beq	r2,zero,10d60 <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
   10a04:	00800074 	movhi	r2,1
   10a08:	109ea304 	addi	r2,r2,31372
   10a0c:	10800117 	ldw	r2,4(r2)
   10a10:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
   10a14:	e0bfe717 	ldw	r2,-100(fp)
   10a18:	1000561e 	bne	r2,zero,10b74 <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
   10a1c:	00800074 	movhi	r2,1
   10a20:	109ea804 	addi	r2,r2,31392
   10a24:	1080050b 	ldhu	r2,20(r2)
   10a28:	10bfffcc 	andi	r2,r2,65535
   10a2c:	1006917a 	slli	r3,r2,5
   10a30:	00800074 	movhi	r2,1
   10a34:	109ea804 	addi	r2,r2,31392
   10a38:	1080030b 	ldhu	r2,12(r2)
   10a3c:	10bfffcc 	andi	r2,r2,65535
   10a40:	1885283a 	div	r2,r3,r2
   10a44:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
   10a48:	00800074 	movhi	r2,1
   10a4c:	109ea304 	addi	r2,r2,31372
   10a50:	10800217 	ldw	r2,8(r2)
   10a54:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
   10a58:	00800074 	movhi	r2,1
   10a5c:	109ea304 	addi	r2,r2,31372
   10a60:	1080030b 	ldhu	r2,12(r2)
   10a64:	10bfffcc 	andi	r2,r2,65535
   10a68:	10a0001c 	xori	r2,r2,32768
   10a6c:	10a00004 	addi	r2,r2,-32768
   10a70:	10800044 	addi	r2,r2,1
   10a74:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   10a78:	00003606 	br	10b54 <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
   10a7c:	00800074 	movhi	r2,1
   10a80:	109ea804 	addi	r2,r2,31392
   10a84:	10c01317 	ldw	r3,76(r2)
   10a88:	e0bfe817 	ldw	r2,-96(fp)
   10a8c:	1885883a 	add	r2,r3,r2
   10a90:	1007883a 	mov	r3,r2
   10a94:	d0a70b17 	ldw	r2,-25556(gp)
   10a98:	100b883a 	mov	r5,r2
   10a9c:	1809883a 	mov	r4,r3
   10aa0:	000db980 	call	db98 <Read_Sector_Data>
   10aa4:	10002f26 	beq	r2,zero,10b64 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   10aa8:	00002306 	br	10b38 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
   10aac:	e0bfe917 	ldw	r2,-92(fp)
   10ab0:	1004917a 	slli	r2,r2,5
   10ab4:	e13fe817 	ldw	r4,-96(fp)
   10ab8:	e0ffef04 	addi	r3,fp,-68
   10abc:	200f883a 	mov	r7,r4
   10ac0:	000d883a 	mov	r6,zero
   10ac4:	180b883a 	mov	r5,r3
   10ac8:	1009883a 	mov	r4,r2
   10acc:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
   10ad0:	10001626 	beq	r2,zero,10b2c <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   10ad4:	e0bfef03 	ldbu	r2,-68(fp)
   10ad8:	10803fcc 	andi	r2,r2,255
   10adc:	10001326 	beq	r2,zero,10b2c <alt_up_sd_card_find_next+0x164>
   10ae0:	e0bfef03 	ldbu	r2,-68(fp)
   10ae4:	10803fcc 	andi	r2,r2,255
   10ae8:	10803960 	cmpeqi	r2,r2,229
   10aec:	10000f1e 	bne	r2,zero,10b2c <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
   10af0:	e0bfe917 	ldw	r2,-92(fp)
   10af4:	1007883a 	mov	r3,r2
   10af8:	00800074 	movhi	r2,1
   10afc:	109ea304 	addi	r2,r2,31372
   10b00:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
   10b04:	e0ffe817 	ldw	r3,-96(fp)
   10b08:	00800074 	movhi	r2,1
   10b0c:	109ea304 	addi	r2,r2,31372
   10b10:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
   10b14:	e0bfef04 	addi	r2,fp,-68
   10b18:	e17fff17 	ldw	r5,-4(fp)
   10b1c:	1009883a 	mov	r4,r2
   10b20:	00105c40 	call	105c4 <copy_file_record_name_to_string>
									return 0;
   10b24:	0005883a 	mov	r2,zero
   10b28:	00009006 	br	10d6c <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
   10b2c:	e0bfe917 	ldw	r2,-92(fp)
   10b30:	10800044 	addi	r2,r2,1
   10b34:	e0bfe915 	stw	r2,-92(fp)
   10b38:	e0bfe917 	ldw	r2,-92(fp)
   10b3c:	10800410 	cmplti	r2,r2,16
   10b40:	103fda1e 	bne	r2,zero,10aac <__alt_data_end+0xf8010aac>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
   10b44:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
   10b48:	e0bfe817 	ldw	r2,-96(fp)
   10b4c:	10800044 	addi	r2,r2,1
   10b50:	e0bfe815 	stw	r2,-96(fp)
   10b54:	e0ffe817 	ldw	r3,-96(fp)
   10b58:	e0bfec17 	ldw	r2,-80(fp)
   10b5c:	18bfc716 	blt	r3,r2,10a7c <__alt_data_end+0xf8010a7c>
   10b60:	00000106 	br	10b68 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
   10b64:	0001883a 	nop
					}
				}
				result = -1;
   10b68:	00bfffc4 	movi	r2,-1
   10b6c:	e0bfe60d 	sth	r2,-104(fp)
   10b70:	00007d06 	br	10d68 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
   10b74:	00800074 	movhi	r2,1
   10b78:	109ea304 	addi	r2,r2,31372
   10b7c:	1080030b 	ldhu	r2,12(r2)
   10b80:	10bfffcc 	andi	r2,r2,65535
   10b84:	10a0001c 	xori	r2,r2,32768
   10b88:	10a00004 	addi	r2,r2,-32768
   10b8c:	10800044 	addi	r2,r2,1
   10b90:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
   10b94:	e0bfe717 	ldw	r2,-100(fp)
   10b98:	10ffff84 	addi	r3,r2,-2
   10b9c:	00800074 	movhi	r2,1
   10ba0:	109ea804 	addi	r2,r2,31392
   10ba4:	10800383 	ldbu	r2,14(r2)
   10ba8:	10803fcc 	andi	r2,r2,255
   10bac:	1885383a 	mul	r2,r3,r2
   10bb0:	1007883a 	mov	r3,r2
   10bb4:	00800074 	movhi	r2,1
   10bb8:	109ea804 	addi	r2,r2,31392
   10bbc:	10801417 	ldw	r2,80(r2)
   10bc0:	1885883a 	add	r2,r3,r2
   10bc4:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
   10bc8:	00800074 	movhi	r2,1
   10bcc:	109ea304 	addi	r2,r2,31372
   10bd0:	10800217 	ldw	r2,8(r2)
   10bd4:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10bd8:	00003806 	br	10cbc <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
   10bdc:	e0ffeb17 	ldw	r3,-84(fp)
   10be0:	e0bfed17 	ldw	r2,-76(fp)
   10be4:	1885883a 	add	r2,r3,r2
   10be8:	d0e70b17 	ldw	r3,-25556(gp)
   10bec:	180b883a 	mov	r5,r3
   10bf0:	1009883a 	mov	r4,r2
   10bf4:	000db980 	call	db98 <Read_Sector_Data>
   10bf8:	10003726 	beq	r2,zero,10cd8 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
   10bfc:	00002806 	br	10ca0 <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
   10c00:	e0bfea17 	ldw	r2,-88(fp)
   10c04:	1004917a 	slli	r2,r2,5
   10c08:	e13fe717 	ldw	r4,-100(fp)
   10c0c:	e17feb17 	ldw	r5,-84(fp)
   10c10:	e0ffef04 	addi	r3,fp,-68
   10c14:	280f883a 	mov	r7,r5
   10c18:	200d883a 	mov	r6,r4
   10c1c:	180b883a 	mov	r5,r3
   10c20:	1009883a 	mov	r4,r2
   10c24:	000dfa80 	call	dfa8 <Read_File_Record_At_Offset>
   10c28:	10001a26 	beq	r2,zero,10c94 <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
   10c2c:	e0bfef03 	ldbu	r2,-68(fp)
   10c30:	10803fcc 	andi	r2,r2,255
   10c34:	10001726 	beq	r2,zero,10c94 <alt_up_sd_card_find_next+0x2cc>
   10c38:	e0bfef03 	ldbu	r2,-68(fp)
   10c3c:	10803fcc 	andi	r2,r2,255
   10c40:	10803960 	cmpeqi	r2,r2,229
   10c44:	1000131e 	bne	r2,zero,10c94 <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
   10c48:	e0ffe717 	ldw	r3,-100(fp)
   10c4c:	00800074 	movhi	r2,1
   10c50:	109ea304 	addi	r2,r2,31372
   10c54:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
   10c58:	e0bfea17 	ldw	r2,-88(fp)
   10c5c:	1007883a 	mov	r3,r2
   10c60:	00800074 	movhi	r2,1
   10c64:	109ea304 	addi	r2,r2,31372
   10c68:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
   10c6c:	e0ffeb17 	ldw	r3,-84(fp)
   10c70:	00800074 	movhi	r2,1
   10c74:	109ea304 	addi	r2,r2,31372
   10c78:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
   10c7c:	e0bfef04 	addi	r2,fp,-68
   10c80:	e17fff17 	ldw	r5,-4(fp)
   10c84:	1009883a 	mov	r4,r2
   10c88:	00105c40 	call	105c4 <copy_file_record_name_to_string>
										return 0;
   10c8c:	0005883a 	mov	r2,zero
   10c90:	00003606 	br	10d6c <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
   10c94:	e0bfea17 	ldw	r2,-88(fp)
   10c98:	10800044 	addi	r2,r2,1
   10c9c:	e0bfea15 	stw	r2,-88(fp)
   10ca0:	e0bfea17 	ldw	r2,-88(fp)
   10ca4:	10800410 	cmplti	r2,r2,16
   10ca8:	103fd51e 	bne	r2,zero,10c00 <__alt_data_end+0xf8010c00>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
   10cac:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
   10cb0:	e0bfeb17 	ldw	r2,-84(fp)
   10cb4:	10800044 	addi	r2,r2,1
   10cb8:	e0bfeb15 	stw	r2,-84(fp)
   10cbc:	00800074 	movhi	r2,1
   10cc0:	109ea804 	addi	r2,r2,31392
   10cc4:	10800383 	ldbu	r2,14(r2)
   10cc8:	10803fcc 	andi	r2,r2,255
   10ccc:	e0ffeb17 	ldw	r3,-84(fp)
   10cd0:	18bfc216 	blt	r3,r2,10bdc <__alt_data_end+0xf8010bdc>
   10cd4:	00000106 	br	10cdc <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
   10cd8:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
   10cdc:	00800074 	movhi	r2,1
   10ce0:	109ea804 	addi	r2,r2,31392
   10ce4:	10800383 	ldbu	r2,14(r2)
   10ce8:	10803fcc 	andi	r2,r2,255
   10cec:	e0ffeb17 	ldw	r3,-84(fp)
   10cf0:	18801716 	blt	r3,r2,10d50 <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
   10cf4:	e0bfe717 	ldw	r2,-100(fp)
   10cf8:	e0ffee04 	addi	r3,fp,-72
   10cfc:	180b883a 	mov	r5,r3
   10d00:	1009883a 	mov	r4,r2
   10d04:	000dc700 	call	dc70 <get_cluster_flag>
   10d08:	10000f26 	beq	r2,zero,10d48 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
   10d0c:	e0bfee0b 	ldhu	r2,-72(fp)
   10d10:	10bfffcc 	andi	r2,r2,65535
   10d14:	10fffe0c 	andi	r3,r2,65528
   10d18:	00bffe14 	movui	r2,65528
   10d1c:	1880051e 	bne	r3,r2,10d34 <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
   10d20:	00bfffc4 	movi	r2,-1
   10d24:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
   10d28:	00800074 	movhi	r2,1
   10d2c:	109ea304 	addi	r2,r2,31372
   10d30:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
   10d34:	e0bfee0b 	ldhu	r2,-72(fp)
   10d38:	10bfffcc 	andi	r2,r2,65535
   10d3c:	10bffe0c 	andi	r2,r2,65528
   10d40:	e0bfe715 	stw	r2,-100(fp)
   10d44:	00000206 	br	10d50 <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
   10d48:	00bfffc4 	movi	r2,-1
   10d4c:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
   10d50:	e0bfe717 	ldw	r2,-100(fp)
   10d54:	00fffdd4 	movui	r3,65527
   10d58:	18bf8e0e 	bge	r3,r2,10b94 <__alt_data_end+0xf8010b94>
   10d5c:	00000206 	br	10d68 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
   10d60:	008000c4 	movi	r2,3
   10d64:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
   10d68:	e0bfe60b 	ldhu	r2,-104(fp)
}
   10d6c:	e037883a 	mov	sp,fp
   10d70:	dfc00117 	ldw	ra,4(sp)
   10d74:	df000017 	ldw	fp,0(sp)
   10d78:	dec00204 	addi	sp,sp,8
   10d7c:	f800283a 	ret

00010d80 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
   10d80:	deffe904 	addi	sp,sp,-92
   10d84:	dfc01615 	stw	ra,88(sp)
   10d88:	df001515 	stw	fp,84(sp)
   10d8c:	df001504 	addi	fp,sp,84
   10d90:	e13ffe15 	stw	r4,-8(fp)
   10d94:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
   10d98:	00bfffc4 	movi	r2,-1
   10d9c:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   10da0:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
   10da4:	1000cf26 	beq	r2,zero,110e4 <alt_up_sd_card_fopen+0x364>
   10da8:	d0a70417 	ldw	r2,-25584(gp)
   10dac:	1000cd26 	beq	r2,zero,110e4 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
   10db0:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
   10db4:	e13ffe17 	ldw	r4,-8(fp)
   10db8:	000ec1c0 	call	ec1c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
   10dbc:	e13ffe17 	ldw	r4,-8(fp)
   10dc0:	000ece00 	call	ece0 <check_file_name_for_FAT16_compliance>
   10dc4:	1000c726 	beq	r2,zero,110e4 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
   10dc8:	e0ffee04 	addi	r3,fp,-72
   10dcc:	e0bfed04 	addi	r2,fp,-76
   10dd0:	180d883a 	mov	r6,r3
   10dd4:	100b883a 	mov	r5,r2
   10dd8:	e13ffe17 	ldw	r4,-8(fp)
   10ddc:	000f2a00 	call	f2a0 <get_home_directory_cluster_for_file>
   10de0:	1000021e 	bne	r2,zero,10dec <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
   10de4:	e0bfeb0b 	ldhu	r2,-84(fp)
   10de8:	0000bf06 	br	110e8 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   10dec:	e03fec15 	stw	zero,-80(fp)
   10df0:	00000e06 	br	10e2c <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
   10df4:	00800074 	movhi	r2,1
   10df8:	109ebd04 	addi	r2,r2,31476
   10dfc:	e0ffec17 	ldw	r3,-80(fp)
   10e00:	180691ba 	slli	r3,r3,6
   10e04:	10c5883a 	add	r2,r2,r3
   10e08:	10800f04 	addi	r2,r2,60
   10e0c:	10800017 	ldw	r2,0(r2)
   10e10:	1000031e 	bne	r2,zero,10e20 <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
   10e14:	e0bfec17 	ldw	r2,-80(fp)
   10e18:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
   10e1c:	00000606 	br	10e38 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
   10e20:	e0bfec17 	ldw	r2,-80(fp)
   10e24:	10800044 	addi	r2,r2,1
   10e28:	e0bfec15 	stw	r2,-80(fp)
   10e2c:	e0bfec17 	ldw	r2,-80(fp)
   10e30:	10800510 	cmplti	r2,r2,20
   10e34:	103fef1e 	bne	r2,zero,10df4 <__alt_data_end+0xf8010df4>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
   10e38:	e0bfeb0f 	ldh	r2,-84(fp)
   10e3c:	1000a916 	blt	r2,zero,110e4 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
   10e40:	e0bfed17 	ldw	r2,-76(fp)
   10e44:	1009883a 	mov	r4,r2
   10e48:	e0bfeb0f 	ldh	r2,-84(fp)
   10e4c:	100691ba 	slli	r3,r2,6
   10e50:	00800074 	movhi	r2,1
   10e54:	109ebd04 	addi	r2,r2,31476
   10e58:	1885883a 	add	r2,r3,r2
   10e5c:	100d883a 	mov	r6,r2
   10e60:	e17ffe17 	ldw	r5,-8(fp)
   10e64:	000f7d80 	call	f7d8 <find_file_in_directory>
   10e68:	10007b26 	beq	r2,zero,11058 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
   10e6c:	e0bfff17 	ldw	r2,-4(fp)
   10e70:	10000226 	beq	r2,zero,10e7c <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
   10e74:	00bfffc4 	movi	r2,-1
   10e78:	00009b06 	br	110e8 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
   10e7c:	e13feb0f 	ldh	r4,-84(fp)
   10e80:	e0ffeb0f 	ldh	r3,-84(fp)
   10e84:	00800074 	movhi	r2,1
   10e88:	109ebd04 	addi	r2,r2,31476
   10e8c:	180691ba 	slli	r3,r3,6
   10e90:	10c5883a 	add	r2,r2,r3
   10e94:	10800584 	addi	r2,r2,22
   10e98:	1080000b 	ldhu	r2,0(r2)
   10e9c:	10ffffcc 	andi	r3,r2,65535
   10ea0:	00800074 	movhi	r2,1
   10ea4:	109ebd04 	addi	r2,r2,31476
   10ea8:	200891ba 	slli	r4,r4,6
   10eac:	1105883a 	add	r2,r2,r4
   10eb0:	10800704 	addi	r2,r2,28
   10eb4:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
   10eb8:	e0ffeb0f 	ldh	r3,-84(fp)
   10ebc:	00800074 	movhi	r2,1
   10ec0:	109ebd04 	addi	r2,r2,31476
   10ec4:	180691ba 	slli	r3,r3,6
   10ec8:	10c5883a 	add	r2,r2,r3
   10ecc:	10800804 	addi	r2,r2,32
   10ed0:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
   10ed4:	e0ffeb0f 	ldh	r3,-84(fp)
   10ed8:	00800074 	movhi	r2,1
   10edc:	109ebd04 	addi	r2,r2,31476
   10ee0:	180691ba 	slli	r3,r3,6
   10ee4:	10c5883a 	add	r2,r2,r3
   10ee8:	10800904 	addi	r2,r2,36
   10eec:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
   10ef0:	e0ffeb0f 	ldh	r3,-84(fp)
   10ef4:	00800074 	movhi	r2,1
   10ef8:	109ebd04 	addi	r2,r2,31476
   10efc:	180691ba 	slli	r3,r3,6
   10f00:	10c5883a 	add	r2,r2,r3
   10f04:	10800f04 	addi	r2,r2,60
   10f08:	00c00044 	movi	r3,1
   10f0c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
   10f10:	e0ffeb0f 	ldh	r3,-84(fp)
   10f14:	00800074 	movhi	r2,1
   10f18:	109ebd04 	addi	r2,r2,31476
   10f1c:	180691ba 	slli	r3,r3,6
   10f20:	10c5883a 	add	r2,r2,r3
   10f24:	10800e04 	addi	r2,r2,56
   10f28:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   10f2c:	e03fec15 	stw	zero,-80(fp)
   10f30:	00004506 	br	11048 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
   10f34:	e0ffeb0f 	ldh	r3,-84(fp)
   10f38:	e0bfec17 	ldw	r2,-80(fp)
   10f3c:	18803f26 	beq	r3,r2,1103c <alt_up_sd_card_fopen+0x2bc>
   10f40:	00800074 	movhi	r2,1
   10f44:	109ebd04 	addi	r2,r2,31476
   10f48:	e0ffec17 	ldw	r3,-80(fp)
   10f4c:	180691ba 	slli	r3,r3,6
   10f50:	10c5883a 	add	r2,r2,r3
   10f54:	10800f04 	addi	r2,r2,60
   10f58:	10800017 	ldw	r2,0(r2)
   10f5c:	10800058 	cmpnei	r2,r2,1
   10f60:	1000361e 	bne	r2,zero,1103c <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   10f64:	e0ffeb0f 	ldh	r3,-84(fp)
   10f68:	00800074 	movhi	r2,1
   10f6c:	109ebd04 	addi	r2,r2,31476
   10f70:	180691ba 	slli	r3,r3,6
   10f74:	10c5883a 	add	r2,r2,r3
   10f78:	10800a04 	addi	r2,r2,40
   10f7c:	10c00017 	ldw	r3,0(r2)
   10f80:	00800074 	movhi	r2,1
   10f84:	109ebd04 	addi	r2,r2,31476
   10f88:	e13fec17 	ldw	r4,-80(fp)
   10f8c:	200891ba 	slli	r4,r4,6
   10f90:	1105883a 	add	r2,r2,r4
   10f94:	10800a04 	addi	r2,r2,40
   10f98:	10800017 	ldw	r2,0(r2)
   10f9c:	1880271e 	bne	r3,r2,1103c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   10fa0:	e0ffeb0f 	ldh	r3,-84(fp)
   10fa4:	00800074 	movhi	r2,1
   10fa8:	109ebd04 	addi	r2,r2,31476
   10fac:	180691ba 	slli	r3,r3,6
   10fb0:	10c5883a 	add	r2,r2,r3
   10fb4:	10800b04 	addi	r2,r2,44
   10fb8:	10c00017 	ldw	r3,0(r2)
   10fbc:	00800074 	movhi	r2,1
   10fc0:	109ebd04 	addi	r2,r2,31476
   10fc4:	e13fec17 	ldw	r4,-80(fp)
   10fc8:	200891ba 	slli	r4,r4,6
   10fcc:	1105883a 	add	r2,r2,r4
   10fd0:	10800b04 	addi	r2,r2,44
   10fd4:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
   10fd8:	1880181e 	bne	r3,r2,1103c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
   10fdc:	e0ffeb0f 	ldh	r3,-84(fp)
   10fe0:	00800074 	movhi	r2,1
   10fe4:	109ebd04 	addi	r2,r2,31476
   10fe8:	180691ba 	slli	r3,r3,6
   10fec:	10c5883a 	add	r2,r2,r3
   10ff0:	10800c04 	addi	r2,r2,48
   10ff4:	1100000b 	ldhu	r4,0(r2)
   10ff8:	00800074 	movhi	r2,1
   10ffc:	109ebd04 	addi	r2,r2,31476
   11000:	e0ffec17 	ldw	r3,-80(fp)
   11004:	180691ba 	slli	r3,r3,6
   11008:	10c5883a 	add	r2,r2,r3
   1100c:	10800c04 	addi	r2,r2,48
   11010:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
   11014:	20ffffcc 	andi	r3,r4,65535
   11018:	18e0001c 	xori	r3,r3,32768
   1101c:	18e00004 	addi	r3,r3,-32768
   11020:	10bfffcc 	andi	r2,r2,65535
   11024:	10a0001c 	xori	r2,r2,32768
   11028:	10a00004 	addi	r2,r2,-32768
   1102c:	1880031e 	bne	r3,r2,1103c <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
   11030:	00bfff84 	movi	r2,-2
   11034:	e0bfeb0d 	sth	r2,-84(fp)
								break;
   11038:	00002a06 	br	110e4 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
   1103c:	e0bfec17 	ldw	r2,-80(fp)
   11040:	10800044 	addi	r2,r2,1
   11044:	e0bfec15 	stw	r2,-80(fp)
   11048:	e0bfec17 	ldw	r2,-80(fp)
   1104c:	10800510 	cmplti	r2,r2,20
   11050:	103fb81e 	bne	r2,zero,10f34 <__alt_data_end+0xf8010f34>
   11054:	00002306 	br	110e4 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
   11058:	e0bfff17 	ldw	r2,-4(fp)
   1105c:	10001f26 	beq	r2,zero,110dc <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
   11060:	e0bfeb0f 	ldh	r2,-84(fp)
   11064:	100691ba 	slli	r3,r2,6
   11068:	00800074 	movhi	r2,1
   1106c:	109ebd04 	addi	r2,r2,31476
   11070:	1885883a 	add	r2,r3,r2
   11074:	e0ffee04 	addi	r3,fp,-72
   11078:	180d883a 	mov	r6,r3
   1107c:	100b883a 	mov	r5,r2
   11080:	e13ffe17 	ldw	r4,-8(fp)
   11084:	00102fc0 	call	102fc <create_file>
   11088:	10001126 	beq	r2,zero,110d0 <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
   1108c:	e0ffeb0f 	ldh	r3,-84(fp)
   11090:	00800074 	movhi	r2,1
   11094:	109ebd04 	addi	r2,r2,31476
   11098:	180691ba 	slli	r3,r3,6
   1109c:	10c5883a 	add	r2,r2,r3
   110a0:	10800f04 	addi	r2,r2,60
   110a4:	00c00044 	movi	r3,1
   110a8:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
   110ac:	e0ffeb0f 	ldh	r3,-84(fp)
   110b0:	00800074 	movhi	r2,1
   110b4:	109ebd04 	addi	r2,r2,31476
   110b8:	180691ba 	slli	r3,r3,6
   110bc:	10c5883a 	add	r2,r2,r3
   110c0:	10800e04 	addi	r2,r2,56
   110c4:	00c00044 	movi	r3,1
   110c8:	10c00015 	stw	r3,0(r2)
   110cc:	00000506 	br	110e4 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
   110d0:	00bfffc4 	movi	r2,-1
   110d4:	e0bfeb0d 	sth	r2,-84(fp)
   110d8:	00000206 	br	110e4 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
   110dc:	00bfffc4 	movi	r2,-1
   110e0:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
   110e4:	e0bfeb0b 	ldhu	r2,-84(fp)
}
   110e8:	e037883a 	mov	sp,fp
   110ec:	dfc00117 	ldw	ra,4(sp)
   110f0:	df000017 	ldw	fp,0(sp)
   110f4:	dec00204 	addi	sp,sp,8
   110f8:	f800283a 	ret

000110fc <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   110fc:	defffd04 	addi	sp,sp,-12
   11100:	df000215 	stw	fp,8(sp)
   11104:	df000204 	addi	fp,sp,8
   11108:	2007883a 	mov	r3,r4
   1110c:	2805883a 	mov	r2,r5
   11110:	e0fffe0d 	sth	r3,-8(fp)
   11114:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   11118:	e0bffe0f 	ldh	r2,-8(fp)
   1111c:	10001416 	blt	r2,zero,11170 <alt_up_sd_card_set_attributes+0x74>
   11120:	e0bffe0f 	ldh	r2,-8(fp)
   11124:	10800508 	cmpgei	r2,r2,20
   11128:	1000111e 	bne	r2,zero,11170 <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   1112c:	e0fffe0f 	ldh	r3,-8(fp)
   11130:	00800074 	movhi	r2,1
   11134:	109ebd04 	addi	r2,r2,31476
   11138:	180691ba 	slli	r3,r3,6
   1113c:	10c5883a 	add	r2,r2,r3
   11140:	10800f04 	addi	r2,r2,60
   11144:	10800017 	ldw	r2,0(r2)
   11148:	10000926 	beq	r2,zero,11170 <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
   1114c:	e0fffe0f 	ldh	r3,-8(fp)
   11150:	e0bfff0b 	ldhu	r2,-4(fp)
   11154:	1009883a 	mov	r4,r2
   11158:	00800074 	movhi	r2,1
   1115c:	109ebd04 	addi	r2,r2,31476
   11160:	180691ba 	slli	r3,r3,6
   11164:	10c5883a 	add	r2,r2,r3
   11168:	108002c4 	addi	r2,r2,11
   1116c:	11000005 	stb	r4,0(r2)
        }
    }
}
   11170:	0001883a 	nop
   11174:	e037883a 	mov	sp,fp
   11178:	df000017 	ldw	fp,0(sp)
   1117c:	dec00104 	addi	sp,sp,4
   11180:	f800283a 	ret

00011184 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
   11184:	defffd04 	addi	sp,sp,-12
   11188:	df000215 	stw	fp,8(sp)
   1118c:	df000204 	addi	fp,sp,8
   11190:	2005883a 	mov	r2,r4
   11194:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
   11198:	00bfffc4 	movi	r2,-1
   1119c:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   111a0:	e0bfff0f 	ldh	r2,-4(fp)
   111a4:	10001416 	blt	r2,zero,111f8 <alt_up_sd_card_get_attributes+0x74>
   111a8:	e0bfff0f 	ldh	r2,-4(fp)
   111ac:	10800508 	cmpgei	r2,r2,20
   111b0:	1000111e 	bne	r2,zero,111f8 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
   111b4:	e0ffff0f 	ldh	r3,-4(fp)
   111b8:	00800074 	movhi	r2,1
   111bc:	109ebd04 	addi	r2,r2,31476
   111c0:	180691ba 	slli	r3,r3,6
   111c4:	10c5883a 	add	r2,r2,r3
   111c8:	10800f04 	addi	r2,r2,60
   111cc:	10800017 	ldw	r2,0(r2)
   111d0:	10000926 	beq	r2,zero,111f8 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
   111d4:	e0ffff0f 	ldh	r3,-4(fp)
   111d8:	00800074 	movhi	r2,1
   111dc:	109ebd04 	addi	r2,r2,31476
   111e0:	180691ba 	slli	r3,r3,6
   111e4:	10c5883a 	add	r2,r2,r3
   111e8:	108002c4 	addi	r2,r2,11
   111ec:	10800003 	ldbu	r2,0(r2)
   111f0:	10803fcc 	andi	r2,r2,255
   111f4:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
   111f8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   111fc:	e037883a 	mov	sp,fp
   11200:	df000017 	ldw	fp,0(sp)
   11204:	dec00104 	addi	sp,sp,4
   11208:	f800283a 	ret

0001120c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
   1120c:	defffa04 	addi	sp,sp,-24
   11210:	dfc00515 	stw	ra,20(sp)
   11214:	df000415 	stw	fp,16(sp)
   11218:	df000404 	addi	fp,sp,16
   1121c:	2005883a 	mov	r2,r4
   11220:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
   11224:	00bfffc4 	movi	r2,-1
   11228:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   1122c:	e0bfff0f 	ldh	r2,-4(fp)
   11230:	1000ce16 	blt	r2,zero,1156c <alt_up_sd_card_read+0x360>
   11234:	e0bfff0f 	ldh	r2,-4(fp)
   11238:	10800508 	cmpgei	r2,r2,20
   1123c:	1000cb1e 	bne	r2,zero,1156c <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
   11240:	e0ffff0f 	ldh	r3,-4(fp)
   11244:	00800074 	movhi	r2,1
   11248:	109ebd04 	addi	r2,r2,31476
   1124c:	180691ba 	slli	r3,r3,6
   11250:	10c5883a 	add	r2,r2,r3
   11254:	10800f04 	addi	r2,r2,60
   11258:	10800017 	ldw	r2,0(r2)
   1125c:	1000c326 	beq	r2,zero,1156c <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   11260:	e0ffff0f 	ldh	r3,-4(fp)
   11264:	00800074 	movhi	r2,1
   11268:	109ebd04 	addi	r2,r2,31476
   1126c:	180691ba 	slli	r3,r3,6
   11270:	10c5883a 	add	r2,r2,r3
   11274:	10800904 	addi	r2,r2,36
   11278:	10c00017 	ldw	r3,0(r2)
   1127c:	e13fff0f 	ldh	r4,-4(fp)
   11280:	00800074 	movhi	r2,1
   11284:	109ebd04 	addi	r2,r2,31476
   11288:	200891ba 	slli	r4,r4,6
   1128c:	1105883a 	add	r2,r2,r4
   11290:	10800604 	addi	r2,r2,24
   11294:	10800017 	ldw	r2,0(r2)
   11298:	1880b42e 	bgeu	r3,r2,1156c <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1129c:	00800074 	movhi	r2,1
   112a0:	109ea804 	addi	r2,r2,31392
   112a4:	10c01417 	ldw	r3,80(r2)
   112a8:	e13fff0f 	ldh	r4,-4(fp)
   112ac:	00800074 	movhi	r2,1
   112b0:	109ebd04 	addi	r2,r2,31476
   112b4:	200891ba 	slli	r4,r4,6
   112b8:	1105883a 	add	r2,r2,r4
   112bc:	10800704 	addi	r2,r2,28
   112c0:	10800017 	ldw	r2,0(r2)
   112c4:	113fff84 	addi	r4,r2,-2
   112c8:	00800074 	movhi	r2,1
   112cc:	109ea804 	addi	r2,r2,31392
   112d0:	10800383 	ldbu	r2,14(r2)
   112d4:	10803fcc 	andi	r2,r2,255
   112d8:	2085383a 	mul	r2,r4,r2
   112dc:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
   112e0:	e13fff0f 	ldh	r4,-4(fp)
   112e4:	00800074 	movhi	r2,1
   112e8:	109ebd04 	addi	r2,r2,31476
   112ec:	200891ba 	slli	r4,r4,6
   112f0:	1105883a 	add	r2,r2,r4
   112f4:	10800804 	addi	r2,r2,32
   112f8:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   112fc:	1885883a 	add	r2,r3,r2
   11300:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
   11304:	e0ffff0f 	ldh	r3,-4(fp)
   11308:	00800074 	movhi	r2,1
   1130c:	109ebd04 	addi	r2,r2,31476
   11310:	180691ba 	slli	r3,r3,6
   11314:	10c5883a 	add	r2,r2,r3
   11318:	10800904 	addi	r2,r2,36
   1131c:	10800017 	ldw	r2,0(r2)
   11320:	10006826 	beq	r2,zero,114c4 <alt_up_sd_card_read+0x2b8>
   11324:	e0ffff0f 	ldh	r3,-4(fp)
   11328:	00800074 	movhi	r2,1
   1132c:	109ebd04 	addi	r2,r2,31476
   11330:	180691ba 	slli	r3,r3,6
   11334:	10c5883a 	add	r2,r2,r3
   11338:	10800904 	addi	r2,r2,36
   1133c:	10800017 	ldw	r2,0(r2)
   11340:	10807fcc 	andi	r2,r2,511
   11344:	10005f1e 	bne	r2,zero,114c4 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   11348:	e0ffff0f 	ldh	r3,-4(fp)
   1134c:	00800074 	movhi	r2,1
   11350:	109ebd04 	addi	r2,r2,31476
   11354:	180691ba 	slli	r3,r3,6
   11358:	10c5883a 	add	r2,r2,r3
   1135c:	10800804 	addi	r2,r2,32
   11360:	10c00017 	ldw	r3,0(r2)
   11364:	00800074 	movhi	r2,1
   11368:	109ea804 	addi	r2,r2,31392
   1136c:	10800383 	ldbu	r2,14(r2)
   11370:	10803fcc 	andi	r2,r2,255
   11374:	10bfffc4 	addi	r2,r2,-1
   11378:	1880401e 	bne	r3,r2,1147c <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   1137c:	e0ffff0f 	ldh	r3,-4(fp)
   11380:	00800074 	movhi	r2,1
   11384:	109ebd04 	addi	r2,r2,31476
   11388:	180691ba 	slli	r3,r3,6
   1138c:	10c5883a 	add	r2,r2,r3
   11390:	10800704 	addi	r2,r2,28
   11394:	10800017 	ldw	r2,0(r2)
   11398:	e0fffe04 	addi	r3,fp,-8
   1139c:	180b883a 	mov	r5,r3
   113a0:	1009883a 	mov	r4,r2
   113a4:	000dc700 	call	dc70 <get_cluster_flag>
   113a8:	10003226 	beq	r2,zero,11474 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
   113ac:	e0bffe0b 	ldhu	r2,-8(fp)
   113b0:	10bfffcc 	andi	r2,r2,65535
   113b4:	10fffe0c 	andi	r3,r2,65528
   113b8:	00bffe14 	movui	r2,65528
   113bc:	1880021e 	bne	r3,r2,113c8 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
   113c0:	00bfffc4 	movi	r2,-1
   113c4:	00006a06 	br	11570 <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   113c8:	e13fff0f 	ldh	r4,-4(fp)
   113cc:	e0bffe0b 	ldhu	r2,-8(fp)
   113d0:	10ffffcc 	andi	r3,r2,65535
   113d4:	00800074 	movhi	r2,1
   113d8:	109ebd04 	addi	r2,r2,31476
   113dc:	200891ba 	slli	r4,r4,6
   113e0:	1105883a 	add	r2,r2,r4
   113e4:	10800704 	addi	r2,r2,28
   113e8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   113ec:	e0ffff0f 	ldh	r3,-4(fp)
   113f0:	00800074 	movhi	r2,1
   113f4:	109ebd04 	addi	r2,r2,31476
   113f8:	180691ba 	slli	r3,r3,6
   113fc:	10c5883a 	add	r2,r2,r3
   11400:	10800804 	addi	r2,r2,32
   11404:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11408:	00800074 	movhi	r2,1
   1140c:	109ea804 	addi	r2,r2,31392
   11410:	10c01417 	ldw	r3,80(r2)
   11414:	e13fff0f 	ldh	r4,-4(fp)
   11418:	00800074 	movhi	r2,1
   1141c:	109ebd04 	addi	r2,r2,31476
   11420:	200891ba 	slli	r4,r4,6
   11424:	1105883a 	add	r2,r2,r4
   11428:	10800704 	addi	r2,r2,28
   1142c:	10800017 	ldw	r2,0(r2)
   11430:	113fff84 	addi	r4,r2,-2
   11434:	00800074 	movhi	r2,1
   11438:	109ea804 	addi	r2,r2,31392
   1143c:	10800383 	ldbu	r2,14(r2)
   11440:	10803fcc 	andi	r2,r2,255
   11444:	2085383a 	mul	r2,r4,r2
   11448:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   1144c:	e13fff0f 	ldh	r4,-4(fp)
   11450:	00800074 	movhi	r2,1
   11454:	109ebd04 	addi	r2,r2,31476
   11458:	200891ba 	slli	r4,r4,6
   1145c:	1105883a 	add	r2,r2,r4
   11460:	10800804 	addi	r2,r2,32
   11464:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11468:	1885883a 	add	r2,r3,r2
   1146c:	e0bffd15 	stw	r2,-12(fp)
   11470:	00001406 	br	114c4 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
   11474:	00bfff84 	movi	r2,-2
   11478:	00003d06 	br	11570 <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1147c:	e13fff0f 	ldh	r4,-4(fp)
   11480:	e0ffff0f 	ldh	r3,-4(fp)
   11484:	00800074 	movhi	r2,1
   11488:	109ebd04 	addi	r2,r2,31476
   1148c:	180691ba 	slli	r3,r3,6
   11490:	10c5883a 	add	r2,r2,r3
   11494:	10800804 	addi	r2,r2,32
   11498:	10800017 	ldw	r2,0(r2)
   1149c:	10c00044 	addi	r3,r2,1
   114a0:	00800074 	movhi	r2,1
   114a4:	109ebd04 	addi	r2,r2,31476
   114a8:	200891ba 	slli	r4,r4,6
   114ac:	1105883a 	add	r2,r2,r4
   114b0:	10800804 	addi	r2,r2,32
   114b4:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   114b8:	e0bffd17 	ldw	r2,-12(fp)
   114bc:	10800044 	addi	r2,r2,1
   114c0:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
   114c4:	d0e70b17 	ldw	r3,-25556(gp)
   114c8:	e0bffd17 	ldw	r2,-12(fp)
   114cc:	1885883a 	add	r2,r3,r2
   114d0:	1007883a 	mov	r3,r2
   114d4:	d0a70f17 	ldw	r2,-25540(gp)
   114d8:	18800726 	beq	r3,r2,114f8 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   114dc:	d0a70b17 	ldw	r2,-25556(gp)
   114e0:	100b883a 	mov	r5,r2
   114e4:	e13ffd17 	ldw	r4,-12(fp)
   114e8:	000db980 	call	db98 <Read_Sector_Data>
   114ec:	1000021e 	bne	r2,zero,114f8 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
   114f0:	00bfff84 	movi	r2,-2
   114f4:	00001e06 	br	11570 <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
   114f8:	d0e70a17 	ldw	r3,-25560(gp)
   114fc:	e13fff0f 	ldh	r4,-4(fp)
   11500:	00800074 	movhi	r2,1
   11504:	109ebd04 	addi	r2,r2,31476
   11508:	200891ba 	slli	r4,r4,6
   1150c:	1105883a 	add	r2,r2,r4
   11510:	10800904 	addi	r2,r2,36
   11514:	10800017 	ldw	r2,0(r2)
   11518:	10807fcc 	andi	r2,r2,511
   1151c:	1885883a 	add	r2,r3,r2
   11520:	10800023 	ldbuio	r2,0(r2)
   11524:	10803fcc 	andi	r2,r2,255
   11528:	10803fcc 	andi	r2,r2,255
   1152c:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   11530:	e13fff0f 	ldh	r4,-4(fp)
   11534:	e0ffff0f 	ldh	r3,-4(fp)
   11538:	00800074 	movhi	r2,1
   1153c:	109ebd04 	addi	r2,r2,31476
   11540:	180691ba 	slli	r3,r3,6
   11544:	10c5883a 	add	r2,r2,r3
   11548:	10800904 	addi	r2,r2,36
   1154c:	10800017 	ldw	r2,0(r2)
   11550:	10c00044 	addi	r3,r2,1
   11554:	00800074 	movhi	r2,1
   11558:	109ebd04 	addi	r2,r2,31476
   1155c:	200891ba 	slli	r4,r4,6
   11560:	1105883a 	add	r2,r2,r4
   11564:	10800904 	addi	r2,r2,36
   11568:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
   1156c:	e0bffc0b 	ldhu	r2,-16(fp)
}
   11570:	e037883a 	mov	sp,fp
   11574:	dfc00117 	ldw	ra,4(sp)
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00204 	addi	sp,sp,8
   11580:	f800283a 	ret

00011584 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
   11584:	defff804 	addi	sp,sp,-32
   11588:	dfc00715 	stw	ra,28(sp)
   1158c:	df000615 	stw	fp,24(sp)
   11590:	df000604 	addi	fp,sp,24
   11594:	2007883a 	mov	r3,r4
   11598:	2805883a 	mov	r2,r5
   1159c:	e0fffe0d 	sth	r3,-8(fp)
   115a0:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
   115a4:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
   115a8:	e0bffe0f 	ldh	r2,-8(fp)
   115ac:	10017716 	blt	r2,zero,11b8c <alt_up_sd_card_write+0x608>
   115b0:	e0bffe0f 	ldh	r2,-8(fp)
   115b4:	10800508 	cmpgei	r2,r2,20
   115b8:	1001741e 	bne	r2,zero,11b8c <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
   115bc:	e0fffe0f 	ldh	r3,-8(fp)
   115c0:	00800074 	movhi	r2,1
   115c4:	109ebd04 	addi	r2,r2,31476
   115c8:	180691ba 	slli	r3,r3,6
   115cc:	10c5883a 	add	r2,r2,r3
   115d0:	10800f04 	addi	r2,r2,60
   115d4:	10800017 	ldw	r2,0(r2)
   115d8:	10016c26 	beq	r2,zero,11b8c <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   115dc:	00800074 	movhi	r2,1
   115e0:	109ea804 	addi	r2,r2,31392
   115e4:	10c01417 	ldw	r3,80(r2)
   115e8:	e13ffe0f 	ldh	r4,-8(fp)
   115ec:	00800074 	movhi	r2,1
   115f0:	109ebd04 	addi	r2,r2,31476
   115f4:	200891ba 	slli	r4,r4,6
   115f8:	1105883a 	add	r2,r2,r4
   115fc:	10800704 	addi	r2,r2,28
   11600:	10800017 	ldw	r2,0(r2)
   11604:	113fff84 	addi	r4,r2,-2
   11608:	00800074 	movhi	r2,1
   1160c:	109ea804 	addi	r2,r2,31392
   11610:	10800383 	ldbu	r2,14(r2)
   11614:	10803fcc 	andi	r2,r2,255
   11618:	2085383a 	mul	r2,r4,r2
   1161c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
   11620:	e13ffe0f 	ldh	r4,-8(fp)
   11624:	00800074 	movhi	r2,1
   11628:	109ebd04 	addi	r2,r2,31476
   1162c:	200891ba 	slli	r4,r4,6
   11630:	1105883a 	add	r2,r2,r4
   11634:	10800804 	addi	r2,r2,32
   11638:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   1163c:	1885883a 	add	r2,r3,r2
   11640:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
   11644:	e0fffe0f 	ldh	r3,-8(fp)
   11648:	00800074 	movhi	r2,1
   1164c:	109ebd04 	addi	r2,r2,31476
   11650:	180691ba 	slli	r3,r3,6
   11654:	10c5883a 	add	r2,r2,r3
   11658:	10800904 	addi	r2,r2,36
   1165c:	10c00017 	ldw	r3,0(r2)
   11660:	00800074 	movhi	r2,1
   11664:	109ea804 	addi	r2,r2,31392
   11668:	1080030b 	ldhu	r2,12(r2)
   1166c:	10bfffcc 	andi	r2,r2,65535
   11670:	1889203a 	divu	r4,r3,r2
   11674:	2085383a 	mul	r2,r4,r2
   11678:	1885c83a 	sub	r2,r3,r2
   1167c:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
   11680:	e0fffe0f 	ldh	r3,-8(fp)
   11684:	00800074 	movhi	r2,1
   11688:	109ebd04 	addi	r2,r2,31476
   1168c:	180691ba 	slli	r3,r3,6
   11690:	10c5883a 	add	r2,r2,r3
   11694:	10800904 	addi	r2,r2,36
   11698:	10c00017 	ldw	r3,0(r2)
   1169c:	e13ffe0f 	ldh	r4,-8(fp)
   116a0:	00800074 	movhi	r2,1
   116a4:	109ebd04 	addi	r2,r2,31476
   116a8:	200891ba 	slli	r4,r4,6
   116ac:	1105883a 	add	r2,r2,r4
   116b0:	10800604 	addi	r2,r2,24
   116b4:	10800017 	ldw	r2,0(r2)
   116b8:	1880672e 	bgeu	r3,r2,11858 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   116bc:	e0fffe0f 	ldh	r3,-8(fp)
   116c0:	00800074 	movhi	r2,1
   116c4:	109ebd04 	addi	r2,r2,31476
   116c8:	180691ba 	slli	r3,r3,6
   116cc:	10c5883a 	add	r2,r2,r3
   116d0:	10800904 	addi	r2,r2,36
   116d4:	10800017 	ldw	r2,0(r2)
   116d8:	1000e126 	beq	r2,zero,11a60 <alt_up_sd_card_write+0x4dc>
   116dc:	e0bffc0f 	ldh	r2,-16(fp)
   116e0:	1000df1e 	bne	r2,zero,11a60 <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   116e4:	e0fffe0f 	ldh	r3,-8(fp)
   116e8:	00800074 	movhi	r2,1
   116ec:	109ebd04 	addi	r2,r2,31476
   116f0:	180691ba 	slli	r3,r3,6
   116f4:	10c5883a 	add	r2,r2,r3
   116f8:	10800804 	addi	r2,r2,32
   116fc:	10c00017 	ldw	r3,0(r2)
   11700:	00800074 	movhi	r2,1
   11704:	109ea804 	addi	r2,r2,31392
   11708:	10800383 	ldbu	r2,14(r2)
   1170c:	10803fcc 	andi	r2,r2,255
   11710:	10bfffc4 	addi	r2,r2,-1
   11714:	18803d1e 	bne	r3,r2,1180c <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
   11718:	e0fffe0f 	ldh	r3,-8(fp)
   1171c:	00800074 	movhi	r2,1
   11720:	109ebd04 	addi	r2,r2,31476
   11724:	180691ba 	slli	r3,r3,6
   11728:	10c5883a 	add	r2,r2,r3
   1172c:	10800704 	addi	r2,r2,28
   11730:	10800017 	ldw	r2,0(r2)
   11734:	e0fffc84 	addi	r3,fp,-14
   11738:	180b883a 	mov	r5,r3
   1173c:	1009883a 	mov	r4,r2
   11740:	000dc700 	call	dc70 <get_cluster_flag>
   11744:	10002f26 	beq	r2,zero,11804 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
   11748:	e0bffc8b 	ldhu	r2,-14(fp)
   1174c:	10bfffcc 	andi	r2,r2,65535
   11750:	10bffe28 	cmpgeui	r2,r2,65528
   11754:	1000c21e 	bne	r2,zero,11a60 <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
   11758:	e13ffe0f 	ldh	r4,-8(fp)
   1175c:	e0bffc8b 	ldhu	r2,-14(fp)
   11760:	10ffffcc 	andi	r3,r2,65535
   11764:	00800074 	movhi	r2,1
   11768:	109ebd04 	addi	r2,r2,31476
   1176c:	200891ba 	slli	r4,r4,6
   11770:	1105883a 	add	r2,r2,r4
   11774:	10800704 	addi	r2,r2,28
   11778:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
   1177c:	e0fffe0f 	ldh	r3,-8(fp)
   11780:	00800074 	movhi	r2,1
   11784:	109ebd04 	addi	r2,r2,31476
   11788:	180691ba 	slli	r3,r3,6
   1178c:	10c5883a 	add	r2,r2,r3
   11790:	10800804 	addi	r2,r2,32
   11794:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11798:	00800074 	movhi	r2,1
   1179c:	109ea804 	addi	r2,r2,31392
   117a0:	10c01417 	ldw	r3,80(r2)
   117a4:	e13ffe0f 	ldh	r4,-8(fp)
   117a8:	00800074 	movhi	r2,1
   117ac:	109ebd04 	addi	r2,r2,31476
   117b0:	200891ba 	slli	r4,r4,6
   117b4:	1105883a 	add	r2,r2,r4
   117b8:	10800704 	addi	r2,r2,28
   117bc:	10800017 	ldw	r2,0(r2)
   117c0:	113fff84 	addi	r4,r2,-2
   117c4:	00800074 	movhi	r2,1
   117c8:	109ea804 	addi	r2,r2,31392
   117cc:	10800383 	ldbu	r2,14(r2)
   117d0:	10803fcc 	andi	r2,r2,255
   117d4:	2085383a 	mul	r2,r4,r2
   117d8:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
   117dc:	e13ffe0f 	ldh	r4,-8(fp)
   117e0:	00800074 	movhi	r2,1
   117e4:	109ebd04 	addi	r2,r2,31476
   117e8:	200891ba 	slli	r4,r4,6
   117ec:	1105883a 	add	r2,r2,r4
   117f0:	10800804 	addi	r2,r2,32
   117f4:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   117f8:	1885883a 	add	r2,r3,r2
   117fc:	e0bffb15 	stw	r2,-20(fp)
   11800:	00009706 	br	11a60 <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
   11804:	0005883a 	mov	r2,zero
   11808:	0000e106 	br	11b90 <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
   1180c:	e13ffe0f 	ldh	r4,-8(fp)
   11810:	e0fffe0f 	ldh	r3,-8(fp)
   11814:	00800074 	movhi	r2,1
   11818:	109ebd04 	addi	r2,r2,31476
   1181c:	180691ba 	slli	r3,r3,6
   11820:	10c5883a 	add	r2,r2,r3
   11824:	10800804 	addi	r2,r2,32
   11828:	10800017 	ldw	r2,0(r2)
   1182c:	10c00044 	addi	r3,r2,1
   11830:	00800074 	movhi	r2,1
   11834:	109ebd04 	addi	r2,r2,31476
   11838:	200891ba 	slli	r4,r4,6
   1183c:	1105883a 	add	r2,r2,r4
   11840:	10800804 	addi	r2,r2,32
   11844:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
   11848:	e0bffb17 	ldw	r2,-20(fp)
   1184c:	10800044 	addi	r2,r2,1
   11850:	e0bffb15 	stw	r2,-20(fp)
   11854:	00008206 	br	11a60 <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
   11858:	e0fffe0f 	ldh	r3,-8(fp)
   1185c:	00800074 	movhi	r2,1
   11860:	109ebd04 	addi	r2,r2,31476
   11864:	180691ba 	slli	r3,r3,6
   11868:	10c5883a 	add	r2,r2,r3
   1186c:	10800904 	addi	r2,r2,36
   11870:	10800017 	ldw	r2,0(r2)
   11874:	10007a26 	beq	r2,zero,11a60 <alt_up_sd_card_write+0x4dc>
   11878:	e0bffc0f 	ldh	r2,-16(fp)
   1187c:	1000781e 	bne	r2,zero,11a60 <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
   11880:	e0fffe0f 	ldh	r3,-8(fp)
   11884:	00800074 	movhi	r2,1
   11888:	109ebd04 	addi	r2,r2,31476
   1188c:	180691ba 	slli	r3,r3,6
   11890:	10c5883a 	add	r2,r2,r3
   11894:	10800804 	addi	r2,r2,32
   11898:	10c00017 	ldw	r3,0(r2)
   1189c:	00800074 	movhi	r2,1
   118a0:	109ea804 	addi	r2,r2,31392
   118a4:	10800383 	ldbu	r2,14(r2)
   118a8:	10803fcc 	andi	r2,r2,255
   118ac:	10bfffc4 	addi	r2,r2,-1
   118b0:	18803e1e 	bne	r3,r2,119ac <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
   118b4:	e0bffd04 	addi	r2,fp,-12
   118b8:	1009883a 	mov	r4,r2
   118bc:	000fc4c0 	call	fc4c <find_first_empty_cluster>
   118c0:	10003826 	beq	r2,zero,119a4 <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
   118c4:	e0fffe0f 	ldh	r3,-8(fp)
   118c8:	00800074 	movhi	r2,1
   118cc:	109ebd04 	addi	r2,r2,31476
   118d0:	180691ba 	slli	r3,r3,6
   118d4:	10c5883a 	add	r2,r2,r3
   118d8:	10800704 	addi	r2,r2,28
   118dc:	10800017 	ldw	r2,0(r2)
   118e0:	e0fffd17 	ldw	r3,-12(fp)
   118e4:	18ffffcc 	andi	r3,r3,65535
   118e8:	18e0001c 	xori	r3,r3,32768
   118ec:	18e00004 	addi	r3,r3,-32768
   118f0:	01800044 	movi	r6,1
   118f4:	180b883a 	mov	r5,r3
   118f8:	1009883a 	mov	r4,r2
   118fc:	000dd240 	call	dd24 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
   11900:	e0bffd17 	ldw	r2,-12(fp)
   11904:	01800044 	movi	r6,1
   11908:	017fffc4 	movi	r5,-1
   1190c:	1009883a 	mov	r4,r2
   11910:	000dd240 	call	dd24 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
   11914:	e0fffe0f 	ldh	r3,-8(fp)
   11918:	00800074 	movhi	r2,1
   1191c:	109ebd04 	addi	r2,r2,31476
   11920:	180691ba 	slli	r3,r3,6
   11924:	10c5883a 	add	r2,r2,r3
   11928:	10800704 	addi	r2,r2,28
   1192c:	10800017 	ldw	r2,0(r2)
   11930:	e0fffd17 	ldw	r3,-12(fp)
   11934:	18ffffcc 	andi	r3,r3,65535
   11938:	18e0001c 	xori	r3,r3,32768
   1193c:	18e00004 	addi	r3,r3,-32768
   11940:	000d883a 	mov	r6,zero
   11944:	180b883a 	mov	r5,r3
   11948:	1009883a 	mov	r4,r2
   1194c:	000dd240 	call	dd24 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
   11950:	e0bffd17 	ldw	r2,-12(fp)
   11954:	000d883a 	mov	r6,zero
   11958:	017fffc4 	movi	r5,-1
   1195c:	1009883a 	mov	r4,r2
   11960:	000dd240 	call	dd24 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
   11964:	e13ffe0f 	ldh	r4,-8(fp)
   11968:	e0fffd17 	ldw	r3,-12(fp)
   1196c:	00800074 	movhi	r2,1
   11970:	109ebd04 	addi	r2,r2,31476
   11974:	200891ba 	slli	r4,r4,6
   11978:	1105883a 	add	r2,r2,r4
   1197c:	10800704 	addi	r2,r2,28
   11980:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
   11984:	e0fffe0f 	ldh	r3,-8(fp)
   11988:	00800074 	movhi	r2,1
   1198c:	109ebd04 	addi	r2,r2,31476
   11990:	180691ba 	slli	r3,r3,6
   11994:	10c5883a 	add	r2,r2,r3
   11998:	10800804 	addi	r2,r2,32
   1199c:	10000015 	stw	zero,0(r2)
   119a0:	00001506 	br	119f8 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
   119a4:	0005883a 	mov	r2,zero
   119a8:	00007906 	br	11b90 <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
   119ac:	e13ffe0f 	ldh	r4,-8(fp)
   119b0:	e0fffe0f 	ldh	r3,-8(fp)
   119b4:	00800074 	movhi	r2,1
   119b8:	109ebd04 	addi	r2,r2,31476
   119bc:	180691ba 	slli	r3,r3,6
   119c0:	10c5883a 	add	r2,r2,r3
   119c4:	10800904 	addi	r2,r2,36
   119c8:	10c00017 	ldw	r3,0(r2)
   119cc:	00800074 	movhi	r2,1
   119d0:	109ea804 	addi	r2,r2,31392
   119d4:	1080030b 	ldhu	r2,12(r2)
   119d8:	10bfffcc 	andi	r2,r2,65535
   119dc:	1887203a 	divu	r3,r3,r2
   119e0:	00800074 	movhi	r2,1
   119e4:	109ebd04 	addi	r2,r2,31476
   119e8:	200891ba 	slli	r4,r4,6
   119ec:	1105883a 	add	r2,r2,r4
   119f0:	10800804 	addi	r2,r2,32
   119f4:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   119f8:	00800074 	movhi	r2,1
   119fc:	109ea804 	addi	r2,r2,31392
   11a00:	10c01417 	ldw	r3,80(r2)
   11a04:	e13ffe0f 	ldh	r4,-8(fp)
   11a08:	00800074 	movhi	r2,1
   11a0c:	109ebd04 	addi	r2,r2,31476
   11a10:	200891ba 	slli	r4,r4,6
   11a14:	1105883a 	add	r2,r2,r4
   11a18:	10800704 	addi	r2,r2,28
   11a1c:	10800017 	ldw	r2,0(r2)
   11a20:	113fff84 	addi	r4,r2,-2
   11a24:	00800074 	movhi	r2,1
   11a28:	109ea804 	addi	r2,r2,31392
   11a2c:	10800383 	ldbu	r2,14(r2)
   11a30:	10803fcc 	andi	r2,r2,255
   11a34:	2085383a 	mul	r2,r4,r2
   11a38:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
   11a3c:	e13ffe0f 	ldh	r4,-8(fp)
   11a40:	00800074 	movhi	r2,1
   11a44:	109ebd04 	addi	r2,r2,31476
   11a48:	200891ba 	slli	r4,r4,6
   11a4c:	1105883a 	add	r2,r2,r4
   11a50:	10800804 	addi	r2,r2,32
   11a54:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
   11a58:	1885883a 	add	r2,r3,r2
   11a5c:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
   11a60:	d0e70b17 	ldw	r3,-25556(gp)
   11a64:	e0bffb17 	ldw	r2,-20(fp)
   11a68:	1885883a 	add	r2,r3,r2
   11a6c:	1007883a 	mov	r3,r2
   11a70:	d0a70f17 	ldw	r2,-25540(gp)
   11a74:	18800726 	beq	r3,r2,11a94 <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
   11a78:	d0a70b17 	ldw	r2,-25556(gp)
   11a7c:	100b883a 	mov	r5,r2
   11a80:	e13ffb17 	ldw	r4,-20(fp)
   11a84:	000db980 	call	db98 <Read_Sector_Data>
   11a88:	1000021e 	bne	r2,zero,11a94 <alt_up_sd_card_write+0x510>
                {
					return false;
   11a8c:	0005883a 	mov	r2,zero
   11a90:	00003f06 	br	11b90 <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
   11a94:	d0e70a17 	ldw	r3,-25560(gp)
   11a98:	e0bffc0f 	ldh	r2,-16(fp)
   11a9c:	1885883a 	add	r2,r3,r2
   11aa0:	e0ffff07 	ldb	r3,-4(fp)
   11aa4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
   11aa8:	e13ffe0f 	ldh	r4,-8(fp)
   11aac:	e0fffe0f 	ldh	r3,-8(fp)
   11ab0:	00800074 	movhi	r2,1
   11ab4:	109ebd04 	addi	r2,r2,31476
   11ab8:	180691ba 	slli	r3,r3,6
   11abc:	10c5883a 	add	r2,r2,r3
   11ac0:	10800904 	addi	r2,r2,36
   11ac4:	10800017 	ldw	r2,0(r2)
   11ac8:	10c00044 	addi	r3,r2,1
   11acc:	00800074 	movhi	r2,1
   11ad0:	109ebd04 	addi	r2,r2,31476
   11ad4:	200891ba 	slli	r4,r4,6
   11ad8:	1105883a 	add	r2,r2,r4
   11adc:	10800904 	addi	r2,r2,36
   11ae0:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
   11ae4:	e0fffe0f 	ldh	r3,-8(fp)
   11ae8:	00800074 	movhi	r2,1
   11aec:	109ebd04 	addi	r2,r2,31476
   11af0:	180691ba 	slli	r3,r3,6
   11af4:	10c5883a 	add	r2,r2,r3
   11af8:	10800904 	addi	r2,r2,36
   11afc:	10c00017 	ldw	r3,0(r2)
   11b00:	e13ffe0f 	ldh	r4,-8(fp)
   11b04:	00800074 	movhi	r2,1
   11b08:	109ebd04 	addi	r2,r2,31476
   11b0c:	200891ba 	slli	r4,r4,6
   11b10:	1105883a 	add	r2,r2,r4
   11b14:	10800604 	addi	r2,r2,24
   11b18:	10800017 	ldw	r2,0(r2)
   11b1c:	18801736 	bltu	r3,r2,11b7c <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
   11b20:	e13ffe0f 	ldh	r4,-8(fp)
   11b24:	e0fffe0f 	ldh	r3,-8(fp)
   11b28:	00800074 	movhi	r2,1
   11b2c:	109ebd04 	addi	r2,r2,31476
   11b30:	180691ba 	slli	r3,r3,6
   11b34:	10c5883a 	add	r2,r2,r3
   11b38:	10800604 	addi	r2,r2,24
   11b3c:	10800017 	ldw	r2,0(r2)
   11b40:	10c00044 	addi	r3,r2,1
   11b44:	00800074 	movhi	r2,1
   11b48:	109ebd04 	addi	r2,r2,31476
   11b4c:	200891ba 	slli	r4,r4,6
   11b50:	1105883a 	add	r2,r2,r4
   11b54:	10800604 	addi	r2,r2,24
   11b58:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
   11b5c:	e0fffe0f 	ldh	r3,-8(fp)
   11b60:	00800074 	movhi	r2,1
   11b64:	109ebd04 	addi	r2,r2,31476
   11b68:	180691ba 	slli	r3,r3,6
   11b6c:	10c5883a 	add	r2,r2,r3
   11b70:	10800e04 	addi	r2,r2,56
   11b74:	00c00044 	movi	r3,1
   11b78:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
   11b7c:	00800044 	movi	r2,1
   11b80:	d0a70e15 	stw	r2,-25544(gp)
			result = true;
   11b84:	00800044 	movi	r2,1
   11b88:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
   11b8c:	e0bffa17 	ldw	r2,-24(fp)
}
   11b90:	e037883a 	mov	sp,fp
   11b94:	dfc00117 	ldw	ra,4(sp)
   11b98:	df000017 	ldw	fp,0(sp)
   11b9c:	dec00204 	addi	sp,sp,8
   11ba0:	f800283a 	ret

00011ba4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
   11ba4:	defffb04 	addi	sp,sp,-20
   11ba8:	dfc00415 	stw	ra,16(sp)
   11bac:	df000315 	stw	fp,12(sp)
   11bb0:	df000304 	addi	fp,sp,12
   11bb4:	2005883a 	mov	r2,r4
   11bb8:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
   11bbc:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
   11bc0:	00107c80 	call	107c8 <alt_up_sd_card_is_Present>
   11bc4:	10006026 	beq	r2,zero,11d48 <alt_up_sd_card_fclose+0x1a4>
   11bc8:	d0a70417 	ldw	r2,-25584(gp)
   11bcc:	10005e26 	beq	r2,zero,11d48 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
   11bd0:	e0ffff0f 	ldh	r3,-4(fp)
   11bd4:	00800074 	movhi	r2,1
   11bd8:	109ebd04 	addi	r2,r2,31476
   11bdc:	180691ba 	slli	r3,r3,6
   11be0:	10c5883a 	add	r2,r2,r3
   11be4:	10800f04 	addi	r2,r2,60
   11be8:	10800017 	ldw	r2,0(r2)
   11bec:	10005626 	beq	r2,zero,11d48 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
   11bf0:	e0ffff0f 	ldh	r3,-4(fp)
   11bf4:	00800074 	movhi	r2,1
   11bf8:	109ebd04 	addi	r2,r2,31476
   11bfc:	180691ba 	slli	r3,r3,6
   11c00:	10c5883a 	add	r2,r2,r3
   11c04:	10800e04 	addi	r2,r2,56
   11c08:	10800017 	ldw	r2,0(r2)
   11c0c:	10004526 	beq	r2,zero,11d24 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
   11c10:	e0ffff0f 	ldh	r3,-4(fp)
   11c14:	00800074 	movhi	r2,1
   11c18:	109ebd04 	addi	r2,r2,31476
   11c1c:	180691ba 	slli	r3,r3,6
   11c20:	10c5883a 	add	r2,r2,r3
   11c24:	10800b04 	addi	r2,r2,44
   11c28:	10800017 	ldw	r2,0(r2)
   11c2c:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
   11c30:	e0ffff0f 	ldh	r3,-4(fp)
   11c34:	00800074 	movhi	r2,1
   11c38:	109ebd04 	addi	r2,r2,31476
   11c3c:	180691ba 	slli	r3,r3,6
   11c40:	10c5883a 	add	r2,r2,r3
   11c44:	10800a04 	addi	r2,r2,40
   11c48:	10800017 	ldw	r2,0(r2)
   11c4c:	1000071e 	bne	r2,zero,11c6c <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
   11c50:	00800074 	movhi	r2,1
   11c54:	109ea804 	addi	r2,r2,31392
   11c58:	10801317 	ldw	r2,76(r2)
   11c5c:	e0fffe17 	ldw	r3,-8(fp)
   11c60:	1885883a 	add	r2,r3,r2
   11c64:	e0bffe15 	stw	r2,-8(fp)
   11c68:	00001406 	br	11cbc <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   11c6c:	00800074 	movhi	r2,1
   11c70:	109ea804 	addi	r2,r2,31392
   11c74:	10c01417 	ldw	r3,80(r2)
   11c78:	e0bffe17 	ldw	r2,-8(fp)
   11c7c:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
   11c80:	e13fff0f 	ldh	r4,-4(fp)
   11c84:	00800074 	movhi	r2,1
   11c88:	109ebd04 	addi	r2,r2,31476
   11c8c:	200891ba 	slli	r4,r4,6
   11c90:	1105883a 	add	r2,r2,r4
   11c94:	10800a04 	addi	r2,r2,40
   11c98:	10800017 	ldw	r2,0(r2)
   11c9c:	113fff84 	addi	r4,r2,-2
   11ca0:	00800074 	movhi	r2,1
   11ca4:	109ea804 	addi	r2,r2,31392
   11ca8:	10800383 	ldbu	r2,14(r2)
   11cac:	10803fcc 	andi	r2,r2,255
   11cb0:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
   11cb4:	1885883a 	add	r2,r3,r2
   11cb8:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
   11cbc:	e0bffe17 	ldw	r2,-8(fp)
   11cc0:	d0e70b17 	ldw	r3,-25556(gp)
   11cc4:	180b883a 	mov	r5,r3
   11cc8:	1009883a 	mov	r4,r2
   11ccc:	000db980 	call	db98 <Read_Sector_Data>
   11cd0:	10001426 	beq	r2,zero,11d24 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
   11cd4:	e0ffff0f 	ldh	r3,-4(fp)
   11cd8:	00800074 	movhi	r2,1
   11cdc:	109ebd04 	addi	r2,r2,31476
   11ce0:	180691ba 	slli	r3,r3,6
   11ce4:	10c5883a 	add	r2,r2,r3
   11ce8:	10800c04 	addi	r2,r2,48
   11cec:	1080000b 	ldhu	r2,0(r2)
   11cf0:	113fffcc 	andi	r4,r2,65535
   11cf4:	2120001c 	xori	r4,r4,32768
   11cf8:	21200004 	addi	r4,r4,-32768
   11cfc:	e0bfff0f 	ldh	r2,-4(fp)
   11d00:	100691ba 	slli	r3,r2,6
   11d04:	00800074 	movhi	r2,1
   11d08:	109ebd04 	addi	r2,r2,31476
   11d0c:	1885883a 	add	r2,r3,r2
   11d10:	100b883a 	mov	r5,r2
   11d14:	000e2240 	call	e224 <Write_File_Record_At_Offset>
   11d18:	10000226 	beq	r2,zero,11d24 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
   11d1c:	000db4c0 	call	db4c <Save_Modified_Sector>
   11d20:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
   11d24:	e0ffff0f 	ldh	r3,-4(fp)
   11d28:	00800074 	movhi	r2,1
   11d2c:	109ebd04 	addi	r2,r2,31476
   11d30:	180691ba 	slli	r3,r3,6
   11d34:	10c5883a 	add	r2,r2,r3
   11d38:	10800f04 	addi	r2,r2,60
   11d3c:	10000015 	stw	zero,0(r2)
			result = true;
   11d40:	00800044 	movi	r2,1
   11d44:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
   11d48:	e0bffd17 	ldw	r2,-12(fp)
}
   11d4c:	e037883a 	mov	sp,fp
   11d50:	dfc00117 	ldw	ra,4(sp)
   11d54:	df000017 	ldw	fp,0(sp)
   11d58:	dec00204 	addi	sp,sp,8
   11d5c:	f800283a 	ret

00011d60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11d60:	defffa04 	addi	sp,sp,-24
   11d64:	dfc00515 	stw	ra,20(sp)
   11d68:	df000415 	stw	fp,16(sp)
   11d6c:	df000404 	addi	fp,sp,16
   11d70:	e13ffd15 	stw	r4,-12(fp)
   11d74:	e17ffe15 	stw	r5,-8(fp)
   11d78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11d7c:	e0bffd17 	ldw	r2,-12(fp)
   11d80:	10800017 	ldw	r2,0(r2)
   11d84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11d88:	e0bffc17 	ldw	r2,-16(fp)
   11d8c:	10c00a04 	addi	r3,r2,40
   11d90:	e0bffd17 	ldw	r2,-12(fp)
   11d94:	10800217 	ldw	r2,8(r2)
   11d98:	100f883a 	mov	r7,r2
   11d9c:	e1bfff17 	ldw	r6,-4(fp)
   11da0:	e17ffe17 	ldw	r5,-8(fp)
   11da4:	1809883a 	mov	r4,r3
   11da8:	00123800 	call	12380 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   11dac:	e037883a 	mov	sp,fp
   11db0:	dfc00117 	ldw	ra,4(sp)
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00204 	addi	sp,sp,8
   11dbc:	f800283a 	ret

00011dc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   11dc0:	defffa04 	addi	sp,sp,-24
   11dc4:	dfc00515 	stw	ra,20(sp)
   11dc8:	df000415 	stw	fp,16(sp)
   11dcc:	df000404 	addi	fp,sp,16
   11dd0:	e13ffd15 	stw	r4,-12(fp)
   11dd4:	e17ffe15 	stw	r5,-8(fp)
   11dd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10800017 	ldw	r2,0(r2)
   11de4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   11de8:	e0bffc17 	ldw	r2,-16(fp)
   11dec:	10c00a04 	addi	r3,r2,40
   11df0:	e0bffd17 	ldw	r2,-12(fp)
   11df4:	10800217 	ldw	r2,8(r2)
   11df8:	100f883a 	mov	r7,r2
   11dfc:	e1bfff17 	ldw	r6,-4(fp)
   11e00:	e17ffe17 	ldw	r5,-8(fp)
   11e04:	1809883a 	mov	r4,r3
   11e08:	001259c0 	call	1259c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   11e0c:	e037883a 	mov	sp,fp
   11e10:	dfc00117 	ldw	ra,4(sp)
   11e14:	df000017 	ldw	fp,0(sp)
   11e18:	dec00204 	addi	sp,sp,8
   11e1c:	f800283a 	ret

00011e20 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11e20:	defffc04 	addi	sp,sp,-16
   11e24:	dfc00315 	stw	ra,12(sp)
   11e28:	df000215 	stw	fp,8(sp)
   11e2c:	df000204 	addi	fp,sp,8
   11e30:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11e34:	e0bfff17 	ldw	r2,-4(fp)
   11e38:	10800017 	ldw	r2,0(r2)
   11e3c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11e40:	e0bffe17 	ldw	r2,-8(fp)
   11e44:	10c00a04 	addi	r3,r2,40
   11e48:	e0bfff17 	ldw	r2,-4(fp)
   11e4c:	10800217 	ldw	r2,8(r2)
   11e50:	100b883a 	mov	r5,r2
   11e54:	1809883a 	mov	r4,r3
   11e58:	00122280 	call	12228 <altera_avalon_jtag_uart_close>
}
   11e5c:	e037883a 	mov	sp,fp
   11e60:	dfc00117 	ldw	ra,4(sp)
   11e64:	df000017 	ldw	fp,0(sp)
   11e68:	dec00204 	addi	sp,sp,8
   11e6c:	f800283a 	ret

00011e70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11e70:	defffa04 	addi	sp,sp,-24
   11e74:	dfc00515 	stw	ra,20(sp)
   11e78:	df000415 	stw	fp,16(sp)
   11e7c:	df000404 	addi	fp,sp,16
   11e80:	e13ffd15 	stw	r4,-12(fp)
   11e84:	e17ffe15 	stw	r5,-8(fp)
   11e88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11e8c:	e0bffd17 	ldw	r2,-12(fp)
   11e90:	10800017 	ldw	r2,0(r2)
   11e94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11e98:	e0bffc17 	ldw	r2,-16(fp)
   11e9c:	10800a04 	addi	r2,r2,40
   11ea0:	e1bfff17 	ldw	r6,-4(fp)
   11ea4:	e17ffe17 	ldw	r5,-8(fp)
   11ea8:	1009883a 	mov	r4,r2
   11eac:	00122900 	call	12290 <altera_avalon_jtag_uart_ioctl>
}
   11eb0:	e037883a 	mov	sp,fp
   11eb4:	dfc00117 	ldw	ra,4(sp)
   11eb8:	df000017 	ldw	fp,0(sp)
   11ebc:	dec00204 	addi	sp,sp,8
   11ec0:	f800283a 	ret

00011ec4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   11ec4:	defffb04 	addi	sp,sp,-20
   11ec8:	dfc00415 	stw	ra,16(sp)
   11ecc:	df000315 	stw	fp,12(sp)
   11ed0:	df000304 	addi	fp,sp,12
   11ed4:	e13ffd15 	stw	r4,-12(fp)
   11ed8:	e17ffe15 	stw	r5,-8(fp)
   11edc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11ee0:	e0bffd17 	ldw	r2,-12(fp)
   11ee4:	00c00044 	movi	r3,1
   11ee8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   11eec:	e0bffd17 	ldw	r2,-12(fp)
   11ef0:	10800017 	ldw	r2,0(r2)
   11ef4:	10800104 	addi	r2,r2,4
   11ef8:	1007883a 	mov	r3,r2
   11efc:	e0bffd17 	ldw	r2,-12(fp)
   11f00:	10800817 	ldw	r2,32(r2)
   11f04:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   11f08:	e0bfff17 	ldw	r2,-4(fp)
   11f0c:	01800074 	movhi	r6,1
   11f10:	3187de04 	addi	r6,r6,8056
   11f14:	e17ffd17 	ldw	r5,-12(fp)
   11f18:	1009883a 	mov	r4,r2
   11f1c:	00132940 	call	13294 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   11f20:	e0bffd17 	ldw	r2,-12(fp)
   11f24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11f28:	e0bffd17 	ldw	r2,-12(fp)
   11f2c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11f30:	d0e71117 	ldw	r3,-25532(gp)
   11f34:	e1fffd17 	ldw	r7,-12(fp)
   11f38:	01800074 	movhi	r6,1
   11f3c:	31886204 	addi	r6,r6,8584
   11f40:	180b883a 	mov	r5,r3
   11f44:	1009883a 	mov	r4,r2
   11f48:	0012da40 	call	12da4 <alt_alarm_start>
   11f4c:	1000040e 	bge	r2,zero,11f60 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11f50:	e0fffd17 	ldw	r3,-12(fp)
   11f54:	00a00034 	movhi	r2,32768
   11f58:	10bfffc4 	addi	r2,r2,-1
   11f5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11f60:	0001883a 	nop
   11f64:	e037883a 	mov	sp,fp
   11f68:	dfc00117 	ldw	ra,4(sp)
   11f6c:	df000017 	ldw	fp,0(sp)
   11f70:	dec00204 	addi	sp,sp,8
   11f74:	f800283a 	ret

00011f78 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11f78:	defff704 	addi	sp,sp,-36
   11f7c:	df000815 	stw	fp,32(sp)
   11f80:	df000804 	addi	fp,sp,32
   11f84:	e13ffe15 	stw	r4,-8(fp)
   11f88:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11f8c:	e0bffe17 	ldw	r2,-8(fp)
   11f90:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   11f94:	e0bffa17 	ldw	r2,-24(fp)
   11f98:	10800017 	ldw	r2,0(r2)
   11f9c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11fa0:	e0bffb17 	ldw	r2,-20(fp)
   11fa4:	10800104 	addi	r2,r2,4
   11fa8:	10800037 	ldwio	r2,0(r2)
   11fac:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   11fb0:	e0bffc17 	ldw	r2,-16(fp)
   11fb4:	1080c00c 	andi	r2,r2,768
   11fb8:	10006d26 	beq	r2,zero,12170 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   11fbc:	e0bffc17 	ldw	r2,-16(fp)
   11fc0:	1080400c 	andi	r2,r2,256
   11fc4:	10003526 	beq	r2,zero,1209c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   11fc8:	00800074 	movhi	r2,1
   11fcc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11fd0:	e0bffa17 	ldw	r2,-24(fp)
   11fd4:	10800a17 	ldw	r2,40(r2)
   11fd8:	10800044 	addi	r2,r2,1
   11fdc:	1081ffcc 	andi	r2,r2,2047
   11fe0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   11fe4:	e0bffa17 	ldw	r2,-24(fp)
   11fe8:	10c00b17 	ldw	r3,44(r2)
   11fec:	e0bffd17 	ldw	r2,-12(fp)
   11ff0:	18801526 	beq	r3,r2,12048 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11ff4:	e0bffb17 	ldw	r2,-20(fp)
   11ff8:	10800037 	ldwio	r2,0(r2)
   11ffc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12000:	e0bff817 	ldw	r2,-32(fp)
   12004:	10a0000c 	andi	r2,r2,32768
   12008:	10001126 	beq	r2,zero,12050 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1200c:	e0bffa17 	ldw	r2,-24(fp)
   12010:	10800a17 	ldw	r2,40(r2)
   12014:	e0fff817 	ldw	r3,-32(fp)
   12018:	1809883a 	mov	r4,r3
   1201c:	e0fffa17 	ldw	r3,-24(fp)
   12020:	1885883a 	add	r2,r3,r2
   12024:	10800e04 	addi	r2,r2,56
   12028:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1202c:	e0bffa17 	ldw	r2,-24(fp)
   12030:	10800a17 	ldw	r2,40(r2)
   12034:	10800044 	addi	r2,r2,1
   12038:	10c1ffcc 	andi	r3,r2,2047
   1203c:	e0bffa17 	ldw	r2,-24(fp)
   12040:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12044:	003fe206 	br	11fd0 <__alt_data_end+0xf8011fd0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   12048:	0001883a 	nop
   1204c:	00000106 	br	12054 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   12050:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12054:	e0bff817 	ldw	r2,-32(fp)
   12058:	10bfffec 	andhi	r2,r2,65535
   1205c:	10000f26 	beq	r2,zero,1209c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12060:	e0bffa17 	ldw	r2,-24(fp)
   12064:	10c00817 	ldw	r3,32(r2)
   12068:	00bfff84 	movi	r2,-2
   1206c:	1886703a 	and	r3,r3,r2
   12070:	e0bffa17 	ldw	r2,-24(fp)
   12074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12078:	e0bffb17 	ldw	r2,-20(fp)
   1207c:	10800104 	addi	r2,r2,4
   12080:	1007883a 	mov	r3,r2
   12084:	e0bffa17 	ldw	r2,-24(fp)
   12088:	10800817 	ldw	r2,32(r2)
   1208c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12090:	e0bffb17 	ldw	r2,-20(fp)
   12094:	10800104 	addi	r2,r2,4
   12098:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1209c:	e0bffc17 	ldw	r2,-16(fp)
   120a0:	1080800c 	andi	r2,r2,512
   120a4:	103fbe26 	beq	r2,zero,11fa0 <__alt_data_end+0xf8011fa0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   120a8:	e0bffc17 	ldw	r2,-16(fp)
   120ac:	1004d43a 	srli	r2,r2,16
   120b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   120b4:	00001406 	br	12108 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   120b8:	e0bffb17 	ldw	r2,-20(fp)
   120bc:	e0fffa17 	ldw	r3,-24(fp)
   120c0:	18c00d17 	ldw	r3,52(r3)
   120c4:	e13ffa17 	ldw	r4,-24(fp)
   120c8:	20c7883a 	add	r3,r4,r3
   120cc:	18c20e04 	addi	r3,r3,2104
   120d0:	18c00003 	ldbu	r3,0(r3)
   120d4:	18c03fcc 	andi	r3,r3,255
   120d8:	18c0201c 	xori	r3,r3,128
   120dc:	18ffe004 	addi	r3,r3,-128
   120e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   120e4:	e0bffa17 	ldw	r2,-24(fp)
   120e8:	10800d17 	ldw	r2,52(r2)
   120ec:	10800044 	addi	r2,r2,1
   120f0:	10c1ffcc 	andi	r3,r2,2047
   120f4:	e0bffa17 	ldw	r2,-24(fp)
   120f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   120fc:	e0bff917 	ldw	r2,-28(fp)
   12100:	10bfffc4 	addi	r2,r2,-1
   12104:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12108:	e0bff917 	ldw	r2,-28(fp)
   1210c:	10000526 	beq	r2,zero,12124 <altera_avalon_jtag_uart_irq+0x1ac>
   12110:	e0bffa17 	ldw	r2,-24(fp)
   12114:	10c00d17 	ldw	r3,52(r2)
   12118:	e0bffa17 	ldw	r2,-24(fp)
   1211c:	10800c17 	ldw	r2,48(r2)
   12120:	18bfe51e 	bne	r3,r2,120b8 <__alt_data_end+0xf80120b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12124:	e0bff917 	ldw	r2,-28(fp)
   12128:	103f9d26 	beq	r2,zero,11fa0 <__alt_data_end+0xf8011fa0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1212c:	e0bffa17 	ldw	r2,-24(fp)
   12130:	10c00817 	ldw	r3,32(r2)
   12134:	00bfff44 	movi	r2,-3
   12138:	1886703a 	and	r3,r3,r2
   1213c:	e0bffa17 	ldw	r2,-24(fp)
   12140:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12144:	e0bffa17 	ldw	r2,-24(fp)
   12148:	10800017 	ldw	r2,0(r2)
   1214c:	10800104 	addi	r2,r2,4
   12150:	1007883a 	mov	r3,r2
   12154:	e0bffa17 	ldw	r2,-24(fp)
   12158:	10800817 	ldw	r2,32(r2)
   1215c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12160:	e0bffb17 	ldw	r2,-20(fp)
   12164:	10800104 	addi	r2,r2,4
   12168:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1216c:	003f8c06 	br	11fa0 <__alt_data_end+0xf8011fa0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   12170:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   12174:	0001883a 	nop
   12178:	e037883a 	mov	sp,fp
   1217c:	df000017 	ldw	fp,0(sp)
   12180:	dec00104 	addi	sp,sp,4
   12184:	f800283a 	ret

00012188 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12188:	defff804 	addi	sp,sp,-32
   1218c:	df000715 	stw	fp,28(sp)
   12190:	df000704 	addi	fp,sp,28
   12194:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12198:	e0bffb17 	ldw	r2,-20(fp)
   1219c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   121a0:	e0bff917 	ldw	r2,-28(fp)
   121a4:	10800017 	ldw	r2,0(r2)
   121a8:	10800104 	addi	r2,r2,4
   121ac:	10800037 	ldwio	r2,0(r2)
   121b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   121b4:	e0bffa17 	ldw	r2,-24(fp)
   121b8:	1081000c 	andi	r2,r2,1024
   121bc:	10000b26 	beq	r2,zero,121ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   121c0:	e0bff917 	ldw	r2,-28(fp)
   121c4:	10800017 	ldw	r2,0(r2)
   121c8:	10800104 	addi	r2,r2,4
   121cc:	1007883a 	mov	r3,r2
   121d0:	e0bff917 	ldw	r2,-28(fp)
   121d4:	10800817 	ldw	r2,32(r2)
   121d8:	10810014 	ori	r2,r2,1024
   121dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   121e0:	e0bff917 	ldw	r2,-28(fp)
   121e4:	10000915 	stw	zero,36(r2)
   121e8:	00000a06 	br	12214 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   121ec:	e0bff917 	ldw	r2,-28(fp)
   121f0:	10c00917 	ldw	r3,36(r2)
   121f4:	00a00034 	movhi	r2,32768
   121f8:	10bfff04 	addi	r2,r2,-4
   121fc:	10c00536 	bltu	r2,r3,12214 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   12200:	e0bff917 	ldw	r2,-28(fp)
   12204:	10800917 	ldw	r2,36(r2)
   12208:	10c00044 	addi	r3,r2,1
   1220c:	e0bff917 	ldw	r2,-28(fp)
   12210:	10c00915 	stw	r3,36(r2)
   12214:	d0a71117 	ldw	r2,-25532(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12218:	e037883a 	mov	sp,fp
   1221c:	df000017 	ldw	fp,0(sp)
   12220:	dec00104 	addi	sp,sp,4
   12224:	f800283a 	ret

00012228 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12228:	defffd04 	addi	sp,sp,-12
   1222c:	df000215 	stw	fp,8(sp)
   12230:	df000204 	addi	fp,sp,8
   12234:	e13ffe15 	stw	r4,-8(fp)
   12238:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1223c:	00000506 	br	12254 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   12240:	e0bfff17 	ldw	r2,-4(fp)
   12244:	1090000c 	andi	r2,r2,16384
   12248:	10000226 	beq	r2,zero,12254 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1224c:	00bffd44 	movi	r2,-11
   12250:	00000b06 	br	12280 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12254:	e0bffe17 	ldw	r2,-8(fp)
   12258:	10c00d17 	ldw	r3,52(r2)
   1225c:	e0bffe17 	ldw	r2,-8(fp)
   12260:	10800c17 	ldw	r2,48(r2)
   12264:	18800526 	beq	r3,r2,1227c <altera_avalon_jtag_uart_close+0x54>
   12268:	e0bffe17 	ldw	r2,-8(fp)
   1226c:	10c00917 	ldw	r3,36(r2)
   12270:	e0bffe17 	ldw	r2,-8(fp)
   12274:	10800117 	ldw	r2,4(r2)
   12278:	18bff136 	bltu	r3,r2,12240 <__alt_data_end+0xf8012240>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1227c:	0005883a 	mov	r2,zero
}
   12280:	e037883a 	mov	sp,fp
   12284:	df000017 	ldw	fp,0(sp)
   12288:	dec00104 	addi	sp,sp,4
   1228c:	f800283a 	ret

00012290 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12290:	defffa04 	addi	sp,sp,-24
   12294:	df000515 	stw	fp,20(sp)
   12298:	df000504 	addi	fp,sp,20
   1229c:	e13ffd15 	stw	r4,-12(fp)
   122a0:	e17ffe15 	stw	r5,-8(fp)
   122a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   122a8:	00bff9c4 	movi	r2,-25
   122ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   122b0:	e0bffe17 	ldw	r2,-8(fp)
   122b4:	10da8060 	cmpeqi	r3,r2,27137
   122b8:	1800031e 	bne	r3,zero,122c8 <altera_avalon_jtag_uart_ioctl+0x38>
   122bc:	109a80a0 	cmpeqi	r2,r2,27138
   122c0:	1000181e 	bne	r2,zero,12324 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   122c4:	00002906 	br	1236c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   122c8:	e0bffd17 	ldw	r2,-12(fp)
   122cc:	10c00117 	ldw	r3,4(r2)
   122d0:	00a00034 	movhi	r2,32768
   122d4:	10bfffc4 	addi	r2,r2,-1
   122d8:	18802126 	beq	r3,r2,12360 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   122dc:	e0bfff17 	ldw	r2,-4(fp)
   122e0:	10800017 	ldw	r2,0(r2)
   122e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   122e8:	e0bffc17 	ldw	r2,-16(fp)
   122ec:	10800090 	cmplti	r2,r2,2
   122f0:	1000061e 	bne	r2,zero,1230c <altera_avalon_jtag_uart_ioctl+0x7c>
   122f4:	e0fffc17 	ldw	r3,-16(fp)
   122f8:	00a00034 	movhi	r2,32768
   122fc:	10bfffc4 	addi	r2,r2,-1
   12300:	18800226 	beq	r3,r2,1230c <altera_avalon_jtag_uart_ioctl+0x7c>
   12304:	e0bffc17 	ldw	r2,-16(fp)
   12308:	00000206 	br	12314 <altera_avalon_jtag_uart_ioctl+0x84>
   1230c:	00a00034 	movhi	r2,32768
   12310:	10bfff84 	addi	r2,r2,-2
   12314:	e0fffd17 	ldw	r3,-12(fp)
   12318:	18800115 	stw	r2,4(r3)
      rc = 0;
   1231c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   12320:	00000f06 	br	12360 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12324:	e0bffd17 	ldw	r2,-12(fp)
   12328:	10c00117 	ldw	r3,4(r2)
   1232c:	00a00034 	movhi	r2,32768
   12330:	10bfffc4 	addi	r2,r2,-1
   12334:	18800c26 	beq	r3,r2,12368 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12338:	e0bffd17 	ldw	r2,-12(fp)
   1233c:	10c00917 	ldw	r3,36(r2)
   12340:	e0bffd17 	ldw	r2,-12(fp)
   12344:	10800117 	ldw	r2,4(r2)
   12348:	1885803a 	cmpltu	r2,r3,r2
   1234c:	10c03fcc 	andi	r3,r2,255
   12350:	e0bfff17 	ldw	r2,-4(fp)
   12354:	10c00015 	stw	r3,0(r2)
      rc = 0;
   12358:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1235c:	00000206 	br	12368 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   12360:	0001883a 	nop
   12364:	00000106 	br	1236c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   12368:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1236c:	e0bffb17 	ldw	r2,-20(fp)
}
   12370:	e037883a 	mov	sp,fp
   12374:	df000017 	ldw	fp,0(sp)
   12378:	dec00104 	addi	sp,sp,4
   1237c:	f800283a 	ret

00012380 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12380:	defff304 	addi	sp,sp,-52
   12384:	dfc00c15 	stw	ra,48(sp)
   12388:	df000b15 	stw	fp,44(sp)
   1238c:	df000b04 	addi	fp,sp,44
   12390:	e13ffc15 	stw	r4,-16(fp)
   12394:	e17ffd15 	stw	r5,-12(fp)
   12398:	e1bffe15 	stw	r6,-8(fp)
   1239c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   123a0:	e0bffd17 	ldw	r2,-12(fp)
   123a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   123a8:	00004706 	br	124c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   123ac:	e0bffc17 	ldw	r2,-16(fp)
   123b0:	10800a17 	ldw	r2,40(r2)
   123b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   123b8:	e0bffc17 	ldw	r2,-16(fp)
   123bc:	10800b17 	ldw	r2,44(r2)
   123c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   123c4:	e0fff717 	ldw	r3,-36(fp)
   123c8:	e0bff817 	ldw	r2,-32(fp)
   123cc:	18800536 	bltu	r3,r2,123e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   123d0:	e0fff717 	ldw	r3,-36(fp)
   123d4:	e0bff817 	ldw	r2,-32(fp)
   123d8:	1885c83a 	sub	r2,r3,r2
   123dc:	e0bff615 	stw	r2,-40(fp)
   123e0:	00000406 	br	123f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   123e4:	00c20004 	movi	r3,2048
   123e8:	e0bff817 	ldw	r2,-32(fp)
   123ec:	1885c83a 	sub	r2,r3,r2
   123f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   123f4:	e0bff617 	ldw	r2,-40(fp)
   123f8:	10001e26 	beq	r2,zero,12474 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   123fc:	e0fffe17 	ldw	r3,-8(fp)
   12400:	e0bff617 	ldw	r2,-40(fp)
   12404:	1880022e 	bgeu	r3,r2,12410 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   12408:	e0bffe17 	ldw	r2,-8(fp)
   1240c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12410:	e0bffc17 	ldw	r2,-16(fp)
   12414:	10c00e04 	addi	r3,r2,56
   12418:	e0bff817 	ldw	r2,-32(fp)
   1241c:	1885883a 	add	r2,r3,r2
   12420:	e1bff617 	ldw	r6,-40(fp)
   12424:	100b883a 	mov	r5,r2
   12428:	e13ff517 	ldw	r4,-44(fp)
   1242c:	000624c0 	call	624c <memcpy>
      ptr   += n;
   12430:	e0fff517 	ldw	r3,-44(fp)
   12434:	e0bff617 	ldw	r2,-40(fp)
   12438:	1885883a 	add	r2,r3,r2
   1243c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   12440:	e0fffe17 	ldw	r3,-8(fp)
   12444:	e0bff617 	ldw	r2,-40(fp)
   12448:	1885c83a 	sub	r2,r3,r2
   1244c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12450:	e0fff817 	ldw	r3,-32(fp)
   12454:	e0bff617 	ldw	r2,-40(fp)
   12458:	1885883a 	add	r2,r3,r2
   1245c:	10c1ffcc 	andi	r3,r2,2047
   12460:	e0bffc17 	ldw	r2,-16(fp)
   12464:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12468:	e0bffe17 	ldw	r2,-8(fp)
   1246c:	00bfcf16 	blt	zero,r2,123ac <__alt_data_end+0xf80123ac>
   12470:	00000106 	br	12478 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   12474:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   12478:	e0fff517 	ldw	r3,-44(fp)
   1247c:	e0bffd17 	ldw	r2,-12(fp)
   12480:	1880141e 	bne	r3,r2,124d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12484:	e0bfff17 	ldw	r2,-4(fp)
   12488:	1090000c 	andi	r2,r2,16384
   1248c:	1000131e 	bne	r2,zero,124dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12490:	0001883a 	nop
   12494:	e0bffc17 	ldw	r2,-16(fp)
   12498:	10c00a17 	ldw	r3,40(r2)
   1249c:	e0bff717 	ldw	r2,-36(fp)
   124a0:	1880051e 	bne	r3,r2,124b8 <altera_avalon_jtag_uart_read+0x138>
   124a4:	e0bffc17 	ldw	r2,-16(fp)
   124a8:	10c00917 	ldw	r3,36(r2)
   124ac:	e0bffc17 	ldw	r2,-16(fp)
   124b0:	10800117 	ldw	r2,4(r2)
   124b4:	18bff736 	bltu	r3,r2,12494 <__alt_data_end+0xf8012494>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   124b8:	e0bffc17 	ldw	r2,-16(fp)
   124bc:	10c00a17 	ldw	r3,40(r2)
   124c0:	e0bff717 	ldw	r2,-36(fp)
   124c4:	18800726 	beq	r3,r2,124e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   124c8:	e0bffe17 	ldw	r2,-8(fp)
   124cc:	00bfb716 	blt	zero,r2,123ac <__alt_data_end+0xf80123ac>
   124d0:	00000506 	br	124e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   124d4:	0001883a 	nop
   124d8:	00000306 	br	124e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   124dc:	0001883a 	nop
   124e0:	00000106 	br	124e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   124e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   124e8:	e0fff517 	ldw	r3,-44(fp)
   124ec:	e0bffd17 	ldw	r2,-12(fp)
   124f0:	18801826 	beq	r3,r2,12554 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124f4:	0005303a 	rdctl	r2,status
   124f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124fc:	e0fffb17 	ldw	r3,-20(fp)
   12500:	00bfff84 	movi	r2,-2
   12504:	1884703a 	and	r2,r3,r2
   12508:	1001703a 	wrctl	status,r2
  
  return context;
   1250c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12510:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12514:	e0bffc17 	ldw	r2,-16(fp)
   12518:	10800817 	ldw	r2,32(r2)
   1251c:	10c00054 	ori	r3,r2,1
   12520:	e0bffc17 	ldw	r2,-16(fp)
   12524:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12528:	e0bffc17 	ldw	r2,-16(fp)
   1252c:	10800017 	ldw	r2,0(r2)
   12530:	10800104 	addi	r2,r2,4
   12534:	1007883a 	mov	r3,r2
   12538:	e0bffc17 	ldw	r2,-16(fp)
   1253c:	10800817 	ldw	r2,32(r2)
   12540:	18800035 	stwio	r2,0(r3)
   12544:	e0bffa17 	ldw	r2,-24(fp)
   12548:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1254c:	e0bff917 	ldw	r2,-28(fp)
   12550:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12554:	e0fff517 	ldw	r3,-44(fp)
   12558:	e0bffd17 	ldw	r2,-12(fp)
   1255c:	18800426 	beq	r3,r2,12570 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   12560:	e0fff517 	ldw	r3,-44(fp)
   12564:	e0bffd17 	ldw	r2,-12(fp)
   12568:	1885c83a 	sub	r2,r3,r2
   1256c:	00000606 	br	12588 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   12570:	e0bfff17 	ldw	r2,-4(fp)
   12574:	1090000c 	andi	r2,r2,16384
   12578:	10000226 	beq	r2,zero,12584 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1257c:	00bffd44 	movi	r2,-11
   12580:	00000106 	br	12588 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   12584:	00bffec4 	movi	r2,-5
}
   12588:	e037883a 	mov	sp,fp
   1258c:	dfc00117 	ldw	ra,4(sp)
   12590:	df000017 	ldw	fp,0(sp)
   12594:	dec00204 	addi	sp,sp,8
   12598:	f800283a 	ret

0001259c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1259c:	defff304 	addi	sp,sp,-52
   125a0:	dfc00c15 	stw	ra,48(sp)
   125a4:	df000b15 	stw	fp,44(sp)
   125a8:	df000b04 	addi	fp,sp,44
   125ac:	e13ffc15 	stw	r4,-16(fp)
   125b0:	e17ffd15 	stw	r5,-12(fp)
   125b4:	e1bffe15 	stw	r6,-8(fp)
   125b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   125bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   125c0:	e0bffd17 	ldw	r2,-12(fp)
   125c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   125c8:	00003706 	br	126a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   125cc:	e0bffc17 	ldw	r2,-16(fp)
   125d0:	10800c17 	ldw	r2,48(r2)
   125d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   125d8:	e0bffc17 	ldw	r2,-16(fp)
   125dc:	10800d17 	ldw	r2,52(r2)
   125e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   125e4:	e0fff917 	ldw	r3,-28(fp)
   125e8:	e0bff517 	ldw	r2,-44(fp)
   125ec:	1880062e 	bgeu	r3,r2,12608 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   125f0:	e0fff517 	ldw	r3,-44(fp)
   125f4:	e0bff917 	ldw	r2,-28(fp)
   125f8:	1885c83a 	sub	r2,r3,r2
   125fc:	10bfffc4 	addi	r2,r2,-1
   12600:	e0bff615 	stw	r2,-40(fp)
   12604:	00000b06 	br	12634 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   12608:	e0bff517 	ldw	r2,-44(fp)
   1260c:	10000526 	beq	r2,zero,12624 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12610:	00c20004 	movi	r3,2048
   12614:	e0bff917 	ldw	r2,-28(fp)
   12618:	1885c83a 	sub	r2,r3,r2
   1261c:	e0bff615 	stw	r2,-40(fp)
   12620:	00000406 	br	12634 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12624:	00c1ffc4 	movi	r3,2047
   12628:	e0bff917 	ldw	r2,-28(fp)
   1262c:	1885c83a 	sub	r2,r3,r2
   12630:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   12634:	e0bff617 	ldw	r2,-40(fp)
   12638:	10001e26 	beq	r2,zero,126b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1263c:	e0fffe17 	ldw	r3,-8(fp)
   12640:	e0bff617 	ldw	r2,-40(fp)
   12644:	1880022e 	bgeu	r3,r2,12650 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   12648:	e0bffe17 	ldw	r2,-8(fp)
   1264c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12650:	e0bffc17 	ldw	r2,-16(fp)
   12654:	10c20e04 	addi	r3,r2,2104
   12658:	e0bff917 	ldw	r2,-28(fp)
   1265c:	1885883a 	add	r2,r3,r2
   12660:	e1bff617 	ldw	r6,-40(fp)
   12664:	e17ffd17 	ldw	r5,-12(fp)
   12668:	1009883a 	mov	r4,r2
   1266c:	000624c0 	call	624c <memcpy>
      ptr   += n;
   12670:	e0fffd17 	ldw	r3,-12(fp)
   12674:	e0bff617 	ldw	r2,-40(fp)
   12678:	1885883a 	add	r2,r3,r2
   1267c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   12680:	e0fffe17 	ldw	r3,-8(fp)
   12684:	e0bff617 	ldw	r2,-40(fp)
   12688:	1885c83a 	sub	r2,r3,r2
   1268c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12690:	e0fff917 	ldw	r3,-28(fp)
   12694:	e0bff617 	ldw	r2,-40(fp)
   12698:	1885883a 	add	r2,r3,r2
   1269c:	10c1ffcc 	andi	r3,r2,2047
   126a0:	e0bffc17 	ldw	r2,-16(fp)
   126a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   126a8:	e0bffe17 	ldw	r2,-8(fp)
   126ac:	00bfc716 	blt	zero,r2,125cc <__alt_data_end+0xf80125cc>
   126b0:	00000106 	br	126b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   126b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126b8:	0005303a 	rdctl	r2,status
   126bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126c0:	e0fffb17 	ldw	r3,-20(fp)
   126c4:	00bfff84 	movi	r2,-2
   126c8:	1884703a 	and	r2,r3,r2
   126cc:	1001703a 	wrctl	status,r2
  
  return context;
   126d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   126d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   126d8:	e0bffc17 	ldw	r2,-16(fp)
   126dc:	10800817 	ldw	r2,32(r2)
   126e0:	10c00094 	ori	r3,r2,2
   126e4:	e0bffc17 	ldw	r2,-16(fp)
   126e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   126ec:	e0bffc17 	ldw	r2,-16(fp)
   126f0:	10800017 	ldw	r2,0(r2)
   126f4:	10800104 	addi	r2,r2,4
   126f8:	1007883a 	mov	r3,r2
   126fc:	e0bffc17 	ldw	r2,-16(fp)
   12700:	10800817 	ldw	r2,32(r2)
   12704:	18800035 	stwio	r2,0(r3)
   12708:	e0bffa17 	ldw	r2,-24(fp)
   1270c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12710:	e0bff817 	ldw	r2,-32(fp)
   12714:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12718:	e0bffe17 	ldw	r2,-8(fp)
   1271c:	0080100e 	bge	zero,r2,12760 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   12720:	e0bfff17 	ldw	r2,-4(fp)
   12724:	1090000c 	andi	r2,r2,16384
   12728:	1000101e 	bne	r2,zero,1276c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1272c:	0001883a 	nop
   12730:	e0bffc17 	ldw	r2,-16(fp)
   12734:	10c00d17 	ldw	r3,52(r2)
   12738:	e0bff517 	ldw	r2,-44(fp)
   1273c:	1880051e 	bne	r3,r2,12754 <altera_avalon_jtag_uart_write+0x1b8>
   12740:	e0bffc17 	ldw	r2,-16(fp)
   12744:	10c00917 	ldw	r3,36(r2)
   12748:	e0bffc17 	ldw	r2,-16(fp)
   1274c:	10800117 	ldw	r2,4(r2)
   12750:	18bff736 	bltu	r3,r2,12730 <__alt_data_end+0xf8012730>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   12754:	e0bffc17 	ldw	r2,-16(fp)
   12758:	10800917 	ldw	r2,36(r2)
   1275c:	1000051e 	bne	r2,zero,12774 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   12760:	e0bffe17 	ldw	r2,-8(fp)
   12764:	00bfd016 	blt	zero,r2,126a8 <__alt_data_end+0xf80126a8>
   12768:	00000306 	br	12778 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1276c:	0001883a 	nop
   12770:	00000106 	br	12778 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   12774:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12778:	e0fffd17 	ldw	r3,-12(fp)
   1277c:	e0bff717 	ldw	r2,-36(fp)
   12780:	18800426 	beq	r3,r2,12794 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   12784:	e0fffd17 	ldw	r3,-12(fp)
   12788:	e0bff717 	ldw	r2,-36(fp)
   1278c:	1885c83a 	sub	r2,r3,r2
   12790:	00000606 	br	127ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   12794:	e0bfff17 	ldw	r2,-4(fp)
   12798:	1090000c 	andi	r2,r2,16384
   1279c:	10000226 	beq	r2,zero,127a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   127a0:	00bffd44 	movi	r2,-11
   127a4:	00000106 	br	127ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   127a8:	00bffec4 	movi	r2,-5
}
   127ac:	e037883a 	mov	sp,fp
   127b0:	dfc00117 	ldw	ra,4(sp)
   127b4:	df000017 	ldw	fp,0(sp)
   127b8:	dec00204 	addi	sp,sp,8
   127bc:	f800283a 	ret

000127c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   127c0:	defff904 	addi	sp,sp,-28
   127c4:	dfc00615 	stw	ra,24(sp)
   127c8:	df000515 	stw	fp,20(sp)
   127cc:	df000504 	addi	fp,sp,20
   127d0:	e13ffe15 	stw	r4,-8(fp)
   127d4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   127d8:	0007883a 	mov	r3,zero
   127dc:	e0bffe17 	ldw	r2,-8(fp)
   127e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   127e4:	e0bffe17 	ldw	r2,-8(fp)
   127e8:	10800104 	addi	r2,r2,4
   127ec:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127f0:	0005303a 	rdctl	r2,status
   127f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127f8:	e0fffc17 	ldw	r3,-16(fp)
   127fc:	00bfff84 	movi	r2,-2
   12800:	1884703a 	and	r2,r3,r2
   12804:	1001703a 	wrctl	status,r2
  
  return context;
   12808:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1280c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   12810:	00137040 	call	13704 <alt_tick>
   12814:	e0bffb17 	ldw	r2,-20(fp)
   12818:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1281c:	e0bffd17 	ldw	r2,-12(fp)
   12820:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12824:	0001883a 	nop
   12828:	e037883a 	mov	sp,fp
   1282c:	dfc00117 	ldw	ra,4(sp)
   12830:	df000017 	ldw	fp,0(sp)
   12834:	dec00204 	addi	sp,sp,8
   12838:	f800283a 	ret

0001283c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1283c:	defff904 	addi	sp,sp,-28
   12840:	dfc00615 	stw	ra,24(sp)
   12844:	df000515 	stw	fp,20(sp)
   12848:	df000504 	addi	fp,sp,20
   1284c:	e13ffc15 	stw	r4,-16(fp)
   12850:	e17ffd15 	stw	r5,-12(fp)
   12854:	e1bffe15 	stw	r6,-8(fp)
   12858:	e1ffff15 	stw	r7,-4(fp)
   1285c:	e0bfff17 	ldw	r2,-4(fp)
   12860:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12864:	d0a71117 	ldw	r2,-25532(gp)
   12868:	1000021e 	bne	r2,zero,12874 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1286c:	e0bffb17 	ldw	r2,-20(fp)
   12870:	d0a71115 	stw	r2,-25532(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12874:	e0bffc17 	ldw	r2,-16(fp)
   12878:	10800104 	addi	r2,r2,4
   1287c:	00c001c4 	movi	r3,7
   12880:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   12884:	01800074 	movhi	r6,1
   12888:	3189f004 	addi	r6,r6,10176
   1288c:	e17ffc17 	ldw	r5,-16(fp)
   12890:	e13ffe17 	ldw	r4,-8(fp)
   12894:	00132940 	call	13294 <alt_irq_register>
#endif  
}
   12898:	0001883a 	nop
   1289c:	e037883a 	mov	sp,fp
   128a0:	dfc00117 	ldw	ra,4(sp)
   128a4:	df000017 	ldw	fp,0(sp)
   128a8:	dec00204 	addi	sp,sp,8
   128ac:	f800283a 	ret

000128b0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   128b0:	defffc04 	addi	sp,sp,-16
   128b4:	df000315 	stw	fp,12(sp)
   128b8:	df000304 	addi	fp,sp,12
   128bc:	e13ffe15 	stw	r4,-8(fp)
   128c0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   128c4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   128c8:	e0bfff17 	ldw	r2,-4(fp)
   128cc:	1000061e 	bne	r2,zero,128e8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   128d0:	e0bffe17 	ldw	r2,-8(fp)
   128d4:	1007883a 	mov	r3,r2
   128d8:	e0bffd03 	ldbu	r2,-12(fp)
   128dc:	1884b03a 	or	r2,r3,r2
   128e0:	e0bffd05 	stb	r2,-12(fp)
   128e4:	00000806 	br	12908 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   128e8:	e0bffe17 	ldw	r2,-8(fp)
   128ec:	1007883a 	mov	r3,r2
   128f0:	e0bffd03 	ldbu	r2,-12(fp)
   128f4:	1884b03a 	or	r2,r3,r2
   128f8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   128fc:	e0bffd03 	ldbu	r2,-12(fp)
   12900:	10801014 	ori	r2,r2,64
   12904:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   12908:	e0fffd03 	ldbu	r3,-12(fp)
   1290c:	00bfe004 	movi	r2,-128
   12910:	1884b03a 	or	r2,r3,r2
}
   12914:	e037883a 	mov	sp,fp
   12918:	df000017 	ldw	fp,0(sp)
   1291c:	dec00104 	addi	sp,sp,4
   12920:	f800283a 	ret

00012924 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   12924:	defffd04 	addi	sp,sp,-12
   12928:	df000215 	stw	fp,8(sp)
   1292c:	df000204 	addi	fp,sp,8
   12930:	e13ffe15 	stw	r4,-8(fp)
   12934:	2805883a 	mov	r2,r5
   12938:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1293c:	e0bffe17 	ldw	r2,-8(fp)
   12940:	10800a17 	ldw	r2,40(r2)
   12944:	1007883a 	mov	r3,r2
   12948:	e0bfff03 	ldbu	r2,-4(fp)
   1294c:	18800025 	stbio	r2,0(r3)
}
   12950:	0001883a 	nop
   12954:	e037883a 	mov	sp,fp
   12958:	df000017 	ldw	fp,0(sp)
   1295c:	dec00104 	addi	sp,sp,4
   12960:	f800283a 	ret

00012964 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   12964:	defffe04 	addi	sp,sp,-8
   12968:	df000115 	stw	fp,4(sp)
   1296c:	df000104 	addi	fp,sp,4
   12970:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   12974:	e0bfff17 	ldw	r2,-4(fp)
   12978:	10800a17 	ldw	r2,40(r2)
   1297c:	1007883a 	mov	r3,r2
   12980:	00800044 	movi	r2,1
   12984:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   12988:	0001883a 	nop
   1298c:	e037883a 	mov	sp,fp
   12990:	df000017 	ldw	fp,0(sp)
   12994:	dec00104 	addi	sp,sp,4
   12998:	f800283a 	ret

0001299c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1299c:	defffc04 	addi	sp,sp,-16
   129a0:	dfc00315 	stw	ra,12(sp)
   129a4:	df000215 	stw	fp,8(sp)
   129a8:	df000204 	addi	fp,sp,8
   129ac:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   129b0:	d1600804 	addi	r5,gp,-32736
   129b4:	e13fff17 	ldw	r4,-4(fp)
   129b8:	00130900 	call	13090 <alt_find_dev>
   129bc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   129c0:	e0bffe17 	ldw	r2,-8(fp)
}
   129c4:	e037883a 	mov	sp,fp
   129c8:	dfc00117 	ldw	ra,4(sp)
   129cc:	df000017 	ldw	fp,0(sp)
   129d0:	dec00204 	addi	sp,sp,8
   129d4:	f800283a 	ret

000129d8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   129d8:	defffb04 	addi	sp,sp,-20
   129dc:	df000415 	stw	fp,16(sp)
   129e0:	df000404 	addi	fp,sp,16
   129e4:	e13ffd15 	stw	r4,-12(fp)
   129e8:	e17ffe15 	stw	r5,-8(fp)
   129ec:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   129f0:	e03ffc15 	stw	zero,-16(fp)
   129f4:	00000f06 	br	12a34 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   129f8:	e0bffd17 	ldw	r2,-12(fp)
   129fc:	10800a17 	ldw	r2,40(r2)
   12a00:	10800044 	addi	r2,r2,1
   12a04:	1009883a 	mov	r4,r2
   12a08:	e0fffe17 	ldw	r3,-8(fp)
   12a0c:	e0bffc17 	ldw	r2,-16(fp)
   12a10:	1885883a 	add	r2,r3,r2
   12a14:	10800003 	ldbu	r2,0(r2)
   12a18:	10803fcc 	andi	r2,r2,255
   12a1c:	1080201c 	xori	r2,r2,128
   12a20:	10bfe004 	addi	r2,r2,-128
   12a24:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   12a28:	e0bffc17 	ldw	r2,-16(fp)
   12a2c:	10800044 	addi	r2,r2,1
   12a30:	e0bffc15 	stw	r2,-16(fp)
   12a34:	e0fffc17 	ldw	r3,-16(fp)
   12a38:	e0bfff17 	ldw	r2,-4(fp)
   12a3c:	18bfee36 	bltu	r3,r2,129f8 <__alt_data_end+0xf80129f8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   12a40:	0001883a 	nop
   12a44:	e037883a 	mov	sp,fp
   12a48:	df000017 	ldw	fp,0(sp)
   12a4c:	dec00104 	addi	sp,sp,4
   12a50:	f800283a 	ret

00012a54 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   12a54:	defffd04 	addi	sp,sp,-12
   12a58:	df000215 	stw	fp,8(sp)
   12a5c:	df000204 	addi	fp,sp,8
   12a60:	e13ffe15 	stw	r4,-8(fp)
   12a64:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   12a68:	00000d06 	br	12aa0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	10800a17 	ldw	r2,40(r2)
   12a74:	10800044 	addi	r2,r2,1
   12a78:	1007883a 	mov	r3,r2
   12a7c:	e0bfff17 	ldw	r2,-4(fp)
   12a80:	10800003 	ldbu	r2,0(r2)
   12a84:	10803fcc 	andi	r2,r2,255
   12a88:	1080201c 	xori	r2,r2,128
   12a8c:	10bfe004 	addi	r2,r2,-128
   12a90:	18800025 	stbio	r2,0(r3)
		++ptr;
   12a94:	e0bfff17 	ldw	r2,-4(fp)
   12a98:	10800044 	addi	r2,r2,1
   12a9c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   12aa0:	e0bfff17 	ldw	r2,-4(fp)
   12aa4:	10800003 	ldbu	r2,0(r2)
   12aa8:	10803fcc 	andi	r2,r2,255
   12aac:	1080201c 	xori	r2,r2,128
   12ab0:	10bfe004 	addi	r2,r2,-128
   12ab4:	103fed1e 	bne	r2,zero,12a6c <__alt_data_end+0xf8012a6c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   12ab8:	0001883a 	nop
   12abc:	e037883a 	mov	sp,fp
   12ac0:	df000017 	ldw	fp,0(sp)
   12ac4:	dec00104 	addi	sp,sp,4
   12ac8:	f800283a 	ret

00012acc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   12acc:	defffb04 	addi	sp,sp,-20
   12ad0:	dfc00415 	stw	ra,16(sp)
   12ad4:	df000315 	stw	fp,12(sp)
   12ad8:	df000304 	addi	fp,sp,12
   12adc:	e13ffd15 	stw	r4,-12(fp)
   12ae0:	e17ffe15 	stw	r5,-8(fp)
   12ae4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   12ae8:	e0bffd17 	ldw	r2,-12(fp)
   12aec:	10800017 	ldw	r2,0(r2)
   12af0:	e0ffff17 	ldw	r3,-4(fp)
   12af4:	180d883a 	mov	r6,r3
   12af8:	e17ffe17 	ldw	r5,-8(fp)
   12afc:	1009883a 	mov	r4,r2
   12b00:	00129d80 	call	129d8 <alt_up_character_lcd_write>
	return 0;
   12b04:	0005883a 	mov	r2,zero
}
   12b08:	e037883a 	mov	sp,fp
   12b0c:	dfc00117 	ldw	ra,4(sp)
   12b10:	df000017 	ldw	fp,0(sp)
   12b14:	dec00204 	addi	sp,sp,8
   12b18:	f800283a 	ret

00012b1c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   12b1c:	defffa04 	addi	sp,sp,-24
   12b20:	dfc00515 	stw	ra,20(sp)
   12b24:	df000415 	stw	fp,16(sp)
   12b28:	df000404 	addi	fp,sp,16
   12b2c:	e13ffd15 	stw	r4,-12(fp)
   12b30:	e17ffe15 	stw	r5,-8(fp)
   12b34:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   12b38:	e0bffe17 	ldw	r2,-8(fp)
   12b3c:	10800a28 	cmpgeui	r2,r2,40
   12b40:	1000031e 	bne	r2,zero,12b50 <alt_up_character_lcd_set_cursor_pos+0x34>
   12b44:	e0bfff17 	ldw	r2,-4(fp)
   12b48:	108000b0 	cmpltui	r2,r2,2
   12b4c:	1000021e 	bne	r2,zero,12b58 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   12b50:	00bfffc4 	movi	r2,-1
   12b54:	00000906 	br	12b7c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   12b58:	e17fff17 	ldw	r5,-4(fp)
   12b5c:	e13ffe17 	ldw	r4,-8(fp)
   12b60:	00128b00 	call	128b0 <get_DDRAM_addr>
   12b64:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   12b68:	e0bffc03 	ldbu	r2,-16(fp)
   12b6c:	100b883a 	mov	r5,r2
   12b70:	e13ffd17 	ldw	r4,-12(fp)
   12b74:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
	return 0;
   12b78:	0005883a 	mov	r2,zero
}
   12b7c:	e037883a 	mov	sp,fp
   12b80:	dfc00117 	ldw	ra,4(sp)
   12b84:	df000017 	ldw	fp,0(sp)
   12b88:	dec00204 	addi	sp,sp,8
   12b8c:	f800283a 	ret

00012b90 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   12b90:	defffb04 	addi	sp,sp,-20
   12b94:	dfc00415 	stw	ra,16(sp)
   12b98:	df000315 	stw	fp,12(sp)
   12b9c:	df000304 	addi	fp,sp,12
   12ba0:	e13ffe15 	stw	r4,-8(fp)
   12ba4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	10001526 	beq	r2,zero,12c04 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   12bb0:	e0bfff17 	ldw	r2,-4(fp)
   12bb4:	0080020e 	bge	zero,r2,12bc0 <alt_up_character_lcd_shift_cursor+0x30>
   12bb8:	00800504 	movi	r2,20
   12bbc:	00000106 	br	12bc4 <alt_up_character_lcd_shift_cursor+0x34>
   12bc0:	00800404 	movi	r2,16
   12bc4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   12bc8:	e0bfff17 	ldw	r2,-4(fp)
   12bcc:	1000010e 	bge	r2,zero,12bd4 <alt_up_character_lcd_shift_cursor+0x44>
   12bd0:	0085c83a 	sub	r2,zero,r2
   12bd4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   12bd8:	00000406 	br	12bec <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   12bdc:	e0bffd43 	ldbu	r2,-11(fp)
   12be0:	100b883a 	mov	r5,r2
   12be4:	e13ffe17 	ldw	r4,-8(fp)
   12be8:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   12bec:	e0bffd03 	ldbu	r2,-12(fp)
   12bf0:	10ffffc4 	addi	r3,r2,-1
   12bf4:	e0fffd05 	stb	r3,-12(fp)
   12bf8:	10803fcc 	andi	r2,r2,255
   12bfc:	103ff71e 	bne	r2,zero,12bdc <__alt_data_end+0xf8012bdc>
   12c00:	00000106 	br	12c08 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   12c04:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   12c08:	e037883a 	mov	sp,fp
   12c0c:	dfc00117 	ldw	ra,4(sp)
   12c10:	df000017 	ldw	fp,0(sp)
   12c14:	dec00204 	addi	sp,sp,8
   12c18:	f800283a 	ret

00012c1c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   12c1c:	defffb04 	addi	sp,sp,-20
   12c20:	dfc00415 	stw	ra,16(sp)
   12c24:	df000315 	stw	fp,12(sp)
   12c28:	df000304 	addi	fp,sp,12
   12c2c:	e13ffe15 	stw	r4,-8(fp)
   12c30:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   12c34:	e0bfff17 	ldw	r2,-4(fp)
   12c38:	10001526 	beq	r2,zero,12c90 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   12c3c:	e0bfff17 	ldw	r2,-4(fp)
   12c40:	0080020e 	bge	zero,r2,12c4c <alt_up_character_lcd_shift_display+0x30>
   12c44:	00800704 	movi	r2,28
   12c48:	00000106 	br	12c50 <alt_up_character_lcd_shift_display+0x34>
   12c4c:	00800604 	movi	r2,24
   12c50:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   12c54:	e0bfff17 	ldw	r2,-4(fp)
   12c58:	1000010e 	bge	r2,zero,12c60 <alt_up_character_lcd_shift_display+0x44>
   12c5c:	0085c83a 	sub	r2,zero,r2
   12c60:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   12c64:	00000406 	br	12c78 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   12c68:	e0bffd43 	ldbu	r2,-11(fp)
   12c6c:	100b883a 	mov	r5,r2
   12c70:	e13ffe17 	ldw	r4,-8(fp)
   12c74:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   12c78:	e0bffd03 	ldbu	r2,-12(fp)
   12c7c:	10ffffc4 	addi	r3,r2,-1
   12c80:	e0fffd05 	stb	r3,-12(fp)
   12c84:	10803fcc 	andi	r2,r2,255
   12c88:	103ff71e 	bne	r2,zero,12c68 <__alt_data_end+0xf8012c68>
   12c8c:	00000106 	br	12c94 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   12c90:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   12c94:	e037883a 	mov	sp,fp
   12c98:	dfc00117 	ldw	ra,4(sp)
   12c9c:	df000017 	ldw	fp,0(sp)
   12ca0:	dec00204 	addi	sp,sp,8
   12ca4:	f800283a 	ret

00012ca8 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   12ca8:	defffa04 	addi	sp,sp,-24
   12cac:	dfc00515 	stw	ra,20(sp)
   12cb0:	df000415 	stw	fp,16(sp)
   12cb4:	df000404 	addi	fp,sp,16
   12cb8:	e13ffd15 	stw	r4,-12(fp)
   12cbc:	e17ffe15 	stw	r5,-8(fp)
   12cc0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   12cc4:	e0bffe17 	ldw	r2,-8(fp)
   12cc8:	10800a28 	cmpgeui	r2,r2,40
   12ccc:	1000031e 	bne	r2,zero,12cdc <alt_up_character_lcd_erase_pos+0x34>
   12cd0:	e0bfff17 	ldw	r2,-4(fp)
   12cd4:	108000b0 	cmpltui	r2,r2,2
   12cd8:	1000021e 	bne	r2,zero,12ce4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   12cdc:	00bfffc4 	movi	r2,-1
   12ce0:	00000f06 	br	12d20 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   12ce4:	e17fff17 	ldw	r5,-4(fp)
   12ce8:	e13ffe17 	ldw	r4,-8(fp)
   12cec:	00128b00 	call	128b0 <get_DDRAM_addr>
   12cf0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   12cf4:	e0bffc03 	ldbu	r2,-16(fp)
   12cf8:	100b883a 	mov	r5,r2
   12cfc:	e13ffd17 	ldw	r4,-12(fp)
   12d00:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   12d04:	e0bffd17 	ldw	r2,-12(fp)
   12d08:	10800a17 	ldw	r2,40(r2)
   12d0c:	10800044 	addi	r2,r2,1
   12d10:	1007883a 	mov	r3,r2
   12d14:	00800084 	movi	r2,2
   12d18:	18800025 	stbio	r2,0(r3)
	return 0;
   12d1c:	0005883a 	mov	r2,zero
}
   12d20:	e037883a 	mov	sp,fp
   12d24:	dfc00117 	ldw	ra,4(sp)
   12d28:	df000017 	ldw	fp,0(sp)
   12d2c:	dec00204 	addi	sp,sp,8
   12d30:	f800283a 	ret

00012d34 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   12d34:	defffd04 	addi	sp,sp,-12
   12d38:	dfc00215 	stw	ra,8(sp)
   12d3c:	df000115 	stw	fp,4(sp)
   12d40:	df000104 	addi	fp,sp,4
   12d44:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   12d48:	01400304 	movi	r5,12
   12d4c:	e13fff17 	ldw	r4,-4(fp)
   12d50:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
}
   12d54:	0001883a 	nop
   12d58:	e037883a 	mov	sp,fp
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	f800283a 	ret

00012d6c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   12d6c:	defffd04 	addi	sp,sp,-12
   12d70:	dfc00215 	stw	ra,8(sp)
   12d74:	df000115 	stw	fp,4(sp)
   12d78:	df000104 	addi	fp,sp,4
   12d7c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   12d80:	014003c4 	movi	r5,15
   12d84:	e13fff17 	ldw	r4,-4(fp)
   12d88:	00129240 	call	12924 <alt_up_character_lcd_send_cmd>
}
   12d8c:	0001883a 	nop
   12d90:	e037883a 	mov	sp,fp
   12d94:	dfc00117 	ldw	ra,4(sp)
   12d98:	df000017 	ldw	fp,0(sp)
   12d9c:	dec00204 	addi	sp,sp,8
   12da0:	f800283a 	ret

00012da4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12da4:	defff504 	addi	sp,sp,-44
   12da8:	df000a15 	stw	fp,40(sp)
   12dac:	df000a04 	addi	fp,sp,40
   12db0:	e13ffc15 	stw	r4,-16(fp)
   12db4:	e17ffd15 	stw	r5,-12(fp)
   12db8:	e1bffe15 	stw	r6,-8(fp)
   12dbc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   12dc0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   12dc4:	d0a71117 	ldw	r2,-25532(gp)
  
  if (alt_ticks_per_second ())
   12dc8:	10003c26 	beq	r2,zero,12ebc <alt_alarm_start+0x118>
  {
    if (alarm)
   12dcc:	e0bffc17 	ldw	r2,-16(fp)
   12dd0:	10003826 	beq	r2,zero,12eb4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   12dd4:	e0bffc17 	ldw	r2,-16(fp)
   12dd8:	e0fffe17 	ldw	r3,-8(fp)
   12ddc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   12de0:	e0bffc17 	ldw	r2,-16(fp)
   12de4:	e0ffff17 	ldw	r3,-4(fp)
   12de8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12dec:	0005303a 	rdctl	r2,status
   12df0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12df4:	e0fff917 	ldw	r3,-28(fp)
   12df8:	00bfff84 	movi	r2,-2
   12dfc:	1884703a 	and	r2,r3,r2
   12e00:	1001703a 	wrctl	status,r2
  
  return context;
   12e04:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   12e08:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   12e0c:	d0a71217 	ldw	r2,-25528(gp)
      
      current_nticks = alt_nticks();
   12e10:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   12e14:	e0fffd17 	ldw	r3,-12(fp)
   12e18:	e0bff617 	ldw	r2,-40(fp)
   12e1c:	1885883a 	add	r2,r3,r2
   12e20:	10c00044 	addi	r3,r2,1
   12e24:	e0bffc17 	ldw	r2,-16(fp)
   12e28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   12e2c:	e0bffc17 	ldw	r2,-16(fp)
   12e30:	10c00217 	ldw	r3,8(r2)
   12e34:	e0bff617 	ldw	r2,-40(fp)
   12e38:	1880042e 	bgeu	r3,r2,12e4c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   12e3c:	e0bffc17 	ldw	r2,-16(fp)
   12e40:	00c00044 	movi	r3,1
   12e44:	10c00405 	stb	r3,16(r2)
   12e48:	00000206 	br	12e54 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   12e4c:	e0bffc17 	ldw	r2,-16(fp)
   12e50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   12e54:	e0bffc17 	ldw	r2,-16(fp)
   12e58:	d0e00e04 	addi	r3,gp,-32712
   12e5c:	e0fffa15 	stw	r3,-24(fp)
   12e60:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12e64:	e0bffb17 	ldw	r2,-20(fp)
   12e68:	e0fffa17 	ldw	r3,-24(fp)
   12e6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12e70:	e0bffa17 	ldw	r2,-24(fp)
   12e74:	10c00017 	ldw	r3,0(r2)
   12e78:	e0bffb17 	ldw	r2,-20(fp)
   12e7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12e80:	e0bffa17 	ldw	r2,-24(fp)
   12e84:	10800017 	ldw	r2,0(r2)
   12e88:	e0fffb17 	ldw	r3,-20(fp)
   12e8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12e90:	e0bffa17 	ldw	r2,-24(fp)
   12e94:	e0fffb17 	ldw	r3,-20(fp)
   12e98:	10c00015 	stw	r3,0(r2)
   12e9c:	e0bff817 	ldw	r2,-32(fp)
   12ea0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ea4:	e0bff717 	ldw	r2,-36(fp)
   12ea8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   12eac:	0005883a 	mov	r2,zero
   12eb0:	00000306 	br	12ec0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   12eb4:	00bffa84 	movi	r2,-22
   12eb8:	00000106 	br	12ec0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   12ebc:	00bfde84 	movi	r2,-134
  }
}
   12ec0:	e037883a 	mov	sp,fp
   12ec4:	df000017 	ldw	fp,0(sp)
   12ec8:	dec00104 	addi	sp,sp,4
   12ecc:	f800283a 	ret

00012ed0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   12ed0:	deffff04 	addi	sp,sp,-4
   12ed4:	df000015 	stw	fp,0(sp)
   12ed8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   12edc:	0001883a 	nop
   12ee0:	e037883a 	mov	sp,fp
   12ee4:	df000017 	ldw	fp,0(sp)
   12ee8:	dec00104 	addi	sp,sp,4
   12eec:	f800283a 	ret

00012ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12ef0:	defffe04 	addi	sp,sp,-8
   12ef4:	dfc00115 	stw	ra,4(sp)
   12ef8:	df000015 	stw	fp,0(sp)
   12efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f00:	d0a00b17 	ldw	r2,-32724(gp)
   12f04:	10000326 	beq	r2,zero,12f14 <alt_get_errno+0x24>
   12f08:	d0a00b17 	ldw	r2,-32724(gp)
   12f0c:	103ee83a 	callr	r2
   12f10:	00000106 	br	12f18 <alt_get_errno+0x28>
   12f14:	d0a6fc04 	addi	r2,gp,-25616
}
   12f18:	e037883a 	mov	sp,fp
   12f1c:	dfc00117 	ldw	ra,4(sp)
   12f20:	df000017 	ldw	fp,0(sp)
   12f24:	dec00204 	addi	sp,sp,8
   12f28:	f800283a 	ret

00012f2c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   12f2c:	defffa04 	addi	sp,sp,-24
   12f30:	dfc00515 	stw	ra,20(sp)
   12f34:	df000415 	stw	fp,16(sp)
   12f38:	df000404 	addi	fp,sp,16
   12f3c:	e13ffe15 	stw	r4,-8(fp)
   12f40:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   12f44:	e0bffe17 	ldw	r2,-8(fp)
   12f48:	10000326 	beq	r2,zero,12f58 <alt_dev_llist_insert+0x2c>
   12f4c:	e0bffe17 	ldw	r2,-8(fp)
   12f50:	10800217 	ldw	r2,8(r2)
   12f54:	1000061e 	bne	r2,zero,12f70 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   12f58:	0012ef00 	call	12ef0 <alt_get_errno>
   12f5c:	1007883a 	mov	r3,r2
   12f60:	00800584 	movi	r2,22
   12f64:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   12f68:	00bffa84 	movi	r2,-22
   12f6c:	00001306 	br	12fbc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   12f70:	e0bffe17 	ldw	r2,-8(fp)
   12f74:	e0ffff17 	ldw	r3,-4(fp)
   12f78:	e0fffc15 	stw	r3,-16(fp)
   12f7c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   12f80:	e0bffd17 	ldw	r2,-12(fp)
   12f84:	e0fffc17 	ldw	r3,-16(fp)
   12f88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   12f8c:	e0bffc17 	ldw	r2,-16(fp)
   12f90:	10c00017 	ldw	r3,0(r2)
   12f94:	e0bffd17 	ldw	r2,-12(fp)
   12f98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   12f9c:	e0bffc17 	ldw	r2,-16(fp)
   12fa0:	10800017 	ldw	r2,0(r2)
   12fa4:	e0fffd17 	ldw	r3,-12(fp)
   12fa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   12fac:	e0bffc17 	ldw	r2,-16(fp)
   12fb0:	e0fffd17 	ldw	r3,-12(fp)
   12fb4:	10c00015 	stw	r3,0(r2)

  return 0;  
   12fb8:	0005883a 	mov	r2,zero
}
   12fbc:	e037883a 	mov	sp,fp
   12fc0:	dfc00117 	ldw	ra,4(sp)
   12fc4:	df000017 	ldw	fp,0(sp)
   12fc8:	dec00204 	addi	sp,sp,8
   12fcc:	f800283a 	ret

00012fd0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   12fd0:	defffd04 	addi	sp,sp,-12
   12fd4:	dfc00215 	stw	ra,8(sp)
   12fd8:	df000115 	stw	fp,4(sp)
   12fdc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12fe0:	00800074 	movhi	r2,1
   12fe4:	108fa604 	addi	r2,r2,16024
   12fe8:	e0bfff15 	stw	r2,-4(fp)
   12fec:	00000606 	br	13008 <_do_ctors+0x38>
        (*ctor) (); 
   12ff0:	e0bfff17 	ldw	r2,-4(fp)
   12ff4:	10800017 	ldw	r2,0(r2)
   12ff8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   12ffc:	e0bfff17 	ldw	r2,-4(fp)
   13000:	10bfff04 	addi	r2,r2,-4
   13004:	e0bfff15 	stw	r2,-4(fp)
   13008:	e0ffff17 	ldw	r3,-4(fp)
   1300c:	00800074 	movhi	r2,1
   13010:	108fa704 	addi	r2,r2,16028
   13014:	18bff62e 	bgeu	r3,r2,12ff0 <__alt_data_end+0xf8012ff0>
        (*ctor) (); 
}
   13018:	0001883a 	nop
   1301c:	e037883a 	mov	sp,fp
   13020:	dfc00117 	ldw	ra,4(sp)
   13024:	df000017 	ldw	fp,0(sp)
   13028:	dec00204 	addi	sp,sp,8
   1302c:	f800283a 	ret

00013030 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   13030:	defffd04 	addi	sp,sp,-12
   13034:	dfc00215 	stw	ra,8(sp)
   13038:	df000115 	stw	fp,4(sp)
   1303c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13040:	00800074 	movhi	r2,1
   13044:	108fa604 	addi	r2,r2,16024
   13048:	e0bfff15 	stw	r2,-4(fp)
   1304c:	00000606 	br	13068 <_do_dtors+0x38>
        (*dtor) (); 
   13050:	e0bfff17 	ldw	r2,-4(fp)
   13054:	10800017 	ldw	r2,0(r2)
   13058:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1305c:	e0bfff17 	ldw	r2,-4(fp)
   13060:	10bfff04 	addi	r2,r2,-4
   13064:	e0bfff15 	stw	r2,-4(fp)
   13068:	e0ffff17 	ldw	r3,-4(fp)
   1306c:	00800074 	movhi	r2,1
   13070:	108fa704 	addi	r2,r2,16028
   13074:	18bff62e 	bgeu	r3,r2,13050 <__alt_data_end+0xf8013050>
        (*dtor) (); 
}
   13078:	0001883a 	nop
   1307c:	e037883a 	mov	sp,fp
   13080:	dfc00117 	ldw	ra,4(sp)
   13084:	df000017 	ldw	fp,0(sp)
   13088:	dec00204 	addi	sp,sp,8
   1308c:	f800283a 	ret

00013090 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13090:	defffa04 	addi	sp,sp,-24
   13094:	dfc00515 	stw	ra,20(sp)
   13098:	df000415 	stw	fp,16(sp)
   1309c:	df000404 	addi	fp,sp,16
   130a0:	e13ffe15 	stw	r4,-8(fp)
   130a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   130a8:	e0bfff17 	ldw	r2,-4(fp)
   130ac:	10800017 	ldw	r2,0(r2)
   130b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   130b4:	e13ffe17 	ldw	r4,-8(fp)
   130b8:	00010cc0 	call	10cc <strlen>
   130bc:	10800044 	addi	r2,r2,1
   130c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   130c4:	00000d06 	br	130fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   130c8:	e0bffc17 	ldw	r2,-16(fp)
   130cc:	10800217 	ldw	r2,8(r2)
   130d0:	e0fffd17 	ldw	r3,-12(fp)
   130d4:	180d883a 	mov	r6,r3
   130d8:	e17ffe17 	ldw	r5,-8(fp)
   130dc:	1009883a 	mov	r4,r2
   130e0:	0013b540 	call	13b54 <memcmp>
   130e4:	1000021e 	bne	r2,zero,130f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   130e8:	e0bffc17 	ldw	r2,-16(fp)
   130ec:	00000706 	br	1310c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   130f0:	e0bffc17 	ldw	r2,-16(fp)
   130f4:	10800017 	ldw	r2,0(r2)
   130f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   130fc:	e0fffc17 	ldw	r3,-16(fp)
   13100:	e0bfff17 	ldw	r2,-4(fp)
   13104:	18bff01e 	bne	r3,r2,130c8 <__alt_data_end+0xf80130c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13108:	0005883a 	mov	r2,zero
}
   1310c:	e037883a 	mov	sp,fp
   13110:	dfc00117 	ldw	ra,4(sp)
   13114:	df000017 	ldw	fp,0(sp)
   13118:	dec00204 	addi	sp,sp,8
   1311c:	f800283a 	ret

00013120 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13120:	defffe04 	addi	sp,sp,-8
   13124:	dfc00115 	stw	ra,4(sp)
   13128:	df000015 	stw	fp,0(sp)
   1312c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13130:	01440004 	movi	r5,4096
   13134:	0009883a 	mov	r4,zero
   13138:	00139dc0 	call	139dc <alt_icache_flush>
#endif
}
   1313c:	0001883a 	nop
   13140:	e037883a 	mov	sp,fp
   13144:	dfc00117 	ldw	ra,4(sp)
   13148:	df000017 	ldw	fp,0(sp)
   1314c:	dec00204 	addi	sp,sp,8
   13150:	f800283a 	ret

00013154 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13154:	defff904 	addi	sp,sp,-28
   13158:	dfc00615 	stw	ra,24(sp)
   1315c:	df000515 	stw	fp,20(sp)
   13160:	df000504 	addi	fp,sp,20
   13164:	e13ffc15 	stw	r4,-16(fp)
   13168:	e17ffd15 	stw	r5,-12(fp)
   1316c:	e1bffe15 	stw	r6,-8(fp)
   13170:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13174:	e1bfff17 	ldw	r6,-4(fp)
   13178:	e17ffe17 	ldw	r5,-8(fp)
   1317c:	e13ffd17 	ldw	r4,-12(fp)
   13180:	00135140 	call	13514 <open>
   13184:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   13188:	e0bffb17 	ldw	r2,-20(fp)
   1318c:	10001c16 	blt	r2,zero,13200 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   13190:	00800074 	movhi	r2,1
   13194:	1092df04 	addi	r2,r2,19324
   13198:	e0fffb17 	ldw	r3,-20(fp)
   1319c:	18c00324 	muli	r3,r3,12
   131a0:	10c5883a 	add	r2,r2,r3
   131a4:	10c00017 	ldw	r3,0(r2)
   131a8:	e0bffc17 	ldw	r2,-16(fp)
   131ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   131b0:	00800074 	movhi	r2,1
   131b4:	1092df04 	addi	r2,r2,19324
   131b8:	e0fffb17 	ldw	r3,-20(fp)
   131bc:	18c00324 	muli	r3,r3,12
   131c0:	10c5883a 	add	r2,r2,r3
   131c4:	10800104 	addi	r2,r2,4
   131c8:	10c00017 	ldw	r3,0(r2)
   131cc:	e0bffc17 	ldw	r2,-16(fp)
   131d0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   131d4:	00800074 	movhi	r2,1
   131d8:	1092df04 	addi	r2,r2,19324
   131dc:	e0fffb17 	ldw	r3,-20(fp)
   131e0:	18c00324 	muli	r3,r3,12
   131e4:	10c5883a 	add	r2,r2,r3
   131e8:	10800204 	addi	r2,r2,8
   131ec:	10c00017 	ldw	r3,0(r2)
   131f0:	e0bffc17 	ldw	r2,-16(fp)
   131f4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   131f8:	e13ffb17 	ldw	r4,-20(fp)
   131fc:	000d7480 	call	d748 <alt_release_fd>
  }
} 
   13200:	0001883a 	nop
   13204:	e037883a 	mov	sp,fp
   13208:	dfc00117 	ldw	ra,4(sp)
   1320c:	df000017 	ldw	fp,0(sp)
   13210:	dec00204 	addi	sp,sp,8
   13214:	f800283a 	ret

00013218 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13218:	defffb04 	addi	sp,sp,-20
   1321c:	dfc00415 	stw	ra,16(sp)
   13220:	df000315 	stw	fp,12(sp)
   13224:	df000304 	addi	fp,sp,12
   13228:	e13ffd15 	stw	r4,-12(fp)
   1322c:	e17ffe15 	stw	r5,-8(fp)
   13230:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13234:	01c07fc4 	movi	r7,511
   13238:	01800044 	movi	r6,1
   1323c:	e17ffd17 	ldw	r5,-12(fp)
   13240:	01000074 	movhi	r4,1
   13244:	2112e204 	addi	r4,r4,19336
   13248:	00131540 	call	13154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1324c:	01c07fc4 	movi	r7,511
   13250:	000d883a 	mov	r6,zero
   13254:	e17ffe17 	ldw	r5,-8(fp)
   13258:	01000074 	movhi	r4,1
   1325c:	2112df04 	addi	r4,r4,19324
   13260:	00131540 	call	13154 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13264:	01c07fc4 	movi	r7,511
   13268:	01800044 	movi	r6,1
   1326c:	e17fff17 	ldw	r5,-4(fp)
   13270:	01000074 	movhi	r4,1
   13274:	2112e504 	addi	r4,r4,19348
   13278:	00131540 	call	13154 <alt_open_fd>
}  
   1327c:	0001883a 	nop
   13280:	e037883a 	mov	sp,fp
   13284:	dfc00117 	ldw	ra,4(sp)
   13288:	df000017 	ldw	fp,0(sp)
   1328c:	dec00204 	addi	sp,sp,8
   13290:	f800283a 	ret

00013294 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   13294:	defff004 	addi	sp,sp,-64
   13298:	df000f15 	stw	fp,60(sp)
   1329c:	df000f04 	addi	fp,sp,60
   132a0:	e13ffd15 	stw	r4,-12(fp)
   132a4:	e17ffe15 	stw	r5,-8(fp)
   132a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   132ac:	00bffa84 	movi	r2,-22
   132b0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   132b4:	e0bffd17 	ldw	r2,-12(fp)
   132b8:	10800828 	cmpgeui	r2,r2,32
   132bc:	1000501e 	bne	r2,zero,13400 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132c0:	0005303a 	rdctl	r2,status
   132c4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132c8:	e0fff617 	ldw	r3,-40(fp)
   132cc:	00bfff84 	movi	r2,-2
   132d0:	1884703a 	and	r2,r3,r2
   132d4:	1001703a 	wrctl	status,r2
  
  return context;
   132d8:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   132dc:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   132e0:	00800074 	movhi	r2,1
   132e4:	109ffd04 	addi	r2,r2,32756
   132e8:	e0fffd17 	ldw	r3,-12(fp)
   132ec:	180690fa 	slli	r3,r3,3
   132f0:	10c5883a 	add	r2,r2,r3
   132f4:	e0ffff17 	ldw	r3,-4(fp)
   132f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   132fc:	00800074 	movhi	r2,1
   13300:	109ffd04 	addi	r2,r2,32756
   13304:	e0fffd17 	ldw	r3,-12(fp)
   13308:	180690fa 	slli	r3,r3,3
   1330c:	10c5883a 	add	r2,r2,r3
   13310:	10800104 	addi	r2,r2,4
   13314:	e0fffe17 	ldw	r3,-8(fp)
   13318:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1331c:	e0bfff17 	ldw	r2,-4(fp)
   13320:	10001926 	beq	r2,zero,13388 <alt_irq_register+0xf4>
   13324:	e0bffd17 	ldw	r2,-12(fp)
   13328:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1332c:	0005303a 	rdctl	r2,status
   13330:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13334:	e0fff717 	ldw	r3,-36(fp)
   13338:	00bfff84 	movi	r2,-2
   1333c:	1884703a 	and	r2,r3,r2
   13340:	1001703a 	wrctl	status,r2
  
  return context;
   13344:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13348:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1334c:	00c00044 	movi	r3,1
   13350:	e0bff217 	ldw	r2,-56(fp)
   13354:	1884983a 	sll	r2,r3,r2
   13358:	1007883a 	mov	r3,r2
   1335c:	d0a71017 	ldw	r2,-25536(gp)
   13360:	1884b03a 	or	r2,r3,r2
   13364:	d0a71015 	stw	r2,-25536(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13368:	d0a71017 	ldw	r2,-25536(gp)
   1336c:	100170fa 	wrctl	ienable,r2
   13370:	e0bff817 	ldw	r2,-32(fp)
   13374:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13378:	e0bff917 	ldw	r2,-28(fp)
   1337c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13380:	0005883a 	mov	r2,zero
   13384:	00001906 	br	133ec <alt_irq_register+0x158>
   13388:	e0bffd17 	ldw	r2,-12(fp)
   1338c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13390:	0005303a 	rdctl	r2,status
   13394:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13398:	e0fffa17 	ldw	r3,-24(fp)
   1339c:	00bfff84 	movi	r2,-2
   133a0:	1884703a 	and	r2,r3,r2
   133a4:	1001703a 	wrctl	status,r2
  
  return context;
   133a8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   133ac:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   133b0:	00c00044 	movi	r3,1
   133b4:	e0bff417 	ldw	r2,-48(fp)
   133b8:	1884983a 	sll	r2,r3,r2
   133bc:	0084303a 	nor	r2,zero,r2
   133c0:	1007883a 	mov	r3,r2
   133c4:	d0a71017 	ldw	r2,-25536(gp)
   133c8:	1884703a 	and	r2,r3,r2
   133cc:	d0a71015 	stw	r2,-25536(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   133d0:	d0a71017 	ldw	r2,-25536(gp)
   133d4:	100170fa 	wrctl	ienable,r2
   133d8:	e0bffb17 	ldw	r2,-20(fp)
   133dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133e0:	e0bffc17 	ldw	r2,-16(fp)
   133e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   133e8:	0005883a 	mov	r2,zero
   133ec:	e0bff115 	stw	r2,-60(fp)
   133f0:	e0bff317 	ldw	r2,-52(fp)
   133f4:	e0bff515 	stw	r2,-44(fp)
   133f8:	e0bff517 	ldw	r2,-44(fp)
   133fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   13400:	e0bff117 	ldw	r2,-60(fp)
}
   13404:	e037883a 	mov	sp,fp
   13408:	df000017 	ldw	fp,0(sp)
   1340c:	dec00104 	addi	sp,sp,4
   13410:	f800283a 	ret

00013414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13414:	defffe04 	addi	sp,sp,-8
   13418:	dfc00115 	stw	ra,4(sp)
   1341c:	df000015 	stw	fp,0(sp)
   13420:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13424:	d0a00b17 	ldw	r2,-32724(gp)
   13428:	10000326 	beq	r2,zero,13438 <alt_get_errno+0x24>
   1342c:	d0a00b17 	ldw	r2,-32724(gp)
   13430:	103ee83a 	callr	r2
   13434:	00000106 	br	1343c <alt_get_errno+0x28>
   13438:	d0a6fc04 	addi	r2,gp,-25616
}
   1343c:	e037883a 	mov	sp,fp
   13440:	dfc00117 	ldw	ra,4(sp)
   13444:	df000017 	ldw	fp,0(sp)
   13448:	dec00204 	addi	sp,sp,8
   1344c:	f800283a 	ret

00013450 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13450:	defffd04 	addi	sp,sp,-12
   13454:	df000215 	stw	fp,8(sp)
   13458:	df000204 	addi	fp,sp,8
   1345c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13460:	e0bfff17 	ldw	r2,-4(fp)
   13464:	10800217 	ldw	r2,8(r2)
   13468:	10d00034 	orhi	r3,r2,16384
   1346c:	e0bfff17 	ldw	r2,-4(fp)
   13470:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13474:	e03ffe15 	stw	zero,-8(fp)
   13478:	00001d06 	br	134f0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1347c:	00800074 	movhi	r2,1
   13480:	1092df04 	addi	r2,r2,19324
   13484:	e0fffe17 	ldw	r3,-8(fp)
   13488:	18c00324 	muli	r3,r3,12
   1348c:	10c5883a 	add	r2,r2,r3
   13490:	10c00017 	ldw	r3,0(r2)
   13494:	e0bfff17 	ldw	r2,-4(fp)
   13498:	10800017 	ldw	r2,0(r2)
   1349c:	1880111e 	bne	r3,r2,134e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   134a0:	00800074 	movhi	r2,1
   134a4:	1092df04 	addi	r2,r2,19324
   134a8:	e0fffe17 	ldw	r3,-8(fp)
   134ac:	18c00324 	muli	r3,r3,12
   134b0:	10c5883a 	add	r2,r2,r3
   134b4:	10800204 	addi	r2,r2,8
   134b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   134bc:	1000090e 	bge	r2,zero,134e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   134c0:	e0bffe17 	ldw	r2,-8(fp)
   134c4:	10c00324 	muli	r3,r2,12
   134c8:	00800074 	movhi	r2,1
   134cc:	1092df04 	addi	r2,r2,19324
   134d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   134d4:	e0bfff17 	ldw	r2,-4(fp)
   134d8:	18800226 	beq	r3,r2,134e4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   134dc:	00bffcc4 	movi	r2,-13
   134e0:	00000806 	br	13504 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   134e4:	e0bffe17 	ldw	r2,-8(fp)
   134e8:	10800044 	addi	r2,r2,1
   134ec:	e0bffe15 	stw	r2,-8(fp)
   134f0:	d0a00a17 	ldw	r2,-32728(gp)
   134f4:	1007883a 	mov	r3,r2
   134f8:	e0bffe17 	ldw	r2,-8(fp)
   134fc:	18bfdf2e 	bgeu	r3,r2,1347c <__alt_data_end+0xf801347c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13500:	0005883a 	mov	r2,zero
}
   13504:	e037883a 	mov	sp,fp
   13508:	df000017 	ldw	fp,0(sp)
   1350c:	dec00104 	addi	sp,sp,4
   13510:	f800283a 	ret

00013514 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13514:	defff604 	addi	sp,sp,-40
   13518:	dfc00915 	stw	ra,36(sp)
   1351c:	df000815 	stw	fp,32(sp)
   13520:	df000804 	addi	fp,sp,32
   13524:	e13ffd15 	stw	r4,-12(fp)
   13528:	e17ffe15 	stw	r5,-8(fp)
   1352c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13530:	00bfffc4 	movi	r2,-1
   13534:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   13538:	00bffb44 	movi	r2,-19
   1353c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   13540:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13544:	d1600804 	addi	r5,gp,-32736
   13548:	e13ffd17 	ldw	r4,-12(fp)
   1354c:	00130900 	call	13090 <alt_find_dev>
   13550:	e0bff815 	stw	r2,-32(fp)
   13554:	e0bff817 	ldw	r2,-32(fp)
   13558:	1000051e 	bne	r2,zero,13570 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1355c:	e13ffd17 	ldw	r4,-12(fp)
   13560:	00138300 	call	13830 <alt_find_file>
   13564:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   13568:	00800044 	movi	r2,1
   1356c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13570:	e0bff817 	ldw	r2,-32(fp)
   13574:	10002926 	beq	r2,zero,1361c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13578:	e13ff817 	ldw	r4,-32(fp)
   1357c:	00139380 	call	13938 <alt_get_fd>
   13580:	e0bff915 	stw	r2,-28(fp)
   13584:	e0bff917 	ldw	r2,-28(fp)
   13588:	1000030e 	bge	r2,zero,13598 <open+0x84>
    {
      status = index;
   1358c:	e0bff917 	ldw	r2,-28(fp)
   13590:	e0bffa15 	stw	r2,-24(fp)
   13594:	00002306 	br	13624 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   13598:	e0bff917 	ldw	r2,-28(fp)
   1359c:	10c00324 	muli	r3,r2,12
   135a0:	00800074 	movhi	r2,1
   135a4:	1092df04 	addi	r2,r2,19324
   135a8:	1885883a 	add	r2,r3,r2
   135ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   135b0:	e0fffe17 	ldw	r3,-8(fp)
   135b4:	00900034 	movhi	r2,16384
   135b8:	10bfffc4 	addi	r2,r2,-1
   135bc:	1886703a 	and	r3,r3,r2
   135c0:	e0bffc17 	ldw	r2,-16(fp)
   135c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   135c8:	e0bffb17 	ldw	r2,-20(fp)
   135cc:	1000051e 	bne	r2,zero,135e4 <open+0xd0>
   135d0:	e13ffc17 	ldw	r4,-16(fp)
   135d4:	00134500 	call	13450 <alt_file_locked>
   135d8:	e0bffa15 	stw	r2,-24(fp)
   135dc:	e0bffa17 	ldw	r2,-24(fp)
   135e0:	10001016 	blt	r2,zero,13624 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   135e4:	e0bff817 	ldw	r2,-32(fp)
   135e8:	10800317 	ldw	r2,12(r2)
   135ec:	10000826 	beq	r2,zero,13610 <open+0xfc>
   135f0:	e0bff817 	ldw	r2,-32(fp)
   135f4:	10800317 	ldw	r2,12(r2)
   135f8:	e1ffff17 	ldw	r7,-4(fp)
   135fc:	e1bffe17 	ldw	r6,-8(fp)
   13600:	e17ffd17 	ldw	r5,-12(fp)
   13604:	e13ffc17 	ldw	r4,-16(fp)
   13608:	103ee83a 	callr	r2
   1360c:	00000106 	br	13614 <open+0x100>
   13610:	0005883a 	mov	r2,zero
   13614:	e0bffa15 	stw	r2,-24(fp)
   13618:	00000206 	br	13624 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1361c:	00bffb44 	movi	r2,-19
   13620:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13624:	e0bffa17 	ldw	r2,-24(fp)
   13628:	1000090e 	bge	r2,zero,13650 <open+0x13c>
  {
    alt_release_fd (index);  
   1362c:	e13ff917 	ldw	r4,-28(fp)
   13630:	000d7480 	call	d748 <alt_release_fd>
    ALT_ERRNO = -status;
   13634:	00134140 	call	13414 <alt_get_errno>
   13638:	1007883a 	mov	r3,r2
   1363c:	e0bffa17 	ldw	r2,-24(fp)
   13640:	0085c83a 	sub	r2,zero,r2
   13644:	18800015 	stw	r2,0(r3)
    return -1;
   13648:	00bfffc4 	movi	r2,-1
   1364c:	00000106 	br	13654 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   13650:	e0bff917 	ldw	r2,-28(fp)
}
   13654:	e037883a 	mov	sp,fp
   13658:	dfc00117 	ldw	ra,4(sp)
   1365c:	df000017 	ldw	fp,0(sp)
   13660:	dec00204 	addi	sp,sp,8
   13664:	f800283a 	ret

00013668 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13668:	defffa04 	addi	sp,sp,-24
   1366c:	df000515 	stw	fp,20(sp)
   13670:	df000504 	addi	fp,sp,20
   13674:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13678:	0005303a 	rdctl	r2,status
   1367c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13680:	e0fffc17 	ldw	r3,-16(fp)
   13684:	00bfff84 	movi	r2,-2
   13688:	1884703a 	and	r2,r3,r2
   1368c:	1001703a 	wrctl	status,r2
  
  return context;
   13690:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13694:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   13698:	e0bfff17 	ldw	r2,-4(fp)
   1369c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   136a0:	e0bffd17 	ldw	r2,-12(fp)
   136a4:	10800017 	ldw	r2,0(r2)
   136a8:	e0fffd17 	ldw	r3,-12(fp)
   136ac:	18c00117 	ldw	r3,4(r3)
   136b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   136b4:	e0bffd17 	ldw	r2,-12(fp)
   136b8:	10800117 	ldw	r2,4(r2)
   136bc:	e0fffd17 	ldw	r3,-12(fp)
   136c0:	18c00017 	ldw	r3,0(r3)
   136c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   136c8:	e0bffd17 	ldw	r2,-12(fp)
   136cc:	e0fffd17 	ldw	r3,-12(fp)
   136d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   136d4:	e0bffd17 	ldw	r2,-12(fp)
   136d8:	e0fffd17 	ldw	r3,-12(fp)
   136dc:	10c00015 	stw	r3,0(r2)
   136e0:	e0bffb17 	ldw	r2,-20(fp)
   136e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136e8:	e0bffe17 	ldw	r2,-8(fp)
   136ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   136f0:	0001883a 	nop
   136f4:	e037883a 	mov	sp,fp
   136f8:	df000017 	ldw	fp,0(sp)
   136fc:	dec00104 	addi	sp,sp,4
   13700:	f800283a 	ret

00013704 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13704:	defffb04 	addi	sp,sp,-20
   13708:	dfc00415 	stw	ra,16(sp)
   1370c:	df000315 	stw	fp,12(sp)
   13710:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13714:	d0a00e17 	ldw	r2,-32712(gp)
   13718:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1371c:	d0a71217 	ldw	r2,-25528(gp)
   13720:	10800044 	addi	r2,r2,1
   13724:	d0a71215 	stw	r2,-25528(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13728:	00002e06 	br	137e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1372c:	e0bffd17 	ldw	r2,-12(fp)
   13730:	10800017 	ldw	r2,0(r2)
   13734:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	10800403 	ldbu	r2,16(r2)
   13740:	10803fcc 	andi	r2,r2,255
   13744:	10000426 	beq	r2,zero,13758 <alt_tick+0x54>
   13748:	d0a71217 	ldw	r2,-25528(gp)
   1374c:	1000021e 	bne	r2,zero,13758 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   13750:	e0bffd17 	ldw	r2,-12(fp)
   13754:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13758:	e0bffd17 	ldw	r2,-12(fp)
   1375c:	10800217 	ldw	r2,8(r2)
   13760:	d0e71217 	ldw	r3,-25528(gp)
   13764:	18801d36 	bltu	r3,r2,137dc <alt_tick+0xd8>
   13768:	e0bffd17 	ldw	r2,-12(fp)
   1376c:	10800403 	ldbu	r2,16(r2)
   13770:	10803fcc 	andi	r2,r2,255
   13774:	1000191e 	bne	r2,zero,137dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   13778:	e0bffd17 	ldw	r2,-12(fp)
   1377c:	10800317 	ldw	r2,12(r2)
   13780:	e0fffd17 	ldw	r3,-12(fp)
   13784:	18c00517 	ldw	r3,20(r3)
   13788:	1809883a 	mov	r4,r3
   1378c:	103ee83a 	callr	r2
   13790:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	1000031e 	bne	r2,zero,137a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1379c:	e13ffd17 	ldw	r4,-12(fp)
   137a0:	00136680 	call	13668 <alt_alarm_stop>
   137a4:	00000d06 	br	137dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   137a8:	e0bffd17 	ldw	r2,-12(fp)
   137ac:	10c00217 	ldw	r3,8(r2)
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	1887883a 	add	r3,r3,r2
   137b8:	e0bffd17 	ldw	r2,-12(fp)
   137bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   137c0:	e0bffd17 	ldw	r2,-12(fp)
   137c4:	10c00217 	ldw	r3,8(r2)
   137c8:	d0a71217 	ldw	r2,-25528(gp)
   137cc:	1880032e 	bgeu	r3,r2,137dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   137d0:	e0bffd17 	ldw	r2,-12(fp)
   137d4:	00c00044 	movi	r3,1
   137d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   137dc:	e0bffe17 	ldw	r2,-8(fp)
   137e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   137e4:	e0fffd17 	ldw	r3,-12(fp)
   137e8:	d0a00e04 	addi	r2,gp,-32712
   137ec:	18bfcf1e 	bne	r3,r2,1372c <__alt_data_end+0xf801372c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   137f0:	0001883a 	nop
}
   137f4:	0001883a 	nop
   137f8:	e037883a 	mov	sp,fp
   137fc:	dfc00117 	ldw	ra,4(sp)
   13800:	df000017 	ldw	fp,0(sp)
   13804:	dec00204 	addi	sp,sp,8
   13808:	f800283a 	ret

0001380c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1380c:	deffff04 	addi	sp,sp,-4
   13810:	df000015 	stw	fp,0(sp)
   13814:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13818:	000170fa 	wrctl	ienable,zero
}
   1381c:	0001883a 	nop
   13820:	e037883a 	mov	sp,fp
   13824:	df000017 	ldw	fp,0(sp)
   13828:	dec00104 	addi	sp,sp,4
   1382c:	f800283a 	ret

00013830 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13830:	defffb04 	addi	sp,sp,-20
   13834:	dfc00415 	stw	ra,16(sp)
   13838:	df000315 	stw	fp,12(sp)
   1383c:	df000304 	addi	fp,sp,12
   13840:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13844:	d0a00617 	ldw	r2,-32744(gp)
   13848:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1384c:	00003106 	br	13914 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   13850:	e0bffd17 	ldw	r2,-12(fp)
   13854:	10800217 	ldw	r2,8(r2)
   13858:	1009883a 	mov	r4,r2
   1385c:	00010cc0 	call	10cc <strlen>
   13860:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   13864:	e0bffd17 	ldw	r2,-12(fp)
   13868:	10c00217 	ldw	r3,8(r2)
   1386c:	e0bffe17 	ldw	r2,-8(fp)
   13870:	10bfffc4 	addi	r2,r2,-1
   13874:	1885883a 	add	r2,r3,r2
   13878:	10800003 	ldbu	r2,0(r2)
   1387c:	10803fcc 	andi	r2,r2,255
   13880:	1080201c 	xori	r2,r2,128
   13884:	10bfe004 	addi	r2,r2,-128
   13888:	10800bd8 	cmpnei	r2,r2,47
   1388c:	1000031e 	bne	r2,zero,1389c <alt_find_file+0x6c>
    {
      len -= 1;
   13890:	e0bffe17 	ldw	r2,-8(fp)
   13894:	10bfffc4 	addi	r2,r2,-1
   13898:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1389c:	e0bffe17 	ldw	r2,-8(fp)
   138a0:	e0ffff17 	ldw	r3,-4(fp)
   138a4:	1885883a 	add	r2,r3,r2
   138a8:	10800003 	ldbu	r2,0(r2)
   138ac:	10803fcc 	andi	r2,r2,255
   138b0:	1080201c 	xori	r2,r2,128
   138b4:	10bfe004 	addi	r2,r2,-128
   138b8:	10800be0 	cmpeqi	r2,r2,47
   138bc:	1000081e 	bne	r2,zero,138e0 <alt_find_file+0xb0>
   138c0:	e0bffe17 	ldw	r2,-8(fp)
   138c4:	e0ffff17 	ldw	r3,-4(fp)
   138c8:	1885883a 	add	r2,r3,r2
   138cc:	10800003 	ldbu	r2,0(r2)
   138d0:	10803fcc 	andi	r2,r2,255
   138d4:	1080201c 	xori	r2,r2,128
   138d8:	10bfe004 	addi	r2,r2,-128
   138dc:	10000a1e 	bne	r2,zero,13908 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   138e0:	e0bffd17 	ldw	r2,-12(fp)
   138e4:	10800217 	ldw	r2,8(r2)
   138e8:	e0fffe17 	ldw	r3,-8(fp)
   138ec:	180d883a 	mov	r6,r3
   138f0:	e17fff17 	ldw	r5,-4(fp)
   138f4:	1009883a 	mov	r4,r2
   138f8:	0013b540 	call	13b54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   138fc:	1000021e 	bne	r2,zero,13908 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13900:	e0bffd17 	ldw	r2,-12(fp)
   13904:	00000706 	br	13924 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   13908:	e0bffd17 	ldw	r2,-12(fp)
   1390c:	10800017 	ldw	r2,0(r2)
   13910:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13914:	e0fffd17 	ldw	r3,-12(fp)
   13918:	d0a00604 	addi	r2,gp,-32744
   1391c:	18bfcc1e 	bne	r3,r2,13850 <__alt_data_end+0xf8013850>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13920:	0005883a 	mov	r2,zero
}
   13924:	e037883a 	mov	sp,fp
   13928:	dfc00117 	ldw	ra,4(sp)
   1392c:	df000017 	ldw	fp,0(sp)
   13930:	dec00204 	addi	sp,sp,8
   13934:	f800283a 	ret

00013938 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13938:	defffc04 	addi	sp,sp,-16
   1393c:	df000315 	stw	fp,12(sp)
   13940:	df000304 	addi	fp,sp,12
   13944:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13948:	00bffa04 	movi	r2,-24
   1394c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13950:	e03ffd15 	stw	zero,-12(fp)
   13954:	00001906 	br	139bc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   13958:	00800074 	movhi	r2,1
   1395c:	1092df04 	addi	r2,r2,19324
   13960:	e0fffd17 	ldw	r3,-12(fp)
   13964:	18c00324 	muli	r3,r3,12
   13968:	10c5883a 	add	r2,r2,r3
   1396c:	10800017 	ldw	r2,0(r2)
   13970:	10000f1e 	bne	r2,zero,139b0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   13974:	00800074 	movhi	r2,1
   13978:	1092df04 	addi	r2,r2,19324
   1397c:	e0fffd17 	ldw	r3,-12(fp)
   13980:	18c00324 	muli	r3,r3,12
   13984:	10c5883a 	add	r2,r2,r3
   13988:	e0ffff17 	ldw	r3,-4(fp)
   1398c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   13990:	d0e00a17 	ldw	r3,-32728(gp)
   13994:	e0bffd17 	ldw	r2,-12(fp)
   13998:	1880020e 	bge	r3,r2,139a4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1399c:	e0bffd17 	ldw	r2,-12(fp)
   139a0:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   139a4:	e0bffd17 	ldw	r2,-12(fp)
   139a8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   139ac:	00000606 	br	139c8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   139b0:	e0bffd17 	ldw	r2,-12(fp)
   139b4:	10800044 	addi	r2,r2,1
   139b8:	e0bffd15 	stw	r2,-12(fp)
   139bc:	e0bffd17 	ldw	r2,-12(fp)
   139c0:	10800810 	cmplti	r2,r2,32
   139c4:	103fe41e 	bne	r2,zero,13958 <__alt_data_end+0xf8013958>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   139c8:	e0bffe17 	ldw	r2,-8(fp)
}
   139cc:	e037883a 	mov	sp,fp
   139d0:	df000017 	ldw	fp,0(sp)
   139d4:	dec00104 	addi	sp,sp,4
   139d8:	f800283a 	ret

000139dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   139dc:	defffb04 	addi	sp,sp,-20
   139e0:	df000415 	stw	fp,16(sp)
   139e4:	df000404 	addi	fp,sp,16
   139e8:	e13ffe15 	stw	r4,-8(fp)
   139ec:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   139f0:	e0bfff17 	ldw	r2,-4(fp)
   139f4:	10840070 	cmpltui	r2,r2,4097
   139f8:	1000021e 	bne	r2,zero,13a04 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   139fc:	00840004 	movi	r2,4096
   13a00:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13a04:	e0fffe17 	ldw	r3,-8(fp)
   13a08:	e0bfff17 	ldw	r2,-4(fp)
   13a0c:	1885883a 	add	r2,r3,r2
   13a10:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13a14:	e0bffe17 	ldw	r2,-8(fp)
   13a18:	e0bffc15 	stw	r2,-16(fp)
   13a1c:	00000506 	br	13a34 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   13a20:	e0bffc17 	ldw	r2,-16(fp)
   13a24:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13a28:	e0bffc17 	ldw	r2,-16(fp)
   13a2c:	10800804 	addi	r2,r2,32
   13a30:	e0bffc15 	stw	r2,-16(fp)
   13a34:	e0fffc17 	ldw	r3,-16(fp)
   13a38:	e0bffd17 	ldw	r2,-12(fp)
   13a3c:	18bff836 	bltu	r3,r2,13a20 <__alt_data_end+0xf8013a20>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13a40:	e0bffe17 	ldw	r2,-8(fp)
   13a44:	108007cc 	andi	r2,r2,31
   13a48:	10000226 	beq	r2,zero,13a54 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13a4c:	e0bffc17 	ldw	r2,-16(fp)
   13a50:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   13a54:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13a58:	0001883a 	nop
   13a5c:	e037883a 	mov	sp,fp
   13a60:	df000017 	ldw	fp,0(sp)
   13a64:	dec00104 	addi	sp,sp,4
   13a68:	f800283a 	ret

00013a6c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   13a6c:	defffe04 	addi	sp,sp,-8
   13a70:	df000115 	stw	fp,4(sp)
   13a74:	df000104 	addi	fp,sp,4
   13a78:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   13a7c:	e0bfff17 	ldw	r2,-4(fp)
   13a80:	10bffe84 	addi	r2,r2,-6
   13a84:	10c00428 	cmpgeui	r3,r2,16
   13a88:	18001a1e 	bne	r3,zero,13af4 <alt_exception_cause_generated_bad_addr+0x88>
   13a8c:	100690ba 	slli	r3,r2,2
   13a90:	00800074 	movhi	r2,1
   13a94:	108ea904 	addi	r2,r2,15012
   13a98:	1885883a 	add	r2,r3,r2
   13a9c:	10800017 	ldw	r2,0(r2)
   13aa0:	1000683a 	jmp	r2
   13aa4:	00013ae4 	muli	zero,zero,1259
   13aa8:	00013ae4 	muli	zero,zero,1259
   13aac:	00013af4 	movhi	zero,1259
   13ab0:	00013af4 	movhi	zero,1259
   13ab4:	00013af4 	movhi	zero,1259
   13ab8:	00013ae4 	muli	zero,zero,1259
   13abc:	00013aec 	andhi	zero,zero,1259
   13ac0:	00013af4 	movhi	zero,1259
   13ac4:	00013ae4 	muli	zero,zero,1259
   13ac8:	00013ae4 	muli	zero,zero,1259
   13acc:	00013af4 	movhi	zero,1259
   13ad0:	00013ae4 	muli	zero,zero,1259
   13ad4:	00013aec 	andhi	zero,zero,1259
   13ad8:	00013af4 	movhi	zero,1259
   13adc:	00013af4 	movhi	zero,1259
   13ae0:	00013ae4 	muli	zero,zero,1259
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   13ae4:	00800044 	movi	r2,1
   13ae8:	00000306 	br	13af8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   13aec:	0005883a 	mov	r2,zero
   13af0:	00000106 	br	13af8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   13af4:	0005883a 	mov	r2,zero
  }
}
   13af8:	e037883a 	mov	sp,fp
   13afc:	df000017 	ldw	fp,0(sp)
   13b00:	dec00104 	addi	sp,sp,4
   13b04:	f800283a 	ret

00013b08 <atexit>:
   13b08:	200b883a 	mov	r5,r4
   13b0c:	000f883a 	mov	r7,zero
   13b10:	000d883a 	mov	r6,zero
   13b14:	0009883a 	mov	r4,zero
   13b18:	0013bd01 	jmpi	13bd0 <__register_exitproc>

00013b1c <exit>:
   13b1c:	defffe04 	addi	sp,sp,-8
   13b20:	000b883a 	mov	r5,zero
   13b24:	dc000015 	stw	r16,0(sp)
   13b28:	dfc00115 	stw	ra,4(sp)
   13b2c:	2021883a 	mov	r16,r4
   13b30:	0013ce80 	call	13ce8 <__call_exitprocs>
   13b34:	00800074 	movhi	r2,1
   13b38:	10978704 	addi	r2,r2,24092
   13b3c:	11000017 	ldw	r4,0(r2)
   13b40:	20800f17 	ldw	r2,60(r4)
   13b44:	10000126 	beq	r2,zero,13b4c <exit+0x30>
   13b48:	103ee83a 	callr	r2
   13b4c:	8009883a 	mov	r4,r16
   13b50:	0013e680 	call	13e68 <_exit>

00013b54 <memcmp>:
   13b54:	01c000c4 	movi	r7,3
   13b58:	3980192e 	bgeu	r7,r6,13bc0 <memcmp+0x6c>
   13b5c:	2144b03a 	or	r2,r4,r5
   13b60:	11c4703a 	and	r2,r2,r7
   13b64:	10000f26 	beq	r2,zero,13ba4 <memcmp+0x50>
   13b68:	20800003 	ldbu	r2,0(r4)
   13b6c:	28c00003 	ldbu	r3,0(r5)
   13b70:	10c0151e 	bne	r2,r3,13bc8 <memcmp+0x74>
   13b74:	31bfff84 	addi	r6,r6,-2
   13b78:	01ffffc4 	movi	r7,-1
   13b7c:	00000406 	br	13b90 <memcmp+0x3c>
   13b80:	20800003 	ldbu	r2,0(r4)
   13b84:	28c00003 	ldbu	r3,0(r5)
   13b88:	31bfffc4 	addi	r6,r6,-1
   13b8c:	10c00e1e 	bne	r2,r3,13bc8 <memcmp+0x74>
   13b90:	21000044 	addi	r4,r4,1
   13b94:	29400044 	addi	r5,r5,1
   13b98:	31fff91e 	bne	r6,r7,13b80 <__alt_data_end+0xf8013b80>
   13b9c:	0005883a 	mov	r2,zero
   13ba0:	f800283a 	ret
   13ba4:	20c00017 	ldw	r3,0(r4)
   13ba8:	28800017 	ldw	r2,0(r5)
   13bac:	18bfee1e 	bne	r3,r2,13b68 <__alt_data_end+0xf8013b68>
   13bb0:	31bfff04 	addi	r6,r6,-4
   13bb4:	21000104 	addi	r4,r4,4
   13bb8:	29400104 	addi	r5,r5,4
   13bbc:	39bff936 	bltu	r7,r6,13ba4 <__alt_data_end+0xf8013ba4>
   13bc0:	303fe91e 	bne	r6,zero,13b68 <__alt_data_end+0xf8013b68>
   13bc4:	003ff506 	br	13b9c <__alt_data_end+0xf8013b9c>
   13bc8:	10c5c83a 	sub	r2,r2,r3
   13bcc:	f800283a 	ret

00013bd0 <__register_exitproc>:
   13bd0:	defffa04 	addi	sp,sp,-24
   13bd4:	dc000315 	stw	r16,12(sp)
   13bd8:	04000074 	movhi	r16,1
   13bdc:	84178704 	addi	r16,r16,24092
   13be0:	80c00017 	ldw	r3,0(r16)
   13be4:	dc400415 	stw	r17,16(sp)
   13be8:	dfc00515 	stw	ra,20(sp)
   13bec:	18805217 	ldw	r2,328(r3)
   13bf0:	2023883a 	mov	r17,r4
   13bf4:	10003726 	beq	r2,zero,13cd4 <__register_exitproc+0x104>
   13bf8:	10c00117 	ldw	r3,4(r2)
   13bfc:	010007c4 	movi	r4,31
   13c00:	20c00e16 	blt	r4,r3,13c3c <__register_exitproc+0x6c>
   13c04:	1a000044 	addi	r8,r3,1
   13c08:	8800221e 	bne	r17,zero,13c94 <__register_exitproc+0xc4>
   13c0c:	18c00084 	addi	r3,r3,2
   13c10:	18c7883a 	add	r3,r3,r3
   13c14:	18c7883a 	add	r3,r3,r3
   13c18:	12000115 	stw	r8,4(r2)
   13c1c:	10c7883a 	add	r3,r2,r3
   13c20:	19400015 	stw	r5,0(r3)
   13c24:	0005883a 	mov	r2,zero
   13c28:	dfc00517 	ldw	ra,20(sp)
   13c2c:	dc400417 	ldw	r17,16(sp)
   13c30:	dc000317 	ldw	r16,12(sp)
   13c34:	dec00604 	addi	sp,sp,24
   13c38:	f800283a 	ret
   13c3c:	00800034 	movhi	r2,0
   13c40:	10817c04 	addi	r2,r2,1520
   13c44:	10002626 	beq	r2,zero,13ce0 <__register_exitproc+0x110>
   13c48:	01006404 	movi	r4,400
   13c4c:	d9400015 	stw	r5,0(sp)
   13c50:	d9800115 	stw	r6,4(sp)
   13c54:	d9c00215 	stw	r7,8(sp)
   13c58:	00005f00 	call	5f0 <malloc>
   13c5c:	d9400017 	ldw	r5,0(sp)
   13c60:	d9800117 	ldw	r6,4(sp)
   13c64:	d9c00217 	ldw	r7,8(sp)
   13c68:	10001d26 	beq	r2,zero,13ce0 <__register_exitproc+0x110>
   13c6c:	81000017 	ldw	r4,0(r16)
   13c70:	10000115 	stw	zero,4(r2)
   13c74:	02000044 	movi	r8,1
   13c78:	22405217 	ldw	r9,328(r4)
   13c7c:	0007883a 	mov	r3,zero
   13c80:	12400015 	stw	r9,0(r2)
   13c84:	20805215 	stw	r2,328(r4)
   13c88:	10006215 	stw	zero,392(r2)
   13c8c:	10006315 	stw	zero,396(r2)
   13c90:	883fde26 	beq	r17,zero,13c0c <__alt_data_end+0xf8013c0c>
   13c94:	18c9883a 	add	r4,r3,r3
   13c98:	2109883a 	add	r4,r4,r4
   13c9c:	1109883a 	add	r4,r2,r4
   13ca0:	21802215 	stw	r6,136(r4)
   13ca4:	01800044 	movi	r6,1
   13ca8:	12406217 	ldw	r9,392(r2)
   13cac:	30cc983a 	sll	r6,r6,r3
   13cb0:	4992b03a 	or	r9,r9,r6
   13cb4:	12406215 	stw	r9,392(r2)
   13cb8:	21c04215 	stw	r7,264(r4)
   13cbc:	01000084 	movi	r4,2
   13cc0:	893fd21e 	bne	r17,r4,13c0c <__alt_data_end+0xf8013c0c>
   13cc4:	11006317 	ldw	r4,396(r2)
   13cc8:	218cb03a 	or	r6,r4,r6
   13ccc:	11806315 	stw	r6,396(r2)
   13cd0:	003fce06 	br	13c0c <__alt_data_end+0xf8013c0c>
   13cd4:	18805304 	addi	r2,r3,332
   13cd8:	18805215 	stw	r2,328(r3)
   13cdc:	003fc606 	br	13bf8 <__alt_data_end+0xf8013bf8>
   13ce0:	00bfffc4 	movi	r2,-1
   13ce4:	003fd006 	br	13c28 <__alt_data_end+0xf8013c28>

00013ce8 <__call_exitprocs>:
   13ce8:	defff504 	addi	sp,sp,-44
   13cec:	df000915 	stw	fp,36(sp)
   13cf0:	dd400615 	stw	r21,24(sp)
   13cf4:	dc800315 	stw	r18,12(sp)
   13cf8:	dfc00a15 	stw	ra,40(sp)
   13cfc:	ddc00815 	stw	r23,32(sp)
   13d00:	dd800715 	stw	r22,28(sp)
   13d04:	dd000515 	stw	r20,20(sp)
   13d08:	dcc00415 	stw	r19,16(sp)
   13d0c:	dc400215 	stw	r17,8(sp)
   13d10:	dc000115 	stw	r16,4(sp)
   13d14:	d9000015 	stw	r4,0(sp)
   13d18:	2839883a 	mov	fp,r5
   13d1c:	04800044 	movi	r18,1
   13d20:	057fffc4 	movi	r21,-1
   13d24:	00800074 	movhi	r2,1
   13d28:	10978704 	addi	r2,r2,24092
   13d2c:	12000017 	ldw	r8,0(r2)
   13d30:	45005217 	ldw	r20,328(r8)
   13d34:	44c05204 	addi	r19,r8,328
   13d38:	a0001c26 	beq	r20,zero,13dac <__call_exitprocs+0xc4>
   13d3c:	a0800117 	ldw	r2,4(r20)
   13d40:	15ffffc4 	addi	r23,r2,-1
   13d44:	b8000d16 	blt	r23,zero,13d7c <__call_exitprocs+0x94>
   13d48:	14000044 	addi	r16,r2,1
   13d4c:	8421883a 	add	r16,r16,r16
   13d50:	8421883a 	add	r16,r16,r16
   13d54:	84402004 	addi	r17,r16,128
   13d58:	a463883a 	add	r17,r20,r17
   13d5c:	a421883a 	add	r16,r20,r16
   13d60:	e0001e26 	beq	fp,zero,13ddc <__call_exitprocs+0xf4>
   13d64:	80804017 	ldw	r2,256(r16)
   13d68:	e0801c26 	beq	fp,r2,13ddc <__call_exitprocs+0xf4>
   13d6c:	bdffffc4 	addi	r23,r23,-1
   13d70:	843fff04 	addi	r16,r16,-4
   13d74:	8c7fff04 	addi	r17,r17,-4
   13d78:	bd7ff91e 	bne	r23,r21,13d60 <__alt_data_end+0xf8013d60>
   13d7c:	00800034 	movhi	r2,0
   13d80:	10818104 	addi	r2,r2,1540
   13d84:	10000926 	beq	r2,zero,13dac <__call_exitprocs+0xc4>
   13d88:	a0800117 	ldw	r2,4(r20)
   13d8c:	1000301e 	bne	r2,zero,13e50 <__call_exitprocs+0x168>
   13d90:	a0800017 	ldw	r2,0(r20)
   13d94:	10003226 	beq	r2,zero,13e60 <__call_exitprocs+0x178>
   13d98:	a009883a 	mov	r4,r20
   13d9c:	98800015 	stw	r2,0(r19)
   13da0:	00006040 	call	604 <free>
   13da4:	9d000017 	ldw	r20,0(r19)
   13da8:	a03fe41e 	bne	r20,zero,13d3c <__alt_data_end+0xf8013d3c>
   13dac:	dfc00a17 	ldw	ra,40(sp)
   13db0:	df000917 	ldw	fp,36(sp)
   13db4:	ddc00817 	ldw	r23,32(sp)
   13db8:	dd800717 	ldw	r22,28(sp)
   13dbc:	dd400617 	ldw	r21,24(sp)
   13dc0:	dd000517 	ldw	r20,20(sp)
   13dc4:	dcc00417 	ldw	r19,16(sp)
   13dc8:	dc800317 	ldw	r18,12(sp)
   13dcc:	dc400217 	ldw	r17,8(sp)
   13dd0:	dc000117 	ldw	r16,4(sp)
   13dd4:	dec00b04 	addi	sp,sp,44
   13dd8:	f800283a 	ret
   13ddc:	a0800117 	ldw	r2,4(r20)
   13de0:	80c00017 	ldw	r3,0(r16)
   13de4:	10bfffc4 	addi	r2,r2,-1
   13de8:	15c01426 	beq	r2,r23,13e3c <__call_exitprocs+0x154>
   13dec:	80000015 	stw	zero,0(r16)
   13df0:	183fde26 	beq	r3,zero,13d6c <__alt_data_end+0xf8013d6c>
   13df4:	95c8983a 	sll	r4,r18,r23
   13df8:	a0806217 	ldw	r2,392(r20)
   13dfc:	a5800117 	ldw	r22,4(r20)
   13e00:	2084703a 	and	r2,r4,r2
   13e04:	10000b26 	beq	r2,zero,13e34 <__call_exitprocs+0x14c>
   13e08:	a0806317 	ldw	r2,396(r20)
   13e0c:	2088703a 	and	r4,r4,r2
   13e10:	20000c1e 	bne	r4,zero,13e44 <__call_exitprocs+0x15c>
   13e14:	89400017 	ldw	r5,0(r17)
   13e18:	d9000017 	ldw	r4,0(sp)
   13e1c:	183ee83a 	callr	r3
   13e20:	a0800117 	ldw	r2,4(r20)
   13e24:	15bfbf1e 	bne	r2,r22,13d24 <__alt_data_end+0xf8013d24>
   13e28:	98800017 	ldw	r2,0(r19)
   13e2c:	153fcf26 	beq	r2,r20,13d6c <__alt_data_end+0xf8013d6c>
   13e30:	003fbc06 	br	13d24 <__alt_data_end+0xf8013d24>
   13e34:	183ee83a 	callr	r3
   13e38:	003ff906 	br	13e20 <__alt_data_end+0xf8013e20>
   13e3c:	a5c00115 	stw	r23,4(r20)
   13e40:	003feb06 	br	13df0 <__alt_data_end+0xf8013df0>
   13e44:	89000017 	ldw	r4,0(r17)
   13e48:	183ee83a 	callr	r3
   13e4c:	003ff406 	br	13e20 <__alt_data_end+0xf8013e20>
   13e50:	a0800017 	ldw	r2,0(r20)
   13e54:	a027883a 	mov	r19,r20
   13e58:	1029883a 	mov	r20,r2
   13e5c:	003fb606 	br	13d38 <__alt_data_end+0xf8013d38>
   13e60:	0005883a 	mov	r2,zero
   13e64:	003ffb06 	br	13e54 <__alt_data_end+0xf8013e54>

00013e68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   13e68:	defffd04 	addi	sp,sp,-12
   13e6c:	df000215 	stw	fp,8(sp)
   13e70:	df000204 	addi	fp,sp,8
   13e74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   13e78:	0001883a 	nop
   13e7c:	e0bfff17 	ldw	r2,-4(fp)
   13e80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   13e84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   13e88:	10000226 	beq	r2,zero,13e94 <_exit+0x2c>
    ALT_SIM_FAIL();
   13e8c:	002af070 	cmpltui	zero,zero,43969
   13e90:	00000106 	br	13e98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   13e94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   13e98:	003fff06 	br	13e98 <__alt_data_end+0xf8013e98>
